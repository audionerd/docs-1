"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[34871],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>d,mdx:()=>h,useMDXComponents:()=>l,withMDXComponents:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},o.apply(this,arguments)}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),m=function(e){return function(n){var t=l(n.components);return a.createElement(e,o({},n,{components:t}))}},l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=l(t),d=r,y=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return t?a.createElement(y,i(i({ref:n},p),{},{components:t})):a.createElement(y,i({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=y;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},63772:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const o={title:"Type helpers"},s=void 0,i={unversionedId:"xstate/typescript/type-helpers",id:"version-4/xstate/typescript/type-helpers",title:"Type helpers",description:"XState makes several type helpers available to you for composing types in TypeScript. You can use these helpers for creating custom functions or typing various integrations.",source:"@site/versioned_docs/version-4/xstate/typescript/type-helpers.mdx",sourceDirName:"xstate/typescript",slug:"/xstate/typescript/type-helpers",permalink:"/statelyai-docs/docs/xstate-v4/xstate/typescript/type-helpers",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/typescript/type-helpers.mdx",tags:[],version:"4",frontMatter:{title:"Type helpers"},sidebar:"tutorialSidebar",previous:{title:"Typegen",permalink:"/statelyai-docs/docs/xstate-v4/xstate/typescript/typegen"},next:{title:"Troubleshooting",permalink:"/statelyai-docs/docs/xstate-v4/xstate/typescript/troubleshooting"}},c={},p=[{value:"<code>StateFrom</code>",id:"statefrom",level:2},{value:"<code>ContextFrom</code>",id:"contextfrom",level:2},{value:"<code>EventFrom</code>",id:"eventfrom",level:2},{value:"<code>InterpreterFrom</code>",id:"interpreterfrom",level:2},{value:"<code>ActorRefFrom</code>",id:"actorreffrom",level:2},{value:"<code>MachineOptionsFrom</code>",id:"machineoptionsfrom",level:2}],m={toc:p};function l(e){let{components:n,...t}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"XState makes several type helpers available to you for composing types in TypeScript. You can use these helpers for creating custom functions or typing various integrations."),(0,r.mdx)("h2",{id:"statefrom"},(0,r.mdx)("inlineCode",{parentName:"h2"},"StateFrom")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"StateFrom")," can be used to extract the ",(0,r.mdx)("inlineCode",{parentName:"p"},"State")," from a machine."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, StateFrom } from 'xstate';\n\nconst machine = createMachine({\n  schema: {\n    context: {} as {\n      count: number;\n    },\n  },\n});\n\nconst myFunction = (state: StateFrom<typeof machine>) => {\n  const context = state.context;\n};\n")),(0,r.mdx)("h2",{id:"contextfrom"},(0,r.mdx)("inlineCode",{parentName:"h2"},"ContextFrom")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"ContextFrom")," can be used to extract the ",(0,r.mdx)("inlineCode",{parentName:"p"},"context")," from a machine."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, ContextFrom } from 'xstate';\n\nconst machine = createMachine({\n  schema: {\n    context: {} as {\n      count: number;\n    },\n  },\n});\n\nconst myFunction = (context: ContextFrom<typeof machine>) => {\n  console.log(context);\n};\n")),(0,r.mdx)("h2",{id:"eventfrom"},(0,r.mdx)("inlineCode",{parentName:"h2"},"EventFrom")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"EventFrom")," can be used to extract the ",(0,r.mdx)("inlineCode",{parentName:"p"},"event")," types from a machine"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, EventFrom } from 'xstate';\n\nconst machine = createMachine({\n  schema: {\n    events: {} as\n      | {\n          type: 'FOO';\n        }\n      | {\n          type: 'BAR';\n          value: string;\n        },\n  },\n});\n\nconst myFunction = (event: EventFrom<typeof machine>) => {\n  console.log(event);\n};\n")),(0,r.mdx)("p",null,"You can also extract ",(0,r.mdx)("em",{parentName:"p"},"specific")," events by passing the type to the second generic slot."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, EventFrom } from 'xstate';\n\nconst machine = createMachine({\n  schema: {\n    events: {} as\n      | {\n          type: 'FOO';\n        }\n      | {\n          type: 'BAR';\n          value: string;\n        },\n  },\n});\n\nconst myFunction = (event: EventFrom<typeof machine, 'BAR'>) => {\n  console.log(event);\n};\n")),(0,r.mdx)("h2",{id:"interpreterfrom"},(0,r.mdx)("inlineCode",{parentName:"h2"},"InterpreterFrom")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"InterpreterFrom")," gives you the type of the actor returned from ",(0,r.mdx)("inlineCode",{parentName:"p"},"interpret")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"useInterpret"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, InterpreterFrom } from 'xstate';\n\nconst machine = createMachine({\n  schema: {\n    context: {} as {\n      count: number;\n    },\n  },\n});\n\nconst myFunction = (actor: InterpreterFrom<typeof machine>) => {\n  const context = actor.state.context;\n};\n")),(0,r.mdx)("h2",{id:"actorreffrom"},(0,r.mdx)("inlineCode",{parentName:"h2"},"ActorRefFrom")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"ActorRefFrom")," is especially useful when ",(0,r.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/xstate-v4/xstate/actors/spawn"},"spawning actors")," because it types the reference created by ",(0,r.mdx)("inlineCode",{parentName:"p"},"spawn")," when assigning to context."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, ActorRefFrom, spawn, assign } from 'xstate';\n\nconst childMachine = createMachine({});\n\nconst machine = createMachine({\n  schema: {\n    context: {} as {\n      spawnedChild: ActorRefFrom<typeof childMachine>;\n    },\n  },\n  entry: [\n    assign((context, event) => {\n      return {\n        spawnedChild: spawn(childMachine),\n      };\n    }),\n  ],\n});\n")),(0,r.mdx)("h2",{id:"machineoptionsfrom"},(0,r.mdx)("inlineCode",{parentName:"h2"},"MachineOptionsFrom")),(0,r.mdx)("p",null,"You can use ",(0,r.mdx)("inlineCode",{parentName:"p"},"MachineOptionsFrom")," in combination with ",(0,r.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/xstate-v4/xstate/typescript/typegen"},"typegen")," to get a strongly typed version of the machine\u2019s options."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"export interface Typegen0 {\n  '@@xstate/typegen': true;\n  eventsCausingActions: {\n    sayHello: 'xstate.init';\n  };\n  internalEvents: {\n    'xstate.init': { type: 'xstate.init' };\n  };\n  invokeSrcNameMap: {};\n  missingImplementations: {\n    actions: 'sayHello' | 'sayHelloAgain';\n    actors: never;\n    guards: never;\n    delays: never;\n  };\n  eventsCausingactors: {};\n  eventsCausingGuards: {};\n  eventsCausingDelays: {};\n  matchesStates: undefined;\n  tags: never;\n}\n\nimport { createMachine, MachineOptionsFrom } from 'xstate';\n\nconst machine = createMachine({\n  schema: {\n    context: {} as {\n      count: number;\n    },\n  },\n  entry: ['sayHello', 'sayHelloAgain'],\n  tsTypes: {} as import('./myMachine.typegen').Typegen0,\n});\n\nconst options: MachineOptionsFrom<typeof machine> = {\n  actions: {\n    sayHello: (context) => {\n  \n    },\n  },\n};\n")),(0,r.mdx)("p",null,"You can also pass ",(0,r.mdx)("inlineCode",{parentName:"p"},"true")," to the second element of the generic to ensure that all missing implementations are passed. In the example below, ",(0,r.mdx)("inlineCode",{parentName:"p"},"sayGoodbye")," is missing, so ",(0,r.mdx)("strong",{parentName:"p"},"must")," be passed when you pass ",(0,r.mdx)("inlineCode",{parentName:"p"},"true")," to ",(0,r.mdx)("inlineCode",{parentName:"p"},"MachineOptionsFrom"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"export interface Typegen0 {\n  '@@xstate/typegen': true;\n  eventsCausingActions: {\n    sayHello: 'xstate.init';\n  };\n  internalEvents: {\n    'xstate.init': { type: 'xstate.init' };\n  };\n  invokeSrcNameMap: {};\n  missingImplementations: {\n    actions: 'sayGoodbye';\n    actors: never;\n    guards: never;\n    delays: never;\n  };\n  eventsCausingactors: {};\n  eventsCausingGuards: {};\n  eventsCausingDelays: {};\n  matchesStates: undefined;\n  tags: never;\n}\n\nimport { createMachine, MachineOptionsFrom } from 'xstate';\n\nconst machine = createMachine(\n  {\n    entry: ['sayHello'],\n    exit: ['sayGoodbye'],\n    tsTypes: {} as import('./myMachine.typegen').Typegen0,\n  },\n  {\n    actions: {\n      sayHello: () => {\n        console.log('Hello');\n      },\n    },\n  }\n);\n\nconst options: MachineOptionsFrom<typeof machine, true> = {\n  actions: {\n    /**\n     * This MUST be passed because of the `true` passed in above\n     */\n    sayGoodbye: () => {},\n  },\n};\n")))}l.isMDXComponent=!0}}]);