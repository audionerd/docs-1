"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[47537],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>l,MDXProvider:()=>p,mdx:()=>x,useMDXComponents:()=>m,withMDXComponents:()=>d});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},o.apply(this,arguments)}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),d=function(e){return function(n){var t=m(n.components);return a.createElement(e,o({},n,{components:t}))}},m=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=m(t),p=i,h=d["".concat(s,".").concat(p)]||d[p]||u[p]||o;return t?a.createElement(h,r(r({ref:n},l),{},{components:t})):a.createElement(h,r({ref:n},l))}));function x(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=h;var r={};for(var c in n)hasOwnProperty.call(n,c)&&(r[c]=n[c]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},18229:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var a=t(87462),i=(t(67294),t(3905));const o={title:"Built-in actions",description:"Along with the assign action, XState has several other built-in actions which can do different things in a state machine."},s="Built-in actions",r={unversionedId:"xstate/actions/built-in-actions",id:"version-4/xstate/actions/built-in-actions",title:"Built-in actions",description:"Along with the assign action, XState has several other built-in actions which can do different things in a state machine.",source:"@site/versioned_docs/version-4/xstate/actions/built-in-actions.mdx",sourceDirName:"xstate/actions",slug:"/xstate/actions/built-in-actions",permalink:"/statelyai-docs/docs/xstate-v4/xstate/actions/built-in-actions",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/actions/built-in-actions.mdx",tags:[],version:"4",frontMatter:{title:"Built-in actions",description:"Along with the assign action, XState has several other built-in actions which can do different things in a state machine."},sidebar:"tutorialSidebar",previous:{title:"Actions",permalink:"/statelyai-docs/docs/xstate-v4/xstate/actions/"},next:{title:"Context",permalink:"/statelyai-docs/docs/xstate-v4/xstate/actions/context"}},c={},l=[{value:"Send action",id:"send-action",level:2},{value:"Sending events to actors",id:"sending-events-to-actors",level:3},{value:"Raise action",id:"raise-action",level:2},{value:"Pure action",id:"pure-action",level:2},{value:"Log action",id:"log-action",level:2},{value:"Choose action",id:"choose-action",level:2},{value:"Rules of built-in actions",id:"rules-of-built-in-actions",level:2},{value:"Summary",id:"summary",level:2}],d={toc:l};function m(e){let{components:n,...t}=e;return(0,i.mdx)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"built-in-actions"},"Built-in actions"),(0,i.mdx)("p",null,"Along with the ",(0,i.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/xstate-v4/xstate/actions/context#assign-action"},(0,i.mdx)("inlineCode",{parentName:"a"},"assign"))," action, XState has several other built-in actions which can do different things in a state machine. We\u2019ll introduce a couple of built-in actions for now and learn about the others later."),(0,i.mdx)("h2",{id:"send-action"},"Send action"),(0,i.mdx)("p",null,"XState\u2019s built-in ",(0,i.mdx)("inlineCode",{parentName:"p"},"send")," action is useful for when statecharts need to send events back to themselves."),(0,i.mdx)("p",null,"When the send action is executed, it sends an event back to the machine ",(0,i.mdx)("em",{parentName:"p"},"as if it were from an external source"),"."),(0,i.mdx)("p",null,"This pattern can help compose different flows together. In the example below, the user can either press the ",(0,i.mdx)("inlineCode",{parentName:"p"},"copy")," button or press ",(0,i.mdx)("inlineCode",{parentName:"p"},"ctrl + c")," to fire a ",(0,i.mdx)("inlineCode",{parentName:"p"},"COPY")," event to the machine. Using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"send")," action to fire the same event from both actions reduces duplication."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, send } from 'xstate';\n\nconst keyboardShortcutMachine = createMachine({\n  on: {\n    PRESS_COPY_BUTTON: {\n      actions: send({ type: 'COPY' }),\n    },\n    PRESS_CTRL_C: {\n      actions: send({ type: 'COPY' }),\n    },\n    COPY: {\n      actions: 'copyToClipboard',\n    },\n  },\n});\n")),(0,i.mdx)("p",null,"You can also dynamically specify the event to send by passing a function to ",(0,i.mdx)("inlineCode",{parentName:"p"},"send"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"send((context, event) => {\n  return {\n    type: 'SOME_EVENT',\n  };\n});\n")),(0,i.mdx)("h3",{id:"sending-events-to-actors"},"Sending events to actors"),(0,i.mdx)("p",null,"With the ",(0,i.mdx)("inlineCode",{parentName:"p"},"sendTo")," action, events can be sent to actors:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { actions, AnyActorRef, assign, createMachine, spawn } from 'xstate';\nconst { sendTo } = actions;\n\nconst machine = createMachine({\n  schema: { context: {} as { someRef: AnyActorRef } },\n  states: {\n    active: {\n      entry: assign({\n        someRef: () => spawn(someMachine),\n      }),\n      on: {\n        // highlight-start\n        SOME_EVENT: {\n          actions: (context) =>\n            sendTo(context.someRef, { type: 'PING' }),\n        },\n        // highlight-end\n      },\n    },\n  },\n});\n")),(0,i.mdx)("h2",{id:"raise-action"},"Raise action"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"raise")," action creator queues an event to the statechart, in the internal event queue.\nThis means the event is sent immediately on the current \u201cstep\u201d of the interpreter."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, actions } from \"xstate\";\nconst { raise } = actions;\n\n// Demonstrate `raise` action\nconst raiseActionDemo = createMachine({\n  id: 'Raise action demo',\n  initial: 'entry',\n  states: {\n    entry: {\n      on: {\n        STEP: {\n          target: 'middle',\n        },\n        RAISE: {\n          target: 'middle',\n\n          // highlight-start\n          // immediately invoke the NEXT event in 'middle'\n          actions: raise('NEXT')\n          // highlight-end\n        },\n      },\n    },\n    middle: {\n      on: {\n        NEXT: 'last'\n      },\n    },\n    last: {\n      on: {\n        RESET: 'entry'\n      },\n    },\n  },\n})\n")),(0,i.mdx)("p",null,"Click on both ",(0,i.mdx)("inlineCode",{parentName:"p"},"STEP")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"RAISE")," events in the ",(0,i.mdx)("a",{parentName:"p",href:"https://stately.ai/viz?gist=04bff4f2e4c5b4fa7f346dcd7fc21627"},"visualizer")," to see the difference."),(0,i.mdx)("h2",{id:"pure-action"},"Pure action"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"pure")," action is useful when you need to run a dynamic number of actions depending on the current machine\u2019s state."),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"pure")," lets you pass a function to the machine, which calculates the type and number of actions to be executed."),(0,i.mdx)("p",null,"In the example below, we check ",(0,i.mdx)("inlineCode",{parentName:"p"},"context")," to find which actions the machine should run."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { actions, createMachine } from 'xstate';\n\nconst { pure } = actions;\n\ncreateMachine({\n  context: {\n    runBothActions: false,\n  },\n  entry: pure((context) => {\n    if (context.runBothActions) {\n      // You can return an array of actions\n      return ['action1', 'action2'];\n    }\n    // Or a single action\n    return 'action1';\n  }),\n});\n")),(0,i.mdx)("h2",{id:"log-action"},"Log action"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"log")," action creator is a declarative way of logging anything related to the current state ",(0,i.mdx)("inlineCode",{parentName:"p"},"context")," and/or ",(0,i.mdx)("inlineCode",{parentName:"p"},"event"),".                          |"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, actions } from 'xstate';\nconst { log } = actions;\n\nconst loggingMachine = createMachine({\n  id: 'logging',\n  context: { count: 42 },\n  initial: 'start',\n  states: {\n    // highlight-start\n    start: {\n    // highlight-end\n      entry: log('started!'),\n      on: {\n        FINISH: {\n          target: 'end',\n          // highlight-start\n          actions: log(\n            (context, event) =>\n            `count: ${context.count}, event: ${event.type}`,\n\n            'Finish label'\n          )\n          // highlight-end\n        }\n      }\n    },\n    end: {}\n  }\n});\n\nconst endState = loggingMachine.transition('start', 'FINISH');\n// highlight-start\nendState.actions;\n// the endState.actions array will now contain our log action:\n// [\n//   {\n//     type: 'xstate.log',\n//     label: 'Finish label',\n//     expr: (context, event) => ...\n//   }\n// ]\n\n// The interpreter would log the action's evaluated expression\n// based on the current state context and event.\n// highlight-end\n")),(0,i.mdx)("p",null,"Without any arguments, ",(0,i.mdx)("inlineCode",{parentName:"p"},"log")," is an action that logs an object with ",(0,i.mdx)("inlineCode",{parentName:"p"},"context")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"event")," properties, containing the current context and triggering event, respectively."),(0,i.mdx)("h2",{id:"choose-action"},"Choose action"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"choose")," action creator creates an action that specifies which actions should be executed based on some conditions."),(0,i.mdx)("admonition",{type:"danger"},(0,i.mdx)("p",{parentName:"admonition"},"Do not use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"choose")," action creator to execute actions that can otherwise be represented as non-conditional actions executed in certain states/transitions via ",(0,i.mdx)("inlineCode",{parentName:"p"},"entry"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"exit"),", or ",(0,i.mdx)("inlineCode",{parentName:"p"},"actions"),".")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},'import { actions } from "xstate";\nconst { choose, log } = actions;\n\nconst maybeDoThese = choose([\n  {\n    cond: "cond1",\n    actions: [\n      // selected when "cond1" is true\n      log("cond1 chosen!")\n    ]\n  },\n  {\n    cond: "cond2",\n    actions: [\n      // selected when "cond1" is false and "cond2" is true\n      log((context, event) => {\n        /* ... */\n      }),\n      log("another action")\n    ]\n  },\n  {\n    cond: (context, event) => {\n      // some condition\n      return false;\n    },\n    actions: [\n      // selected when "cond1" and "cond2" are false and the inline `cond` is true\n      (context, event) => {\n        // some other action\n      }\n    ]\n  },\n  {\n    actions: [\n      log("fall-through action")\n      // selected when "cond1", "cond2", and "cond3" are false\n    ]\n  }\n]);\n')),(0,i.mdx)("p",null,"This is analogous to the SCXML ",(0,i.mdx)("inlineCode",{parentName:"p"},"<if>"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"<elseif>"),", and ",(0,i.mdx)("inlineCode",{parentName:"p"},"<else>")," elements: ",(0,i.mdx)("a",{parentName:"p",href:"http://www.w3.org/TR/scxml/#if"},"www.w3.org/TR/scxml/#if")),(0,i.mdx)("h2",{id:"rules-of-built-in-actions"},"Rules of built-in actions"),(0,i.mdx)("p",null,"Built-in actions are ",(0,i.mdx)("em",{parentName:"p"},"pure functions"),". Pure functions don\u2019t execute anything themselves but instead return instructions that tells XState what to do."),(0,i.mdx)("p",null,"For example, the assign function returns an object containing ",(0,i.mdx)("inlineCode",{parentName:"p"},"type: 'xstate.assign'")," and an ",(0,i.mdx)("inlineCode",{parentName:"p"},"assigner")," function."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { assign } from 'xstate';\n\nconst assignResult = assign((context, event) => ({\n  newValue: true,\n}));\n\nassignResult.type; // 'xstate.assign'\nassignResult.assigner; // (context, event) => ({ newValue: true })\n")),(0,i.mdx)("p",null,"The instruction set above is interpreted by XState, which executes the code. The result of ",(0,i.mdx)("inlineCode",{parentName:"p"},"assign")," must be passed directly to ",(0,i.mdx)("inlineCode",{parentName:"p"},"actions"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"entry")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"exit"),"."),(0,i.mdx)("p",null,"For example, the following code won\u2019t work correctly because the result of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"assign")," isn\u2019t being passed into ",(0,i.mdx)("inlineCode",{parentName:"p"},"assignToContext"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, assign } from 'xstate';\n\nconst machine = createMachine(\n  {\n    // ...config\n  },\n  {\n    actions: {\n      // highlight-start\n      assignToContext: (context, event) => {\n        // \ud83d\udeab This won\u2019t work!\n        // The result of the assign isn\u2019t being passed\n        // into assignToContext\n        assign({\n          message: 'Hello!',\n      // highlight-end\n        });\n      },\n    },\n  }\n);\n")),(0,i.mdx)("p",null,"The following example works correctly because the result of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"assign")," is passed into ",(0,i.mdx)("inlineCode",{parentName:"p"},"assignToContext"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, assign } from 'xstate';\n\nconst machine = createMachine(\n  {\n    // ...config\n  },\n  {\n  // highlight-start\n    actions: {\n      assignToContext: assign((context) => ({\n        message: 'Hello!',\n  // highlight-end\n      })),\n    },\n  }\n);\n")),(0,i.mdx)("h2",{id:"summary"},"Summary"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"send")," can be used to send events back to your machine. ",(0,i.mdx)("inlineCode",{parentName:"p"},"pure")," can be used to dynamically return different actions. Built-in actions must be passed directly to the machine or returned from ",(0,i.mdx)("inlineCode",{parentName:"p"},"pure"),"."))}m.isMDXComponent=!0}}]);