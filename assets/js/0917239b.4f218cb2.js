"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[34884],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>p,mdx:()=>x,useMDXComponents:()=>m,withMDXComponents:()=>d});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},s.apply(this,arguments)}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),d=function(e){return function(t){var n=m(t.components);return a.createElement(e,s({},t,{components:n}))}},m=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=m(n),p=i,h=d["".concat(r,".").concat(p)]||d[p]||u[p]||s;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function x(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,r=new Array(s);r[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var c=2;c<s;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},94495:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const s={title:"@xstate/svelte",description:"The @xstate/svelte package contains utilities for using Svelte with XState. Learn how to install and get started quickly with @xstate/svelte."},r=void 0,o={unversionedId:"xstate/packages/xstate-svelte",id:"version-4/xstate/packages/xstate-svelte",title:"@xstate/svelte",description:"The @xstate/svelte package contains utilities for using Svelte with XState. Learn how to install and get started quickly with @xstate/svelte.",source:"@site/versioned_docs/version-4/xstate/packages/xstate-svelte.mdx",sourceDirName:"xstate/packages",slug:"/xstate/packages/xstate-svelte",permalink:"/docs/xstate-v4/xstate/packages/xstate-svelte",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/packages/xstate-svelte.mdx",tags:[],version:"4",frontMatter:{title:"@xstate/svelte",description:"The @xstate/svelte package contains utilities for using Svelte with XState. Learn how to install and get started quickly with @xstate/svelte."},sidebar:"tutorialSidebar",previous:{title:"@xstate/react",permalink:"/docs/xstate-v4/xstate/packages/xstate-react"},next:{title:"@xstate/vue",permalink:"/docs/xstate-v4/xstate/packages/xstate-vue"}},l={},c=[{value:"Quick start",id:"quick-start",level:2},{value:"API",id:"api",level:2},{value:"<code>useMachine(machine, options?)</code>",id:"usemachinemachine-options",level:3},{value:"<code>useMachine(machine)</code> with <code>@xstate/fsm</code>",id:"usemachinemachine-with-xstatefsm",level:3},{value:"<code>useSelector(actor, selector, compare?, getSnapshot?)</code>",id:"useselectoractor-selector-compare-getsnapshot",level:3},{value:"Configuring Machines",id:"configuring-machines",level:2},{value:"Matching States",id:"matching-states",level:2},{value:"Persisted and Rehydrated State",id:"persisted-and-rehydrated-state",level:2},{value:"Services",id:"services",level:2}],d={toc:c};function m(e){let{components:t,...n}=e;return(0,i.mdx)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"The ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/statelyai/xstate/tree/main/packages/xstate-svelte"},"@xstate/svelte package")," contains utilities for using ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/statelyai/xstate"},"XState")," with ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/sveltejs/svelte"},"Svelte"),"."),(0,i.mdx)("h2",{id:"quick-start"},"Quick start"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Install ",(0,i.mdx)("inlineCode",{parentName:"li"},"xstate")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},"@xstate/svelte"),":")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"npm i xstate @xstate/svelte\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Via CDN")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-html"},'<script src="https://unpkg.com/@xstate/svelte/dist/xstate-svelte.min.js"><\/script>\n')),(0,i.mdx)("p",null,"By using the global variable ",(0,i.mdx)("inlineCode",{parentName:"p"},"XStateSvelte")),(0,i.mdx)("p",null,"or"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-html"},'<script src="https://unpkg.com/@xstate/svelte/dist/xstate-svelte.fsm.min.js"><\/script>\n')),(0,i.mdx)("p",null,"By using the global variable ",(0,i.mdx)("inlineCode",{parentName:"p"},"XStateSvelteFSM")),(0,i.mdx)("ol",{start:2},(0,i.mdx)("li",{parentName:"ol"},"Import ",(0,i.mdx)("inlineCode",{parentName:"li"},"useMachine"))),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-svelte"},"<script>\n  import { useMachine } from '@xstate/svelte';\n  import { createMachine } from 'xstate';\n\n  const toggleMachine = createMachine({\n    id: 'toggle',\n    initial: 'inactive',\n    states: {\n      inactive: {\n        on: { TOGGLE: 'active' }\n      },\n      active: {\n        on: { TOGGLE: 'inactive' }\n      }\n    }\n  });\n\n  const { state, send } = useMachine(toggleMachine);\n<\/script>\n\n<button on:click={() => send('TOGGLE')}>\n  {$state.value === 'inactive'\n    ? 'Click to activate'\n    : 'Active! Click to deactivate'}\n</button>\n")),(0,i.mdx)("h2",{id:"api"},"API"),(0,i.mdx)("h3",{id:"usemachinemachine-options"},(0,i.mdx)("inlineCode",{parentName:"h3"},"useMachine(machine, options?)")),(0,i.mdx)("p",null,"A function that interprets the given ",(0,i.mdx)("inlineCode",{parentName:"p"},"machine")," and starts a service that runs for the lifetime of the component."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Arguments")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"machine")," - An ",(0,i.mdx)("a",{parentName:"li",href:"https://xstate.js.org/docs/guides/machines.html"},"XState machine"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"options")," (optional) - ",(0,i.mdx)("a",{parentName:"li",href:"https://xstate.js.org/docs/guides/interpretation.html#options"},"Interpreter options")," OR one of the following Machine Config options: ",(0,i.mdx)("inlineCode",{parentName:"li"},"guards"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"actions"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"activities"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"services"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"delays"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"immediate"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"context"),", or ",(0,i.mdx)("inlineCode",{parentName:"li"},"state"),".")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Returns")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"{ state, send, service}"),":"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"state")," - A ",(0,i.mdx)("a",{parentName:"li",href:"https://svelte.dev/docs#svelte_store"},"Svelte store")," representing the current state of the machine as an XState ",(0,i.mdx)("inlineCode",{parentName:"li"},"State")," object. You should reference the store value by prefixing with ",(0,i.mdx)("inlineCode",{parentName:"li"},"$")," i.e. ",(0,i.mdx)("inlineCode",{parentName:"li"},"$state"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"send")," - A function that sends events to the running service."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"service")," - The created service.")),(0,i.mdx)("h3",{id:"usemachinemachine-with-xstatefsm"},(0,i.mdx)("inlineCode",{parentName:"h3"},"useMachine(machine)")," with ",(0,i.mdx)("inlineCode",{parentName:"h3"},"@xstate/fsm")),(0,i.mdx)("p",null,"A function that interprets the given finite state ",(0,i.mdx)("inlineCode",{parentName:"p"},"machine")," from ","[",(0,i.mdx)("inlineCode",{parentName:"p"},"@xstate/fsm"),"]"," and starts a service that runs for the lifetime of the component."),(0,i.mdx)("p",null,"This special ",(0,i.mdx)("inlineCode",{parentName:"p"},"useMachine")," hook is imported from ",(0,i.mdx)("inlineCode",{parentName:"p"},"@xstate/svelte/lib/fsm")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Arguments")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"machine")," - An ",(0,i.mdx)("a",{parentName:"li",href:"https://xstate.js.org/docs/packages/xstate-fsm/"},"XState finite state machine (FSM)"),".")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Returns")," an object ",(0,i.mdx)("inlineCode",{parentName:"p"},"{state, send, service}"),":"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"state")," - A ",(0,i.mdx)("a",{parentName:"li",href:"https://svelte.dev/docs#svelte_store"},"Svelte store")," representing the current state of the machine as an ",(0,i.mdx)("inlineCode",{parentName:"li"},"@xstate/fsm")," ",(0,i.mdx)("inlineCode",{parentName:"li"},"StateMachine.State")," object. You should reference the store value by prefixing with ",(0,i.mdx)("inlineCode",{parentName:"li"},"$")," i.e. ",(0,i.mdx)("inlineCode",{parentName:"li"},"$state"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"send")," - A function that sends events to the running service."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"service")," - The created ",(0,i.mdx)("inlineCode",{parentName:"li"},"@xstate/fsm")," service.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-svelte"},"<script>\n  import { useMachine } from '@xstate/svelte/lib/fsm';\n  import { createMachine, assign } from '@xstate/fsm';\n\n  const fetchMachine = createMachine({\n    id: 'fetch',\n    initial: 'idle',\n    context: {\n      data: undefined\n    },\n    states: {\n      idle: {\n        on: { FETCH: 'loading' }\n      },\n      loading: {\n        entry: ['load'],\n        on: {\n          RESOLVE: {\n            target: 'success',\n            actions: assign({\n              data: (context, event) => event.data\n            })\n          }\n        }\n      },\n      success: {}\n    }\n  });\n\n  const onFetch = () => new Promise((res) => res('some data'));\n\n  const { state, send } = useMachine(fetchMachine, {\n    actions: {\n      load: () => {\n        onFetch().then((res) => {\n          send({ type: 'RESOLVE', data: res });\n        });\n      }\n    }\n  });\n<\/script>\n\n{#if $state.value === 'idle'}\n  <button on:click={() => send('FETCH')}>Fetch</button>\n{:else if $state.value === 'loading'}\n  <div>Loading...</div>\n{:else if $state.value === 'success'}\n  <div>\n    Success! Data: <div data-testid=\"data\">{$state.context.data}</div>\n  </div>\n{/if}\n")),(0,i.mdx)("h3",{id:"useselectoractor-selector-compare-getsnapshot"},(0,i.mdx)("inlineCode",{parentName:"h3"},"useSelector(actor, selector, compare?, getSnapshot?)")),(0,i.mdx)("p",null,"A function that returns ",(0,i.mdx)("a",{parentName:"p",href:"https://svelte.dev/docs#svelte_store"},"Svelte store")," representing the selected value from the snapshot of an ",(0,i.mdx)("inlineCode",{parentName:"p"},"actor"),", such as a service. The store will only be updated when the selected value changes, as determined by the optional ",(0,i.mdx)("inlineCode",{parentName:"p"},"compare")," function."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Arguments")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"actor")," - a service or an actor-like object that contains ",(0,i.mdx)("inlineCode",{parentName:"li"},".send(...)")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},".subscribe(...)")," methods."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"selector"),' - a function that takes in an actor\u2019s "current state" (snapshot) as an argument and returns the desired selected value.'),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"compare")," (optional) - a function that determines if the current selected value is the same as the previous selected value.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-svelte"},"<script lang=\"ts\">\n  import { interpret } from 'xstate';\n  import { createModel } from 'xstate/lib/model';\n  import { useSelector } from '../src';\n\n  const model = createModel(\n    {\n      count: 0,\n      anotherCount: 0\n    },\n    {\n      events: {\n        INCREMENT: () => ({}),\n        INCREMENT_ANOTHER: () => ({})\n      }\n    }\n  );\n\n  const machine = model.createMachine({\n    initial: 'idle',\n    context: model.initialContext,\n    states: {\n      idle: {\n        on: {\n          INCREMENT: {\n            actions: model.assign({ count: ({ count }) => count + 1 })\n          },\n          INCREMENT_ANOTHER: {\n            actions: model.assign({\n              anotherCount: ({ anotherCount }) => anotherCount + 1\n            })\n          }\n        }\n      }\n    }\n  });\n\n  const service = interpret(machine).start();\n\n  const count = useSelector(service, (state) => state.context.count);\n\n  let withSelector = 0;\n  $: $count && withSelector++;\n  let withoutSelector = 0;\n  $: $service.context.count && withoutSelector++;\n<\/script>\n\n<button data-testid=\"count\" on:click={() => service.send('INCREMENT')}\n  >Increment count</button\n>\n<button data-testid=\"another\" on:click={() => service.send('INCREMENT_ANOTHER')}\n  >Increment another count</button\n>\n\n<div data-testid=\"withSelector\">{withSelector}</div>\n<div data-testid=\"withoutSelector\">{withoutSelector}</div>\n")),(0,i.mdx)("h2",{id:"configuring-machines"},"Configuring Machines"),(0,i.mdx)("p",null,"Existing machines can be configured by passing the machine options as the 2nd argument of ",(0,i.mdx)("inlineCode",{parentName:"p"},"useMachine(machine, options)"),"."),(0,i.mdx)("p",null,"Example: the ",(0,i.mdx)("inlineCode",{parentName:"p"},"'fetchData'")," service and ",(0,i.mdx)("inlineCode",{parentName:"p"},"'notifySuccess'")," action are both configurable:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-svelte"},"<script>\n  import { useMachine } from '@xstate/svelte';\n  import { createMachine, assign } from 'xstate';\n\n  const fetchMachine = createMachine({\n    id: 'fetch',\n    initial: 'idle',\n    context: {\n      data: undefined,\n      error: undefined\n    },\n    states: {\n      idle: {\n        on: { FETCH: 'loading' }\n      },\n      loading: {\n        invoke: {\n          src: 'fetchData',\n          onDone: {\n            target: 'success',\n            actions: assign({\n              data: (_, event) => event.data\n            })\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_, event) => event.data\n            })\n          }\n        }\n      },\n      success: {\n        entry: 'notifySuccess',\n        type: 'final'\n      },\n      failure: {\n        on: {\n          RETRY: 'loading'\n        }\n      }\n    }\n  });\n\n  const onResolve = (data) => {\n    // Do something with data\n  };\n\n  const { state, send } = useMachine(fetchMachine, {\n    actions: {\n      notifySuccess: (context) => onResolve(context.data)\n    },\n    services: {\n      fetchData: (_, event) =>\n        fetch(`some/api/${event.query}`).then((res) => res.json())\n    }\n  });\n<\/script>\n\n{#if $state.value === 'idle'}\n  <button on:click={() => send({ type: 'FETCH', query: 'something' })}>\n    Search for something\n  </button>\n{:else if $state.value === 'loading'}\n  <div>Searching...</div>\n{:else if $state.value === 'success'}\n  <div>Success! Data: {$state.context.data}</div>\n{:else if $state.value === 'failure'}\n  <p>{$state.context.error.message}</p>\n  <button on:click={() => send('RETRY')}>Retry</button>\n{/if}\n")),(0,i.mdx)("h2",{id:"matching-states"},"Matching States"),(0,i.mdx)("p",null,"When using ",(0,i.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/hierarchical.html"},"hierarchical")," and ",(0,i.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/parallel.html"},"parallel")," machines, the state values will be objects, not strings. In this case, it is best to use ",(0,i.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/states.html#state-methods-and-properties"},(0,i.mdx)("inlineCode",{parentName:"a"},"state.matches(...)")),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-svelte"},"{#if $state.matches('idle')}\n  //\n{:else if $state.matches({ loading: 'user' })}\n  //\n{:else if $state.matches({ loading: 'friends' })}\n  //\n{/if}\n")),(0,i.mdx)("h2",{id:"persisted-and-rehydrated-state"},"Persisted and Rehydrated State"),(0,i.mdx)("p",null,"You can persist and rehydrate state with ",(0,i.mdx)("inlineCode",{parentName:"p"},"useMachine(...)")," via ",(0,i.mdx)("inlineCode",{parentName:"p"},"options.state"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"// Get the persisted state config object from somewhere, e.g. localStorage\n\nconst persistedState = JSON.parse(\n  localStorage.getItem('some-persisted-state-key')\n);\n\nconst { state, send } = useMachine(someMachine, {\n  state: persistedState\n});\n\n// state will initially be that persisted state, not the machine\u2019s initialState\n")),(0,i.mdx)("h2",{id:"services"},"Services"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"XState")," services implement the ",(0,i.mdx)("a",{parentName:"p",href:"https://svelte.dev/docs#Store_contract"},"Svelte store contract"),". Existing services and spawned actors can therefore be accessed directly and subscriptions are handled automatically by prefixing the service name with ",(0,i.mdx)("inlineCode",{parentName:"p"},"$"),"."),(0,i.mdx)("p",null,"Example:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"// service.js\n\nimport { createMachine, interpret } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n\nexport const toggleService = interpret(toggleMachine).start();\n")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-svelte"},"// App.svelte\n\n<script>\n  import { toggleService } from './service';\n<\/script>\n\n<button on:click={() => toggleService.send('TOGGLE')}>\n  {$toggleService.value === 'inactive'\n    ? 'Click to activate'\n    : 'Active! Click to deactivate'}\n</button>\n")))}m.isMDXComponent=!0}}]);