"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[13470],{3905:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>d,MDXProvider:()=>u,mdx:()=>g,useMDXComponents:()=>h,withMDXComponents:()=>m});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},s.apply(this,arguments)}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var d=n.createContext({}),m=function(e){return function(t){var a=h(t.components);return n.createElement(e,s({},t,{components:a}))}},h=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=h(e.components);return n.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=h(a),u=o,p=m["".concat(i,".").concat(u)]||m[u]||c[u]||s;return a?n.createElement(p,r(r({ref:t},d),{},{components:a})):n.createElement(p,r({ref:t},d))}));function g(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=a.length,i=new Array(s);i[0]=p;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var d=2;d<s;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},6693:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var n=a(87462),o=(a(67294),a(3905));const s={title:"Modelling 101: How to build a statechart from scratch",description:"Stately dev Matt Pocock takes you through a step-by-step guide on modelling statecharts",tags:["xstate","tutorial","statechart","modelling"],authors:["matt"],image:"/blog/2022-02-15-modelling-101-how-to-build-a-statechart-from-scratch.png",slug:"2022-02-15-modelling-101-how-to-build-a-statechart-from-scratch",date:new Date("2022-02-17T00:00:00.000Z")},i=void 0,r={permalink:"/statelyai-docs/blog/2022-02-15-modelling-101-how-to-build-a-statechart-from-scratch",editUrl:"https://github.com/statelyai/docs/edit/main/blog/2022-02-14-modelling-101-how-to-build-a-statechart-from-scratch/index.mdx",source:"@site/blog/2022-02-14-modelling-101-how-to-build-a-statechart-from-scratch/index.mdx",title:"Modelling 101: How to build a statechart from scratch",description:"Stately dev Matt Pocock takes you through a step-by-step guide on modelling statecharts",date:"2022-02-17T00:00:00.000Z",formattedDate:"February 17, 2022",tags:[{label:"xstate",permalink:"/statelyai-docs/blog/tags/xstate"},{label:"tutorial",permalink:"/statelyai-docs/blog/tags/tutorial"},{label:"statechart",permalink:"/statelyai-docs/blog/tags/statechart"},{label:"modelling",permalink:"/statelyai-docs/blog/tags/modelling"}],readingTime:8.36,hasTruncateMarker:!0,authors:[{name:"Matt Pocock",title:"Stately Team",url:"https://github.com/mattpocock",imageURL:"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png",key:"matt"}],frontMatter:{title:"Modelling 101: How to build a statechart from scratch",description:"Stately dev Matt Pocock takes you through a step-by-step guide on modelling statecharts",tags:["xstate","tutorial","statechart","modelling"],authors:["matt"],image:"/blog/2022-02-15-modelling-101-how-to-build-a-statechart-from-scratch.png",slug:"2022-02-15-modelling-101-how-to-build-a-statechart-from-scratch",date:"2022-02-17T00:00:00.000Z"},prevItem:{title:"Introducing: The XState CLI",permalink:"/statelyai-docs/blog/2022-03-03-introducing-the-xstate-cli"},nextItem:{title:"Stately Editor public beta",permalink:"/statelyai-docs/blog/2022-02-08-join-the-stately-editor-public-beta"}},l={authorsImageUrls:[void 0]},d=[{value:"What you\u2019ll need",id:"what-youll-need",level:2},{value:"1. List all the possible events",id:"1-list-all-the-possible-events",level:2},{value:"2. List all the possible tasks",id:"2-list-all-the-possible-tasks",level:2},{value:"2a. Services",id:"2a-services",level:3},{value:"Adding onDone/onError events",id:"adding-ondoneonerror-events",level:4},{value:"2b. Actions",id:"2b-actions",level:3},{value:"3. Work out the very first state",id:"3-work-out-the-very-first-state",level:2},{value:"3a. Know your statechart\u2019s lifecycle",id:"3a-know-your-statecharts-lifecycle",level:3},{value:"3b. Write down your first state",id:"3b-write-down-your-first-state",level:3},{value:"Dynamic initial states",id:"dynamic-initial-states",level:4},{value:"4. Build out the states",id:"4-build-out-the-states",level:2},{value:"4a. Work out if any tasks are running",id:"4a-work-out-if-any-tasks-are-running",level:3},{value:"4b. Work out which events can happen in that state",id:"4b-work-out-which-events-can-happen-in-that-state",level:3},{value:"Events that change state",id:"events-that-change-state",level:4},{value:"Events that don\u2019t change state",id:"events-that-dont-change-state",level:4},{value:"Events that do nothing",id:"events-that-do-nothing",level:4},{value:"5. Keep going!",id:"5-keep-going",level:2}],m={toc:d};function h(e){let{components:t,...a}=e;return(0,o.mdx)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Modelling using statecharts changed my career as a dev. Of all the state management solutions I\u2019ve tried, it feels the most complete, logical and robust. Even if you don\u2019t use them in your app\u2019s code, statecharts let you break down complex features into states, events, services, actions and guards."),(0,o.mdx)("p",null,"It took me a long time to get comfortable modelling with statecharts. Even when I\u2019d learned all the terms, it took time to work out a step-by-step process for building statecharts from scratch."),(0,o.mdx)("p",null,"Today, I\u2019m going to share ",(0,o.mdx)("strong",{parentName:"p"},"an opinionated, step-by-step guide for building statecharts from scratch"),". This process ",(0,o.mdx)("em",{parentName:"p"},"works for me"),", but it might not work for you. Feel free to tweak it as you go."),(0,o.mdx)("h2",{id:"what-youll-need"},"What you\u2019ll need"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"A pen and paper, or a digital notepad of some kind"),(0,o.mdx)("li",{parentName:"ol"},"A statechart builder, such as ",(0,o.mdx)("a",{parentName:"li",href:"https://stately.ai/editor"},"our visual editor")," or an XState machine in our ",(0,o.mdx)("a",{parentName:"li",href:"https://stately.ai/viz"},"XState visualizer")),(0,o.mdx)("li",{parentName:"ol"},"A clear idea of what you\u2019re building. Maybe something you\u2019ve implemented at work? You could also pick something from ",(0,o.mdx)("a",{parentName:"li",href:"https://xstate-catalogue.com"},"XState Catalogue"),".")),(0,o.mdx)("p",null,"I\u2019ve also built this ",(0,o.mdx)("a",{parentName:"p",href:"https://stately.ai/registry/editor/d24479eb-ac20-44ae-a7b7-c0910e6247ad"},"process as a statechart")," using our visual editor."),(0,o.mdx)("h2",{id:"1-list-all-the-possible-events"},"1. List all the possible events"),(0,o.mdx)("p",null,"The first step in this process is to work out all the events that can be received by your statechart. You can think of an event as \u2018something that happens\u2019 in your app. There are plenty of examples even on this page:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Press the escape key"),(0,o.mdx)("li",{parentName:"ol"},"Press the space bar"),(0,o.mdx)("li",{parentName:"ol"},"Select some text"),(0,o.mdx)("li",{parentName:"ol"},"Click on an image")),(0,o.mdx)("p",null,"You don\u2019t need to list ",(0,o.mdx)("em",{parentName:"p"},"all")," possible events that the user can perform. You only need to ",(0,o.mdx)("strong",{parentName:"p"},"list the events that your statechart cares about"),". Here are some examples:"),(0,o.mdx)("p",null,"For a submit form:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"User changes the value of an input"),(0,o.mdx)("li",{parentName:"ul"},"User submits form")),(0,o.mdx)("p",null,"For a spreadsheet:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"User clicks a cell on the spreadsheet"),(0,o.mdx)("li",{parentName:"ul"},"User holds down the ",(0,o.mdx)("inlineCode",{parentName:"li"},"shift"),"/",(0,o.mdx)("inlineCode",{parentName:"li"},"ctrl")," key"),(0,o.mdx)("li",{parentName:"ul"},"User presses ",(0,o.mdx)("inlineCode",{parentName:"li"},"escape")),(0,o.mdx)("li",{parentName:"ul"},"User scrolls up or down")),(0,o.mdx)("p",null,"Seeing all the events in a big list may start giving you an idea of what is possible in your statechart. You might start thinking in terms of ",(0,o.mdx)("em",{parentName:"p"},"sequences of events")," \u2014 i.e. ",(0,o.mdx)("inlineCode",{parentName:"p"},"User changes input")," -> ",(0,o.mdx)("inlineCode",{parentName:"p"},"User submits form"),". Write down any sequences that pop into your head, they\u2019ll be useful later."),(0,o.mdx)("h2",{id:"2-list-all-the-possible-tasks"},"2. List all the possible tasks"),(0,o.mdx)("p",null,"Next, it\u2019s important to consider the ",(0,o.mdx)("em",{parentName:"p"},"tasks")," your app needs to perform. These tasks could be called \u2018side effects\u2019 \u2014 things that happen as a result of your statechart running. These could be as diverse as:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Adding an item to a todo list (in local state)")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Sending a request to the API to load some data")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Focusing an input")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Waiting for a video to load")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Subscribing to something for updates")," (perhaps via ",(0,o.mdx)("inlineCode",{parentName:"li"},"window.addEventListener()"),")")),(0,o.mdx)("p",null,(0,o.mdx)("em",{parentName:"p"},"NOTE: I\u2019m using \u2018tasks\u2019 loosely. This isn\u2019t an official term in the XState docs \u2014 but \u2018services\u2019 and \u2018actions\u2019 are.")),(0,o.mdx)("p",null,"Once you have a list of tasks, you need to divide them into two groups."),(0,o.mdx)("h3",{id:"2a-services"},"2a. Services"),(0,o.mdx)("p",null,"The first group is for services, tasks where you need to ",(0,o.mdx)("em",{parentName:"p"},"do something when they finish"),". I wrote a ",(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/blog/2021-04-30-should-this-be-an-action-or-a-service"},"longer guide about the distinction between actions and services here"),"."),(0,o.mdx)("p",null,"From our list above, these are services:"),(0,o.mdx)("ol",{start:2},(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Sending a request to the API to load some data"))),(0,o.mdx)("p",null,"We need to get something from the API, meaning that we need to wait until we receive the data. This task can also fail \u2014 if we\u2019re having network trouble or the API method fails. That means we care whether it succeeds or fails."),(0,o.mdx)("ol",{start:4},(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Waiting for a video to load"))),(0,o.mdx)("p",null,"Same as above \u2014 we need to wait for the video to be loaded, and we care if it fails to load."),(0,o.mdx)("ol",{start:5},(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Subscribing to something for updates"))),(0,o.mdx)("p",null,"Here, it\u2019s a little different \u2014 when you subscribe to something, you need to clean up the listener to prevent a memory leak. For instance:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'const listener = () => {\n  console.log("Hello!");\n};\n\n// Subscribe\nwindow.addEventListener("focus", listener);\n\n// Unsubscribe\nwindow.removeEventListener("focus", listener);\n')),(0,o.mdx)("p",null,"Here, we care about the outcome because we need to ",(0,o.mdx)("em",{parentName:"p"},"run something at the end of the process")," \u2014 i.e. unsubscribe from the listener."),(0,o.mdx)("h4",{id:"adding-ondoneonerror-events"},"Adding onDone/onError events"),(0,o.mdx)("p",null,"Service completions/errors are handled ",(0,o.mdx)("em",{parentName:"p"},"as events")," in your statechart, meaning they\u2019re on the same level as your user clicking buttons."),(0,o.mdx)("p",null,"When you\u2019ve got your list of services, note down two things:"),(0,o.mdx)("p",null,"For each service that we need to wait for it to complete, add a ",(0,o.mdx)("inlineCode",{parentName:"p"},"serviceName.onDone")," event to your list."),(0,o.mdx)("p",null,"For each service that might reasonably be expected to error, add a ",(0,o.mdx)("inlineCode",{parentName:"p"},"serviceName.onError")," event to your list."),(0,o.mdx)("h3",{id:"2b-actions"},"2b. Actions"),(0,o.mdx)("p",null,"The second group is for actions, tasks that you can \u2018fire and forget\u2019. Unlike services, the statechart forgets about actions as soon as they\u2019re fired."),(0,o.mdx)("p",null,"From our list above, these are actions:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Adding an item to a todo list (in local state)"))),(0,o.mdx)("p",null,"Changes to local state are pretty much always fire-and-forget. The reason is that, since we manage the local state ourselves, updating it is instant. ",(0,o.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/context.html#assign-action"},"XState\u2019s assign action")," is a good example."),(0,o.mdx)("ol",{start:2},(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Focusing an input"))),(0,o.mdx)("p",null,"Focusing an input, in the same vein, is fire-and-forget. We don\u2019t care about the outcome, and it\u2019s unlikely to fail."),(0,o.mdx)("h2",{id:"3-work-out-the-very-first-state"},"3. Work out the very first state"),(0,o.mdx)("p",null,"Now that you know ",(0,o.mdx)("em",{parentName:"p"},"what can happen")," (events) and ",(0,o.mdx)("em",{parentName:"p"},"what can be done")," (actions & services) in your statechart, it\u2019s time to start adding some states."),(0,o.mdx)("h3",{id:"3a-know-your-statecharts-lifecycle"},"3a. Know your statechart\u2019s lifecycle"),(0,o.mdx)("p",null,"It\u2019s always easiest to start at the beginning. Before you add your first state, consider the moment that your statechart gets initiated. What causes your statechart to run? Some examples:"),(0,o.mdx)("p",null,"An ",(0,o.mdx)("strong",{parentName:"p"},"authentication")," statechart, which manages the state for whether the user is logged in to a website or not. This would be started the ",(0,o.mdx)("em",{parentName:"p"},"first moment")," the user clicks on to any page of your app, and finished when they close your app."),(0,o.mdx)("p",null,"A ",(0,o.mdx)("strong",{parentName:"p"},"sign up form")," statechart, which handles a user signing up to your app. This might be started when the user visits the ",(0,o.mdx)("inlineCode",{parentName:"p"},"/sign-up")," route, and stopped when they exit it."),(0,o.mdx)("h3",{id:"3b-write-down-your-first-state"},"3b. Write down your first state"),(0,o.mdx)("p",null,"Now that you know what your app looks like when your statechart gets initiated, it\u2019s time to name its initial state. Consider what the statechart is doing at that time. It could be ",(0,o.mdx)("inlineCode",{parentName:"p"},"Loading data"),", or ",(0,o.mdx)("inlineCode",{parentName:"p"},"Waiting for user to submit form"),", or even just ",(0,o.mdx)("inlineCode",{parentName:"p"},"Idle"),", waiting for something to happen."),(0,o.mdx)("h4",{id:"dynamic-initial-states"},"Dynamic initial states"),(0,o.mdx)("p",null,"Every statechart ",(0,o.mdx)("em",{parentName:"p"},"must")," have an initial state, and it can\u2019t be dynamic \u2014 it must be the same every time your statechart runs."),(0,o.mdx)("p",null,"If you feel your statechart ",(0,o.mdx)("em",{parentName:"p"},"does")," have more than one initial state (for instance it could start in two different modes) consider using a \u2018checking\u2019 state via an ",(0,o.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/transitions.html#eventless-always-transitions"},"eventless transition"),"."),(0,o.mdx)("h2",{id:"4-build-out-the-states"},"4. Build out the states"),(0,o.mdx)("p",null,"Now that you have your first state, you can start the process of building out the states. Every state represents a length of time, so consider ",(0,o.mdx)("em",{parentName:"p"},"what is happening")," during that state."),(0,o.mdx)("h3",{id:"4a-work-out-if-any-tasks-are-running"},"4a. Work out if any tasks are running"),(0,o.mdx)("p",null,"Do you have any services running? If so, ",(0,o.mdx)("em",{parentName:"p"},"invoke")," those services using ",(0,o.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/communication.html#invoking-services"},"XState\u2019s invoke property"),"."),(0,o.mdx)("p",null,"Does an action need to happen when you enter or exit the state? If so, add it as an ",(0,o.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/actions.html#actions"},"entry or exit action"),"."),(0,o.mdx)("p",null,"Remember, the ",(0,o.mdx)("em",{parentName:"p"},"statechart itself")," is also a state. We often call it the \u2018root state\u2019. This means that you can run services or listen to events for the ",(0,o.mdx)("em",{parentName:"p"},"entire duration of your statechart"),". You can also run entry actions when your statechart starts, and exit actions when it stops."),(0,o.mdx)("h3",{id:"4b-work-out-which-events-can-happen-in-that-state"},"4b. Work out which events can happen in that state"),(0,o.mdx)("p",null,"Consider the period of time your state represents. Which events should ",(0,o.mdx)("em",{parentName:"p"},"do")," something, and what should they do?"),(0,o.mdx)("h4",{id:"events-that-change-state"},"Events that change state"),(0,o.mdx)("p",null,"If an event results in:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"A new service running"),(0,o.mdx)("li",{parentName:"ol"},"Something new appearing on screen"),(0,o.mdx)("li",{parentName:"ol"},"Other types of events becoming possible"),(0,o.mdx)("li",{parentName:"ol"},"A current service stopping")),(0,o.mdx)("p",null,"Then it might need to move to a new state. A great example is a ",(0,o.mdx)("strong",{parentName:"p"},"data fetcher"),". Your app is in two distinct states:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Fetching data"),": it doesn\u2019t yet have the data, and the \u2018fetch data\u2019 service is running."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Showing data"),": it has the data, and is showing it on screen. The \u2018fetch data\u2019 service has stopped.")),(0,o.mdx)("p",null,"If you have an event like this, draw out the new event and either create a new state, or make it target an existing one if needed."),(0,o.mdx)("h4",{id:"events-that-dont-change-state"},"Events that don\u2019t change state"),(0,o.mdx)("p",null,"Sometimes, ",(0,o.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/actions.html#api"},"events can be used to fire an action")," instead of changing state. A good example of this is when a form input changes, and you need to save the new value to local state."),(0,o.mdx)("p",null,"This is called a ",(0,o.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/transitions.html#self-transitions"},"self-transition"),", where the event doesn\u2019t change the state \u2014 the state transitions to itself."),(0,o.mdx)("h4",{id:"events-that-do-nothing"},"Events that do nothing"),(0,o.mdx)("p",null,"It\u2019s important to bear in mind that when your statechart is in a certain state, ",(0,o.mdx)("em",{parentName:"p"},"only the events that you specify")," will be handled. In other words, any event you don\u2019t specify will do ",(0,o.mdx)("em",{parentName:"p"},"nothing")," when it\u2019s sent to the statechart."),(0,o.mdx)("p",null,"A classic example of this is a form. When you submit the form, you go to the \u2018submitting\u2019 state. It\u2019s important that you don\u2019t allow the \u2018submit\u2019 event to be received while in the \u2018submitting\u2019 state \u2014 otherwise the form might get sent twice!"),(0,o.mdx)("h2",{id:"5-keep-going"},"5. Keep going!"),(0,o.mdx)("p",null,"Once you\u2019ve figured out which actions/services are running in which states, and what all the events do, you\u2019ve modelled your first state! You\u2019ll likely have states which branch off your initial state \u2014 so go through those one-by-one and build them out."),(0,o.mdx)("p",null,"You can also leave parts of your statechart unimplemented, and dive into building the frontend/actions/services before returning to modelling again."),(0,o.mdx)("p",null,"I\u2019ve found this approach really useful when getting to grips with what my app does. You can even use a statechart as an early validation tool to confirm that what you\u2019re building is correct."),(0,o.mdx)("p",null,"If you\u2019ve got any more questions, do ",(0,o.mdx)("a",{parentName:"p",href:"https://discord.gg/invite/xstate"},"join our Discord")," and ask in the \u2018modelling-help\u2019 channel."))}h.isMDXComponent=!0}}]);