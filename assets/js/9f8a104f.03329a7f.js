"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[33730],{3905:(t,e,a)=>{a.r(e),a.d(e,{MDXContext:()=>m,MDXProvider:()=>x,mdx:()=>g,useMDXComponents:()=>p,withMDXComponents:()=>s});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function d(){return d=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(t[n]=a[n])}return t},d.apply(this,arguments)}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},d=Object.keys(t);for(n=0;n<d.length;n++)a=d[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(t);for(n=0;n<d.length;n++)a=d[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var m=n.createContext({}),s=function(t){return function(e){var a=p(e.components);return n.createElement(t,d({},e,{components:a}))}},p=function(t){var e=n.useContext(m),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},x=function(t){var e=p(t.components);return n.createElement(m.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,d=t.originalType,l=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),s=p(a),x=r,c=s["".concat(l,".").concat(x)]||s[x]||u[x]||d;return a?n.createElement(c,i(i({ref:e},m),{},{components:a})):n.createElement(c,i({ref:e},m))}));function g(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var d=a.length,l=new Array(d);l[0]=c;var i={};for(var o in e)hasOwnProperty.call(e,o)&&(i[o]=e[o]);i.originalType=t,i.mdxType="string"==typeof t?t:r,l[1]=i;for(var m=2;m<d;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},52844:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>m,contentTitle:()=>i,default:()=>x,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=a(87462),r=a(67294),d=a(3905);const l={title:"StateNodeConfig",hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},i=void 0,o={unversionedId:"xstate.statenodeconfig",id:"xstate.statenodeconfig",title:"StateNodeConfig",description:"StateNodeConfig interface",source:"@site/api/xstate/xstate.statenodeconfig.md",sourceDirName:".",slug:"/xstate.statenodeconfig",permalink:"/statelyai-docs/api/xstate/xstate.statenodeconfig",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{title:"StateNodeConfig",hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},sidebar:"sidebar"},m={},s=[{value:"StateNodeConfig interface",id:"statenodeconfig-interface",level:2},{value:"Properties",id:"properties",level:2}],p={toc:s};function x(t){let{components:e,...a}=t;return(0,d.mdx)("wrapper",(0,n.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,d.mdx)("h2",{id:"statenodeconfig-interface"},"StateNodeConfig interface"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Signature:")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-typescript"},"export interface StateNodeConfig<TContext extends MachineContext, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TTag extends string, TOutput> \n")),(0,d.mdx)("h2",{id:"properties"},"Properties"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Property"),(0,d.mdx)("th",{parentName:"tr",align:null},"Modifiers"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.after"},"after?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.delayedtransitions"},"DelayedTransitions"),(0,d.mdx)(r.Fragment,null),"<","TContext, TEvent, TActor, TAction, TGuard, TDelay",">"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},"(Optional)")," The mapping (or array) of delays (in milliseconds) to their potential transition(s). The delayed transitions are taken after the specified delay in an interpreter.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.always"},"always?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.transitionconfigortarget"},"TransitionConfigOrTarget"),(0,d.mdx)(r.Fragment,null),"<","TContext, TEvent, TEvent, TActor, TAction, TGuard, TDelay",">"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},"(Optional)")," An eventless transition that is always taken when this state node is active.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.description"},"description?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},"string"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},"(Optional)")," A text description of the state node")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.entry"},"entry?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.actions"},"Actions"),(0,d.mdx)(r.Fragment,null),"<","TContext, TEvent, TEvent, undefined, TActor, TAction, TGuard, TDelay",">"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},"(Optional)")," The action(s) to be executed upon entering the state node.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.exit"},"exit?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.actions"},"Actions"),(0,d.mdx)(r.Fragment,null),"<","TContext, TEvent, TEvent, undefined, TActor, TAction, TGuard, TDelay",">"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},"(Optional)")," The action(s) to be executed upon exiting the state node.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.history"},"history?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},"'shallow' ","|"," 'deep' ","|"," boolean ","|"," undefined"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},"(Optional)")," Indicates whether the state node is a history state node, and what type of history: shallow, deep, true (shallow), false (none), undefined (none)")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.id"},"id?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},"string ","|"," undefined"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},"(Optional)")," The unique ID of the state node, which can be referenced as a transition target via the ",(0,d.mdx)("code",null,"#id")," syntax.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.initial"},"initial?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.initialtransitionconfig"},"InitialTransitionConfig"),(0,d.mdx)(r.Fragment,null),"<","TContext, TEvent, TActor, TAction, TGuard, TDelay",">"," ","|"," string ","|"," undefined"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},"(Optional)")," The initial state transition.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.invoke"},"invoke?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.singleorarray"},"SingleOrArray"),(0,d.mdx)(r.Fragment,null),"<",(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.invokeconfig"},"InvokeConfig"),(0,d.mdx)(r.Fragment,null),"<","TContext, TEvent, TActor, TAction, TGuard, TDelay",">",">"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},"(Optional)")," The services to invoke upon entering this state node. These services will be stopped upon exiting this state node.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.meta"},"meta?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},"any"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},"(Optional)")," The meta data associated with this state node, which will be returned in State instances.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.on"},"on?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.transitionsconfig"},"TransitionsConfig"),(0,d.mdx)(r.Fragment,null),"<","TContext, TEvent, TActor, TAction, TGuard, TDelay",">"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},"(Optional)")," The mapping of event types to their potential transition(s).")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.ondone"},"onDone?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},"string ","|"," ",(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.singleorarray"},"SingleOrArray"),(0,d.mdx)(r.Fragment,null),"<",(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.transitionconfig"},"TransitionConfig"),(0,d.mdx)(r.Fragment,null),"<","TContext, ",(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.donestateevent"},"DoneStateEvent"),(0,d.mdx)(r.Fragment,null),", TEvent, TActor, TAction, TGuard, TDelay",">",">"," ","|"," undefined"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("p",null,(0,d.mdx)("em",{parentName:"td"},"(Optional)")," The potential transition(s) to be taken upon reaching a final child state node."),(0,d.mdx)("p",null,"This is equivalent to defining a ",(0,d.mdx)("code",null,"[done(id)]")," transition on this state node's ",(0,d.mdx)("code",null,"on")," property."))),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.order"},"order?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},"number"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},"(Optional)")," The order this state node appears. Corresponds to the implicit document order.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.output"},"output?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.mapper"},"Mapper"),(0,d.mdx)(r.Fragment,null),"<","TContext, TEvent, unknown, TEvent",">"," ","|"," ",(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.nonreducibleunknown"},"NonReducibleUnknown")),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("p",null,(0,d.mdx)("em",{parentName:"td"},"(Optional)"),' The output data sent with the "xstate.done.state.',"_","id","_",'" event if this is a final state node.'),(0,d.mdx)("p",null,"The output data will be evaluated with the current ",(0,d.mdx)("code",null,"context")," and placed on the ",(0,d.mdx)("code",null,".data")," property of the event."))),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.states"},"states?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statesconfig"},"StatesConfig"),(0,d.mdx)(r.Fragment,null),"<","TContext, TEvent, TActor, TAction, TGuard, TDelay, TTag, ",(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.nonreducibleunknown"},"NonReducibleUnknown"),(0,d.mdx)(r.Fragment,null),">"," ","|"," undefined"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},"(Optional)")," The mapping of state node keys to their state node configurations (recursive).")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.tags"},"tags?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.singleorarray"},"SingleOrArray"),(0,d.mdx)(r.Fragment,null),"<","TTag",">"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},"(Optional)")," The tags for this state node, which are accumulated into the ",(0,d.mdx)("code",null,"state.tags")," property.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.target"},"target?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},"string"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},"(Optional)")," A default target for a history state")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.statenodeconfig.type"},"type?")),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null},"'atomic' ","|"," 'compound' ","|"," 'parallel' ","|"," 'final' ","|"," 'history'"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("p",null,(0,d.mdx)("em",{parentName:"td"},"(Optional)")," The type of this state node:"),(0,d.mdx)("p",null,"- ",(0,d.mdx)("code",null,"'atomic'")," - no child state nodes - ",(0,d.mdx)("code",null,"'compound'")," - nested child state nodes (XOR) - ",(0,d.mdx)("code",null,"'parallel'")," - orthogonal nested child state nodes (AND) - ",(0,d.mdx)("code",null,"'history'")," - history state node - ",(0,d.mdx)("code",null,"'final'")," - final state node"))))))}x.isMDXComponent=!0}}]);