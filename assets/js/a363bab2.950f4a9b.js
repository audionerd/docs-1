"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[66142],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>p,mdx:()=>x,useMDXComponents:()=>m,withMDXComponents:()=>c});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},o.apply(this,arguments)}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=a.createContext({}),c=function(e){return function(n){var t=m(n.components);return a.createElement(e,o({},n,{components:t}))}},m=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(d.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=m(t),p=i,u=c["".concat(s,".").concat(p)]||c[p]||h[p]||o;return t?a.createElement(u,l(l({ref:n},d),{},{components:t})):a.createElement(u,l({ref:n},d))}));function x(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=u;var l={};for(var r in n)hasOwnProperty.call(n,r)&&(l[r]=n[r]);l.originalType=e,l.mdxType="string"==typeof e?e:i,s[1]=l;for(var d=2;d<o;d++)s[d]=t[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},55990:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=t(87462),i=(t(67294),t(3905));const o={title:"Actions"},s=void 0,l={unversionedId:"actions",id:"actions",title:"Actions",description:"Actions are fire-and-forget effects. When a state machine transitions, it may execute actions. Actions occur in response to events, and are typically defined on transitions in the actions: ... property. Anywhere you can use an action, you can also declare it as an array to express multiple actions.",source:"@site/docs/actions.mdx",sourceDirName:".",slug:"/actions",permalink:"/statelyai-docs/docs/actions",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/docs/actions.mdx",tags:[],version:"current",frontMatter:{title:"Actions"},sidebar:"docs",previous:{title:"Delayed (after) transitions",permalink:"/statelyai-docs/docs/delayed-transitions"},next:{title:"Guards",permalink:"/statelyai-docs/docs/guards"}},r={},d=[{value:"Using actions in Stately Studio",id:"using-actions-in-stately-studio",level:2},{value:"Add a transition action",id:"add-a-transition-action",level:3},{value:"On the canvas",id:"on-the-canvas",level:3},{value:"Using the event details panel",id:"using-the-event-details-panel",level:3},{value:"Delete a transition action",id:"delete-a-transition-action",level:2},{value:"Using backspace",id:"using-backspace",level:3},{value:"Using the event details panel",id:"using-the-event-details-panel-1",level:3},{value:"Add an entry action or exit action to a state",id:"add-an-entry-action-or-exit-action-to-a-state",level:2},{value:"On the canvas",id:"on-the-canvas-1",level:3},{value:"Using the event details panel",id:"using-the-event-details-panel-2",level:3},{value:"Delete an entry action or exit action from a state",id:"delete-an-entry-action-or-exit-action-from-a-state",level:2},{value:"Using backspace",id:"using-backspace-1",level:3},{value:"Using the event details panel",id:"using-the-event-details-panel-3",level:3},{value:"Add a built-in action",id:"add-a-built-in-action",level:2},{value:"On the canvas",id:"on-the-canvas-2",level:3},{value:"Using the details panel",id:"using-the-details-panel",level:3},{value:"Add a custom action",id:"add-a-custom-action",level:2},{value:"On the canvas",id:"on-the-canvas-3",level:3},{value:"Using the details panel",id:"using-the-details-panel-1",level:3},{value:"Entry and exit actions",id:"entry-and-exit-actions",level:2},{value:"Inline actions",id:"inline-actions",level:2},{value:"Action objects",id:"action-objects",level:2},{value:"Implementing actions",id:"implementing-actions",level:2},{value:"Assign action",id:"assign-action",level:2},{value:"Raise action",id:"raise-action",level:2},{value:"Send-to action",id:"send-to-action",level:2},{value:"Pure action",id:"pure-action",level:2},{value:"Log action",id:"log-action",level:2},{value:"Choose action",id:"choose-action",level:2},{value:"Cancel action",id:"cancel-action",level:2},{value:"Stop action",id:"stop-action",level:2},{value:"Modeling",id:"modeling",level:2},{value:"Shorthands",id:"shorthands",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Cheatsheet",id:"cheatsheet",level:2}],c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",n)},m=c("SkipDownLink"),p=c("EmbedMachine"),h=c("Plus"),u=c("Zap"),x=c("Info"),g=c("Trash"),y=c("Edit"),v={toc:d};function f(e){let{components:n,...t}=e;return(0,i.mdx)("wrapper",(0,a.Z)({},v,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"Actions are fire-and-forget effects. When a state machine transitions, it may execute actions. Actions occur in response to events, and are typically defined on transitions in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"actions: ...")," property. Anywhere you can use an action, you can also declare it as an array to express multiple actions."),(0,i.mdx)("p",null,"Actions can also be on a states\u2019 ",(0,i.mdx)("inlineCode",{parentName:"p"},"entry")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"exit"),", also as a single action or an array."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const feedbackMachine = createMachine({\n  // ...\n  states: {\n    // ...\n    question: {\n      on: {\n        'feedback.good': {\n          actions: [\n            { type: 'track', params: { response: 'good' } }\n          ]\n        }\n      },\n      exit: ['exitAction']\n    }\n    thanks: {\n      entry: ['showConfetti'],\n    }\n  }\n}, {\n  actions: {\n    track: ({ action }) => {\n      track(action.params);\n      // tracks { response: 'good' }\n    },\n    showConfetti: () => {\n      // ...\n    }\n  }\n})\n")),(0,i.mdx)("p",null,"Examples of actions:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Logging a message"),(0,i.mdx)("li",{parentName:"ul"},"Sending a message to another ",(0,i.mdx)("a",{parentName:"li",href:"/statelyai-docs/docs/actors"},"actor")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"Coming soon: more examples"))),(0,i.mdx)(m,{text:"Jump to learning more about entry and exit actions in XState",link:"#entry-and-exit-actions",mdxType:"SkipDownLink"}),(0,i.mdx)("h2",{id:"using-actions-in-stately-studio"},"Using actions in Stately Studio"),(0,i.mdx)("p",null,"In our video player machine, we have entry and exit actions on the Playing state. We use the entry action of playVideo to fire an effect playing the video on entry to the Playing state. We use the exit action of pauseVideo to fire an effect pausing the video when the Playing state is exited."),(0,i.mdx)(p,{name:"video player machine",embedURL:"https://stately.ai/registry/editor/embed/e13bef2b-bb13-4465-96ac-0bc25340688e?machineId=222e2d7a-0ed6-4f2c-843a-e6646d717000",mdxType:"EmbedMachine"}),(0,i.mdx)("h3",{id:"add-a-transition-action"},"Add a transition action"),(0,i.mdx)("p",null,"First, select the event where you want an action to be fired."),(0,i.mdx)("h3",{id:"on-the-canvas"},"On the canvas"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Use the ",(0,i.mdx)(h,{size:18,mdxType:"Plus"})," plus icon button to open the edit menu."),(0,i.mdx)("li",{parentName:"ol"},"Choose ",(0,i.mdx)(u,{size:18,mdxType:"Zap"})," ",(0,i.mdx)("strong",{parentName:"li"},"Action")," from the menu to add an action block."),(0,i.mdx)("li",{parentName:"ol"},"Write your action\u2019s name in the action\u2019s text input.")),(0,i.mdx)("h3",{id:"using-the-event-details-panel"},"Using the event details panel"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Open the event ",(0,i.mdx)(x,{size:18,mdxType:"Info"})," ",(0,i.mdx)("strong",{parentName:"li"},"Details")," panel from the right tool menu."),(0,i.mdx)("li",{parentName:"ol"},"Use the ",(0,i.mdx)("strong",{parentName:"li"},"+ Transition action")," button to add an action block."),(0,i.mdx)("li",{parentName:"ol"},"Write your action\u2019s name in the action\u2019s text input.")),(0,i.mdx)("h2",{id:"delete-a-transition-action"},"Delete a transition action"),(0,i.mdx)("p",null,"First, select the transition action block you want to delete."),(0,i.mdx)("h3",{id:"using-backspace"},"Using backspace"),(0,i.mdx)("p",null,"Use the ",(0,i.mdx)("kbd",null,"Backspace")," key to delete the transition action."),(0,i.mdx)("h3",{id:"using-the-event-details-panel-1"},"Using the event details panel"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Open the event ",(0,i.mdx)(x,{size:18,mdxType:"Info"})," ",(0,i.mdx)("strong",{parentName:"li"},"Details")," panel from the right tool menu."),(0,i.mdx)("li",{parentName:"ol"},"Hover, focus, or select the transition action block to reveal the ",(0,i.mdx)(g,{size:18,mdxType:"Trash"})," trash icon button."),(0,i.mdx)("li",{parentName:"ol"},"Use the ",(0,i.mdx)(g,{size:18,mdxType:"Trash"})," trash icon button to delete the action.")),(0,i.mdx)("h2",{id:"add-an-entry-action-or-exit-action-to-a-state"},"Add an entry action or exit action to a state"),(0,i.mdx)("p",null,"First, select the state you want to have an entry or exit action."),(0,i.mdx)("h3",{id:"on-the-canvas-1"},"On the canvas"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Select the state where you want to add an action."),(0,i.mdx)("li",{parentName:"ol"},"Use the ",(0,i.mdx)(h,{size:18,mdxType:"Plus"})," plus icon button to open the edit menu."),(0,i.mdx)("li",{parentName:"ol"},"Choose ",(0,i.mdx)(u,{size:18,mdxType:"Zap"})," ",(0,i.mdx)("strong",{parentName:"li"},"Entry action")," or ",(0,i.mdx)(u,{size:18,mdxType:"Zap"})," ",(0,i.mdx)("strong",{parentName:"li"},"Exit action")," from the menu to add an action block to the event."),(0,i.mdx)("li",{parentName:"ol"},"Write your action\u2019s name in the action\u2019s text input.")),(0,i.mdx)("h3",{id:"using-the-event-details-panel-2"},"Using the event details panel"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Open the state ",(0,i.mdx)(x,{size:18,mdxType:"Info"})," ",(0,i.mdx)("strong",{parentName:"li"},"Details")," panel from the right tool menu."),(0,i.mdx)("li",{parentName:"ol"},"Use the ",(0,i.mdx)("strong",{parentName:"li"},"+ Effect")," button to open the effects menu, and choose ",(0,i.mdx)("strong",{parentName:"li"},"Add entry action")," or ",(0,i.mdx)("strong",{parentName:"li"},"Add exit action"),"."),(0,i.mdx)("li",{parentName:"ol"},"Write your action\u2019s name in the action\u2019s text input.")),(0,i.mdx)("h2",{id:"delete-an-entry-action-or-exit-action-from-a-state"},"Delete an entry action or exit action from a state"),(0,i.mdx)("p",null,"First, select the action block you want to delete."),(0,i.mdx)("h3",{id:"using-backspace-1"},"Using backspace"),(0,i.mdx)("p",null,"Use the ",(0,i.mdx)("kbd",null,"Backspace")," key to delete the action."),(0,i.mdx)("h3",{id:"using-the-event-details-panel-3"},"Using the event details panel"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Open the event ",(0,i.mdx)(x,{size:18,mdxType:"Info"})," ",(0,i.mdx)("strong",{parentName:"li"},"Details")," panel from the right tool menu."),(0,i.mdx)("li",{parentName:"ol"},"Hover, focus, or select the action block to reveal the ",(0,i.mdx)(g,{size:18,mdxType:"Trash"})," trash icon button."),(0,i.mdx)("li",{parentName:"ol"},"Use the ",(0,i.mdx)(g,{size:18,mdxType:"Trash"})," trash icon button to delete the action.")),(0,i.mdx)("h2",{id:"add-a-built-in-action"},"Add a built-in action"),(0,i.mdx)("p",null,"You can add built-in XState actions which will be formatted in your ",(0,i.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/export-as-code"},"exported code"),". The options are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#assign-action"},"assign"),": assigns data to the state context."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#raise-action"},"raise"),": ",(0,i.mdx)("em",{parentName:"li"},"raises")," an event that is received by the same machine."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#log-action"},"log"),": an easy way to log messages to the console."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#send-to-action"},"sendTo"),": sends an event to a specific actor."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#stop-action"},"stop"),": stops a child actor.")),(0,i.mdx)("p",null,"To add a built-in action, first add a ",(0,i.mdx)("a",{parentName:"p",href:"#add-a-transition-action"},"transition action"),", ",(0,i.mdx)("a",{parentName:"p",href:"#add-an-entry-action-or-exit-action-to-a-state"},"entry action"),", or ",(0,i.mdx)("a",{parentName:"p",href:"#add-an-entry-action-or-exit-action-to-a-state"},"exit action"),"."),(0,i.mdx)("h3",{id:"on-the-canvas-2"},"On the canvas"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Hover, focus, or select the action block to reveal the ",(0,i.mdx)(y,{size:18,mdxType:"Edit"})," edit icon button."),(0,i.mdx)("li",{parentName:"ol"},"Use the ",(0,i.mdx)(y,{size:18,mdxType:"Edit"})," edit icon button to open the ",(0,i.mdx)("strong",{parentName:"li"},"Action")," panel."),(0,i.mdx)("li",{parentName:"ol"},"Choose your desired action from the dropdown menu at the top of the ",(0,i.mdx)("strong",{parentName:"li"},"Action")," panel."),(0,i.mdx)("li",{parentName:"ol"},"Fill out the required corresponding action input fields.")),(0,i.mdx)("h3",{id:"using-the-details-panel"},"Using the details panel"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Open the state, or event ",(0,i.mdx)(x,{size:18,mdxType:"Info"})," ",(0,i.mdx)("strong",{parentName:"li"},"Details")," panel from the right tool menu."),(0,i.mdx)("li",{parentName:"ol"},"Hover, focus, or select the action block to reveal the ",(0,i.mdx)(y,{size:18,mdxType:"Edit"})," edit icon button."),(0,i.mdx)("li",{parentName:"ol"},"Use the ",(0,i.mdx)(y,{size:18,mdxType:"Edit"})," edit icon button to open the ",(0,i.mdx)("strong",{parentName:"li"},"Action")," panel."),(0,i.mdx)("li",{parentName:"ol"},"Choose your desired action from the dropdown menu at the top of the ",(0,i.mdx)("strong",{parentName:"li"},"Action")," panel."),(0,i.mdx)("li",{parentName:"ol"},"Fill out the required corresponding action input fields.")),(0,i.mdx)("h2",{id:"add-a-custom-action"},"Add a custom action"),(0,i.mdx)("p",null,"You can also add custom actions with a custom action type and parameters which will be formatted as ",(0,i.mdx)("a",{parentName:"p",href:"#action-objects"},"XState action objects")," in your ",(0,i.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/export-as-code"},"exported code"),"."),(0,i.mdx)("p",null,"First, add a ",(0,i.mdx)("a",{parentName:"p",href:"#add-a-transition-action"},"transition action"),", ",(0,i.mdx)("a",{parentName:"p",href:"#add-an-entry-action-or-exit-action-to-a-state"},"entry action"),", or ",(0,i.mdx)("a",{parentName:"p",href:"#add-an-entry-action-or-exit-action-to-a-state"},"exit action"),"."),(0,i.mdx)("h3",{id:"on-the-canvas-3"},"On the canvas"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Hover, focus, or select the action block to reveal the ",(0,i.mdx)(y,{size:18,mdxType:"Edit"})," edit icon button."),(0,i.mdx)("li",{parentName:"ol"},"Use the ",(0,i.mdx)(y,{size:18,mdxType:"Edit"})," edit icon button to open the ",(0,i.mdx)("strong",{parentName:"li"},"Action")," panel."),(0,i.mdx)("li",{parentName:"ol"},"Custom action is selected by default. Add your custom action type in the ",(0,i.mdx)("strong",{parentName:"li"},"Action type")," text input."),(0,i.mdx)("li",{parentName:"ol"},"Add your custom ",(0,i.mdx)("strong",{parentName:"li"},"Action parameters")," using the ",(0,i.mdx)("strong",{parentName:"li"},"Parameter key")," and ",(0,i.mdx)("strong",{parentName:"li"},"Parameter value")," text input pairs.")),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"#action-objects"},"Read about action objects below for more on action types and and parameters"),"."),(0,i.mdx)("h3",{id:"using-the-details-panel-1"},"Using the details panel"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Open the state, or event ",(0,i.mdx)(x,{size:18,mdxType:"Info"})," ",(0,i.mdx)("strong",{parentName:"li"},"Details")," panel from the right tool menu."),(0,i.mdx)("li",{parentName:"ol"},"Hover, focus, or select the action block to reveal the ",(0,i.mdx)(y,{size:18,mdxType:"Edit"})," edit icon button."),(0,i.mdx)("li",{parentName:"ol"},"Use the ",(0,i.mdx)(y,{size:18,mdxType:"Edit"})," edit icon button to open the ",(0,i.mdx)("strong",{parentName:"li"},"Action")," panel."),(0,i.mdx)("li",{parentName:"ol"},"Custom action is selected by default. Add your custom action type in the ",(0,i.mdx)("strong",{parentName:"li"},"Action type")," text input."),(0,i.mdx)("li",{parentName:"ol"},"Add your custom ",(0,i.mdx)("strong",{parentName:"li"},"Action parameters")," using the ",(0,i.mdx)("strong",{parentName:"li"},"Parameter key")," and ",(0,i.mdx)("strong",{parentName:"li"},"Parameter value")," text input pairs.")),(0,i.mdx)("h2",{id:"entry-and-exit-actions"},"Entry and exit actions"),(0,i.mdx)("p",null,"Entry actions are actions that occur on any transition that enters a state node."),(0,i.mdx)("p",null,"Coming soon\u2026 illustation"),(0,i.mdx)("p",null,"Exit actions are actions that occur on any transition that exits a state node."),(0,i.mdx)("p",null,"Coming soon\u2026 illustration"),(0,i.mdx)("p",null,"Entry and exit actions are defined using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"entry: ...")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"exit: ...")," attributes on a state node. You can fire multiple entry and exit actions on a state. Top-level final states cannot have exit actions, since the machine is stopped and no further transitions can occur."),(0,i.mdx)("p",null,"Coming soon\u2026 example"),(0,i.mdx)("h2",{id:"inline-actions"},"Inline actions"),(0,i.mdx)("p",null,"You can declare actions as inline functions:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst feedbackMachine = createMachine({\n  entry: [\n    // highlight-start\n    // Inline action\n    ({ context, event }) => {\n      console.log(/* ... */);\n    },\n    // highlight-end\n  ],\n});\n")),(0,i.mdx)("p",null,"Inline actions are useful for prototyping and simple cases but we generally recommended using serialized actions."),(0,i.mdx)("h2",{id:"action-objects"},"Action objects"),(0,i.mdx)("p",null,"Action objects have an action ",(0,i.mdx)("inlineCode",{parentName:"p"},"type")," and an optional ",(0,i.mdx)("inlineCode",{parentName:"p"},"params")," object:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Action ",(0,i.mdx)("inlineCode",{parentName:"li"},"type")," describes the action. Actions with the same type have the same implementation."),(0,i.mdx)("li",{parentName:"ul"},"Action ",(0,i.mdx)("inlineCode",{parentName:"li"},"params")," hold parameterized values that are relevant to the action.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const feedbackMachine = createMachine({\n  // ...\n  states: {\n    // ...\n    question: {\n      on: {\n        'feedback.good': {\n          actions: [\n            // highlight-start\n            {\n              // Action type\n              type: 'track',\n              // Action params\n              params: { response: 'good' },\n            },\n            // highlight-end\n          ],\n        },\n      },\n    },\n  },\n});\n")),(0,i.mdx)("h2",{id:"implementing-actions"},"Implementing actions"),(0,i.mdx)("p",null,"You can add the implementations for named actions in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"actions")," property of the 2nd argument of ",(0,i.mdx)("inlineCode",{parentName:"p"},"createMachine(config, implementations)"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const feedbackMachine = createMachine(\n  {\n    // Machine config\n    // ...\n  },\n  {\n    // highlight-start\n    actions: {\n      track: ({ context, event }) => {\n        // Action implementation\n        // ...\n      },\n    },\n    // highlight-end\n  },\n);\n")),(0,i.mdx)("p",null,"These implementations can later be overridden by providing implementations in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"machine.provide(implementations)")," method, which creates a new machine with the same config but with the provided implementations:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const feedbackActor = createActor(\n  // highlight-start\n  feedbackMachine.provide({\n    actions: {\n      track: ({ context, event }) => {\n        // Overridden action implementation\n        // ...\n      },\n    },\n  }),\n  // highlight-end\n);\n")),(0,i.mdx)("h2",{id:"assign-action"},"Assign action"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"assign(...)")," action is a special action that assigns data to the state context. The ",(0,i.mdx)("inlineCode",{parentName:"p"},"assignments")," argument in ",(0,i.mdx)("inlineCode",{parentName:"p"},"assign(assignments)")," is where assignments to context are specified."),(0,i.mdx)("p",null,"Assignments can be an object of key-value pairs where the keys are ",(0,i.mdx)("inlineCode",{parentName:"p"},"context")," keys and the values are either static values or expressions that return the new value:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const countMachine = createMachine({\n  context: {\n    count: 0,\n  },\n  on: {\n    increment: {\n      actions: assign({\n        count: ({ context, event }) => context.count + event.value,\n      }),\n    },\n  },\n});\n\nconst countActor = createActor(countMachine);\ncountActor.subscribe((state) => {\n  console.log(state.context.count);\n});\ncountActor.start();\n// logs 0\n\ncountActor.send({ type: 'increment', value: 3 });\n// logs 3\n\ncountActor.send({ type: 'increment', value: 2 });\n// logs 5\n")),(0,i.mdx)("p",null,"For more dynamic assignments, the ",(0,i.mdx)("inlineCode",{parentName:"p"},"assignments")," argument may also be a function that returns the partial or full ",(0,i.mdx)("inlineCode",{parentName:"p"},"context")," value:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const countMachine = createMachine({\n  context: {\n    count: 0,\n  },\n  on: {\n    increment: {\n      // highlight-start\n      actions: assign(({ context, event }) => {\n        return {\n          count: context.count + event.value,\n        };\n      }),\n      // highlight-end\n    },\n  },\n});\n")),(0,i.mdx)("h2",{id:"raise-action"},"Raise action"),(0,i.mdx)("p",null,"The raise action is a special action that ",(0,i.mdx)("em",{parentName:"p"},"raises")," an event that is received by the same machine. Raising an event is how a machine can \u201csend\u201d an event to itself:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"actions: raise({ type: 'someEvent', data: 'someData' });\n")),(0,i.mdx)("p",null,"Internally, when an event is raised, it is placed into an \u201cinternal event queue\u201d. After the current transition is finished, these events are processed in insertion order (",(0,i.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics)"},"first-in first-out, or FIFO"),"). External events are only processed once all events in the internal event queue are processed."),(0,i.mdx)("p",null,"Raised events can be dynamic:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"raise(({ context, event }) => ({ type: 'SOME_EVENT' }));\n")),(0,i.mdx)("p",null,"Events can also be raised with a delay, which will not place them in the internal event queue, since they will not be immediately processed:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"actions: raise({ type: 'someEvent' }, { delay: 1000 });\n")),(0,i.mdx)("h2",{id:"send-to-action"},"Send-to action"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"sendTo(...)")," action is a special action that sends an event to a specific actor."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  on: {\n    transmit: {\n      // highlight-start\n      actions: sendTo('someActor', { type: 'someEvent' }),\n      // highlight-end\n    },\n  },\n});\n")),(0,i.mdx)("p",null,"The event can be dynamic:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  on: {\n    transmit: {\n      // highlight-start\n      actions: sendTo('someActor', ({ context, event }) => {\n        return { type: 'someEvent', data: context.someData };\n      }),\n      // highlight-end\n    },\n  },\n});\n")),(0,i.mdx)("p",null,"The destination actor can be the actor ID or the actor reference itself:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  context: ({ spawn }) => ({\n    someActorRef: spawn(fromPromise(/* ... */)),\n  }),\n  on: {\n    transmit: {\n      // highlight-start\n      actions: sendTo(({ context }) => context.someActorRef, {\n        type: 'someEvent',\n      }),\n      // highlight-end\n    },\n  },\n});\n")),(0,i.mdx)("p",null,"Other options, such as ",(0,i.mdx)("inlineCode",{parentName:"p"},"delay")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"id"),", can be passed as the 3rd argument:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  on: {\n    transmit: {\n      actions: sendTo(\n        'someActor',\n        { type: 'someEvent' },\n        // highlight-start\n        {\n          id: 'transmission',\n          delay: 1000,\n        },\n        // highlight-end\n      ),\n    },\n  },\n});\n")),(0,i.mdx)("h2",{id:"pure-action"},"Pure action"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"pure(...)"),' action is a higher-level action that returns an array of actions to be executed, without actually executing any effects (hence the name "pure").'),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Example coming soon")),(0,i.mdx)("h2",{id:"log-action"},"Log action"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"log(...)")," action is an easy way to log messages to the console."),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Example coming soon")),(0,i.mdx)("h2",{id:"choose-action"},"Choose action"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"choose(...)")," action is a higher-level action that returns an array of actions to be executed."),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Example coming soon")),(0,i.mdx)("h2",{id:"cancel-action"},"Cancel action"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"cancel(...)")," action cancels a delayed ",(0,i.mdx)("inlineCode",{parentName:"p"},"sendTo(...)")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"raise(...)")," action by their IDs:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, sendTo, cancel } from 'xstate';\n\nconst machine = createMachine({\n  on: {\n    event: {\n      actions: sendTo(\n        'someActor',\n        { type: 'someEvent' },\n        {\n          // highlight-next-line\n          id: 'someId',\n          delay: 1000,\n        },\n      ),\n    },\n    cancelEvent: {\n      // highlight-next-line\n      actions: cancel('someId'),\n    },\n  },\n});\n")),(0,i.mdx)("h2",{id:"stop-action"},"Stop action"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"stop(...)")," action stops a child actor. Actors can only be stopped from their parent actor:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  context: ({ spawn }) => ({\n    spawnedRef: spawn(fromPromise(/* ... */), { id: 'spawnedId' }),\n  }),\n  on: {\n    stopById: {\n      actions: stop('spawnedId'),\n    },\n    stopByRef: {\n      actions: stop(({ context }) => context.spawnedRef),\n    },\n  },\n});\n")),(0,i.mdx)("h2",{id:"modeling"},"Modeling"),(0,i.mdx)("p",null,"If you only need to execute actions in response to events, you can create a ",(0,i.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/transitions#self-transitions"},"self-transition")," that only has ",(0,i.mdx)("inlineCode",{parentName:"p"},"actions: [ ... ]")," defined. For example, a machine that only needs to assign to ",(0,i.mdx)("inlineCode",{parentName:"p"},"context")," in transitions may look like this:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const countMachine = createMachine({\n  context: {\n    count: 0,\n  },\n  // highlight-start\n  on: {\n    increment: {\n      actions: assign({\n        count: ({ context, event }) => context.count + event.value,\n      }),\n    },\n    decrement: {\n      actions: assign({\n        count: ({ context, event }) => context.count - event.value,\n      }),\n    },\n  },\n  // highlight-end\n});\n")),(0,i.mdx)("h2",{id:"shorthands"},"Shorthands"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"For simple actions, can specify action string instead of object"),(0,i.mdx)("li",{parentName:"ul"},"Objects preferred for consistency")),(0,i.mdx)("h2",{id:"typescript"},"TypeScript"),(0,i.mdx)("p",null,"You can strongly type the ",(0,i.mdx)("inlineCode",{parentName:"p"},"actions")," of your machine in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"types.actions")," property of the machine config."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  types: {} as {\n    // highlight-start\n    actions:\n      | {\n          type: 'track';\n          params: {\n            response: string;\n          };\n        }\n      | { type: 'increment'; params: { value: number } };\n    // highlight-end\n  },\n  // ...\n  entry: [\n    { type: 'track', params: { response: 'good' } },\n    { type: 'increment', params: { value: 1 } },\n  ],\n});\n")),(0,i.mdx)("h2",{id:"cheatsheet"},"Cheatsheet"),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Coming soon")))}f.isMDXComponent=!0}}]);