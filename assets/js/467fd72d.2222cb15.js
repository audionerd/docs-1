"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[37144],{3905:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>l,MDXProvider:()=>p,mdx:()=>x,useMDXComponents:()=>c,withMDXComponents:()=>m});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},r.apply(this,arguments)}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=n.createContext({}),m=function(e){return function(t){var a=c(t.components);return n.createElement(e,r({},t,{components:a}))}},c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),m=c(a),p=s,h=m["".concat(i,".").concat(p)]||m[p]||u[p]||r;return a?n.createElement(h,o(o({ref:t},l),{},{components:a})):n.createElement(h,o({ref:t},l))}));function x(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,i=new Array(r);i[0]=h;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var l=2;l<r;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},93634:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294);const s="embed_rxbU";var r=a(92949);function i(e){let{name:t,embedURL:a}=e;const{colorMode:i}=(0,r.I)();return n.createElement("iframe",{loading:"lazy",src:o(a,{colorMode:i}),className:s},n.createElement("a",{href:a},"View the ",n.createElement("em",null,t)," machine in Stately Studio"),".")}function o(e,t){const a=new URL(e);for(const n in t)a.searchParams.set(n,t[n]);return a.toString()}},56407:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294);const s="skip_WFk4",r="text_YVFA";function i(e){let{link:t,text:a}=e;return n.createElement("p",null,n.createElement("a",{href:t,className:s},n.createElement("span",null,"\u2193"),n.createElement("span",{className:r},a),n.createElement("span",null,"\u2193")))}},55527:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(87462),s=(a(67294),a(3905)),r=a(93634),i=a(56407);const o={title:"State"},d=void 0,l={unversionedId:"states",id:"states",title:"State",description:"A state describes the machine\u2019s status or mode, which could be as simple as\xa0Paused\xa0and\xa0Playing. A state machine can only be in one state at a time.",source:"@site/docs/states.mdx",sourceDirName:".",slug:"/states",permalink:"/docs/states",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/docs/states.mdx",tags:[],version:"current",frontMatter:{title:"State"},sidebar:"docs",previous:{title:"State machines",permalink:"/docs/machines"},next:{title:"Context",permalink:"/docs/context"}},m={},c=[{value:"Using states in Stately Studio",id:"using-states-in-stately-studio",level:2},{value:"Create a state",id:"create-a-state",level:3},{value:"Create a new target state",id:"create-a-new-target-state",level:4},{value:"Create a new child state",id:"create-a-new-child-state",level:4},{value:"Delete a state",id:"delete-a-state",level:3},{value:"Using the context menu",id:"using-the-context-menu",level:4},{value:"Using backspace",id:"using-backspace",level:4},{value:"State object",id:"state-object",level:2},{value:"Accessing state snapshots",id:"accessing-state-snapshots",level:2},{value:"State value",id:"state-value",level:2},{value:"State context",id:"state-context",level:2},{value:"State children",id:"state-children",level:2},{value:"<code>state.can(eventType)</code>",id:"statecaneventtype",level:2},{value:"<code>state.hasTag(tag)</code>",id:"statehastagtag",level:2},{value:"<code>state.matches(stateValue)</code>",id:"statematchesstatevalue",level:2},{value:"<code>state.output</code>",id:"stateoutput",level:2},{value:"<code>state.meta</code>",id:"statemeta",level:2},{value:"<code>state.toStrings</code>",id:"statetostrings",level:2},{value:"State descriptions",id:"state-descriptions",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Cheatsheet",id:"cheatsheet",level:2},{value:"Further resources",id:"further-resources",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.mdx)("div",t)},u=p("Plus"),h=p("MoreHorizontal"),x={toc:c};function g(e){let{components:t,...a}=e;return(0,s.mdx)("wrapper",(0,n.Z)({},x,a,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("p",null,"A state describes the machine\u2019s status or mode, which could be as simple as\xa0",(0,s.mdx)("em",{parentName:"p"},"Paused"),"\xa0and\xa0",(0,s.mdx)("em",{parentName:"p"},"Playing"),". A state machine can only be in one state at a time."),(0,s.mdx)("p",null,"These states are \u201cfinite\u201d; the machine can only move through the states you\u2019ve pre-defined."),(0,s.mdx)(r.Z,{name:"Video player",embedURL:"https://stately.ai/registry/editor/embed/e13bef2b-bb13-4465-96ac-0bc25340688e?machineId=741f69fd-7f01-4932-9407-6871e225bb6d",mdxType:"EmbedMachine"}),(0,s.mdx)("admonition",{type:"tip"},(0,s.mdx)("p",{parentName:"admonition"},"Watch our ",(0,s.mdx)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=z-6yhmSWUcc&list=PLvWgkXBB3dd4I_l-djWVU2UGPyBgKfnTQ&index=2"},"\u201cWhat are states?\u201d video on YouTube")," (53s).")),(0,s.mdx)(i.Z,{text:"Jump to learning more about the state object in XState",link:"#state-object",mdxType:"SkipDownLink"}),(0,s.mdx)("h2",{id:"using-states-in-stately-studio"},"Using states in Stately Studio"),(0,s.mdx)("p",null,"In Stately Studio, the rounded rectangle boxes are states. The ",(0,s.mdx)("strong",{parentName:"p"},"!")," warning icon in the machine above indicates an unreachable state. The state is unreachable because it isn\u2019t connected to the ",(0,s.mdx)("a",{parentName:"p",href:"/docs/initial-states"},"initial state")," by a ",(0,s.mdx)("a",{parentName:"p",href:"/docs/transitions"},"transition"),"."),(0,s.mdx)("h3",{id:"create-a-state"},"Create a state"),(0,s.mdx)("admonition",{type:"tip"},(0,s.mdx)("p",{parentName:"admonition"},"The fastest way to create a new state is by double-clicking in any empty space on the canvas.")),(0,s.mdx)("h4",{id:"create-a-new-target-state"},"Create a new target state"),(0,s.mdx)("p",null,"Each transition has a source state and a target state. To create a new target state from a source state:"),(0,s.mdx)("ol",null,(0,s.mdx)("li",{parentName:"ol"},"Select the source state."),(0,s.mdx)("li",{parentName:"ol"},"Press or drag from one of the ",(0,s.mdx)(u,{size:18,mdxType:"Plus"})," handles on the left, right and bottom sides of the selected state, and release to create a connecting transition, event and new state.")),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"/docs/transitions#using-transitions-and-events-in-stately-studio"},"Read more about transitioning between source and target states"),"."),(0,s.mdx)("h4",{id:"create-a-new-child-state"},"Create a new child state"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"/docs/parent-states"},"How to create child and parent states"),"."),(0,s.mdx)("h3",{id:"delete-a-state"},"Delete a state"),(0,s.mdx)("p",null,"First, select the state you want to delete."),(0,s.mdx)("h4",{id:"using-the-context-menu"},"Using the context menu"),(0,s.mdx)("ol",null,(0,s.mdx)("li",{parentName:"ol"},"Use the ",(0,s.mdx)(h,{size:18,mdxType:"MoreHorizontal"})," triple dot icon button to open the Edit menu."),(0,s.mdx)("li",{parentName:"ol"},"Choose ",(0,s.mdx)("strong",{parentName:"li"},"Delete")," to delete the selected state.")),(0,s.mdx)("h4",{id:"using-backspace"},"Using backspace"),(0,s.mdx)("p",null,"Use the ",(0,s.mdx)("kbd",null,"Backspace")," key to delete the selected state."),(0,s.mdx)("h2",{id:"state-object"},"State object"),(0,s.mdx)("p",null,"The state object represents the current state of a running machine (",(0,s.mdx)("a",{parentName:"p",href:"/docs/actor-model"},"actor"),") and contains the following properties:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},(0,s.mdx)("inlineCode",{parentName:"strong"},"value")),": the current state value, which is either:",(0,s.mdx)("ul",{parentName:"li"},(0,s.mdx)("li",{parentName:"ul"},"a string representing a simple state like ",(0,s.mdx)("inlineCode",{parentName:"li"},"'playing'"),", or:"),(0,s.mdx)("li",{parentName:"ul"},"an object representing nested states like ",(0,s.mdx)("inlineCode",{parentName:"li"},"{ paused: 'buffering' }"),"."))),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},(0,s.mdx)("inlineCode",{parentName:"strong"},"context")),": the current ",(0,s.mdx)("a",{parentName:"li",href:"/docs/context"},"context")," (extended state.)"),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},(0,s.mdx)("inlineCode",{parentName:"strong"},"meta")),": an object containing state node meta data.")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"const feedbackMachine = createMachine({\n  id: 'feedback',\n  initial: 'question',\n  context: {\n    feedback: '',\n  },\n  states: {\n    question: {\n      meta: {\n        question: 'How was your experience?',\n      },\n    },\n  },\n});\n\nconst actor = createActor(feedbackMachine);\nactor.start();\n\nconsole.log(actor.getSnapshot());\n// Logs an object containing:\n// {\n//   value: 'question',\n//   context: {\n//     feedback: ''\n//   },\n//   meta: {\n//     'feedback.question': {\n//       question: 'How was your experience?'\n//     }\n//   }\n// }\n")),(0,s.mdx)("h2",{id:"accessing-state-snapshots"},"Accessing state snapshots"),(0,s.mdx)("p",null,"You can access an actor\u2019s the emitted state (or ",(0,s.mdx)("em",{parentName:"p"},"snapshot"),") by subscribing to or reading from the actor\u2019s ",(0,s.mdx)("inlineCode",{parentName:"p"},".getSnapshot()")," method."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"const actor = createActor(feedbackMachine);\n\nactor.subscribe((snapshot) => {\n  console.log(snapshot);\n  // logs the current snapshot state, e.g.:\n  // { value: 'question', ... }\n  // { value: 'thanks', ... }\n});\n\nactor.start();\n\nconsole.log(actor.getSnapshot());\n// logs { value: 'question', ... }\n")),(0,s.mdx)("h2",{id:"state-value"},"State value"),(0,s.mdx)("p",null,"A state machine with nested states (or ",(0,s.mdx)("em",{parentName:"p"},(0,s.mdx)("a",{parentName:"em",href:"/docs/state-machines-and-statecharts#what-is-a-statechart"},"statechart")),") is a tree-like structure where each node is a ",(0,s.mdx)("em",{parentName:"p"},"state node"),". The root state node is the top-level state node that represents the entire machine. The root node may have child state nodes, which may have child state nodes, and so on."),(0,s.mdx)("p",null,"The ",(0,s.mdx)("strong",{parentName:"p"},"state value")," is an object that represents all the active state nodes in a machine. For state machines that have state nodes without child state nodes, the state value is a string:"),(0,s.mdx)("p",null,"Coming soon\u2026 a visual example."),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("inlineCode",{parentName:"li"},"state.value === 'question'")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("inlineCode",{parentName:"li"},"state.value === 'thanks'")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("inlineCode",{parentName:"li"},"state.value === 'closed'"))),(0,s.mdx)("p",null,"For state machines with parent state nodes, the state value is an object:"),(0,s.mdx)("p",null,"Coming soon\u2026 a visual example."),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("inlineCode",{parentName:"li"},"state.value === { form: 'invalid' }")," - this represents a state machine with an active child node with key ",(0,s.mdx)("inlineCode",{parentName:"li"},"form")," that has an active child node with key ",(0,s.mdx)("inlineCode",{parentName:"li"},"invalid"))),(0,s.mdx)("p",null,"For state machines with ",(0,s.mdx)("a",{parentName:"p",href:"/docs/parallel-states"},"parallel state nodes"),", the state value contains object(s) with multiple keys for each state node region:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"state.value ===\n  {\n    monitor: 'on',\n    mode: 'dark',\n  };\n")),(0,s.mdx)("p",null,"State machines may also have no state nodes other than the root state node. For these state machines, the state value is ",(0,s.mdx)("inlineCode",{parentName:"p"},"null"),"."),(0,s.mdx)("h2",{id:"state-context"},"State context"),(0,s.mdx)("p",null,"State machines can have ",(0,s.mdx)("a",{parentName:"p",href:"/docs/context"},"context"),", which is an object that represents the extended state of the machine. The context is immutable, and can only be updated by ",(0,s.mdx)("a",{parentName:"p",href:"/docs/actions#assign-action"},"assigning")," to it in an action. You can read the ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.context")," property to get the current context."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"const currentState = feedbackActor.getSnapshot();\n\nconsole.log(currentState.context);\n// logs { feedback: '' }\n")),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},"Object is empty ",(0,s.mdx)("inlineCode",{parentName:"li"},"{}")," (default) if context is not specified in the machine config"),(0,s.mdx)("li",{parentName:"ul"},"Never mutate this object; should be treated as immutable/read-only")),(0,s.mdx)("h2",{id:"state-children"},"State children"),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.children")," property represents all currently spawned/invoked actors in the current state. It is an object with keys representing the actor IDs and values representing the ",(0,s.mdx)("inlineCode",{parentName:"p"},"ActorRef")," instances."),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},"This is where you access spawned/invoked actors by their ID"),(0,s.mdx)("li",{parentName:"ul"},"This is why you should give spawned/invoked actors IDs"),(0,s.mdx)("li",{parentName:"ul"},"Stopped actors will not appear here")),(0,s.mdx)("h2",{id:"statecaneventtype"},(0,s.mdx)("inlineCode",{parentName:"h2"},"state.can(eventType)")),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.can(event)")," method determines whether an ",(0,s.mdx)("inlineCode",{parentName:"p"},"event")," object will cause a state change if sent to the machine actor. The method will return ",(0,s.mdx)("inlineCode",{parentName:"p"},"true")," if the state will change due to the ",(0,s.mdx)("inlineCode",{parentName:"p"},"event")," being sent; otherwise the method will return ",(0,s.mdx)("inlineCode",{parentName:"p"},"false"),":"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js"},"const feedbackMachine = createMachine({\n  // ...\n  states: {\n    form: {\n      // ...\n      on: {\n        'feedback.submit': {\n          guard: 'isValid',\n          target: 'thanks',\n        },\n      },\n    },\n  },\n});\n\nconst feedbackActor = createActor(feedbackMachine).start();\n\n// ...\n\nconst currentState = feedbackActor.getSnapshot();\n\nconsole.log(currentState.can({ type: 'feedback.submit' }));\n// logs `true` if the 'feedback.submit' event will cause a transition, which will occur if:\n// - the current state is 'form'\n// - the 'isValid' guard evaluates to `true`\n")),(0,s.mdx)("p",null,"A state is considered \u201cchanged\u201d if a transition is enabled for the given ",(0,s.mdx)("inlineCode",{parentName:"p"},"state")," and ",(0,s.mdx)("inlineCode",{parentName:"p"},"event")," object."),(0,s.mdx)("admonition",{type:"danger"},(0,s.mdx)("p",{parentName:"admonition"},"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.can(...)")," method will also check transition guards by executing them. Transition guards should be pure functions.")),(0,s.mdx)("h2",{id:"statehastagtag"},(0,s.mdx)("inlineCode",{parentName:"h2"},"state.hasTag(tag)")),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.hasTag(tag)")," method determines whether any state nodes in the current state value have the given ",(0,s.mdx)("inlineCode",{parentName:"p"},"tag"),". This is useful for determining whether a state is a particular state, or whether a state is a member of a particular state group."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js"},"const feedbackMachine = createMachine({\n  // ...\n  states: {\n    submitting: {\n      tags: ['loading'],\n      // ...\n    },\n  },\n});\n\nconst feedbackActor = createActor(feedbackMachine).start();\n\nconst currentState = feedbackActor.getSnapshot();\n\nconst showLoadingSpinner = currentState.hasTag('loading');\n")),(0,s.mdx)("p",null,"Prefer using ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.hasTag(tag)")," over ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.matches(stateValue)"),", as ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.hasTag(tag)")," is more resilient to changes in the machine."),(0,s.mdx)("h2",{id:"statematchesstatevalue"},(0,s.mdx)("inlineCode",{parentName:"h2"},"state.matches(stateValue)")),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.matches(stateValue)")," method determines whether the current ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.value")," ",(0,s.mdx)("em",{parentName:"p"},"matches")," the given ",(0,s.mdx)("inlineCode",{parentName:"p"},"stateValue"),". If the current ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.value"),' is a "subset" of the provided ',(0,s.mdx)("inlineCode",{parentName:"p"},"stateValue"),", then the method will return ",(0,s.mdx)("inlineCode",{parentName:"p"},"true"),"."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"// state.value === 'question'\nstate.matches('question'); // true\n\n// state.value === { form: 'invalid' }\nstate.matches('form'); // true\nstate.matches('question'); // false\nstate.matches({ form: 'invalid' }); // true\nstate.matches({ form: 'valid' }); // false\n")),(0,s.mdx)("h2",{id:"stateoutput"},(0,s.mdx)("inlineCode",{parentName:"h2"},"state.output")),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.output")," property represents the output data of a state machine in its final state."),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("inlineCode",{parentName:"li"},"state.done")," will be ",(0,s.mdx)("inlineCode",{parentName:"li"},"true"))),(0,s.mdx)("h2",{id:"statemeta"},(0,s.mdx)("inlineCode",{parentName:"h2"},"state.meta")),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.meta")," property represents the metadata of all the state nodes in the ",(0,s.mdx)("inlineCode",{parentName:"p"},"state"),". It is an object with keys that represent the state node IDs, and values that are the metadata of that state node."),(0,s.mdx)("h2",{id:"statetostrings"},(0,s.mdx)("inlineCode",{parentName:"h2"},"state.toStrings")),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.toStrings()")," method returns an array of strings that represent ",(0,s.mdx)("em",{parentName:"p"},"all")," of the state value paths. For example, assuming the current ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.value")," is ",(0,s.mdx)("inlineCode",{parentName:"p"},"{ red: 'stop' }"),":"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js"},"console.log(state.value);\n// => { red: 'stop' }\n\nconsole.log(state.toStrings());\n// => ['red', 'red.stop']\n")),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"state.toStrings()")," method is useful for representing the current state in string-based environments, such as in CSS classes or data-attributes."),(0,s.mdx)("h2",{id:"state-descriptions"},"State descriptions"),(0,s.mdx)("p",null,"You can add ",(0,s.mdx)("inlineCode",{parentName:"p"},".description")," to states to describe their purpose and share related notes with your team. In Stately Studio\u2019s editor, these descriptions are rendered in the machine and support markdown including links, images, and lists. ",(0,s.mdx)("a",{parentName:"p",href:"/docs/descriptions"},"Read more about descriptions in Stately Studio"),"."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},'states: {\n  "Loading Move Destinations": {\n    // highlight-start\n    description:\n      "Load data from the server based on the entity\'s id and type (project or machine).\\nResult includes the entity\'s current location, and the list or tree of valid destination options to which the user may move that entity.",\n    // highlight-end\n    invoke: {\n      src: "loadMoveData",\n      id: "loadMoveData",\n      onDone: [\n        {\n          target: "Destination Menu",\n          actions: "setDestinations",\n        },\n      ],\n      onError: [\n        {\n          target: "Data Loading Error",\n        },\n      ],\n    },\n  },\n}\n')),(0,s.mdx)("h2",{id:"typescript"},"TypeScript"),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"Coming soon")),(0,s.mdx)("h2",{id:"cheatsheet"},"Cheatsheet"),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"Coming soon")),(0,s.mdx)("h2",{id:"further-resources"},"Further resources"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"/docs/persistence"},"Persisting state")))}g.isMDXComponent=!0}}]);