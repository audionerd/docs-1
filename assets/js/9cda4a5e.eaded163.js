"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[94146],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>l,MDXProvider:()=>h,mdx:()=>v,useMDXComponents:()=>d,withMDXComponents:()=>p});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},i.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){return function(n){var t=d(n.components);return a.createElement(e,i({},n,{components:t}))}},d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},h=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(t),h=r,u=p["".concat(o,".").concat(h)]||p[h]||m[h]||i;return t?a.createElement(u,c(c({ref:n},l),{},{components:t})):a.createElement(u,c({ref:n},l))}));function v(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},69207:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var a=t(87462),r=(t(67294),t(3905));const i={title:"Machines",description:"Machine actors enable you to create machines that can act as reusable modules across your application. You can pass a machine directly to the invoke src."},o=void 0,c={unversionedId:"xstate/actors/machines",id:"version-4/xstate/actors/machines",title:"Machines",description:"Machine actors enable you to create machines that can act as reusable modules across your application. You can pass a machine directly to the invoke src.",source:"@site/versioned_docs/version-4/xstate/actors/machines.mdx",sourceDirName:"xstate/actors",slug:"/xstate/actors/machines",permalink:"/docs/xstate-v4/xstate/actors/machines",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/actors/machines.mdx",tags:[],version:"4",frontMatter:{title:"Machines",description:"Machine actors enable you to create machines that can act as reusable modules across your application. You can pass a machine directly to the invoke src."},sidebar:"tutorialSidebar",previous:{title:"Callbacks",permalink:"/docs/xstate-v4/xstate/actors/callbacks"},next:{title:"Observables",permalink:"/docs/xstate-v4/xstate/actors/observables"}},s={},l=[{value:"sendParent",id:"sendparent",level:2},{value:"Only use sendParent on child machines",id:"only-use-sendparent-on-child-machines",level:3},{value:"onDone in child machines",id:"ondone-in-child-machines",level:2}],p={toc:l};function d(e){let{components:n,...t}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"Callback actors are one way to start invoking long-lived actors and are useful for simple to intermediate cases. But sometimes, you\u2019ll want to use all the power of a statechart."),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Machine actors")," are valuable for such use cases. You can pass a machine directly to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"invoke")," ",(0,r.mdx)("inlineCode",{parentName:"p"},"src")," property to invoke the machine in that state."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst childMachine = createMachine({\n  /* ... */\n});\n\nconst parentMachine = createMachine({\n  invoke: {\n    src: childMachine,\n  },\n});\n")),(0,r.mdx)("p",null,"Just like with callback actors, the child machine is stopped if the state where it\u2019s invoked is exited."),(0,r.mdx)("p",null,"Machine actors enable you to create machines that can act as reusable modules across your application."),(0,r.mdx)("h2",{id:"sendparent"},"sendParent"),(0,r.mdx)("p",null,"Child machines can communicate to the parent that invoked them via the ",(0,r.mdx)("inlineCode",{parentName:"p"},"sendParent")," action."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, sendParent } from 'xstate';\n\nconst childMachine = createMachine({\n  after: {\n    3000: {\n      actions: sendParent({\n        type: 'TIMER_DONE',\n      }),\n    },\n  },\n});\n\nconst parentMachine = createMachine({\n  initial: 'waiting',\n  states: {\n    waiting: {\n      on: {\n        TIMER_DONE: {\n          target: 'complete',\n        },\n      },\n      invoke: {\n        src: childMachine,\n      },\n    },\n    complete: {\n      type: 'final',\n    },\n  },\n});\n")),(0,r.mdx)("p",null,"In the example above, the ",(0,r.mdx)("inlineCode",{parentName:"p"},"parentMachine")," invokes the ",(0,r.mdx)("inlineCode",{parentName:"p"},"childMachine")," in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"waiting")," state. Three seconds after being started, the ",(0,r.mdx)("inlineCode",{parentName:"p"},"childMachine")," sends the ",(0,r.mdx)("inlineCode",{parentName:"p"},"TIMER_DONE")," event to its parent. The ",(0,r.mdx)("inlineCode",{parentName:"p"},"TIMER_DONE")," transition in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"parentMachine")," puts the machine into the ",(0,r.mdx)("inlineCode",{parentName:"p"},"complete")," state."),(0,r.mdx)("h3",{id:"only-use-sendparent-on-child-machines"},"Only use sendParent on child machines"),(0,r.mdx)("p",null,"If the child machine doesn\u2019t have a parent, for instance, if the machine is run with ",(0,r.mdx)("inlineCode",{parentName:"p"},"interpret"),", then ",(0,r.mdx)("inlineCode",{parentName:"p"},"sendParent")," will throw an error."),(0,r.mdx)("h2",{id:"ondone-in-child-machines"},"onDone in child machines"),(0,r.mdx)("p",null,"When a child machine reaches a final state, it reports that it\u2019s done to its parent. The parent can listen for this event with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"invoke.onDone")," property:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"const childMachine = createMachine({\n  initial: 'waiting',\n  states: {\n    waiting: {\n      after: {\n        3000: {\n          target: 'complete',\n        },\n      },\n    },\n    complete: {\n      type: 'final',\n    },\n  },\n});\n\nconst parentMachine = createMachine(\n  {\n    invoke: {\n      src: childMachine,\n      onDone: {\n        actions: 'logComplete',\n      },\n    },\n  },\n  {\n    actions: {\n      logComplete: () => {\n        console.log('Child machine complete!');\n      },\n    },\n  }\n);\n")),(0,r.mdx)("p",null,"You can also send data along with this ",(0,r.mdx)("inlineCode",{parentName:"p"},"onDone")," event. This \u201cdone data\u201d is specified on the final state\u2019s ",(0,r.mdx)("inlineCode",{parentName:"p"},"data")," property:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"\nconst secretMachine = createMachine({\n  initial: 'wait',\n  context: {\n    secret: '42',\n  },\n  states: {\n    wait: {\n      after: {\n        1000: { target: 'reveal' },\n      },\n    },\n    reveal: {\n      type: 'final',\n      // highlight-start\n      data: {\n        secret: (context, event) => context.secret,\n      },\n      // highlight-end\n    },\n  },\n});\n\nconst parentMachine = createMachine({\n  context: {\n    revealedSecret: undefined,\n  },\n  invoke: {\n    src: secretMachine,\n    onDone: {\n      // highlight-start\n      actions: assign({\n        revealedSecret: (context, event) => {\n          // { type: 'done.invoke.<id>', data: { secret: '42' } }\n          return event.data.secret;\n        },\n      }),\n      // highlight-end\n    },\n  },\n});\n")))}d.isMDXComponent=!0}}]);