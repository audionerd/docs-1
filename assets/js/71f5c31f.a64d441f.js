"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[90576],{3905:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>c,MDXProvider:()=>d,mdx:()=>g,useMDXComponents:()=>p,withMDXComponents:()=>m});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},i.apply(this,arguments)}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=n.createContext({}),m=function(e){return function(t){var a=p(t.components);return n.createElement(e,i({},t,{components:a}))}},p=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(a),d=o,u=m["".concat(s,".").concat(d)]||m[d]||h[d]||i;return a?n.createElement(u,r(r({ref:t},c),{},{components:a})):n.createElement(u,r({ref:t},c))}));function g(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,s=new Array(i);s[0]=u;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,s[1]=r;for(var c=2;c<i;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},10176:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var n=a(87462),o=(a(67294),a(3905));const i={title:"\u201cJust Use Hooks\u201d: XState in React Components",description:"XState can be easily added to React components by using custom machine hooks for greater encapsulation and reusability.",tags:["component","hook","stately","xstate","react","state machine","prop"],authors:["kevin"],image:"/blog/2022-07-18-just-use-hooks-xstate-in-react-components.png",slug:"2022-07-18-just-use-hooks-xstate-in-react-components",date:new Date("2022-07-18T00:00:00.000Z")},s=void 0,r={permalink:"/blog/2022-07-18-just-use-hooks-xstate-in-react-components",editUrl:"https://github.com/statelyai/docs/edit/main/blog/2022-07-18-just-use-hooks-xstate-in-react-components/index.mdx",source:"@site/blog/2022-07-18-just-use-hooks-xstate-in-react-components/index.mdx",title:"\u201cJust Use Hooks\u201d: XState in React Components",description:"XState can be easily added to React components by using custom machine hooks for greater encapsulation and reusability.",date:"2022-07-18T00:00:00.000Z",formattedDate:"July 18, 2022",tags:[{label:"component",permalink:"/blog/tags/component"},{label:"hook",permalink:"/blog/tags/hook"},{label:"stately",permalink:"/blog/tags/stately"},{label:"xstate",permalink:"/blog/tags/xstate"},{label:"react",permalink:"/blog/tags/react"},{label:"state machine",permalink:"/blog/tags/state-machine"},{label:"prop",permalink:"/blog/tags/prop"}],readingTime:9.36,hasTruncateMarker:!0,authors:[{name:"Kevin Maes",title:"Stately Team",url:"https://github.com/kevinmaes",imageURL:"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/kevin.png",key:"kevin"}],frontMatter:{title:"\u201cJust Use Hooks\u201d: XState in React Components",description:"XState can be easily added to React components by using custom machine hooks for greater encapsulation and reusability.",tags:["component","hook","stately","xstate","react","state machine","prop"],authors:["kevin"],image:"/blog/2022-07-18-just-use-hooks-xstate-in-react-components.png",slug:"2022-07-18-just-use-hooks-xstate-in-react-components",date:"2022-07-18T00:00:00.000Z"},prevItem:{title:"What\u2019s new in August 2022?",permalink:"/blog/2022-08-03-whats-new-august-2022"},nextItem:{title:"What\u2019s new in July 2022?",permalink:"/blog/2022-07-06-whats-new-july-2022"}},l={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:3},{value:"XState in React components",id:"xstate-in-react-components",level:3},{value:"A custom machine hook",id:"a-custom-machine-hook",level:3},{value:"Why a hook?",id:"why-a-hook",level:4},{value:"Hook params",id:"hook-params",level:4},{value:"Return values",id:"return-values",level:4},{value:"Using the hook in a component",id:"using-the-hook-in-a-component",level:3},{value:"Reusability",id:"reusability",level:3},{value:"Team specialization",id:"team-specialization",level:3},{value:"Caveats",id:"caveats",level:3},{value:"Summary",id:"summary",level:3},{value:"Next steps",id:"next-steps",level:3}],m={toc:c};function p(e){let{components:t,...a}=e;return(0,o.mdx)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Are you a React developer using ",(0,o.mdx)("a",{parentName:"p",href:"https://xstate.js.org/"},"XState")," to model your application logic? Perhaps you\u2019ve heard of XState but have been looking for an easy way to try it out in one of your projects. If so, then I\u2019d like to share with you a pattern I was introduced to when first diving into codebase at Stately, that of using ",(0,o.mdx)("strong",{parentName:"p"},"custom machine hooks"),". This lightweight, reusable way to integrate XState into React components is a delight to work with and I think you might like it as much as I do!"),(0,o.mdx)("h3",{id:"introduction"},"Introduction"),(0,o.mdx)("p",null,"In this post I\u2019ll review the most common way to use the ",(0,o.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/packages/xstate-react/"},(0,o.mdx)("inlineCode",{parentName:"a"},"@xstate/react"))," library in a project. I\u2019ll then demonstrate how encapsulation and reuse of state machines can be achieved by using hooks in your components, with some examples. I\u2019ll also touch on the advantages and disadvantages to using this level of abstraction."),(0,o.mdx)("p",null,"For more background, you can check out ",(0,o.mdx)("a",{parentName:"p",href:"https://stately.ai/blog/2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate"},"\u201cJust Use Props\u201d: An opinionated guide to React and XState")," by Matt Pocock."),(0,o.mdx)("p",null,"After years of usage in the wild, and in response to confusion and frustration about hooks, the React Team has been putting a lot of effort into making the use of hooks clearer and simpler. Now is the perfect time to re-explore how hooks, when used effectively, can help make component creation easier."),(0,o.mdx)("h3",{id:"xstate-in-react-components"},"XState in React components"),(0,o.mdx)("p",null,"For those of you who are already using XState with React, you\u2019re probably used to creating a machine using ",(0,o.mdx)("inlineCode",{parentName:"p"},"createMachine()")," and then passing that machine to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"useMachine")," hook from within a component."),(0,o.mdx)("p",null,"Here is the code from the ",(0,o.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/packages/xstate-react/#quick-start"},"Quick Start example")," in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"@xstate/react")," docs, where a ",(0,o.mdx)("inlineCode",{parentName:"p"},"toggleMachine")," (",(0,o.mdx)("a",{parentName:"p",href:"https://stately.ai/registry/editor/5e6286ca-5075-42da-9af8-99358530a0ac"},"view in the Editor"),") is created with ",(0,o.mdx)("inlineCode",{parentName:"p"},"createMachine()")," and then passed to ",(0,o.mdx)("inlineCode",{parentName:"p"},"useMachine()")," for use in a ",(0,o.mdx)("inlineCode",{parentName:"p"},"Toggler")," component."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-tsx"},'import { useMachine } from "@xstate/react";\nimport { createMachine } from "xstate";\n\nconst toggleMachine = createMachine({\n  id: "toggle",\n  initial: "inactive",\n  states: {\n    inactive: {\n      on: { TOGGLE: "active" },\n    },\n    active: {\n      on: { TOGGLE: "inactive" },\n    },\n  },\n});\n\nexport const Toggler = () => {\n  const [state, send] = useMachine(toggleMachine);\n\n  return (\n    <button onClick={() => send("TOGGLE")}>\n      {state.value === "inactive"\n        ? "Click to activate"\n        : "Active! Click to deactivate"}\n    </button>\n  );\n};\n')),(0,o.mdx)("p",null,"This example shows how you can then evaluate ",(0,o.mdx)("inlineCode",{parentName:"p"},"state.value")," to render the corresponding UI for the toggle state and you can also call ",(0,o.mdx)("inlineCode",{parentName:"p"},"send('TOGGLE')")," in a button\u2019s ",(0,o.mdx)("inlineCode",{parentName:"p"},"onClick")," handler to toggle the state."),(0,o.mdx)("p",null,"Similarly, one could access other state methods and properties like ",(0,o.mdx)("inlineCode",{parentName:"p"},"state.matches()"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"state.can()"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"state.hasTag()"),", or even ",(0,o.mdx)("inlineCode",{parentName:"p"},"state.context")," to evaluate state and show the correct UI."),(0,o.mdx)("h3",{id:"a-custom-machine-hook"},"A custom machine hook"),(0,o.mdx)("p",null,"But what if your component really doesn\u2019t need access to all of those features when using a machine? That\u2019s where the custom machine hook comes into play. We can still create a machine and pass it to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"useMachine")," hook but this can all be done inside of the custom hook."),(0,o.mdx)("p",null,"Here\u2019s an example of what that custom hook might look like, including a ",(0,o.mdx)("a",{parentName:"p",href:"https://codesandbox.io/s/usetogglemachine-example-1-lazy-machine-8zcbvs?file=/src/Toggler.tsx"},"React/TypeScript CodeSandbox version"),":"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'import { useMachine } from "@xstate/react";\nimport { useEffect } from "react";\nimport { createMachine } from "xstate";\n\nexport const useToggleMachine = (\n  initialActive: boolean = false\n): [boolean, () => void] => {\n  const [state, send] = useMachine(() =>\n    createMachine({\n      id: "toggle",\n      initial: initialActive ? "active" : "inactive",\n      states: {\n        inactive: {\n          on: { TOGGLE: "active" },\n        },\n        active: {\n          on: { TOGGLE: "inactive" },\n        },\n      },\n    })\n  );\n\n  const isActive = state.matches("active");\n  const toggle = () => send("TOGGLE");\n\n  return [isActive, toggle];\n};\n')),(0,o.mdx)("h4",{id:"why-a-hook"},"Why a hook?"),(0,o.mdx)("p",null,"Why might we opt for this extra layer of abstraction? Well, consider what we need to do in the example:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Create the ",(0,o.mdx)("inlineCode",{parentName:"li"},"toggleMachine"),", including states and possible transitions."),(0,o.mdx)("li",{parentName:"ol"},"Pass the machine to the ",(0,o.mdx)("inlineCode",{parentName:"li"},"useMachine")," hook."),(0,o.mdx)("li",{parentName:"ol"},"Expose the most relevant pieces to our component.")),(0,o.mdx)("p",null,"From this hook, we can expose a minimal interface to components. In fact, we don\u2019t even need to export the machine at all. By encapsulating the XState code, we allow components to focus on their core task, rendering UI as a function of data/props. Sweet!"),(0,o.mdx)("p",null,"Our ",(0,o.mdx)("inlineCode",{parentName:"p"},"useToggleMachine")," hook now fully manages a toggle state for any component that uses it. This is now more resuable since a single component can create multiple instances of ",(0,o.mdx)("inlineCode",{parentName:"p"},"useToggleMachine"),". Similarly, multiple components can instantiate this hook one or more times to keep track of multiple, separate toggle states."),(0,o.mdx)("p",null,"Related: If you\u2019re wondering about how to create a global machine hook then have a look at this ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/statelyai/rfcs/pull/8"},"RFC for a Global Hooks API"),"."),(0,o.mdx)("p",null,"Let\u2019s dive deeper into a the details of this ",(0,o.mdx)("inlineCode",{parentName:"p"},"useToggleMachine")," hook."),(0,o.mdx)("h4",{id:"hook-params"},"Hook params"),(0,o.mdx)("p",null,"If you recall, we initialized our machine to start out in its \u201cinactive\u201d state by specifying ",(0,o.mdx)("inlineCode",{parentName:"p"},"initial: 'inactive'")," in the machines config object. But we\u2019re also receiving an ",(0,o.mdx)("inlineCode",{parentName:"p"},"initialActive")," value as the one and only argument passed into this hook. If that value is false or omitted, since it defaults to false, then the inital value will be in sync with the machine\u2019s default state."),(0,o.mdx)("p",null,"But what if we want to start out with ",(0,o.mdx)("inlineCode",{parentName:"p"},"initialActive")," passed in as ",(0,o.mdx)("inlineCode",{parentName:"p"},"true"),"? We need a way to immediately transiton our machine away from its own initial state to be synchronized with the incoming ",(0,o.mdx)("inlineCode",{parentName:"p"},"initialActive")," value."),(0,o.mdx)("p",null,"The original version of this post included an example that used the infamous ",(0,o.mdx)("inlineCode",{parentName:"p"},"useEffect")," hook to dynamically establish the initial state, based on the ",(0,o.mdx)("inlineCode",{parentName:"p"},"initialActive")," prop passed into the hook."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'// This example is deprecated\nuseEffect(() => {\n  if (initialActive && state.matches("inactive")) {\n    send("TOGGLE");\n  }\n}, [initialActive]);\n')),(0,o.mdx)("p",null,"Some readers noted in their feedback that they prefer to avoid using the ",(0,o.mdx)("inlineCode",{parentName:"p"},"useEffect")," hook altogether for understandable reasons. The ",(0,o.mdx)("inlineCode",{parentName:"p"},"state")," really should be included in the dependency array to make the linter happy and using ",(0,o.mdx)("inlineCode",{parentName:"p"},"useEffect")," here feels generally awkward."),(0,o.mdx)("p",null,"Instead, I've updated the example by wrapping the call to ",(0,o.mdx)("inlineCode",{parentName:"p"},"createMachine")," in a function passed to ",(0,o.mdx)("inlineCode",{parentName:"p"},"useMachine"),", utilizing a sort of ",(0,o.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/packages/xstate-react/#usemachine-machine-options"},'"lazily created machine"'),"."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'const [state, send] = useMachine(() =>\n  createMachine({\n    id: "toggle",\n    initial: initialActive ? "active" : "inactive",\n    states: {\n      inactive: {\n        on: { TOGGLE: "active" },\n      },\n      active: {\n        on: { TOGGLE: "inactive" },\n      },\n    },\n  })\n);\n')),(0,o.mdx)("p",null,"This gives our machine config object access to the incoming ",(0,o.mdx)("inlineCode",{parentName:"p"},"initialActive")," prop so that we can dynamically assign the machine's initial value. It's a subtle but significant change."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'initial: initialActive ? "active" : "inactive",\n')),(0,o.mdx)("p",null,"You can read about alternative methods and proposals in our ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/statelyai/rfcs/pull/9"},"RFC for input"),"."),(0,o.mdx)("h4",{id:"return-values"},"Return values"),(0,o.mdx)("p",null,"We\u2019ve looked at the input param for ",(0,o.mdx)("inlineCode",{parentName:"p"},"useToggleMachine")," so now let\u2019s look at its return values."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'const isActive = state.matches("active");\nconst toggle = () => send("TOGGLE");\n\nreturn [isActive, toggle];\n')),(0,o.mdx)("p",null,"We have a boolean ",(0,o.mdx)("inlineCode",{parentName:"p"},"isActive")," value which is derived from the state of the machine, the raison d\u2019\xeatre of this hook. This is a simple mapping of one of two machine states to a boolean in this example. But you can imagine how states of a more complex machine might be derived from evaluating matches on the current state, possible next events, and even tags. Vist the ",(0,o.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/states.html#state-methods-and-properties"},"docs on state methods")," for details."),(0,o.mdx)("p",null,"We also have a ",(0,o.mdx)("inlineCode",{parentName:"p"},"toggle")," function which enables us to toggle the state of the machine. It\u2019s an anonymous function wrapping the call to XState\u2019s ",(0,o.mdx)("inlineCode",{parentName:"p"},"send('TOGGLE')"),"."),(0,o.mdx)("p",null,"Our hook returns an array of just these values much like ",(0,o.mdx)("inlineCode",{parentName:"p"},"useState")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"useMachine")," would and they should be destructured in the component."),(0,o.mdx)("h3",{id:"using-the-hook-in-a-component"},"Using the hook in a component"),(0,o.mdx)("p",null,"What does this look like for the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Toggler")," component to now use our ",(0,o.mdx)("inlineCode",{parentName:"p"},"useToggleMachine")," hook? It looks pretty good!"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-tsx"},'const Toggler = () => {\n  const [isActive, toggle] = useToggleMachine(false); // Or pass true.\n\n  return <button onClick={toggle}>Click me ({isActive ? "\u2705" : "\u274c"})</button>;\n};\n')),(0,o.mdx)("p",null,"In that example, we use the value of ",(0,o.mdx)("inlineCode",{parentName:"p"},"isActive")," to specify the button\u2019s text but it could easily be used for other purposes in this component or as a prop to pass down to child components."),(0,o.mdx)("p",null,"For the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Toggler")," component\u2019s ",(0,o.mdx)("inlineCode",{parentName:"p"},"onChange")," handler, we set its value to be the ",(0,o.mdx)("inlineCode",{parentName:"p"},"toggle")," function. Since that is already wrapping XState\u2019s ",(0,o.mdx)("inlineCode",{parentName:"p"},"send('TOGGLE')")," call, we don\u2019t even need to use another anonymous function. It all just works as is, in a tidy functional style."),(0,o.mdx)("h3",{id:"reusability"},"Reusability"),(0,o.mdx)("p",null,"As you can see, this pattern separates our normal React component code from our state machine implementation which keeps files neat and focused. Hooks make for more reusable machines across many components and in different situations. A ",(0,o.mdx)("inlineCode",{parentName:"p"},"useToggleMachine")," may be used to represent a toggle switch in one component but it might also represent the showing or hiding of UI or something else in another component."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"const [isAnimationEnabled, toggleAnimation] = useToggleMachine(false);\n\nconst [isDarkMode, toggleLightDarkMode] = useToggleMachine(true);\n")),(0,o.mdx)("p",null,"In a future blog post we can explore ways to compose machine hooks to build up more sophisticated machines from reusable parts, not unlike how small reusable functions are typically composed to create larger functions."),(0,o.mdx)("h3",{id:"team-specialization"},"Team specialization"),(0,o.mdx)("p",null,"This separation of code also means that ",(0,o.mdx)("strong",{parentName:"p"},"team members who are more familiar with XState can create and manage machine hooks")," with autonomy. Meanwhile, their teammates, who may be less familiar with state machines or with XState, can still rapidly churn out UI components that will, nevertheless, be backed by the power of state machines. This greatly ",(0,o.mdx)("strong",{parentName:"p"},"facilitates incremental adoption"),". You can begin using XState in small bits and pieces right away, neither needing to design your entire application as a large statechart nor rewrite everything to fit that way of working."),(0,o.mdx)("h3",{id:"caveats"},"Caveats"),(0,o.mdx)("p",null,"If you only have one component and all you need to do is toggle a boolean flag, then creating a machine and a hook on top of that may feel like unnecessary ceremony. Splitting code into two different files has the usual tradeoffs. Also, understanding how changing the ",(0,o.mdx)("inlineCode",{parentName:"p"},"initialActive")," prop works with the state machine\u2019s own internal state can be a bit tricky although we\u2019d still need to transition the machine to a non-initial state, in a similar way, from within a component that calls ",(0,o.mdx)("inlineCode",{parentName:"p"},"useMachine()"),"."),(0,o.mdx)("h3",{id:"summary"},"Summary"),(0,o.mdx)("p",null,"We saw a baseline example of how components traditionally employ the ",(0,o.mdx)("inlineCode",{parentName:"p"},"useMachine")," hook from ",(0,o.mdx)("inlineCode",{parentName:"p"},"XState/react")," with a ",(0,o.mdx)("a",{parentName:"p",href:"https://codesandbox.io/s/usetogglemachine-example-1-lazy-machine-8zcbvs?file=/src/Toggler.tsx"},"complete example")," of how to separate the machine into its own custom ",(0,o.mdx)("inlineCode",{parentName:"p"},"useToggleMachine")," hook for comparison. We covered implementation details for this hook, as well as how to wire it up in a React component. I\u2019ve offered several benefits that I believe make this abstraction worthwhile like incremental adoption and future feature scaling."),(0,o.mdx)("h3",{id:"next-steps"},"Next steps"),(0,o.mdx)("p",null,"Again, the toggle example is a small yet usable example for creating a machine with XState and wrapping it in a hook. But we can take this even further. What about ",(0,o.mdx)("strong",{parentName:"p"},"combining multiple machines")," into a single hook? How about ",(0,o.mdx)("strong",{parentName:"p"},"overriding machine implmentation details")," via hooks on a per use basis? I\u2019ll be exploring these patterns and more in some upcoming blog posts so stay tuned!"),(0,o.mdx)("p",null,"In the meantime, if you like using XState then keep creating your own machines and try wrapping those in custom hooks to use in your components. Additonally, you can build upon machine/hook examples in these posts for your own purposes and even find machines in the ",(0,o.mdx)("a",{parentName:"p",href:"https://stately.ai/registry/discover"},"Discovery section of the Stately Studio")," and turn those into hooks. Whatever path you take, I hope you ",(0,o.mdx)("strong",{parentName:"p"},"get hooked on using XState")," to make your UI more robust and more reusable!"))}p.isMDXComponent=!0}}]);