"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[80053],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"XState v5","banner":null,"badge":true,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"About Stately and XState","href":"/docs/","docId":"about"},{"type":"category","label":"Get started","collapsed":false,"collapsible":true,"items":[{"type":"link","label":"Install XState","href":"/docs/installation","docId":"installation"},{"type":"link","label":"Quick start","href":"/docs/quick-start","docId":"quick-start"},{"type":"link","label":"Migrate to XState v5","href":"/docs/migration","docId":"migration"},{"type":"link","label":"Examples","href":"/docs/examples","docId":"examples"},{"type":"link","label":"Templates","href":"/docs/templates","docId":"templates"},{"type":"link","label":"Cheatsheet","href":"/docs/cheatsheet","docId":"cheatsheet"}],"href":"/docs/category/get-started"},{"type":"category","label":"Core concepts","collapsed":false,"collapsible":true,"items":[{"type":"link","label":"State machines","href":"/docs/state-machines-and-statecharts","docId":"state-machines-and-statecharts"},{"type":"link","label":"Actor model","href":"/docs/actor-model","docId":"actor-model"},{"type":"link","label":"What is XState?","href":"/docs/xstate","docId":"xstate"}],"href":"/docs/category/core-concepts"},{"type":"category","label":"Using Stately Studio","collapsed":false,"collapsible":true,"items":[{"type":"link","label":"Introducing Stately Studio","href":"/docs/studio","docId":"studio"},{"type":"category","label":"Design mode","items":[{"type":"link","label":"Import from code","href":"/docs/import-from-code","docId":"import-from-code"},{"type":"link","label":"Export as code","href":"/docs/export-as-code","docId":"export-as-code"},{"type":"link","label":"Generate flow","href":"/docs/generate-flow","className":"pro-feature","docId":"generate-flow"},{"type":"link","label":"Colors","href":"/docs/colors","className":"pro-feature","docId":"colors"},{"type":"link","label":"Annotations","href":"/docs/annotations","docId":"annotations"},{"type":"link","label":"Descriptions","href":"/docs/descriptions","docId":"descriptions"},{"type":"link","label":"Machine restore","href":"/docs/machine-restore","docId":"machine-restore"},{"type":"link","label":"Autolayout","href":"/docs/autolayout","docId":"autolayout"}],"collapsed":true,"collapsible":true,"href":"/docs/design-mode"},{"type":"category","label":"Simulate mode","items":[{"type":"link","label":"Live simulation","href":"/docs/live-simulation","className":"pro-feature","docId":"live-simulation"}],"collapsed":true,"collapsible":true,"href":"/docs/simulate-mode"},{"type":"link","label":"Projects","href":"/docs/projects","docId":"projects"},{"type":"link","label":"Teams","href":"/docs/teams","className":"pro-feature","docId":"teams"},{"type":"link","label":"Discover","href":"/docs/discover","docId":"discover"},{"type":"category","label":"Share","items":[{"type":"link","label":"Embed URL","href":"/docs/embed","docId":"embed"},{"type":"link","label":"Image URL","href":"/docs/image","docId":"image"},{"type":"link","label":"Share URL","href":"/docs/url","docId":"url"}],"collapsed":true,"collapsible":true,"href":"/docs/category/share"},{"type":"category","label":"Accounts","items":[{"type":"link","label":"Community plan","href":"/docs/studio-community-plan","className":"community-feature","docId":"studio-community-plan"},{"type":"link","label":"Pro plan","href":"/docs/studio-pro-plan","className":"pro-feature","docId":"studio-pro-plan"},{"type":"link","label":"Enterprise plan","href":"/docs/studio-enterprise-plan","docId":"studio-enterprise-plan"},{"type":"link","label":"Sign up","href":"/docs/sign-up","docId":"sign-up"},{"type":"link","label":"Upgrade","href":"/docs/upgrade","docId":"upgrade"}],"collapsed":true,"collapsible":true,"href":"/docs/category/accounts"},{"type":"link","label":"Version history","href":"/docs/versions","className":"pro-feature","docId":"versions"},{"type":"link","label":"Lock machines","href":"/docs/lock-machines","className":"pro-feature","docId":"lock-machines"},{"type":"link","label":"Keyboard shortcuts","href":"/docs/keyboard-shortcuts","docId":"keyboard-shortcuts"},{"type":"link","label":"Canvas view controls","href":"/docs/canvas-view-controls","docId":"canvas-view-controls"},{"type":"link","label":"User preferences","href":"/docs/user-preferences","docId":"user-preferences"}],"href":"/docs/category/studio"},{"type":"category","label":"State machines","collapsed":false,"collapsible":true,"items":[{"type":"link","label":"State machines","href":"/docs/machines","docId":"machines"},{"type":"link","label":"State","href":"/docs/states","docId":"states"},{"type":"link","label":"Context","href":"/docs/context","docId":"context"},{"type":"link","label":"Input","href":"/docs/input","docId":"input"},{"type":"link","label":"Events and transitions","href":"/docs/transitions","docId":"transitions"},{"type":"link","label":"Eventless (always) transitions","href":"/docs/eventless-transitions","docId":"eventless-transitions"},{"type":"link","label":"Delayed (after) transitions","href":"/docs/delayed-transitions","docId":"delayed-transitions"},{"type":"link","label":"Actions","href":"/docs/actions","docId":"actions"},{"type":"link","label":"Guards","href":"/docs/guards","docId":"guards"},{"type":"link","label":"Finite states","href":"/docs/finite-states","docId":"finite-states"},{"type":"link","label":"Parent states","href":"/docs/parent-states","docId":"parent-states"},{"type":"link","label":"Parallel states","href":"/docs/parallel-states","docId":"parallel-states"},{"type":"link","label":"Initial states","href":"/docs/initial-states","docId":"initial-states"},{"type":"link","label":"Final states","href":"/docs/final-states","docId":"final-states"},{"type":"link","label":"History states","href":"/docs/history-states","docId":"history-states"},{"type":"link","label":"Persistence","href":"/docs/persistence","docId":"persistence"},{"type":"link","label":"Tags","href":"/docs/tags","docId":"tags"}],"href":"/docs/category/state-machines"},{"type":"category","label":"Actors ","collapsed":false,"collapsible":true,"items":[{"type":"link","label":"Actors","href":"/docs/actors","docId":"actors"},{"type":"link","label":"Invoke","href":"/docs/invoke","docId":"invoke"},{"type":"link","label":"Spawn","href":"/docs/spawn","docId":"spawn"},{"type":"link","label":"Systems","href":"/docs/system","docId":"system"}],"href":"/docs/category/actors"},{"type":"link","label":"Testing","href":"/docs/testing","docId":"testing"},{"type":"category","label":"Packages","collapsed":true,"collapsible":true,"items":[{"type":"link","label":"@xstate/react","href":"/docs/xstate-react","docId":"xstate-react"},{"type":"link","label":"@xstate/vue","href":"/docs/xstate-vue","docId":"xstate-vue"},{"type":"link","label":"@xstate/svelte","href":"/docs/xstate-svelte","docId":"xstate-svelte"},{"type":"link","label":"@xstate/fsm","href":"/docs/xstate-fsm","docId":"xstate-fsm"},{"type":"link","label":"@xstate/graph","href":"/docs/xstate-graph","docId":"xstate-graph"},{"type":"link","label":"@xstate/test","href":"/docs/xstate-test","docId":"xstate-test"},{"type":"link","label":"@xstate/immer","href":"/docs/xstate-immer","docId":"xstate-immer"}],"href":"/docs/category/xstate-packages"},{"type":"category","label":"Developer tools","collapsed":false,"collapsible":true,"items":[{"type":"link","label":"XState VS Code extension","href":"/docs/xstate-vscode-extension","docId":"xstate-vscode-extension"},{"type":"link","label":"Visualizer","href":"/docs/visualizer","docId":"visualizer"},{"type":"link","label":"Inspector","href":"/docs/inspector","docId":"inspector"},{"type":"link","label":"Other tools","href":"/docs/developer-tools","docId":"developer-tools"}],"href":"/docs/category/developer-tools"},{"type":"link","label":"Glossary","href":"/docs/glossary","docId":"glossary"}],"api":[]},"docs":{"about":{"id":"about","title":"Stately Studio + XState docs","description":"Stately Studio and XState docs","sidebar":"docs"},"actions":{"id":"actions","title":"Actions","description":"Actions are fire-and-forget effects. When a state machine transitions, it may execute actions. Actions occur in response to events, and are typically defined on transitions in the actions: ... property. Anywhere you can use an action, you can also declare it as an array to express multiple actions.","sidebar":"docs"},"actor-model":{"id":"actor-model","title":"The actor model","description":"When you run a state machine, it becomes an actor. In the actor model, actors are \u201clive\u201d objects that can communicate with each other via asynchronous messages. In XState, we refer to these messages as events.","sidebar":"docs"},"actors":{"id":"actors","title":"Actors","description":"When you run a state machine, it becomes an actor: a running process that can receive events, send events and change its behavior based on the events it receives, which can cause effects outside of the actor.","sidebar":"docs"},"annotations":{"id":"annotations","title":"Annotations","description":"Annotations are notes you can use to annotate your machine, positioned anywhere inside your machine. Annotations are useful for information or comments you want to add to your machine that are only visible inside Stately Studio and not included when you export as code.","sidebar":"docs"},"api":{"id":"api","title":"APIs","description":"API Docs package listing goes here"},"autolayout":{"id":"autolayout","title":"Autolayout","description":"Autolayout chooses an optimal layout for your machine to make it easier to read and understand. When you import a machine, autolayout will be applied automatically. Otherwise, you can autolayout your machine anytime using the  Autolayout button.","sidebar":"docs"},"canvas-view-controls":{"id":"canvas-view-controls","title":"Canvas view controls","description":"You spend a lot of time on the canvas while designing and simulating state machines, so we\u2019ve added view controls to help you navigate around your machines.","sidebar":"docs"},"cheatsheet":{"id":"cheatsheet","title":"Cheatsheet","description":"Use this cheatsheet to quickly look up the syntax for XState v5 beta.","sidebar":"docs"},"colors":{"id":"colors","title":"Colors","description":"You can highlight your machine\u2019s state and event nodes with colors. You can use colors however you like; some ideas include:","sidebar":"docs"},"context":{"id":"context","title":"Context","description":"In XState, context is how you store data in a state machine actor.","sidebar":"docs"},"delayed-transitions":{"id":"delayed-transitions","title":"Delayed (after) transitions","description":"Delayed transitions\xa0are transitions that only happen after a set amount of time. Delayed transitions are handy for building timeouts and intervals into your application logic. If another event occurs before the end of the timer, the transition doesn\u2019t complete.","sidebar":"docs"},"descriptions":{"id":"descriptions","title":"Descriptions","description":"You can add descriptions to state and event nodes to describe their purpose and share related notes with your team. Descriptions support markdown formatting, including links and images.","sidebar":"docs"},"design-mode":{"id":"design-mode","title":"Design mode","description":"Tour the features in Stately editor\u2019s Design mode, including a guide to all the panels and how to use the editor.","sidebar":"docs"},"developer-tools":{"id":"developer-tools","title":"Developer tools","description":"Find out more about the Stately XState CLI (Command Line Interface) and Chrome Devtools.","sidebar":"docs"},"discover":{"id":"discover","title":"Discover","description":"Are you seeking inspiration for your machine? Or do you want to learn how somebody else models their machines? The Discover page lists all the public machines created with Stately Studio.","sidebar":"docs"},"embed":{"id":"embed","title":"Embed machines using their embed URL","description":"You can embed your machines anywhere that supports iframes. Embed mode is a focused non-editable view of your machine in Stately Studio\u2019s editor, which can be zoomed and panned.","sidebar":"docs"},"eventless-transitions":{"id":"eventless-transitions","title":"Eventless (always) transitions","description":"Eventless transitions\xa0are transitions that happen without an explicit event. These transitions are\xa0always\xa0taken when the transition is enabled.","sidebar":"docs"},"examples":{"id":"examples","title":"XState examples","description":"XState v5 beta examples are also available in the /examples directory. Many of the examples have a CodeSandbox link where you can run the example in your browser.","sidebar":"docs"},"export-as-code":{"id":"export-as-code","title":"Export as code","description":"Exporting as code is useful if you want to use your machine with XState inside your codebase or if you want to duplicate your machine without using Fork.","sidebar":"docs"},"final-states":{"id":"final-states","title":"Final states","description":"A final state is a state that represents the completion or successful termination of a machine. It is defined by the type","sidebar":"docs"},"finite-states":{"id":"finite-states","title":"Finite states","description":"A finite state is one of the possible states that a state machine can be in at any given time. It\'s called \\"finite\\" because there should be a limited number of possible states that the machine can be in. Finite states define how a machine \\"behaves\\" when in a state; e.g. a status or a mode. They represent how a machine \\"behaves\\" when in a state; e.g. a status or a mode; a machine can behave differently depending what state it is in.","sidebar":"docs"},"generate-flow":{"id":"generate-flow","title":"Generate flow","description":"Generate flow is an experimental feature that helps you auto-create machines from text descriptions. You can generate a flow for a new machine or use the flow description to describe how you want to modify your current flow.","sidebar":"docs"},"glossary":{"id":"glossary","title":"Glossary","description":"This glossary is an alphabetical guide to the most common terms in statecharts and state machines.","sidebar":"docs"},"guards":{"id":"guards","title":"Guards","description":"A\xa0guard\xa0is a condition function that the machine checks when it goes through an event. If the condition is true, the machine follows the transition to the next state. If the condition is false, the machine follows the rest of the conditions to the next state.","sidebar":"docs"},"history-states":{"id":"history-states","title":"History states","description":"A history state is a special type of state (a pseudostate) that remembers the last child state that was active before its parent state is exited. When a transition from outside the parent state targets a history state, the remembered child state is entered.","sidebar":"docs"},"image":{"id":"image","title":"Share machine images using their image URL","description":"You can share an image of your machine anywhere that supports images. You can use the image URL for live-updating images where the machine is always updated with your latest changes. Machine images can be helpful in documentation, including GitHub pull requests.","sidebar":"docs"},"import-from-code":{"id":"import-from-code","title":"Import from code","description":"Importing from code is helpful if you\u2019ve already built machines while working with XState, or have created a machine using our older Stately Viz but haven\u2019t yet tried Stately Studio\u2019s editor.","sidebar":"docs"},"import-from-github":{"id":"import-from-github","title":"Import from GitHub","description":"Import your machines from GitHub into the Stately Studio."},"initial-states":{"id":"initial-states","title":"Initial states","description":"When a state machine starts, it enters the\xa0initial state\xa0first. A machine can only have one top-level initial state; if there were multiple initial states, the machine wouldn\u2019t know where to start!","sidebar":"docs"},"input":{"id":"input","title":"Input","description":"Input refers to the data provided to a state machine that influences its behavior. In XState, you provide input when creating an actor using the second argument of the createActor(machine, { input }) function:","sidebar":"docs"},"inspector":{"id":"inspector","title":"Inspector","description":"@xstate/inspect enables you to inspect and manipulate machines while they\u2019re running in your app. Check out the @xstate/inspect package on GitHub.","sidebar":"docs"},"installation":{"id":"installation","title":"Installation","description":"You can install XState using your favorite package manager or embed the `` directly from a CDN.","sidebar":"docs"},"invoke":{"id":"invoke","title":"Invoke","description":"XState is based on the actor model. Invoked actors are managed by the state machine. Invoked actors are created and started when the state is entered, and stopped when the state is exited.","sidebar":"docs"},"keyboard-shortcuts":{"id":"keyboard-shortcuts","title":"Keyboard shortcuts","description":"Stately Studio has a number of keyboard shortcuts.","sidebar":"docs"},"live-simulation":{"id":"live-simulation","title":"Live Simulation Mode","description":"Live simulation mode helps you share your simulated machine with your team without screen sharing or screenshots. Share the generated live simulation link, and your team can view your simulation in real-time and even trigger events themselves.","sidebar":"docs"},"lock-machines":{"id":"lock-machines","title":"Lock machines","description":"You can lock a machine anytime to prevent accidental edits. Locked machines have a  Locked status displayed in the editor\u2019s top bar.","sidebar":"docs"},"machine-restore":{"id":"machine-restore","title":"Machine restore","description":"The Studio is built using a server-client architecture.","sidebar":"docs"},"machines":{"id":"machines","title":"State machines","description":"A state machine is a model that describes the behavior of something, for example an actor. Finite state machines describe how the state of an actor transitions to another state when an event occurs.","sidebar":"docs"},"migration":{"id":"migration","title":"Migrating XState v4 to v5","description":"Following our guide below, migrating from XState version 4 to version 5 should be straightforward. If you get stuck or have any questions, please reach out to the Stately team on our Discord.","sidebar":"docs"},"parallel-states":{"id":"parallel-states","title":"Parallel states","description":"In statecharts, a parallel state is a state that has multiple child states (also known as regions) that are all active at the same time. This is different from a parent state, where only one child state is active at a time.","sidebar":"docs"},"parent-states":{"id":"parent-states","title":"Parent states","description":"States can contain more states, also known as\xa0child states. These child states are only active when the parent state is active.","sidebar":"docs"},"persistence":{"id":"persistence","title":"Persistence","description":"Actors can persist their internal state and restore it later. Persistence refers to storing the state of an actor in persistent storage, such as localStorage or a database. Restoration refers to restoring the state of an actor from persistent storage.","sidebar":"docs"},"projects":{"id":"projects","title":"Projects","description":"A project is a collection of machines that helps you organize your personal machines and collaborate with others on your application logic.","sidebar":"docs"},"quick-start":{"id":"quick-start","title":"Quick start","description":"Want to jump straight into XState and Stately Studio? Start here!","sidebar":"docs"},"sign-up":{"id":"sign-up","title":"Sign up for Stately Studio","description":"You can sign up for a Stately Studio account from the Sign in page or the Sign in button in the editor\u2019s top bar.","sidebar":"docs"},"simulate-mode":{"id":"simulate-mode","title":"Simulate mode","description":"Tour the features in Stately editor\u2019s Simulate mode, including a guide to all the panels and how to simulate your machines.","sidebar":"docs"},"spawn":{"id":"spawn","title":"Spawn","description":"XState is based on the actor model. Spawned actors are managed by the state machine.","sidebar":"docs"},"state-done-events":{"id":"state-done-events","title":"State done events","description":"A\xa0state done event\xa0transitions from a parent state when one of its child states reaches its final state. State done events are labeled \u201conDone.\u201d"},"state-machines-and-statecharts":{"id":"state-machines-and-statecharts","title":"What are state machines and statecharts?","description":"State machines help us model how a process goes from state to state when an event occurs.","sidebar":"docs"},"stately-sky-getting-started":{"id":"stately-sky-getting-started","title":"Stately Sky getting started","description":"This guide will walk you through the process of creating a simple traffic light actor using Stately Sky."},"states":{"id":"states","title":"State","description":"A state describes the machine\u2019s status or mode, which could be as simple as\xa0Paused\xa0and\xa0Playing. A state machine can only be in one state at a time.","sidebar":"docs"},"studio":{"id":"studio","title":"Stately Studio","description":"Stately Studio is a suite of tools for building app logic, including the Editor, developer tools for XState, and much more coming soon.","sidebar":"docs"},"studio-community-plan":{"id":"studio-community-plan","title":"Stately Studio Community plan","description":"Stately Studio will always be free to our Community users on this free plan, and we will make many future features available on every plan. Request features and check out what we\u2019ve got planned on our roadmap.","sidebar":"docs"},"studio-enterprise-plan":{"id":"studio-enterprise-plan","title":"Stately Studio Enterprise plan","description":"Email the Stately team for a custom plan tailored to the requirements of your organization.","sidebar":"docs"},"studio-pro-plan":{"id":"studio-pro-plan","title":"Stately Studio Pro plan","description":"Upgrade to a Pro account to get features designed to help you collaborate with your team, including the following Pro features.","sidebar":"docs"},"system":{"id":"system","title":"Systems","description":"An actor system is a collection of actors that can communicate with each other. Actors can invoke/spawn other actors, which forms a natural hierarchy of actors that belong to the same system.","sidebar":"docs"},"tags":{"id":"tags","title":"Tags","description":"State nodes can have tags, which are string terms that help group or categorize the state node. For example, you can signify which state nodes represent states in which data is being loaded by using a \\"loading\\" tag, and determine if a state contains those tagged state nodes with state.hasTag(tag):","sidebar":"docs"},"teams":{"id":"teams","title":"Teams","description":"You can create and join teams in Stately Studio to share and collaborate on team projects.","sidebar":"docs"},"templates":{"id":"templates","title":"Templates","description":"XState runs anywhere you can run JavaScript and is framework-agnostic. But you can get started with or without your framework of choice using the templates below.","sidebar":"docs"},"testing":{"id":"testing","title":"Testing","description":"Testing logic","sidebar":"docs"},"transitions":{"id":"transitions","title":"Events and transitions","description":"A transition is a change from one finite state to another, triggered by an event.","sidebar":"docs"},"typegen":{"id":"typegen","title":"Typegen","description":"This feature is not available for XState version 5 yet."},"upgrade":{"id":"upgrade","title":"Upgrade your Stately Studio account","description":"Stately Studio will always be free to our Community users on the Community plan, and we will make many future features available on every plan.","sidebar":"docs"},"url":{"id":"url","title":"Share machines using their share URL","description":"You can share machines with your team or publicly with the machine URL.","sidebar":"docs"},"user-preferences":{"id":"user-preferences","title":"User preferences","description":"We have some simple user preferences to help you customize Stately Studio to fit your needs.","sidebar":"docs"},"versions":{"id":"versions","title":"Version history","description":"Version history is helpful if you want to save checkpoints while modeling machines or mirror version changes in the rest of your codebase. New versions can be saved from the current machine using the Version history panel in the right tool menu when in Design mode.","sidebar":"docs"},"visualizer":{"id":"visualizer","title":"Visualizer","description":"Are you looking for the Stately Studio visual editor? Check out the Stately Studio overview.","sidebar":"docs"},"xstate":{"id":"xstate","title":"XState","description":"XState is a state management and orchestration solution for JavaScript and TypeScript apps.","sidebar":"docs"},"xstate-fsm":{"id":"xstate-fsm","title":"@xstate/fsm","description":"The @xstate/fsm package contains a minimal, 1kb implementation of XState for finite state machines.","sidebar":"docs"},"xstate-graph":{"id":"xstate-graph","title":"@xstate/graph","description":"The @xstate/graph package contains graph algorithms and utilities for XState machines.","sidebar":"docs"},"xstate-immer":{"id":"xstate-immer","title":"@xstate/immer","description":"The @xstate/immer package contains utilities for using Immer with XState.","sidebar":"docs"},"xstate-react":{"id":"xstate-react","title":"@xstate/react","description":"The @xstate/react package contains hooks for using XState with React.","sidebar":"docs"},"xstate-svelte":{"id":"xstate-svelte","title":"@xstate/svelte","description":"The @xstate/svelte package contains utilities for using XState with Svelte.","sidebar":"docs"},"xstate-test":{"id":"xstate-test","title":"@xstate/test","description":"The @xstate/test package contains utilities for facilitating model-based testing for any software.","sidebar":"docs"},"xstate-vscode-extension":{"id":"xstate-vscode-extension","title":"XState VS Code extension","description":"The XState VS Code extension enhances the XState development experience by providing VS Code users with autocomplete, typegen, linting, and a visual editor inside VS Code.","sidebar":"docs"},"xstate-vue":{"id":"xstate-vue","title":"@xstate/vue","description":"The @xstate/vue package contains utilities for using XState with Vue.","sidebar":"docs"}}}')}}]);