"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[68051],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>l,MDXProvider:()=>p,mdx:()=>g,useMDXComponents:()=>m,withMDXComponents:()=>u});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},i.apply(this,arguments)}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),u=function(e){return function(n){var t=m(n.components);return a.createElement(e,i({},n,{components:t}))}},m=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=m(t),p=r,h=u["".concat(d,".").concat(p)]||u[p]||c[p]||i;return t?a.createElement(h,o(o({ref:n},l),{},{components:t})):a.createElement(h,o({ref:n},l))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,d=new Array(i);d[0]=h;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,d[1]=o;for(var l=2;l<i;l++)d[l]=t[l];return a.createElement.apply(null,d)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},48473:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=t(87462),r=(t(67294),t(3905));const i={title:"Guards"},d=void 0,o={unversionedId:"guards",id:"guards",title:"Guards",description:"A\xa0guard\xa0is a condition function that the machine checks when it goes through an event. If the condition is true, the machine follows the transition to the next state. If the condition is false, the machine follows the rest of the conditions to the next state.",source:"@site/docs/guards.mdx",sourceDirName:".",slug:"/guards",permalink:"/statelyai-docs/docs/guards",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/docs/guards.mdx",tags:[],version:"current",frontMatter:{title:"Guards"},sidebar:"docs",previous:{title:"Actions",permalink:"/statelyai-docs/docs/actions"},next:{title:"Finite states",permalink:"/statelyai-docs/docs/finite-states"}},s={},l=[{value:"Using guards in Stately Studio",id:"using-guards-in-stately-studio",level:2},{value:"Replace event with a guard",id:"replace-event-with-a-guard",level:3},{value:"On the canvas",id:"on-the-canvas",level:4},{value:"Using the transition Details panel",id:"using-the-transition-details-panel",level:4},{value:"Multiple guarded transitions",id:"multiple-guarded-transitions",level:2},{value:"Inline guards",id:"inline-guards",level:2},{value:"Guard object",id:"guard-object",level:2},{value:"Higher-level guards",id:"higher-level-guards",level:2},{value:"In-state guards",id:"in-state-guards",level:2},{value:"Shorthands",id:"shorthands",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Cheatsheet",id:"cheatsheet",level:2}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",n)},m=u("EmbedMachine"),p=u("Plus"),c=u("Info"),h={toc:l};function g(e){let{components:n,...t}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"A\xa0",(0,r.mdx)("strong",{parentName:"p"},"guard"),"\xa0is a condition function that the machine checks when it goes through an event. If the condition is ",(0,r.mdx)("inlineCode",{parentName:"p"},"true"),", the machine follows the transition to the next state. If the condition is ",(0,r.mdx)("inlineCode",{parentName:"p"},"false"),", the machine follows the rest of the conditions to the next state."),(0,r.mdx)("p",null,"A ",(0,r.mdx)("strong",{parentName:"p"},"guarded transition")," is a transition that is enabled only if its ",(0,r.mdx)("inlineCode",{parentName:"p"},"guard")," evaluates to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true"),". The guard determines whether or not the transition can be enabled. Any transition can be a guarded transition."),(0,r.mdx)("p",null,"Guards should be pure, synchronous functions that return either ",(0,r.mdx)("inlineCode",{parentName:"p"},"true")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"false"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"const feedbackMachine = createMachine(\n  {\n    // ...\n    states: {\n      form: {\n        on: {\n          'feedback.submit': {\n            // highlight-next-line\n            guard: 'isValid',\n            target: 'submitting',\n          },\n        },\n      },\n      submitting: {\n        // ...\n      },\n    },\n  },\n  {\n    // highlight-start\n    guards: {\n      isValid: ({ context }) => {\n        return context.feedback.length > 0;\n      },\n    },\n    // highlight-end\n  },\n);\n")),(0,r.mdx)("h2",{id:"using-guards-in-stately-studio"},"Using guards in Stately Studio"),(0,r.mdx)(m,{name:"Video player",embedURL:"https://stately.ai/registry/editor/embed/e13bef2b-bb13-4465-96ac-0bc25340688e?machineId=96f3bfce-147a-4aa0-ae2d-674cdfcb14ec",mdxType:"EmbedMachine"}),(0,r.mdx)("admonition",{type:"studio"},(0,r.mdx)("p",{parentName:"admonition"},"In Stately Studio, guards are numbered in the order they are checked and labeled with \u201cif\u201d or \u201celse if\u201d along with their condition. Multiple guards on the same events are connected with a dotted line.")),(0,r.mdx)("p",null,"Coming soon\u2026 Why you might use guards."),(0,r.mdx)("h3",{id:"replace-event-with-a-guard"},"Replace event with a guard"),(0,r.mdx)("p",null,"When multiple guard conditions are added to one transition, the guards will be numbered in order. The first guard will be labeled ",(0,r.mdx)("strong",{parentName:"p"},"IF")," and subsequent guards will be labeled ",(0,r.mdx)("strong",{parentName:"p"},"ELSE"),"."),(0,r.mdx)("h4",{id:"on-the-canvas"},"On the canvas"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"Select the event you want to replace with a guarded transition."),(0,r.mdx)("li",{parentName:"ol"},"Use the ",(0,r.mdx)(p,{size:18,mdxType:"Plus"})," plus icon button to open the edit menu."),(0,r.mdx)("li",{parentName:"ol"},"Choose ",(0,r.mdx)("strong",{parentName:"li"},"Guard condition")," from the menu to add a guarded transition."),(0,r.mdx)("li",{parentName:"ol"},"Enter your condition into the text input.")),(0,r.mdx)("h4",{id:"using-the-transition-details-panel"},"Using the transition Details panel"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"Open the transition ",(0,r.mdx)(c,{size:18,mdxType:"Info"})," ",(0,r.mdx)("strong",{parentName:"li"},"Details")," panel from the right tool menu."),(0,r.mdx)("li",{parentName:"ol"},"Use the ",(0,r.mdx)("strong",{parentName:"li"},"Guard")," text input to name your guard\u2019s condition and replace your event with a guarded transition.")),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"multiple-guarded-transitions"},"Multiple guarded transitions"),(0,r.mdx)("p",null,"If you want to have a single event transition to different states in certain situations, you can supply an array of guarded transitions. Each transition will be tested in order, and the first transition whose ",(0,r.mdx)("inlineCode",{parentName:"p"},"guard")," evaluates to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true")," will be taken."),(0,r.mdx)("p",null,"You can specify a default transition to be taken as the last transition in the array. If none of the guards evaluate to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true"),", the default transition will be taken."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"const feedbackMachine = createMachine({\n  // ...\n  prompt: {\n    on: {\n      // highlight-start\n      'feedback.provide': [\n        // Taken if 'sentimentGood' guard evaluates to `true`\n        {\n          guard: 'sentimentGood',\n          target: 'thanks',\n        },\n        // Taken if none of the above guarded transitions are taken\n        // and if 'sentimentBad' guard evaluates to `true`\n        {\n          guard: 'sentimentBad',\n          target: 'form',\n        },\n        // Default transition\n        { target: 'form' },\n      ],\n      // highlight-end\n    },\n  },\n});\n")),(0,r.mdx)("h2",{id:"inline-guards"},"Inline guards"),(0,r.mdx)("p",null,"You can define guards as an inline function. This is useful for quickly prototyping logic but we generally recommended using serialized guards (strings or objects) for better reusability and visualization."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"on: {\n  event: {\n    guard: ({ context, event }) => true,\n    target: 'someState'\n  }\n}\n")),(0,r.mdx)("h2",{id:"guard-object"},"Guard object"),(0,r.mdx)("p",null,"A guard can be defined as an object with a ",(0,r.mdx)("inlineCode",{parentName:"p"},"type"),", which is the type of guard that references the provided guard implementation, and optional ",(0,r.mdx)("inlineCode",{parentName:"p"},"params"),", which can be read by the implemented guard:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"const feedbackMachine = createMachine(\n  {\n    // ...\n    states: {\n      // ...\n      form: {\n        on: {\n          submit: {\n            // highlight-next-line\n            guard: { type: 'isValid', params: { maxLength: 50 } },\n            target: 'submitting',\n          },\n        },\n      },\n      // ...\n    },\n  },\n  {\n    // highlight-start\n    guards: {\n      isValid: ({ context, guard }) => {\n        return (\n          context.feedback.length > 0 &&\n          context.feedback.length <= guard.maxLength\n        );\n      },\n    },\n    // highlight-end\n  },\n);\n")),(0,r.mdx)("p",null,"Guards can later be provided or overridden by providing custom guard implementations in the ",(0,r.mdx)("inlineCode",{parentName:"p"},".provide()")," method:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"const feedbackActor = createActor(\n  // highlight-start\n  feedbackMachine.provide({\n    guards: {\n      isValid: ({ context, guard }) => {\n        return (\n          context.feedback.length > 0 &&\n          context.feedback.length <= guard.maxLength &&\n          isNotSpam(context.feedback)\n        );\n      },\n    },\n  }),\n  // highlight-end\n).start();\n")),(0,r.mdx)("h2",{id:"higher-level-guards"},"Higher-level guards"),(0,r.mdx)("p",null,"XState provides higher-level guards, which are guards that compose other guards. There are three higher-level guards \u2013 ",(0,r.mdx)("inlineCode",{parentName:"p"},"and"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"or"),", and ",(0,r.mdx)("inlineCode",{parentName:"p"},"not"),":"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"and([...])")," - evaluates to ",(0,r.mdx)("inlineCode",{parentName:"li"},"true")," if all guards in ",(0,r.mdx)("inlineCode",{parentName:"li"},"and([...guards])")," evaluate to ",(0,r.mdx)("inlineCode",{parentName:"li"},"true")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"or([...])")," - evaluates to ",(0,r.mdx)("inlineCode",{parentName:"li"},"true")," if ",(0,r.mdx)("em",{parentName:"li"},"any")," guards in ",(0,r.mdx)("inlineCode",{parentName:"li"},"or([...guards])")," evaluate to ",(0,r.mdx)("inlineCode",{parentName:"li"},"true")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"not(...)")," - evaluates to ",(0,r.mdx)("inlineCode",{parentName:"li"},"true")," if the guard in ",(0,r.mdx)("inlineCode",{parentName:"li"},"not(guard)")," evaluates to ",(0,r.mdx)("inlineCode",{parentName:"li"},"false"))),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"on: {\n  event: {\n    guard: and(['isValid', 'isAuthorized']);\n  }\n}\n")),(0,r.mdx)("p",null,"Higher-level guards can be combined:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"on: {\n  event: {\n    guard: and(['isValid', or(['isAuthorized', 'isGuest'])]);\n  }\n}\n")),(0,r.mdx)("h2",{id:"in-state-guards"},"In-state guards"),(0,r.mdx)("p",null,"You can use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"stateIn(stateValue)")," guard to check if the current state matches the provided ",(0,r.mdx)("inlineCode",{parentName:"p"},"stateValue"),". This is most useful for ",(0,r.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/parallel-states"},"parallel states"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"on: {\n  event: {\n    guard: stateIn('#state1');\n  },\n  anotherEvent: {\n    guard: stateIn({ form: 'submitting' })\n  }\n}\n")),(0,r.mdx)("p",null,"In-state guards match the state of the entire machine, not the state node. There usually isn't a need to use in-state guards for regular states. Try to model transitions in your state machines so that you don't need to use in-state guards first."),(0,r.mdx)("h2",{id:"shorthands"},"Shorthands"),(0,r.mdx)("p",null,"It is recommended to define guards as guard objects, e.g. ",(0,r.mdx)("inlineCode",{parentName:"p"},"{ type: 'someGuard', params: { ... } }"),". However, if a guard has no params, you can specify it as a string:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"on: {\n  someEvent: {\n    // Equivalent to:\n    // guard: { type: 'someGuard' }\n    // highlight-next-line\n    guard: 'someGuard';\n  }\n}\n")),(0,r.mdx)("h2",{id:"typescript"},"TypeScript"),(0,r.mdx)("p",null,"You can strongly type the ",(0,r.mdx)("inlineCode",{parentName:"p"},"guards")," of your machine in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"types.guards")," property of the machine config."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  types: {} as {\n    // highlight-start\n    guards:\n      | {\n          type: 'isGreaterThan';\n          params: {\n            count: number;\n          };\n        }\n      | { type: 'isAllowed' };\n    // highlight-end\n  },\n  // ...\n  on: {\n    event: {\n      guard: { type: 'isGreaterThan', params: { count: 5 } },\n      // ...\n    },\n  },\n});\n")),(0,r.mdx)("h2",{id:"cheatsheet"},"Cheatsheet"),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Coming soon"),"."))}g.isMDXComponent=!0}}]);