"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[63450],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>l,MDXProvider:()=>u,mdx:()=>h,useMDXComponents:()=>p,withMDXComponents:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){return function(t){var n=p(t.components);return a.createElement(e,i({},t,{components:n}))}},p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,f=d["".concat(o,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(f,s(s({ref:t},l),{},{components:n})):a.createElement(f,s({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},74961:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={title:"In-state guards"},o="In-state guards",s={unversionedId:"xstate/states/in-state-guards",id:"version-4/xstate/states/in-state-guards",title:"In-state guards",description:"You can check if the machine is in a certain state using an in property on a transition. The in property takes a state ID as an argument and returns true if that state node is active in the current state, which can be useful in parallel states.",source:"@site/versioned_docs/version-4/xstate/states/in-state-guards.mdx",sourceDirName:"xstate/states",slug:"/xstate/states/in-state-guards",permalink:"/docs/xstate-v4/xstate/states/in-state-guards",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/states/in-state-guards.mdx",tags:[],version:"4",frontMatter:{title:"In-state guards"},sidebar:"tutorialSidebar",previous:{title:"History states",permalink:"/docs/xstate-v4/xstate/states/history-states"},next:{title:"Model-based testing",permalink:"/docs/xstate-v4/category/xstate-model-based-testing"}},c={},l=[{value:"Combining <code>cond</code> and <code>in</code>",id:"combining-cond-and-in",level:3}],d={toc:l};function p(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"in-state-guards"},"In-state guards"),(0,r.mdx)("p",null,"You can check if the machine is in a certain state using an ",(0,r.mdx)("inlineCode",{parentName:"p"},"in")," property on a transition. The ",(0,r.mdx)("inlineCode",{parentName:"p"},"in")," property takes a state ID as an argument and returns ",(0,r.mdx)("inlineCode",{parentName:"p"},"true")," if that state node is active in the current state, which can be useful in parallel states."),(0,r.mdx)("p",null,"In the example below, when the machine receives the ",(0,r.mdx)("inlineCode",{parentName:"p"},"LOG_WHEN_ACTIVE")," event, we check if the machine is in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"active")," state, specified by id, then ",(0,r.mdx)("inlineCode",{parentName:"p"},"logIsActive"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst lightMachine = createMachine(\n  {\n    type: 'parallel',\n    states: {\n      toggle: {\n        initial: 'inactive',\n        states: {\n          inactive: {\n            on: {\n              TOGGLE: 'active',\n            },\n          },\n          active: {\n            id: 'active',\n            on: {\n              TOGGLE: 'inactive',\n            },\n          },\n        },\n      },\n      logger: {\n        on: {\n          LOG_WHEN_ACTIVE: {\n            in: '#active',\n            actions: 'logIsActive',\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      logIsActive: () => {\n        console.log('Active!');\n      },\n    },\n  }\n);\n")),(0,r.mdx)("h3",{id:"combining-cond-and-in"},"Combining ",(0,r.mdx)("inlineCode",{parentName:"h3"},"cond")," and ",(0,r.mdx)("inlineCode",{parentName:"h3"},"in")),(0,r.mdx)("p",null,"You can combine a ",(0,r.mdx)("inlineCode",{parentName:"p"},"cond")," with an ",(0,r.mdx)("inlineCode",{parentName:"p"},"in")," property. Both the ",(0,r.mdx)("inlineCode",{parentName:"p"},"cond")," and the ",(0,r.mdx)("inlineCode",{parentName:"p"},"in")," will need to resolve to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true")," for the machine to transition."))}p.isMDXComponent=!0}}]);