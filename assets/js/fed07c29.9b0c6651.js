"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[20902],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>l,MDXProvider:()=>m,mdx:()=>x,useMDXComponents:()=>p,withMDXComponents:()=>u});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r.apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){return function(t){var n=p(t.components);return a.createElement(e,r({},t,{components:n}))}},p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,i(i({ref:t},l),{},{components:n})):a.createElement(h,i({ref:t},l))}));function x(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},85581:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=n(87462),o=(n(67294),n(3905));const r={title:"Context",description:"States are used for handling your apps states which you know about in advance. Context is a data store that you can use to store any arbitrary values."},s="Context",i={unversionedId:"xstate/actions/context",id:"version-4/xstate/actions/context",title:"Context",description:"States are used for handling your apps states which you know about in advance. Context is a data store that you can use to store any arbitrary values.",source:"@site/versioned_docs/version-4/xstate/actions/context.mdx",sourceDirName:"xstate/actions",slug:"/xstate/actions/context",permalink:"/statelyai-docs/docs/xstate-v4/xstate/actions/context",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/actions/context.mdx",tags:[],version:"4",frontMatter:{title:"Context",description:"States are used for handling your apps states which you know about in advance. Context is a data store that you can use to store any arbitrary values."},sidebar:"tutorialSidebar",previous:{title:"Built-in actions",permalink:"/statelyai-docs/docs/xstate-v4/xstate/actions/built-in-actions"},next:{title:"Transitions and choices",permalink:"/statelyai-docs/docs/xstate-v4/category/xstate-transitions-and-choices"}},c={},l=[{value:"Assign action",id:"assign-action",level:2},{value:"Using context in actions",id:"using-context-in-actions",level:2},{value:"Summary",id:"summary",level:2}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,o.mdx)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"context"},"Context"),(0,o.mdx)("p",null,"Statecharts represent their finite state using ",(0,o.mdx)("inlineCode",{parentName:"p"},"states")," but can also handle states which are ",(0,o.mdx)("em",{parentName:"p"},"not")," finite. These states might be:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Counters, which can be incremented as many times as required."),(0,o.mdx)("li",{parentName:"ul"},"Text inputs, where the user might enter any value.")),(0,o.mdx)("p",null,"This \u201cinfinite\u201d state can be stored in a statechart\u2019s ",(0,o.mdx)("strong",{parentName:"p"},"context"),", a data store that can be updated only by the statechart itself."),(0,o.mdx)("p",null,"You can pass a machine its context using the ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," property:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  // highlight-start\n  context: {\n    count: 0,\n  // highlight-end\n  },\n});\n")),(0,o.mdx)("p",null,"Next, we\u2019ll see how to update the context using the assign action."),(0,o.mdx)("h2",{id:"assign-action"},"Assign action"),(0,o.mdx)("p",null,"Assigning new values to the context in XState is done through the ",(0,o.mdx)("inlineCode",{parentName:"p"},"assign")," action and is the only way to change a machine\u2019s context. ",(0,o.mdx)("strong",{parentName:"p"},"Never mutate a machine\u2019s ",(0,o.mdx)("inlineCode",{parentName:"strong"},"context")," externally"),". Every context change should happen explicitly due to an event."),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"assign")," action takes the context ",(0,o.mdx)("em",{parentName:"p"},"assigner"),", representing how values should be assigned in the current context. The ",(0,o.mdx)("em",{parentName:"p"},"assigner")," can be an object:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, assign } from 'xstate';\n\nconst machine = createMachine(\n  {\n    // adding a schema for the events will make them typesafe\n    schema: {\n      events: {} as { type: 'INCREMENT'; value: number; time: Date },\n    },\n    context: {\n      count: 0,\n      updatedAt: new Date(),\n      message: 'Hello World',\n    },\n    on: {\n      INCREMENT: {\n        actions: 'assignToContext',\n      },\n    },\n  },\n  {\n    actions: {\n      // highlight-start\n      assignToContext: assign({\n        // increment the current count by the event value\n        count: (context, event) => context.count + event.value,\n\n        /*\n         * you can update multiple properties at once\n         * we name the context parameter `_`,\n         * to indicate that we don\u2019t use it\n         */\n        updatedAt: (_, event) => event.time,\n\n        /*\n         * to keep TypeScript happy,\n         * update using a function with the context parameter\n         * again we use the name `_` to indicate that the \n         * parameter is unused\n         */\n        message: (_) => 'Count changed',\n      }),\n      // highlight-end\n    },\n  }\n);\n")),(0,o.mdx)("p",null,"Or the ",(0,o.mdx)("em",{parentName:"p"},"assigner")," can be a function that returns the updated state:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, assign } from 'xstate';\n\nconst machine = createMachine(\n  {\n    context: {\n      count: 0,\n      message: '',\n    },\n    on: {\n      INCREMENT: {\n        actions: 'assignToContext',\n      },\n    },\n  },\n  {\n  // highlight-start\n    actions: {\n      assignToContext: assign((context) => {\n        return {\n          count: context.count + 1,\n\n          // assign static value to the message (no function needed)\n          message: 'Count changed',\n        };\n      }),\n    },\n  // highlight-end\n  }\n);\n")),(0,o.mdx)("p",null,"You can pass several ",(0,o.mdx)("inlineCode",{parentName:"p"},"assign")," actions in an array and they\u2019ll be executed sequentially:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n  actions: [\n    assign({ count: 3 }),\n    // context.count is now 3\n\n    assign({ count: context => context.count * 2 })\n    // context.count is now 6\n  ],\n// ...\n")),(0,o.mdx)("h2",{id:"using-context-in-actions"},"Using context in actions"),(0,o.mdx)("p",null,"When XState fires an action, the action receives several arguments. The first argument is the current ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," of the machine. The second argument is the most recent ",(0,o.mdx)("inlineCode",{parentName:"p"},"event")," sent to the machine."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\ncreateMachine(\n  {\n    context: {\n      count: 0,\n    },\n    on: {\n      LOG_COUNT: {\n        actions: 'logCountToConsole',\n      },\n    },\n  },\n  {\n    // highlight-start\n    actions: {\n      logCountToConsole: (context, event) => {\n        console.log(`Count is ${context.count}`);\n\n        console.log(event.type); // Logs 'LOG_COUNT'\n      },\n    },\n    // highlight-end\n  }\n);\n")),(0,o.mdx)("admonition",{title:"TypeScript",type:"typescript"},(0,o.mdx)("h2",{parentName:"admonition",id:"typescript"},"TypeScript"),(0,o.mdx)("p",{parentName:"admonition"},"In TypeScript, you can strongly type your context by passing a type to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"schema")," property, which means that wherever you access the context, whether inside actions or when running your machine, the context will be strongly typed."),(0,o.mdx)("pre",{parentName:"admonition"},(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"const lightMachine = createMachine({\n  schema: {\n    context: {} as { value: number },\n  },\n});\n"))),(0,o.mdx)("h2",{id:"summary"},"Summary"),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"States")," are used for handling your apps states which you know about in advance. ",(0,o.mdx)("inlineCode",{parentName:"p"},"Context")," is a data store that you can use to store any arbitrary values. The ",(0,o.mdx)("inlineCode",{parentName:"p"},"assign")," action can be used to assign values to the context, and the context can be used in any action you call."))}p.isMDXComponent=!0}}]);