"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[48175],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>l,MDXProvider:()=>d,mdx:()=>b,useMDXComponents:()=>m,withMDXComponents:()=>p});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){return function(t){var n=m(t.components);return a.createElement(e,o({},t,{components:n}))}},m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=m(n),d=r,v=p["".concat(c,".").concat(d)]||p[d]||u[d]||o;return n?a.createElement(v,s(s({ref:t},l),{},{components:n})):a.createElement(v,s({ref:t},l))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=v;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var l=2;l<o;l++)c[l]=n[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}v.displayName="MDXCreateElement"},63621:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={title:"Callbacks",description:"Promise actors let you model promises, but not every actor will be a promise. Callback actors give you a flexible API for managing a long-running actor."},c=void 0,s={unversionedId:"xstate/actors/callbacks",id:"version-4/xstate/actors/callbacks",title:"Callbacks",description:"Promise actors let you model promises, but not every actor will be a promise. Callback actors give you a flexible API for managing a long-running actor.",source:"@site/versioned_docs/version-4/xstate/actors/callbacks.mdx",sourceDirName:"xstate/actors",slug:"/xstate/actors/callbacks",permalink:"/statelyai-docs/docs/xstate-v4/xstate/actors/callbacks",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/actors/callbacks.mdx",tags:[],version:"4",frontMatter:{title:"Callbacks",description:"Promise actors let you model promises, but not every actor will be a promise. Callback actors give you a flexible API for managing a long-running actor."},sidebar:"tutorialSidebar",previous:{title:"Actions vs. actors",permalink:"/statelyai-docs/docs/xstate-v4/xstate/actors/actions-vs-actors"},next:{title:"Machines",permalink:"/statelyai-docs/docs/xstate-v4/xstate/actors/machines"}},i={},l=[],p={toc:l};function m(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"Promise actors let you model promises declaratively but not every actor will be a promise. ",(0,r.mdx)("strong",{parentName:"p"},"Callback actors")," give you a flexible API for managing a long-running actor that can do several things a promise can\u2019t, like:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Send events back to its parent"),(0,r.mdx)("li",{parentName:"ul"},"Receive events from its parent and react to them"),(0,r.mdx)("li",{parentName:"ul"},"Start listeners/processes and clean them up when needed")),(0,r.mdx)("p",null,"Callback actors are declared using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"() => () => {}")," syntax, which is how XState distinguishes them from promise actors, which are declared as: ",(0,r.mdx)("inlineCode",{parentName:"p"},"() => {}"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\ncreateMachine(\n  {\n    invoke: {\n      src: 'callbackActor',\n    },\n  },\n  {\n    // `actors` in v5\n    services: {\n      callbackActor: (context, event) => (sendBack, onReceive) => {\n        // Run any code you want inside here\n\n        return () => {\n          // Any code inside here will be called when\n          // you leave this state, or the machine is stopped\n        };\n      },\n    },\n  }\n);\n")),(0,r.mdx)("admonition",{type:"warningxstate"},(0,r.mdx)("p",{parentName:"admonition"},"XState v5 is in beta. ",(0,r.mdx)("a",{parentName:"p",href:"https://www.npmjs.com/package/xstate/v/5.0.0-beta.13"},"Check out XState v5 Beta on NPM"),".")),(0,r.mdx)("p",null,"Callbacks are called with:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"context"),", the state of the context at the moment the actor started."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"event"),", the last event sent to the machine.")),(0,r.mdx)("p",null,"Callbacks also receive a ",(0,r.mdx)("inlineCode",{parentName:"p"},"sendBack")," function, which you can use to send events back to its parent machine."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\ncreateMachine(\n  {\n    initial: 'counting',\n    states: {\n      counting: {\n        invoke: {\n          src: 'callbackActor',\n        },\n        on: {\n          ONE_SECOND_PASSED: {\n            actions: 'logToConsole',\n          },\n          STOP_COUNTING: {\n            target: 'stopped',\n          },\n        },\n      },\n      stopped: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    actions: {\n      logToConsole: () => {\n        console.log('One second passed!');\n      },\n    },\n    // `actors` in v5\n    services: {\n      callbackActor: (context, event) => (sendBack, onReceive) => {\n        const interval = setInterval(() => {\n          sendBack({\n            type: 'ONE_SECOND_PASSED',\n          });\n        }, 1000);\n\n        return () => {\n          clearInterval(interval);\n        };\n      },\n    },\n  }\n);\n")),(0,r.mdx)("p",null,"In the example above, we use ",(0,r.mdx)("inlineCode",{parentName:"p"},"sendBack")," to send an event back to the parent machine every second."),(0,r.mdx)("p",null,"We can return a function from the callback actor to run any necessary \u201ccleanup.\u201d This cleanup function is run when the state containing the invoke is exited. In the example above, the interval is cleared when the ",(0,r.mdx)("inlineCode",{parentName:"p"},"counting")," state is exited."))}m.isMDXComponent=!0}}]);