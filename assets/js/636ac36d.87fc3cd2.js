"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[26116],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>l,MDXProvider:()=>p,mdx:()=>f,useMDXComponents:()=>m,withMDXComponents:()=>d});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r.apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),d=function(e){return function(t){var n=m(t.components);return a.createElement(e,r({},t,{components:n}))}},m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=m(n),p=o,h=d["".concat(s,".").concat(p)]||d[p]||u[p]||r;return n?a.createElement(h,c(c({ref:t},l),{},{components:n})):a.createElement(h,c({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=h;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var l=2;l<r;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9611:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var a=n(87462),o=(n(67294),n(3905));const r={title:"The actor model"},s=void 0,c={unversionedId:"actor-model",id:"actor-model",title:"The actor model",description:"When you run a state machine, it becomes an actor. In the actor model, actors are \u201clive\u201d objects that can communicate with each other via asynchronous messages. In XState, we refer to these messages as events.",source:"@site/docs/actor-model.mdx",sourceDirName:".",slug:"/actor-model",permalink:"/docs/actor-model",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/docs/actor-model.mdx",tags:[],version:"current",frontMatter:{title:"The actor model"},sidebar:"docs",previous:{title:"What are state machines and statecharts?",permalink:"/docs/state-machines-and-statecharts"},next:{title:"XState",permalink:"/docs/xstate"}},i={},l=[{value:"State",id:"state",level:2},{value:"Communication with events",id:"communication-with-events",level:2},{value:"Spawning",id:"spawning",level:2},{value:"Backend development",id:"backend-development",level:2},{value:"Frontend development",id:"frontend-development",level:2},{value:"XState",id:"xstate",level:2}],d={toc:l};function m(e){let{components:t,...n}=e;return(0,o.mdx)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"When you run a state machine, it becomes an actor. In the actor model, actors are \u201clive\u201d objects that can communicate with each other via asynchronous messages. In XState, we refer to these messages as ",(0,o.mdx)("a",{parentName:"p",href:"/docs/transitions"},(0,o.mdx)("strong",{parentName:"a"},"events")),"."),(0,o.mdx)("p",null,"Coming soon\u2026 what are some good examples of actors in software development?"),(0,o.mdx)("h2",{id:"state"},"State"),(0,o.mdx)("p",null,"An actor has its own internal, encapsulated state that the actor itself can only update. An actor may update its internal state in response to a message it receives, but it cannot be updated by any other entity. Actors do not share state. The only way for an actor to share data is by sending events."),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/docs/actors"},"Read more about actors and state"),"."),(0,o.mdx)("h2",{id:"communication-with-events"},"Communication with events"),(0,o.mdx)("p",null,"Actors communicate with other actors by sending and receiving events asynchronously. Actors use an internal \u201cmailbox\u201d that acts like an event queue, processing events one at a time."),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/docs/actors"},"Read more about actors and events"),"."),(0,o.mdx)("h2",{id:"spawning"},"Spawning"),(0,o.mdx)("p",null,"Actors can spawn new actors. Actors will spawn new actors in situations where they need to delegate work to another actor or when they need to create a new actor to handle a new task. Spawning allows for a flexible and dynamic system where actors can be created and destroyed as needed to handle the workload efficiently."),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"/docs/spawn"},"Read more about spawning actors"),"."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"/docs/actors#invoking-and-spawning-actors"},"Read about the difference between invoking and spawning actors"),".")),(0,o.mdx)("h2",{id:"backend-development"},"Backend development"),(0,o.mdx)("p",null,"Coming soon\u2026 how do you use the actor model in backend dev?"),(0,o.mdx)("h2",{id:"frontend-development"},"Frontend development"),(0,o.mdx)("p",null,"Coming soon\u2026 how do you use the actor model in frontend dev?"),(0,o.mdx)("h2",{id:"xstate"},"XState"),(0,o.mdx)("p",null,"Coming soon\u2026 how does the actor model work in XState?"))}m.isMDXComponent=!0}}]);