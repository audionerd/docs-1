"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[10391],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>p,mdx:()=>x,useMDXComponents:()=>d,withMDXComponents:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},s.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),m=function(e){return function(t){var n=d(t.components);return a.createElement(e,s({},t,{components:n}))}},d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(n),p=o,h=m["".concat(i,".").concat(p)]||m[p]||u[p]||s;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function x(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=h;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},97284:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const s={title:"Should this be a state, or in context?",description:"How to decide when to use state or context.",tags:["context","state machine","xstate","state"],authors:["matt"],image:"/blog/2021-04-29-should-this-be-a-state-or-in-context.png",slug:"2021-04-29-should-this-be-a-state-or-in-context",date:new Date("2021-04-29T00:00:00.000Z")},i=void 0,r={permalink:"/blog/2021-04-29-should-this-be-a-state-or-in-context",editUrl:"https://github.com/statelyai/docs/edit/main/blog/2021-04-29-should-this-be-a-state-or-in-context/index.mdx",source:"@site/blog/2021-04-29-should-this-be-a-state-or-in-context/index.mdx",title:"Should this be a state, or in context?",description:"How to decide when to use state or context.",date:"2021-04-29T00:00:00.000Z",formattedDate:"April 29, 2021",tags:[{label:"context",permalink:"/blog/tags/context"},{label:"state machine",permalink:"/blog/tags/state-machine"},{label:"xstate",permalink:"/blog/tags/xstate"},{label:"state",permalink:"/blog/tags/state"}],readingTime:3.48,hasTruncateMarker:!0,authors:[{name:"Matt Pocock",title:"Stately Team",url:"https://github.com/mattpocock",imageURL:"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png",key:"matt"}],frontMatter:{title:"Should this be a state, or in context?",description:"How to decide when to use state or context.",tags:["context","state machine","xstate","state"],authors:["matt"],image:"/blog/2021-04-29-should-this-be-a-state-or-in-context.png",slug:"2021-04-29-should-this-be-a-state-or-in-context",date:"2021-04-29T00:00:00.000Z"},prevItem:{title:"Should this be an action, or a service?",permalink:"/blog/2021-04-30-should-this-be-an-action-or-a-service"},nextItem:{title:"What\u2019s the difference between Machine and createMachine?",permalink:"/blog/2021-04-28-whats-the-difference-between-machine-and-createmachine"}},l={authorsImageUrls:[void 0]},c=[{value:"Which should I choose?",id:"which-should-i-choose",level:2},{value:"Putting things in context",id:"putting-things-in-context",level:2},{value:"Rules to live by",id:"rules-to-live-by",level:2}],m={toc:c};function d(e){let{components:t,...n}=e;return(0,o.mdx)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"State machines offer several API\u2019s for expressing state. Like other tools, you can keep arbitrary values in a store (usually expressed as an object) called ",(0,o.mdx)("inlineCode",{parentName:"p"},"context"),"."),(0,o.mdx)("p",null,"This is handy for values which change over time and you need to keep updated, like the value of a form input:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'import { createMachine, assign } from "xstate";\n\nconst machine = createMachine({\n  context: {\n    name: "",\n  },\n  on: {\n    CHANGE_NAME: {\n      actions: assign((context, event) => {\n        return {\n          name: event.value,\n        };\n      }),\n    },\n  },\n});\n')),(0,o.mdx)("p",null,"Every time the ",(0,o.mdx)("inlineCode",{parentName:"p"},"CHANGE_NAME")," event is sent to the machine, we'll update the value in ",(0,o.mdx)("inlineCode",{parentName:"p"},"context"),". We can then use that value to display the value in our UI or send it to an API."),(0,o.mdx)("p",null,"XState also gives you another way of expressing state - through finite states. Let's imagine a modal:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'const machine = createMachine({\n  initial: "closed",\n  states: {\n    closed: {\n      on: {\n        OPEN: "open",\n      },\n    },\n    open: {\n      on: {\n        CLOSE: "close",\n      },\n    },\n  },\n});\n')),(0,o.mdx)("p",null,"Here, the modal's state is expressed through the ",(0,o.mdx)("inlineCode",{parentName:"p"},"states: {}")," attribute, which also defines which events can be received during each state. You can only ",(0,o.mdx)("inlineCode",{parentName:"p"},"CLOSE")," the modal when it's ",(0,o.mdx)("inlineCode",{parentName:"p"},"open"),", and vice versa."),(0,o.mdx)("h2",{id:"which-should-i-choose"},"Which should I choose?"),(0,o.mdx)("p",null,"The choice between using ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"states")," isn't always clear. For instance, the modal machine above could be expressed using ",(0,o.mdx)("inlineCode",{parentName:"p"},"context"),":"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  context: {\n    isOpen: false,\n  },\n  on: {\n    OPEN: {\n      actions: assign({ isOpen: true }),\n    },\n    CLOSE: {\n      actions: assign({ isOpen: false }),\n    },\n  },\n});\n")),(0,o.mdx)("p",null,"This gives you exactly the same functionality as the states-based one above - you can track when the modal is open and closed, and send the same events."),(0,o.mdx)("p",null,"The reason this can be expressed using both ",(0,o.mdx)("inlineCode",{parentName:"p"},"states")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," is because ",(0,o.mdx)("em",{parentName:"p"},"all of the events do the same thing no matter what state you\u2019re in"),". There are no events you need to declare as impossible in certain states."),(0,o.mdx)("p",null,"To show you what I mean, let\u2019s imagine a form input inside a modal. We only want to allow changes to the form input while the modal is open."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'const machine = createMachine({\n  initial: "closed",\n  context: {\n    name: "",\n  },\n  states: {\n    closed: {\n      on: {\n        OPEN: "open",\n      },\n    },\n    open: {\n      on: {\n        CLOSE: "close",\n        CHANGE_NAME: {\n          actions: assign((context, event) => {\n            return {\n              name: event.value,\n            };\n          }),\n        },\n      },\n    },\n  },\n});\n')),(0,o.mdx)("p",null,"When the modal is in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"closed")," state, the ",(0,o.mdx)("inlineCode",{parentName:"p"},"CHANGE_NAME")," event will not change the value in ",(0,o.mdx)("inlineCode",{parentName:"p"},"context"),". State machines are great at this - only allowing the things you want to happen to happen. Some other examples might be:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Not allowing users to submit a form while the previous API call is loading"),(0,o.mdx)("li",{parentName:"ul"},"Only allowing users to log in if they\u2019re not already logged in")),(0,o.mdx)("h2",{id:"putting-things-in-context"},"Putting things in context"),(0,o.mdx)("p",null,"You might be wondering - but, I ",(0,o.mdx)("em",{parentName:"p"},"can")," express the above in ",(0,o.mdx)("inlineCode",{parentName:"p"},"context"),"!"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'const machine = createMachine({\n  context: {\n    name: "",\n    isOpen: false,\n  },\n  on: {\n    OPEN: { actions: assign({ isOpen: true }) },\n    CLOSE: { actions: assign({ isOpen: false }) },\n    CHANGE_NAME: {\n      actions: assign((context, event) => {\n        // This acts as the guard to prevent editing\n        // the name while it\'s open\n        if (!context.isOpen) return {};\n        return {\n          name: event.value,\n        };\n      }),\n    },\n  },\n});\n')),(0,o.mdx)("p",null,"I think this is incorrect for two reasons. First, as requirements grow, so will the complexity of your logic. Let\u2019s imagine that the modal can now be either ",(0,o.mdx)("inlineCode",{parentName:"p"},"closing")," (i.e. animating out) or ",(0,o.mdx)("inlineCode",{parentName:"p"},"closed"),". We\u2019ll soon see an explosion of booleans, as I discussed in ",(0,o.mdx)("a",{parentName:"p",href:"https://dev.to/mpocock1/usestate-vs-usereducer-vs-xstate-part-1-modals-569e"},"this article on useState/useReducer"),"."),(0,o.mdx)("p",null,"Second, XState is auto-documenting via the ",(0,o.mdx)("a",{parentName:"p",href:"https://xstate.js.org/viz/"},"XState visualiser"),". The more your logic is expressed in ",(0,o.mdx)("inlineCode",{parentName:"p"},"states"),", the easier it\u2019s going to be to visualise. The machine above is basically a single state with its logic expressed in ways that XState can\u2019t visualise."),(0,o.mdx)("h2",{id:"rules-to-live-by"},"Rules to live by"),(0,o.mdx)("p",null,"You should be keeping most of your state in context. That includes form values, API data - anything which cannot be expressed finitely."),(0,o.mdx)("p",null,"But state machines are powerful ",(0,o.mdx)("em",{parentName:"p"},"because")," of their states. Use states when you want to express your logic visually, or gate events to certain states."))}d.isMDXComponent=!0}}]);