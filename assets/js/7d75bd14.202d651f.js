"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[64313],{47156:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"2023-10-05-what-is-a-state-machine","metadata":{"permalink":"/statelyai-docs/blog/2023-10-05-what-is-a-state-machine","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-10-02-what-is-a-state-machine/index.mdx","source":"@site/blog/2023-10-02-what-is-a-state-machine/index.mdx","title":"What is a state machine?","description":"Learn what a state machine is, and how it can help you model and understand complex systems visually.","date":"2023-10-05T00:00:00.000Z","formattedDate":"October 5, 2023","tags":[{"label":"state machine","permalink":"/statelyai-docs/blog/tags/state-machine"},{"label":"statechart","permalink":"/statelyai-docs/blog/tags/statechart"}],"readingTime":8.655,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"What is a state machine?","description":"Learn what a state machine is, and how it can help you model and understand complex systems visually.","tags":["state machine","statechart"],"authors":["david"],"slug":"2023-10-05-what-is-a-state-machine","image":"/blog/2023-10-05-what-is-a-state-machine.png","date":"2023-10-05T00:00:00.000Z"},"nextItem":{"title":"Persisting and restoring state in XState","permalink":"/statelyai-docs/blog/2023-10-02-persisting-state"}},"content":"You might have heard of \u201cstate machine\u201d or \u201cfinite-state machine\u201d before. [If you look up _state machine_ on Wikipedia](https://en.wikipedia.org/wiki/Finite-state_machine), you\u2019ll read that a state machine is described as a \u201cmathematical model of computation,\u201d followed by a bunch of symbols and computer science jargon that doesn\u2019t immediately seem to apply to your team\u2019s work.\\n\\nHowever, state machines are _really useful_ for describing almost any kind of logic, feature, user story, sequence, process, workflow, specification, and more. \x3c!--truncate--\x3eThey can greatly improve how your team collaborates on processes, flows, features, and any other kinds of application logic, and they\u2019re much simpler to understand than you may think.\\n\\nIf you\u2019ve worked with flowcharts or diagrammed a process on a whiteboard with boxes and arrows, you may already know how state machines work!\\n\\n# What is a state machine?\\n\\nA state machine is a way of modeling how something works, using states and transitions to show how something changes over time in response to events.\\n\\n<ThemedImage\\n  alt=\\"A state machine for a music player. The state machine starts in the Paused state, and on play, goes to the Playing state. On pause, it goes back to the Paused state. In any state, you can skip to the next track.\\"\\n  sources={{\\n    light:\\n      \'/blog/2023-10-02-what-is-a-state-machine/music-player-state-machine-light.png\',\\n    dark: \'/blog/2023-10-02-what-is-a-state-machine/music-player-state-machine-dark.png\',\\n  }}\\n/>\\n\\nSpecifically, it formally models how a system transitions from one state to another based on specific events (e.g., triggers, signals, changes, etc.). Think of it as a useful tool for visualizing and designing the flow of user experiences, product features, or any process you\u2019re working on.\\n\\nVisually, state machine diagrams are similar to flowcharts. Both use shapes to represent states (e.g., steps in a flow) and arrows to indicate transitions between those states. The main difference is that state machines are more precise, formal, and powerful than flowcharts. They\u2019re also more flexible since you can use them to model any kind of logic, not just processes.\\n\\n<ThemedImage\\n  alt=\\"A booking state machine with an initial idle state. From idle you can transition to car booking, flight booking, and hotel booking states.\\"\\n  sources={{\\n    light:\\n      \'/blog/2023-10-02-what-is-a-state-machine/flight-booking-state-machine.png\',\\n    dark: \'/blog/2023-10-02-what-is-a-state-machine/flight-booking-state-machine.png\',\\n  }}\\n/>\\n\\nState machines are a concept deeply rooted in computer science; however, they have broad applications that extend to various business domains and design disciplines. From developing intuitive software interfaces to designing effective business processes, state machines provide a structured way to model and understand complex systems. Whether you\u2019re a product owner, project manager, designer, developer, QA tester, business analyst, or any other role, understanding state machines can significantly improve your ability to design, manage, and refine features, processes, and products.\\n\\nIn short, a state machine lets us clearly understand how something reacts when an event occurs.\\n\\n## The parts of a state machine\\n\\nVisually, state machines are just boxes and arrows. The building blocks of a state machine \u2013\xa0**states, events,** and **transitions,** are quite straightforward (no pun intended), but together, they form a powerful tool for modeling and understanding systems.\\n\\n### States\\n\\nA [state](/docs/state-machines-and-statecharts#states) represents a particular situation, mode, or status that something can be in. For instance, an e-commerce site\u2019s order can be in the _Pending_, _Shipped_, _Delivered_, or _Returned_ states. Each of these is a finite state, contributing to the entire lifecycle of an order.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"Pending and shipped states.\\"\\n    sources={{\\n      light: \'/blog/2023-10-02-what-is-a-state-machine/order-states-light.png\',\\n      dark: \'/blog/2023-10-02-what-is-a-state-machine/order-states-dark.png\',\\n    }}\\n  />\\n</p>\\n\\nFinite states are **deterministic**, meaning that something can only be in exactly one finite state at a time. An order cannot be in both the _Pending_ and _Delivered_ states at the same time, just like you can\u2019t be in both the _Asleep_ and _Awake_ states simultaneously.\\n\\nState machines always start at an **[initial state](/docs/state-machines-and-statecharts#initial-state)** and may end up in a **[final state](/docs/state-machines-and-statecharts#final-state)**, indicating that the state machine is \u201cdone\u201d and can no longer transition to any other state.\\n\\n### Events\\n\\nEvents are occurrences; they\u2019re a record that something happened. Using the previous example, an event like _item shipped_ might transition an order\u2019s state from _Pending_ to _Shipped_.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"There is an initial Pending state. The machine transitions from Pending to the Shipped state with the item shipped event.\\"\\n    sources={{\\n      light: \'/blog/2023-10-02-what-is-a-state-machine/order-event-light.png\',\\n      dark: \'/blog/2023-10-02-what-is-a-state-machine/order-event-dark.png\',\\n    }}\\n  />\\n</p>\\n\\n### Transitions\\n\\nA state [transition](/docs/transitions) describes how a system \u201cmoves\u201d from one state to another. These are the arrows between the states, labeled by the event that causes the transition to occur.\\n\\nIn state machines, transitions always happen immediately. For example, an order can be _Pending_ for some time (almost frustratingly so), but when the _item shipped_ event occurs, it immediately transitions to the _Shipped_ state.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"State machine for an order: the states are pending, shipped, delivered, and returned.\\"\\n    sources={{\\n      light:\\n        \'/blog/2023-10-02-what-is-a-state-machine/order-transitions-light.png\',\\n      dark: \'/blog/2023-10-02-what-is-a-state-machine/order-transitions-dark.png\',\\n    }}\\n  />\\n</p>\\n\\n[View this state machine in Stately](https://stately.ai/registry/editor/092bf401-2d65-48ae-969c-99b4a7eeb87f?machineId=942c00ac-7922-4a5a-bf92-d2438847c62f&mode=design).\\n\\n## A state machine example\\n\\nLet\u2019s say you wanted to create a flow for a travel booking app. This flow represents the logic of a user booking a flight, hotel, and rental car, and you can apply this logic to the frontend code (as a multi-step flow) and backend code (as a workflow that communicates with APIs to book everything). Let\u2019s model this travel booking flow as a state machine.\\n\\nFirst, think of all of the **states** of this flow. Each state represents something that is happening, such as the flight or hotel being booked:\\n\\n- Booking flight\\n- Booking hotel\\n- Booking car\\n- Confirmation\\n- Error\\n\\nTip: make sure to handle errors! In the real world, things don\u2019t always go according to plan.\\n\\nThen, think of all the **events** that can happen in the flow. There are the \u201chappy-path\u201d events:\\n\\n- Flight booked\\n- Hotel booked\\n- Car booked\\n\\nBut other events can happen:\\n\\n- Flight booking failed\\n- Hotel booking failed\\n- Car booking failed\\n- Timeout\\n\\nYou can then combine these states and events to create a complete **state machine diagram** that represents all the possible user flows through the app:\\n\\n<EmbedMachine\\n  name=\\"booking machine\\"\\n  embedURL=\\"https://stately.ai/registry/editor/embed/9fa24cc0-3026-41be-bb22-9afc3980fefc?machineId=5e614700-7fc3-4d22-adce-4dd6cf4f6de0&mode=Design\\"\\n/>\\n\\nThe state machine above uses parent and child states, a feature of [statecharts](/docs/state-machines-and-statecharts#what-is-a-statechart), to reduce complexity.\\n\\nThese state machines serve as a **source of truth** for your app logic since you can use them for:\\n\\n- **Documentation** that outlines the features and use cases represented in the flow\\n- **Code** you can generate from the state machine\\n- **Diagrams** as visual documentation\\n- **Tests** you can also generate for various flows\\n\\n## Benefits of using state machines\\n\\nUnderstanding and managing anything that can happen in your applications is crucial for [efficient collaboration and innovation](/blog/using-teams-in-stately-studio) \u2013\xa0you want to ensure that your team can understand and iterate on app logic and features quickly, no matter how complex they get. State machines are a powerful visual approach for accomplishing that, and they\u2019re much more than just a diagramming tool.\\n\\nThere are many key advantages of using state machines:\\n\\n### Visualized documentation\\n\\nWith state machine diagrams, you can visually represent the states of a process, making it easier to grasp and communicate complex logic. These diagrams bridge the communication gap between technical and non-technical team members. They also provide a clear way to document and share app logic, which you could use for onboarding new team members. After all, following boxes and arrows (just like a flowchart) is much easier than parsing code, especially for someone unfamiliar with the codebase.\\n\\n<ThemedImage\\n  alt=\\"A mermaid diagram of our order state machine.\\"\\n  sources={{\\n    light:\\n      \'/blog/2023-10-02-what-is-a-state-machine/mermaid-order-machine-light.png\',\\n    dark: \'/blog/2023-10-02-what-is-a-state-machine/mermaid-order-machine-dark.png\',\\n  }}\\n/>\\n\\n_Our [export to Mermaid feature](/docs/export-as-code#export-formats) enables you to embed your state machines in GitHub and GitLab pull requests and comments._\\n\\n### Consistent, robust application logic\\n\\nBy mapping out all states and transitions, state machines ensure you account for every possible scenario. This minimizes unexpected behaviors (such as undesired states/transitions) and system inconsistencies because it is **mathematically impossible** for a state machine to take a transition that does not exist. You can quickly identify a transition to a state that should not go to that state. This is especially useful for complex apps, where it\u2019s easy to miss edge cases or unexpected scenarios.\\n\\n### Modularity and scalability\\n\\nState machines allow for isolating logic, meaning you can make changes or additions to a specific segment without overhauling the entire system. Regardless of framework, programming language, or implementation, the core abstractions remain the same: states, events, and transitions. If you need to add, change, or remove a feature, the process is to add, change, or remove states and transitions.\\n\\n### Test path generation\\n\\nState machines clearly define all possible states, events, and transitions, allowing testers to simulate specific events and verify if transitions to specific states occur as expected. Since state machines are directed graphs, they act like a \u201cmap\u201d for your app logic. This map enables the automatic generation of many different \u201cpaths\u201d through the state machine. Each path represents a potential use case, even those that may initially go unnoticed, such as edge cases. Exhaustive test path generation is also possible so that you can test every possible path through the state machine.\\n\\n:::info\\n\\n_Our [export to Stories feature](/docs/export-as-code#export-formats) enables you to generate the happy paths (stories) for your app:_\\n\\n### Stories for `orderMachine`\\n\\n#### orderMachine.Pending\\n\\n1. _Start_\\n\\n   \u2192 **State** `orderMachine.Pending`\\n\\n#### orderMachine.Shipped\\n\\n1. _Start_\\n\\n   \u2192 **State** `orderMachine.Pending`\\n\\n2. **Event** `item shipped`\\n\\n   \u2192 **State** `orderMachine.Shipped`\\n\\n#### orderMachine.Delivered\\n\\n1. _Start_\\n\\n   \u2192 **State** `orderMachine.Pending`\\n\\n2. **Event** `item shipped`\\n\\n   \u2192 **State** `orderMachine.Shipped`\\n\\n3. **Event** `item delivered`\\n\\n   \u2192 **State** `orderMachine.Delivered`\\n\\n#### orderMachine.Returned\\n\\n1. _Start_\\n\\n   \u2192 **State** `orderMachine.Pending`\\n\\n2. **Event** `item shipped`\\n\\n   \u2192 **State** `orderMachine.Shipped`\\n\\n3. **Event** `item delivered`\\n\\n   \u2192 **State** `orderMachine.Delivered`\\n\\n4. **Event** `item returned`\\n\\n   \u2192 **State** `orderMachine.Returned`\\n\\n:::\\n\\n## Transition to state machines\\n\\nWe love state machines at [Stately](/) because we know how valuable they can be to development teams. State machines provide a visually clear way to understand, design, and manage flows and logic at any level of complexity. Integrating the principles of state machines can lead to more predictable outcomes, clearer communication, and enhanced efficiency for the entire team, from project managers to designers and developers. You can use them as a precise way of diagramming and documenting app logic and even use them in your codebase to power that same logic.\\n\\nThere are many ways to get started with state machines:\\n\\n- [Watch our video intro to Stately](https://www.youtube.com/watch?v=EzYIerEutgk).\\n- [Learn about generating state machines from text descriptions](https://www.youtube.com/watch?v=wjZE39wCZXo) with our AI feature.\\n- [Read more about using XState](/docs/xstate), our open-source library for state machines anywhere JavaScript is supported.\\n- Jump into creating your own machine in [our drag-and-drop editor at state.new](https://state.new)."},{"id":"2023-10-02-persisting-state","metadata":{"permalink":"/statelyai-docs/blog/2023-10-02-persisting-state","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-10-02-persisting-state/index.mdx","source":"@site/blog/2023-10-02-persisting-state/index.mdx","title":"Persisting and restoring state in XState","description":"Learn how to persist and restore your state machine state in XState","date":"2023-10-02T00:00:00.000Z","formattedDate":"October 2, 2023","tags":[{"label":"state machine","permalink":"/statelyai-docs/blog/tags/state-machine"},{"label":"statechart","permalink":"/statelyai-docs/blog/tags/statechart"},{"label":"state","permalink":"/statelyai-docs/blog/tags/state"},{"label":"persist","permalink":"/statelyai-docs/blog/tags/persist"},{"label":"restore","permalink":"/statelyai-docs/blog/tags/restore"},{"label":"business logic","permalink":"/statelyai-docs/blog/tags/business-logic"},{"label":"workflow","permalink":"/statelyai-docs/blog/tags/workflow"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"}],"readingTime":3.045,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"Persisting and restoring state in XState","description":"Learn how to persist and restore your state machine state in XState","tags":["state machine","statechart","state","persist","restore","business logic","workflow","xstate"],"authors":["david"],"date":"2023-10-02T00:00:00.000Z","slug":"2023-10-02-persisting-state","image":"/blog/2023-10-02-persisting-state.png"},"prevItem":{"title":"What is a state machine?","permalink":"/statelyai-docs/blog/2023-10-05-what-is-a-state-machine"},"nextItem":{"title":"Context schema and export to CodeSandbox or StackBlitz","permalink":"/statelyai-docs/blog/2023-09-21-context-schema-and-export-to-external-editors"}},"content":"State machines are great for modeling state in applications. However, we often need to persist and restore state across sessions - for example, when a user closes and reopens their browser. In this article, we\u2019ll explore how to persist and restore state in XState so your frontend applications or backend workflows can pick up where it left off.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\nThe code in this article applies to [XState v5 beta](/docs/migration).\\n:::\\n\\n## Quick reference\\n\\nIf you\u2019re already familiar with XState, here\u2019s a quick reference for persisting and restoring state:\\n\\n```ts\\nimport { createActor } from \'xstate\';\\nimport { someMachine } from \'./someMachine\';\\n\\n// Get the state from localStorage (if it exists)\\nconst stateString = localStorage.getItem(\'some-state\');\\n\\n// Create the state from the string (if it exists)\\nconst restoredState = stateString ? JSON.parse(stateString) : undefined;\\n\\nconst actor = createActor(someMachine, {\\n  // Restore the state (if it exists)\\n  state: restoredState,\\n});\\n\\nactor.subscribe(() => {\\n  // Persist the state to localStorage\\n  const persistedState = actor.getPersistedState();\\n  localStorage.setItem(\'some-state\', JSON.stringify(persistedState));\\n});\\n\\nactor.start();\\n```\\n\\n## Persisting and restoring state\\n\\nLet\u2019s say we have a state machine that represents a user\u2019s shopping cart:\\n\\n```ts\\nimport { createMachine, createActor, assign } from \'xstate\';\\n\\nconst checkoutMachine = createMachine({\\n  id: \'checkout\',\\n  initial: \'shopping\',\\n  context: {\\n    items: [],\\n  },\\n  states: {\\n    shopping: {\\n      on: {\\n        \'item.add\': {\\n          actions: assign({\\n            items: ({ context, event }) => {\\n              return [...context.items, event.item];\\n            },\\n          }),\\n        },\\n        checkout: \'checkingOut\',\\n      },\\n    },\\n    checkingOut: {\\n      // ...\\n    },\\n  },\\n});\\n\\nconst checkoutActor = createActor(machine, {\\n  // ...\\n});\\n```\\n\\n<EmbedMachine\\n  embedURL=\\"https://stately.ai/registry/editor/embed/092bf401-2d65-48ae-969c-99b4a7eeb87f?machineId=6777d80d-82d8-41dc-9cd3-c6951495ff0f\\"\\n  name=\\"checkout\\"\\n/>\\n\\nYou may want to persist the state of this machine so that when the user comes back to the site, the items in their cart are still there, and the step in the checkout process is still the same. To do this, we need to remember to do two things:\\n\\n- **Persist the state** to some storage (e.g., localStorage, a database, etc.)\\n- **Restore the state** from the storage when creating the actor\\n\\nFirst, you should determine your [persistence strategy](#persistence-strategies). For this example, we\u2019ll use [the `localStorage` API](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage).\\n\\nActors created with `createActor` have a `.getPersistedState()` method that returns the state that can be persisted. This state is a plain object that can be serialized to JSON using `JSON.stringify(persistedState)`. Since the persisted state is a plain object, you can persist it to any storage that you want, as long as it can be restored as an object.\\n\\n```ts\\n// Read the state to persist from the actor (sync)\\nconst persistedState = actor.getPersistedState();\\n\\n// Persist the state to localStorage\\nlocalStorage.setItem(\'some-state-key\', JSON.stringify(persistedState));\\n```\\n\\nRetrieve the persisted state from storage and restore it as an object when creating the actor:\\n\\n```ts\\n// Read the persisted state from localStorage\\nconst restoredState = localStorage.getItem(\'some-state-key\');\\n\\nconst actor = createActor(machine, {\\n  // Restore the state (if it exists)\\n  state: restoredState,\\n});\\n\\nactor.start();\\n```\\n\\nThe actor will start at the `restoredState`, if it exists. If `restoredState` is `undefined`, the actor will start at the initial state of the actor logic provided to `createActor(logic)`.\\n\\n## Persistence strategies\\n\\nFor the browser, you can:\\n\\n- Use [localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage)\\n- Use a client-side database like [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API)\\n- Use [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies)\\n- Use [sessionStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage)\\n- Store the state in runtime memory (e.g., a global variable or some other persistent store)\\n\\nFor the server, you can:\\n\\n- Use a database (e.g., [MongoDB](https://www.mongodb.com/), [PostgreSQL](https://www.postgresql.org/), etc.)\\n- Use a cache (e.g., [Redis](https://redis.io/))\\n- Use cookies or session storage\\n\\n## Examples\\n\\nThere are [examples of persisting state that can be found in the XState git repository](https://github.com/statelyai/xstate/tree/next/examples):\\n\\n- [Persisting state to a writable `.json` file](https://github.com/statelyai/xstate/blob/next/examples/persisted-donut-maker)\\n- [Persisting state to MongoDB](https://github.com/statelyai/xstate/tree/next/examples/mongodb-persisted-state)\\n\\nFeel free to [suggest other examples at on our examples request board](https://feedback.stately.ai/examples), or [contribute your own examples](https://github.com/statelyai/xstate/tree/next/examples)!"},{"id":"2023-09-21-context-schema-and-export-to-external-editors","metadata":{"permalink":"/statelyai-docs/blog/2023-09-21-context-schema-and-export-to-external-editors","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-09-21-context-schema-and-export-to-external-editors/index.mdx","source":"@site/blog/2023-09-21-context-schema-and-export-to-external-editors/index.mdx","title":"Context schema and export to CodeSandbox or StackBlitz","description":"You can now open your machine in CodeSandbox or StackBlitz. These options show when you select either JavaScript or TypeScript export formats in the Code panel.","date":"2023-09-21T00:00:00.000Z","formattedDate":"September 21, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"new","permalink":"/statelyai-docs/blog/tags/new"},{"label":"improved","permalink":"/statelyai-docs/blog/tags/improved"},{"label":"fixed","permalink":"/statelyai-docs/blog/tags/fixed"}],"readingTime":3.105,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Context schema and export to CodeSandbox or StackBlitz","description":"You can now open your machine in CodeSandbox or StackBlitz. These options show when you select either JavaScript or TypeScript export formats in the Code panel.","authors":["laura"],"tags":["changelog","new","improved","fixed"],"date":"2023-09-21T00:00:00.000Z","slug":"2023-09-21-context-schema-and-export-to-external-editors","image":"/blog/2023-09-21-context-schema-and-export-to-external-editors.png"},"prevItem":{"title":"Persisting and restoring state in XState","permalink":"/statelyai-docs/blog/2023-10-02-persisting-state"},"nextItem":{"title":"Make the dream work! An overview of Stately Studio\u2019s teams feature","permalink":"/statelyai-docs/blog/using-teams-in-stately-studio"}},"content":"You can now open your machine in CodeSandbox or StackBlitz. These options show when you select either JavaScript or TypeScript export formats in the **Code** panel. When you open your machine in these external editors, it will be deployed as a demo app so you can jump quickly into prototyping and get an example of how to integrate your machine into your codebase.\\n\\n![Code panel where JavaScript is selected from the dropdown. There are toggles for XState V5 beta, Show descriptions, and Show meta. There are options to Copy code, Open in CodeSandbox, and Open in StackBlitz.](./export-to-external-editors.png)\\n\\n\x3c!--truncate--\x3e\\n\\n## Context schema\\n\\nWe\u2019ve now released the context schema in the editor. You can find the context schema above the event schemas in the machine **Details** panel. Here, you can add a new context property with its name, type (string, number, boolean, array and object), and an optional description. These will then be exported in your TypeScript code. When you import a machine, Stately will stub an empty schema for any context properties in your code. If you add a context property in the **Context** panel that\u2019s missing from the context schema, a quick link will appear under that property to quickly add it to the schema.\\n\\n![The Context schema section at the end of the Machine details panel. The schema contains properties for timers and volume.](./context-schema.png)\\n\\nYou can edit any context properties in the modal that opens when you click the property in the schema list. To delete all schema properties, use the **Delete all** option under the **...** menu.\\nIn the Context schema section of the Details panel, you can also search through the list of context properties in your machine by name.\\n\\n## Improved Simulation mode\\n\\nWe\u2019ve made some improvements to Simulation mode. The log panel is now named the **Simulation controls** and not only shows a log of your simulated path but contains buttons to navigate through the currently available events easily.\\n\\n![Controls panel in simulate mode showing event buttons for shipping_details_added and cancel. The log has the options for Back, Reset, and Show active state, and the log list is a numbered list of events and their target states.](./simulate-mode.png)\\n\\n## Bug fixes\\n\\nWe had a brief bug with importing large machines from the import modal. If you experienced any errors with importing machines, please try again now! If you are still experiencing any bugs, please let us know at support@stately.ai.\\n\\n- Fixed a bug where Stately could enter a loop if metadata fails when attempting to load a particular version URL.\\n- Fixed a bug where previous versions that contained actions could throw errors.\\n- Fix a bug where transition lines were lost after restoring a version and then hitting Undo.\\n- Inline actions have been removed from exported JSON code.\\n- Machines featuring raise callbacks will now export correctly to TypeScript.\\n\\n## Improvements\\n\\n- You can now choose to display your state\u2019s meta information on the canvas. Add your meta information in the **State details** panel, and enable or disable from the editor menu > View > **Show/Hide meta on canvas**.\\n- You can now right-click on states and events in the tree view and **Center to view** to center that state or event in the canvas view.\\n- We\u2019ve improved the OpenAI integration, so generated flows are now more accurate.\\n- The length of long expressions rendered on the canvas and in toolbox blocks are now truncated.\\n- We\u2019ve improved the performance around importing a machine from code, so importing your machines should now be much faster.\\n- Context is now supported in imported machines.\\n- We\u2019ve added more information about the [features available to our Enterprise customers](https://stately.ai/registry/billing).\\n- A medley of internal fixes and improvements."},{"id":"using-teams-in-stately-studio","metadata":{"permalink":"/statelyai-docs/blog/using-teams-in-stately-studio","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-09-15-teams-feature-overview/index.mdx","source":"@site/blog/2023-09-15-teams-feature-overview/index.mdx","title":"Make the dream work! An overview of Stately Studio\u2019s teams feature","description":"Getting the most out of Stately Studio\u2019s teams feature","date":"2023-09-19T00:00:00.000Z","formattedDate":"September 19, 2023","tags":[{"label":"stately studio","permalink":"/statelyai-docs/blog/tags/stately-studio"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"teams","permalink":"/statelyai-docs/blog/tags/teams"},{"label":"machine versions","permalink":"/statelyai-docs/blog/tags/machine-versions"},{"label":"machine locking","permalink":"/statelyai-docs/blog/tags/machine-locking"}],"readingTime":5.86,"hasTruncateMarker":true,"authors":[{"name":"Gavin Bauman","title":"Stately Team","url":"https://github.com/gavination","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/gavin.png","key":"gavin"}],"frontMatter":{"title":"Make the dream work! An overview of Stately Studio\u2019s teams feature","description":"Getting the most out of Stately Studio\u2019s teams feature","tags":["stately studio","xstate","teams","machine versions","machine locking"],"authors":["gavin"],"slug":"using-teams-in-stately-studio","image":"/blog/2023-09-15-stately-teams-overview.png","date":"2023-09-19T00:00:00.000Z"},"prevItem":{"title":"Context schema and export to CodeSandbox or StackBlitz","permalink":"/statelyai-docs/blog/2023-09-21-context-schema-and-export-to-external-editors"},"nextItem":{"title":"Event schemas, free Viewer roles for teams, and more!","permalink":"/statelyai-docs/blog/2023-09-15-event-schemas-viewer-role"}},"content":"Our team knew early on that users needed the ability to share machines in the Studio and build on each other\u2019s work.\\nWe also needed the Studio to be an effective tool for teams to work together and share context.\\nBut how do we do that safely, making sure the right eyes were on the right machines?\\nAnd how do we protect against accidental mishaps that have plagued devs since the dawn of the computer?\\nBeing a distributed dev team ourselves, we\u2019ve shared these same pain points and decided to build a solution directly in the Studio.\\nEnter [Stately teams](https://stately.ai/docs/teams), our way to provide privacy and safety while allowing effortless collaboration.\\n\\n\x3c!--truncate--\x3e\\n\\n## Why would I need a team?\\n\\nGreat question, and we\u2019re glad you asked!\\nWhile we have the [Discover](https://stately.ai/registry/discover) page, which showcases over 20 thousand(!) community-created machines, we know that statecharts can contain critical details about core algorithms or processes that give businesses a competitive edge.\\nMany users expressed interest in keeping these types of machines private, and we listened.\\n\\n### Sharing machine visualizations with teammates\\n\\nDeveloping software is collaborative by nature. To get any product launched, bug fixed, or feature shipped, teams need to work together under the same shared context.\\nAs projects grow in scope and complexity, it gets easier for team members to lose track of the bigger picture.\\nTeam members may get lost in the weeds of their own work while the rest of the project changes around them, or they may not have the full context of the project and make decisions that don\u2019t align with the team\u2019s goals.\\nThis is where the Studio\u2019s teams feature comes in.\\nVisualizing app logic as statecharts allows teams to see the entire project at a glance, and the ability to share these visualizations empowers each member to make well-informed decisions, regardless of discipline.\\nEvery teammate may not be a dev, but we\u2019re confident that every teammate can benefit from a well-thought-out flowchart!\\n\\n## Teams 101\\n\\nTeams is an exclusive feature for [**Pro** and **Enterprise** users](https://stately.ai/pricing) that allows them to collaborate on different projects without needing to make them publicly visible. Team owners can assign roles that map closely with their team members\u2019 intended set of responsibilities.\\n\\n![The Stately Studio Next team members tab. Under Owners/Admin, Kevin is labeled as Owner. David is an admin. Laura, Farzad and Gavin are listed under Editors. Anders, cirephe, and Mateusz are listed under Viewers.](./teamVNext.png)\\n\\n### Access control\\nThere are many times when a dev team needs to share their work context with others without granting them full rights to the projects. \\nFor example, Lenny in accounting probably shouldn\'t have access to the company repo, but he could benefit from visually understanding the steps involved in processes and workflows.\\nHaving different teams with different roles lets us keep parties informed without added risk. \\nDon\'t trust your PM\'s trigger finger? Make them a [viewer](https://stately.ai/docs/teams#viewer-role); we promise not to tell. \\nTaking a vacation before new members can be onboarded? \\nMake another teammate an [admin](https://stately.ai/docs/teams#admin-role). \\n[Check out all our roles and permissions in our docs](https://stately.ai/docs/teams#team-roles). \\n\\n### Sharing conveniently and safely\\n\\nThere are ways to share machine visualizations in the Studio without teams, but they\u2019re not ideal for many users.\\nUsers can make their projects and machines public, but that is a no-go for most businesses.\\nAlternatively, Pro users could keep their projects private and only share with people they trust by exporting and re-importing. However, that invites potentially different sources of truth, adds potential confusion, and lacks a truly shared context.\\nInviting users to collaborate on the same private team allows them to share without the exporting and copy/paste gymnastics. \\n\\n### A source of what, now?\\n\\nSimply put, a \u201csource of truth\u201d is a single place where all the information about a project is stored.\\nIn our case, we wanted to make sure that teams have a single place to view and collaborate on machine visualizations, and that place is a team project in the Studio.\\nThis prevents confusion and allows for a shared context between all team members. With a proper source of truth configured, we can avoid situations like this:\\n\\n![Four files with the filenames: onboardMachine.json, onboardMachine-final.json, onboardMachine-final-final.json, onboardMachine-actual-final-for-real-this-time.json.](/blog/2023-09-15-file-confusion.png)\\n\\n### But what about source control? Shouldn\u2019t that be the source of truth?\\n\\nIdeally, yes, the team\u2019s repository is the single source of truth for all application logic, but not every team member is a developer, nor should they all have access to source code.\\nThat said, we know teams need to ensure their machines in the Studio are always in lockstep with the rest of their source, so we added the ability to [import machines directly from GitHub](https://stately.ai/docs/import-from-github).\\nWe\u2019re also working on a fully-fledged GitHub Sync feature, allowing users to save machines as commits back to their source repos! [Check out Anders\u2019 demo previewing GitHub Sync in our recent office hours live stream](https://www.youtube.com/watch?v=WelBycMg2eA&t=1293s).\\n### Superpower Pro features\\n\\nHaving teams allows other features to shine. For example, we all know the value of collaboration, but more users naturally add more potential for mistakes to happen, even with proper roles assigned. To protect against mistakes, we\u2019ve added the ability to [lock machines](https://stately.ai/docs/lock-machines), preventing teammates from accidentally overwriting or deleting machines.\\n\\n![A machine with locked status in Stately. Hovering over the status shows the information that the machine was Locked by cirephe on September 8, 2023 at 07:48PM.](./lockedScreenshot.png)\\n\\nTeam members often need to manage and track variants of the same machine, so we added the ability to create [machine versions](https://stately.ai/docs/versions). Members can edit and save specific checkpoints of their machines and can even see the last person to and save a specific version. Team roles come into play here again by allowing only owners and admins to actually delete versions.\\n\\n![Machine versions panel in Stately. The current version is named Gavin\u2019s ultimate joke machine. The previous version is a generated flow for a \u201cA flow showing someone how to be funny.\u201d](./versionScreenshot.png)\\n\\n## FAQs\\n\\n### Who can join my team?\\n\\nAnyone with an email address can be invited to a team!\\nIf they are not already members, they will have to [sign up for a Stately account](https://stately.ai/registry/login?).\\n\\n### How many users can be on a team?\\n\\nA team can have as many members as there are seats in your Pro or Enterprise plan, except for viewers.\\nViewers are free to add.\\n\\n### Does inviting a user take up a seat on the team?\\n\\nThe seat is only taken once a user accepts the invite and claims the seat.\\nIf the invite was not accepted, the seat remains free.\\n\\n### Can I swap member roles and reclaim seats?\\nYes, but only owners and admins have the ability to reassign roles. \\nAny role except the owner may choose to leave the team, however. \\nThe owner can instead delete the team. \\n\\nYes, but only owners and admins can reassign roles.\\nAny role except the owner may choose to leave the team, however.\\nThe owner can instead delete the team.\\n\\nFor more detailed information, visit our [Stately teams page in the docs](https://stately.ai/docs/teams#teams-members-and-pro-plan-seats)!"},{"id":"2023-09-15-event-schemas-viewer-role","metadata":{"permalink":"/statelyai-docs/blog/2023-09-15-event-schemas-viewer-role","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-09-15-event-schemas-viewer-role/index.mdx","source":"@site/blog/2023-09-15-event-schemas-viewer-role/index.mdx","title":"Event schemas, free Viewer roles for teams, and more!","description":"The Stately team has had another busy week. The editor now has event schemas, and we\u2019ve made many more improvements. Let\u2019s dig in!","date":"2023-09-15T00:00:00.000Z","formattedDate":"September 15, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"new","permalink":"/statelyai-docs/blog/tags/new"},{"label":"improved","permalink":"/statelyai-docs/blog/tags/improved"},{"label":"fixed","permalink":"/statelyai-docs/blog/tags/fixed"}],"readingTime":2.38,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Event schemas, free Viewer roles for teams, and more!","description":"The Stately team has had another busy week. The editor now has event schemas, and we\u2019ve made many more improvements. Let\u2019s dig in!","authors":["laura"],"tags":["changelog","new","improved","fixed"],"date":"2023-09-15T00:00:00.000Z","slug":"2023-09-15-event-schemas-viewer-role","image":"/blog/2023-09-15-event-schemas-viewer-role.png"},"prevItem":{"title":"Make the dream work! An overview of Stately Studio\u2019s teams feature","permalink":"/statelyai-docs/blog/using-teams-in-stately-studio"},"nextItem":{"title":"Fixes and improvements","permalink":"/statelyai-docs/blog/2023-09-06-fixes-and-improvements"}},"content":"The Stately team has had another busy week. The editor now has event schemas, and we\u2019ve made many more improvements. Let\u2019s dig in!\\n\\n\x3c!--truncate--\x3e\\n\\n## Event schemas\\n\\nEvent schemas are now available in the editor. You can access the event schemas from the **Machine details** panel. The event schema enables you to define events for the current machine, including all of the events\u2019 properties, including, but not limited to, the event description.\\n\\n![The machine details panel showing a list of events in the current machine, including retry, filter, search, load_more, and remove_filter. There is an unused event called Event 1.](events-schema.png)\\n\\nYou can search for available events from the event schema panel, edit their details, and create new events. Any events you aren\u2019t using in your machine have less opacity, and you can delete all unused events from the <MoreHorizontal size={18} /> button and choose **Delete all unused**.\\n\\nYou can also view the schema for any event by selecting that event on the canvas and opening the **Event details** panel.\\n\\n## Team viewer role is now free\\n\\nThe **Viewer** role in Stately Teams is now free and does not count towards your number of seats. You can now see how many available seats you have left on your team from the Team page and the Billing page.\\n\\n![Stately Demos team Members page. Showing Anders being invited to the team with the Viewer role.](free-viewer-role.png)\\n\\n## Improvements to generating flows\\n\\nWe\u2019ve improved the interface for generating flows to make it easier and faster. You can now access the history of text descriptions you used for your current machine from the **View history** button in the **Generate flow** dialog. Use the **Copy to prompt** button to copy a preview prompt into the description field to try it again!\\n\\n![Prompt history in Generate flows dialog which shows two text descriptions previously used to generate flows, with buttons to open flow and copy to prompt.](prompt-history.png)\\n\\n## Improvements to the machines list\\n\\n- Machines are now sorted alphabetically from A to Z in the machines list.\\n- Locked machines now have a locked icon alongside their name in the machines list.\\n\\n## More improvements\\n\\nThe machine\u2019s root state now has a minimal borderless appearance by default, giving you more space to focus on your machine. If you change the root state\u2019s color or add a description, action, or any other block type, the root state will revert to its classic bordered design and the same features as any other parent state.\\n\\n- Annotations are now borderless, so they appear directly on the canvas.\\n- Transition labels now have more definition to make them easier to read.\\n- You can now jump directly to the Discover page from **Discover** in the Editor menu.\\n\\n## Bug fixes\\n\\nWe fixed a bug where a machine name was not correctly updated when you renamed its root state."},{"id":"2023-09-06-fixes-and-improvements","metadata":{"permalink":"/statelyai-docs/blog/2023-09-06-fixes-and-improvements","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-09-06-fixes-and-improvements/index.mdx","source":"@site/blog/2023-09-06-fixes-and-improvements/index.mdx","title":"Fixes and improvements","description":"We\u2019ve released many new features recently, but we\u2019ve also made minor enhancements and bug fixes to improve your Stately experience.","date":"2023-09-06T00:00:00.000Z","formattedDate":"September 6, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"improved","permalink":"/statelyai-docs/blog/tags/improved"},{"label":"fixed","permalink":"/statelyai-docs/blog/tags/fixed"}],"readingTime":1.44,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Fixes and improvements","description":"We\u2019ve released many new features recently, but we\u2019ve also made minor enhancements and bug fixes to improve your Stately experience.","authors":["laura"],"tags":["changelog","improved","fixed"],"date":"2023-09-06T00:00:00.000Z","slug":"2023-09-06-fixes-and-improvements","image":"/blog/2023-09-06-fixes-and-improvements.png"},"prevItem":{"title":"Event schemas, free Viewer roles for teams, and more!","permalink":"/statelyai-docs/blog/2023-09-15-event-schemas-viewer-role"},"nextItem":{"title":"New experimental feature: generating flows","permalink":"/statelyai-docs/blog/2023-09-06-generating-flows"}},"content":"We\u2019ve released many new features recently, but we\u2019ve also made minor enhancements and bug fixes to improve your Stately experience.\\n\\n\x3c!--truncate--\x3e\\n\\n## Bug fixes\\n\\n- The fork machine button is now hidden for empty projects.\\n- The generate flow button is now shown on empty projects.\\n\\n## Improvements to descriptions and annotations\\n\\nDescriptions and annotations have had an upgrade. You can now add a description to states and events from the edit menu edit (right-click on the state or event) and edit descriptions by double-clicking them.\\n\\nWe also made the following improvements to both descriptions and annotations:\\n\\n- URLs will be detected as links automatically.\\n- Paste a URL onto selected text to turn it into a link.\\n- Add task lists by using `[ ]` at the beginning of each line.\\n- Add code fences using triple ` ```\u2026``` ` backticks.\\n\\n### Improvements\\n\\n- Action blocks are now multiline and show more information about the action.\\n- Assign actions now show the keys and values that are being assigned.\\n- Send to actions now show the event object when you hover over the event.\\n- You can now drag an event or state when holding down on an image inside the description.\\n- Extra parentheses are no longer added around XState V4 exported code. And it\'s now less sensitive toward whitespaces.\\n- Assign actions now have a better color in light mode.\\n- Auto-layout is now allowed when previewing machine versions.\\n- You will now be redirected to your projects if you try to open an empty project you can\'t edit.\\n- Users on the community plan can now see the Pro lock machine features and learn about them.\\n- A medley of internal fixes and improvements."},{"id":"2023-09-06-generating-flows","metadata":{"permalink":"/statelyai-docs/blog/2023-09-06-generating-flows","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-09-06-generating-flows/index.mdx","source":"@site/blog/2023-09-06-generating-flows/index.mdx","title":"New experimental feature: generating flows","description":"Learn how to generate and modify flows from plain text using Stately\'s new intelligent features","date":"2023-09-06T00:00:00.000Z","formattedDate":"September 6, 2023","tags":[{"label":"pro","permalink":"/statelyai-docs/blog/tags/pro"},{"label":"generate flows","permalink":"/statelyai-docs/blog/tags/generate-flows"},{"label":"modeling","permalink":"/statelyai-docs/blog/tags/modeling"}],"readingTime":4.3,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"New experimental feature: generating flows","description":"Learn how to generate and modify flows from plain text using Stately\'s new intelligent features","tags":["pro","generate flows","modeling"],"authors":["david"],"date":"2023-09-06T00:00:00.000Z","slug":"2023-09-06-generating-flows","image":"/blog/2023-09-06-generating-flows.png"},"prevItem":{"title":"Fixes and improvements","permalink":"/statelyai-docs/blog/2023-09-06-fixes-and-improvements"},"nextItem":{"title":"Generate flow","permalink":"/statelyai-docs/blog/2023-09-01-generate-flow"}},"content":"As software architecture grows increasingly complex, developers and project managers often grapple with the challenge of visualizing and organizing application logic. This is where state machines and flows come into play. State machines are a powerful tool for modeling application logic, and flows are a great way to visualize and organize state machines. At Stately, we\u2019re committed to making state machines and flows more accessible and easier to use.\\n\\nBut state machines, though powerful, have a learning curve that can be a bit intimidating. And then there\u2019s the blank slate problem: where do you even start when modeling a flow? Furthermore, when flows get large, how can you apply broad changes in a more natural way while keeping the flow intact and logically correct? These are some of the challenges we set out to solve with our new experimental generative features.\\n\\n## New generative features\\n\\nIn response to these challenges, we are thrilled to introduce two experimental beta features:\\n\\n- The ability to **generate a flow** from plain text\\n- The ability to **modify an existing flow** from plain text\\n\\n\x3c!--truncate--\x3e\\n\\n### Generating a flow\\n\\nTo utilize this feature:\\n\\n1. Click on the **Generate flow** button located in the top bar.\\n2. Write a prompt for a flow you would like to generate; for instance, \u201cA simple checkout process.\u201d\\n3. Be descriptive; the more information you provide, the more detailed the resulting state machine flow will be.\\n4. Click the **Generate flow** button, wait a few seconds, and voil\xe0!\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"Generate flow dialog: Experimental feature. With the flow description of \u201cA simple checkout process\u201d, with the submit button \u201cGenerating flow\u201d in progress.\\"\\n    sources={{\\n      light: \'/blog/2023-08-31-generating-flows/generate-flow.png\',\\n      dark: \'/blog/2023-08-31-generating-flows/generate-flow-dm.png\',\\n    }}\\n  />\\n</p>\\n\\nStately leverages LLMs to craft a flow that matches your prompt. The result is a flow that is both understandable and consistent with your specifications, and can be further refined to suit your needs.\\n\\n_The following machine is the result of generating the flow described by \u201cA checkout flow where you can edit basket, update basket, add shipping details, add billing details, calculate shipping costs, and take payment. Payment can succeed or fail. Succeed is the final state. On fail, payment can be tried again after update billing details.\u201d_\\n\\n<EmbedMachine\\n  name=\\"checkoutFlow\\"\\n  embedURL=\\"https://stately.ai/registry/editor/embed/8f7e6dc9-0ec0-425d-a20c-fef3849ee264?machineId=d8b78ea7-38a7-4f35-8329-0118a8aa307a\\"\\n/>\\n\\n### Modifying a flow\\n\\nThe process to modify an existing flow is similar:\\n\\n1. Click on the **Generate flow** button located in the top bar.\\n2. Write instructions for the modifications you would like to make to the flow; for instance, \u201cAdd a new state to the flow that handles a user cancelling their order.\u201d\\n3. As before, the more information you provide, the more detailed the resulting state machine flow will be.\\n4. Toggle the **Modify current flow** switch.\\n5. Click the **Modify current flow** button, wait a few seconds, and voil\xe0!\\n\\nStately will use the existing flow as context to generate a new flow that incorporates your modifications. Keep in mind that this will send your flow to OpenAI, so only use this feature if you are comfortable with that.\\n\\n_The following machine is the result of modifying the previous flow with the description \u201cViewing basket is the initial state.\u201d_\\n\\n<EmbedMachine\\n  name=\\"checkoutFlow, modified\\"\\n  embedURL=\\"https://stately.ai/registry/editor/embed/8f7e6dc9-0ec0-425d-a20c-fef3849ee264?machineId=d8b78ea7-38a7-4f35-8329-0118a8aa307a\\"\\n/>\\n\\n## Be creative\\n\\nThe potential is vast. Think about generating flows for domains like customer support, inventory management, or online voting systems. Imagine refining a flow to incorporate customer feedback, include multilingual support, or even a state to address system downtimes. The horizon is truly limitless.\\n\\nAll applications have state machine flows in them, whether they\u2019re implicitly or explicitly defined, in the frontend or backend. There\u2019s many possibilities for flows to generate and modify. Here\u2019s some examples:\\n\\n- A flow for a simple checkout process\\n- A newsletter signup flow\\n- A marketing automation flow\\n- An authentication flow\\n- Logic for a customer support chatbot\\n- Game logic for complex multiplayer games\\n\\n## Privacy\\n\\nAt Stately, we take privacy seriously. We are committed to protecting your data and ensuring that your creations remain yours. Rest assured that:\\n\\n- No user-created flows are contributed to our training dataset.\\n- Flows are provided as context to OpenAI only when you opt for modifying an existing flow with the experimental generative features.\\n- We will never use your flows as training data without your explicit permission.\\n\\n## Our generative transition\\n\\nOur vision goes beyond mere generation. Upcoming features include:\\n\\n- Autogenerated detailed descriptions for states and transitions.\\n- Code implementations for actions, invocations, guards, and more.\\n- Intelligent suggestions for expanding, simplifying, and improving your flows, like [GitHub Copilot](https://github.com/features/copilot/) for application logic.\\n- Narratives and summaries of flows in natural language.\\n\\n## And much, much more\\n\\nWe want Stately to be the source of truth for your application logic, not just as a collection of flows, but as an intelligent tool for helping you and your team build better software.\\n\\nStately\u2019s experimental generative features are available exclusively to our [Pro users](/docs/studio-pro-plan) in beta. We\u2019re offering a [one-month free trial](/pricing), so you can try it out and see for yourself. We\u2019d love to hear your feedback and ideas, so please try out the new features and let us know what you think!"},{"id":"2023-09-01-generate-flow","metadata":{"permalink":"/statelyai-docs/blog/2023-09-01-generate-flow","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-09-01-generate-flow/index.mdx","source":"@site/blog/2023-09-01-generate-flow/index.mdx","title":"Generate flow","description":"As a Stately Pro user, you can now auto-create machines from text descriptions with our new experimental feature, Generate flow.","date":"2023-09-01T00:00:00.000Z","formattedDate":"September 1, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"improved","permalink":"/statelyai-docs/blog/tags/improved"},{"label":"fixed","permalink":"/statelyai-docs/blog/tags/fixed"}],"readingTime":0.75,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Generate flow","description":"As a Stately Pro user, you can now auto-create machines from text descriptions with our new experimental feature, Generate flow.","authors":["laura"],"tags":["changelog","improved","fixed"],"date":"2023-09-01T00:00:00.000Z","slug":"2023-09-01-generate-flow","image":"/blog/2023-09-01-generate-flow.png"},"prevItem":{"title":"New experimental feature: generating flows","permalink":"/statelyai-docs/blog/2023-09-06-generating-flows"},"nextItem":{"title":"Lock machines","permalink":"/statelyai-docs/blog/2023-09-01-lock-machines"}},"content":"As a Stately Pro user, you can now auto-create machines from text descriptions with our new experimental feature, **Generate flow**. You can generate a flow for a new machine or use the flow description to describe how you want to modify your current flow.\\n\\n\x3c!--truncate--\x3e\\n\\n![Generate flow dialog: Experimental feature. With the flow description of  \u201ca debounce flow\u201d\x9d, hovering over the button to Generate new flow. The generated flow is visible in the background.](https://canny.io/images/e42062421f9551d8849e998cc5ebb78f.png)\\n\\nThere are so many reasons you might want to generate your flows, including:\\n\\n- You have a complex machine in mind and want to get started quickly\\n- You want an example of a state machine for a particular flow\\n- You\u2019re new and want to get an idea of how you can model state machines\\n\\nWith 1000 calls a month, and a [free 30-day Pro trial](https://stately.ai/pricing), get ready to create state machines in no time!"},{"id":"2023-09-01-lock-machines","metadata":{"permalink":"/statelyai-docs/blog/2023-09-01-lock-machines","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-09-01-lock-machines/index.mdx","source":"@site/blog/2023-09-01-lock-machines/index.mdx","title":"Lock machines","description":"Yet another new Pro feature for you this week: you can now lock machines to prevent accidental edits.","date":"2023-09-01T00:00:00.000Z","formattedDate":"September 1, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"pro","permalink":"/statelyai-docs/blog/tags/pro"},{"label":"beta","permalink":"/statelyai-docs/blog/tags/beta"},{"label":"new","permalink":"/statelyai-docs/blog/tags/new"}],"readingTime":0.905,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Lock machines","description":"Yet another new Pro feature for you this week: you can now lock machines to prevent accidental edits.","authors":["laura"],"tags":["changelog","pro","beta","new"],"date":"2023-09-01T00:00:00.000Z","slug":"2023-09-01-lock-machines","image":"/blog/2023-09-01-lock-machines.png"},"prevItem":{"title":"Generate flow","permalink":"/statelyai-docs/blog/2023-09-01-generate-flow"},"nextItem":{"title":"Fixes and improvements","permalink":"/statelyai-docs/blog/2023-08-23-fixes-and-improvements"}},"content":"Yet another new Pro feature for you this week: you can now lock machines to prevent accidental edits. Lock a machine using the lock icon button in the machine Details panel.\\n\\n\x3c!--truncate--\x3e\\n\\n![Locking the machine from the lock icon button in the Machine Details panel.](https://canny.io/images/bf32dce0740ed980ce0857de69b914b7.png)\\n\\nLocking a machine prevents you or anyone else on your team, from editing, deleting, or renaming a machine. It will also prevent anyone from importing code to replace the machine or restoring a past version of the machine.\\n\\nLocked machines have a Locked status displayed in the editor\u2019s top bar. If you hover over the Locked status, you\u2019ll get a tooltip detailing who locked the machine and when.\\n\\n![Hovering over the Locked status to read that the machine was Locked by Laura Kalbag a few seconds ago.](https://canny.io/images/9da124b731543a326412296c5897872b.png)\\n\\nIf somebody else is viewing or editing the machine when it is locked, their changes will not be saved, and they will be notified that the machine is now locked.\\n\\n[**Try all our Pro features free on our 30 day trial**](https://stately.ai/pricing).\\n\\n[Read more about locking machines in our docs](https://stately.ai/docs/lock-machines)."},{"id":"2023-08-23-fixes-and-improvements","metadata":{"permalink":"/statelyai-docs/blog/2023-08-23-fixes-and-improvements","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-08-23-fixes-and-improvements/index.mdx","source":"@site/blog/2023-08-23-fixes-and-improvements/index.mdx","title":"Fixes and improvements","description":"This week, the Stately team has been hard at work with even more bug fixes and improvements.","date":"2023-08-23T00:00:00.000Z","formattedDate":"August 23, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"new","permalink":"/statelyai-docs/blog/tags/new"},{"label":"improved","permalink":"/statelyai-docs/blog/tags/improved"},{"label":"fixed","permalink":"/statelyai-docs/blog/tags/fixed"}],"readingTime":0.465,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Fixes and improvements","description":"This week, the Stately team has been hard at work with even more bug fixes and improvements.","authors":["laura"],"tags":["changelog","new","improved","fixed"],"date":"2023-08-23T00:00:00.000Z","slug":"2023-08-23-fixes-and-improvements","image":"/blog/2023-08-23-fixes-and-improvements.png"},"prevItem":{"title":"Lock machines","permalink":"/statelyai-docs/blog/2023-09-01-lock-machines"},"nextItem":{"title":"Export descriptions and meta fields, and even more improvements!","permalink":"/statelyai-docs/blog/2023-08-17-export-descriptions-and-meta-fields"}},"content":"This week, the Stately team has been hard at work with even more bug fixes and improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Bug fixes\\n\\n- Default action implementations have now been fixed so that the correct default implementation is applied for both XState V4 and XState V5.\\n- The Learn Stately video modal will no longer show in machine images.\\n\\n## Improvements\\n\\n- If you\u2019re new to Stately, you\u2019ll now get a notification with the option to view the Learn Stately videos instead of the modal opening immediately.\\n- A plethora of internal fixes and improvements."},{"id":"2023-08-17-export-descriptions-and-meta-fields","metadata":{"permalink":"/statelyai-docs/blog/2023-08-17-export-descriptions-and-meta-fields","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-08-17-export-descriptions-and-meta-fields/index.mdx","source":"@site/blog/2023-08-17-export-descriptions-and-meta-fields/index.mdx","title":"Export descriptions and meta fields, and even more improvements!","description":"You can now choose to export state and event descriptions and meta fields with your exported code.","date":"2023-08-17T00:00:00.000Z","formattedDate":"August 17, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"pro","permalink":"/statelyai-docs/blog/tags/pro"},{"label":"new","permalink":"/statelyai-docs/blog/tags/new"},{"label":"improved","permalink":"/statelyai-docs/blog/tags/improved"},{"label":"fixed","permalink":"/statelyai-docs/blog/tags/fixed"}],"readingTime":0.86,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Export descriptions and meta fields, and even more improvements!","description":"You can now choose to export state and event descriptions and meta fields with your exported code.","authors":["laura"],"tags":["changelog","pro","new","improved","fixed"],"date":"2023-08-17T00:00:00.000Z","slug":"2023-08-17-export-descriptions-and-meta-fields","image":"/blog/2023-08-17-export-descriptions-and-meta-fields.png"},"prevItem":{"title":"Fixes and improvements","permalink":"/statelyai-docs/blog/2023-08-23-fixes-and-improvements"},"nextItem":{"title":"The latest live streams from Stately","permalink":"/statelyai-docs/blog/2023-08-17-latest-live-streams-from-stately"}},"content":"You can now choose to export state and event descriptions and meta fields with your exported code.\\n\\n\x3c!--truncate--\x3e\\n\\n![Stately code panel with show descriptions and show meta toggles enabled.](https://canny.io/images/a7da75d317d2f0faf17436442cae2051.png)\\n\\nFind the **Show descriptions** and **Show meta** toggles in the Code panel.\\n\\n## Bug fixes\\n\\n- Guarded eventless (always) transitions will now work as expected in Simulation mode.\\n- We fixed a bug where the layout would sometimes shift in the Version History panel if there were many versions in the list and the user clicked to view one of those versions.\\n- You are now able to copy the selected text inside the editor again.\\n- Deleting meta values will no longer affect other meta entries.\\n\\n## Improvements\\n\\n- In read-only mode, selected states and events are now highlighted green rather than blue.\\n- We changed the wording on the new version banner to reassure users their changes have been saved locally, and they\u2019re safe to refresh the page.\\n- A host of internal fixes and improvements working towards exciting future features!"},{"id":"2023-08-17-latest-live-streams-from-stately","metadata":{"permalink":"/statelyai-docs/blog/2023-08-17-latest-live-streams-from-stately","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-08-17-latest-live-streams-from-stately/index.mdx","source":"@site/blog/2023-08-17-latest-live-streams-from-stately/index.mdx","title":"The latest live streams from Stately","description":"The Stately team has been doing a lot of live streams lately, covering the front-end, back-end, and everything new in the Stately editor.","date":"2023-08-17T00:00:00.000Z","formattedDate":"August 17, 2023","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"live stream","permalink":"/statelyai-docs/blog/tags/live-stream"},{"label":"videos","permalink":"/statelyai-docs/blog/tags/videos"},{"label":"demo","permalink":"/statelyai-docs/blog/tags/demo"},{"label":"example","permalink":"/statelyai-docs/blog/tags/example"},{"label":"office hours","permalink":"/statelyai-docs/blog/tags/office-hours"}],"readingTime":1.705,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"The latest live streams from Stately","description":"The Stately team has been doing a lot of live streams lately, covering the front-end, back-end, and everything new in the Stately editor.","tags":["stately","live stream","videos","demo","example","office hours"],"authors":["laura"],"date":"2023-08-17T00:00:00.000Z","slug":"2023-08-17-latest-live-streams-from-stately","image":"/blog/2023-08-17-latest-live-streams-from-stately.png"},"prevItem":{"title":"Export descriptions and meta fields, and even more improvements!","permalink":"/statelyai-docs/blog/2023-08-17-export-descriptions-and-meta-fields"},"nextItem":{"title":"And all the other improvements this week!","permalink":"/statelyai-docs/blog/2023-08-10-all-the-other-improvements"}},"content":"The Stately team has been doing a lot of live streams lately, covering the front-end, back-end, and everything new in the Stately editor.\\n\\n\x3c!--truncate--\x3e\\n\\n## Making workflows serverless\\n\\nIn the recent live stream on making workflows serverless, Gavin and David discussed what it takes to make a serverless workflow in XState, and the advantages of using state machines for workflows.\\n\\n<YouTube id=\\"FgzRFth-L_U\\" />\\n\\n## Making a markdown component\\n\\nIf you\u2019ve been looking to start using state machines in your front end, check out the live stream with David and Farzad, where they made a simple markdown converter component using XState, React, and Stately.\\n\\n<YouTube id=\\"O3gyB37a43U\\" />\\n\\n## Office hours\\n\\nDuring our latest office hours, we demoed many recently-released features and gave a sneak peek of GitHub Sync, which is coming soon!\\n\\n<YouTube id=\\"WelBycMg2eA\\" />\\n\\nJump straight to the chapter:\\n\\n- 0:00 [Intro](https://youtube.com/watch?v=WelBycMg2eA&amp;t=0s)\\n- 0:26 [Team intros](https://youtube.com/watch?v=WelBycMg2eA&amp;t=26s)\\n- 1:28 [Learn Stately videos and tutorials (new!)](https://youtube.com/watch?v=WelBycMg2eA&amp;t=88s)\\n- 5:44 [Recent Stately live streams](https://youtube.com/watch?v=WelBycMg2eA&amp;t=344s)\\n- 7:41 [Markdown support in annotations (new!)](https://youtube.com/watch?v=WelBycMg2eA&amp;t=461s)\\n- 10:37 [Renaming projects from the breadcrumb (new!)](https://youtube.com/watch?v=WelBycMg2eA&amp;t=637s)\\n- 11:18 [Reordering guarded transitions UI (new!)](https://youtube.com/watch?v=WelBycMg2eA&amp;t=678s)\\n- 15:10 [Built-in actions using XState icon (new!)](https://youtube.com/watch?v=WelBycMg2eA&amp;t=910s)\\n- 17:11 [Personal projects are now private by default for Pro users (new!)](https://youtube.com/watch?v=WelBycMg2eA&amp;t=1031s)\\n- 17:50 [No more warning in Safari!](https://youtube.com/watch?v=WelBycMg2eA&amp;t=1070s)\\n- 18:50 [Reparenting states](https://youtube.com/watch?v=WelBycMg2eA&amp;t=1130s)\\n- 21:33 [Coming soon: GitHub sync (demo)](https://youtube.com/watch?v=WelBycMg2eA&amp;t=1293s)\\n- 30:04 [Any news on displaying machines in pull requests?](https://youtube.com/watch?v=WelBycMg2eA&amp;t=1804s)\\n- 32:09 [David, Jenny, and Gavin at React Rally next week](https://youtube.com/watch?v=WelBycMg2eA&amp;t=1929s)\\n- 34:30 [Different highlight color on view-only machines (new!)](https://youtube.com/watch?v=WelBycMg2eA&amp;t=2070s)\\n- 36:07 [Performance improvements](https://youtube.com/watch?v=WelBycMg2eA&amp;t=2167s)\\n- 37:20 [Wrap up](https://youtube.com/watch?v=WelBycMg2eA&amp;t=2240s)\\n\\n## More streams are coming soon!\\n\\nThe best way to enjoy our live streams is to join us live. [Subscribe to us on YouTube](https://www.youtube.com/@Statelyai), and you\u2019ll be notified first when we schedule new live streams. When you join us live, you can get your questions answered by the team and participate in the fun discussions in our comments.\\n\\nWant to request an example or demo for one of our next live streams? Please share what you want to watch on [our Discord](https://discord.gg/xstate)."},{"id":"2023-08-10-all-the-other-improvements","metadata":{"permalink":"/statelyai-docs/blog/2023-08-10-all-the-other-improvements","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-08-10-all-the-other-improvements/index.mdx","source":"@site/blog/2023-08-10-all-the-other-improvements/index.mdx","title":"And all the other improvements this week!","description":"Our new Learn Stately guidance got its own changelog this week, but there\u2019s more that\u2019s new to Stately.","date":"2023-08-10T00:00:00.000Z","formattedDate":"August 10, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"new","permalink":"/statelyai-docs/blog/tags/new"}],"readingTime":0.975,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"And all the other improvements this week!","description":"Our new Learn Stately guidance got its own changelog this week, but there\u2019s more that\u2019s new to Stately.","authors":["laura"],"tags":["changelog","new"],"date":"2023-08-10T00:00:00.000Z","slug":"2023-08-10-all-the-other-improvements","image":"/blog/2023-08-10-all-the-other-improvements.png"},"prevItem":{"title":"The latest live streams from Stately","permalink":"/statelyai-docs/blog/2023-08-17-latest-live-streams-from-stately"},"nextItem":{"title":"Learn Stately with our new editor videos","permalink":"/statelyai-docs/blog/2023-08-10-new-editor-videos"}},"content":"Our new Learn Stately guidance got its own changelog this week, but there\u2019s more that\u2019s new to Stately.\\n\\n\x3c!--truncate--\x3e\\n\\n## Bug fixes\\n\\n- Transition handles now always appear over warning and danger icons rather than being hidden behind them.\\n- Annotations are no longer editable in view-only mode.\\n- The icon used for keyboard shortcuts now renders better in light mode.\\n- Multiline descriptions no longer break exporting to code.\\n- We fixed a brief bug where saving new machines to existing projects would fail.\\n\\n## Improvements\\n\\nYou can now reorder guarded transitions by moving them up or down in order.\\n\\n![Right-clicking the second guarded transition and selecting reorder guard, then move up.](https://canny.io/images/4436f90a13b55e44c899956abf375ec5.gif)\\n\\nAnd the options to add a guard and add a transition to an existing transition have been split into two distinct actions in the **+** menu.\\n\\n![The plus icon menu for a transition, showing the options to add a Guard, Transition, Action, or Description.](https://canny.io/images/adf6f6690a553a720c7557f9584a6709.png)\\n\\n- Personal projects are now private by default for our Pro subscribers.\\n- We no longer show a warning to Safari users as the editor is working well in Safari!\\n- A miscellany of internal fixes and improvements."},{"id":"2023-08-10-new-editor-videos","metadata":{"permalink":"/statelyai-docs/blog/2023-08-10-new-editor-videos","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-08-10-new-editor-videos/index.mdx","source":"@site/blog/2023-08-10-new-editor-videos/index.mdx","title":"Learn Stately with our new editor videos","description":"We\u2019ve created our Learn Stately guidance and accompanying tutorials to introduce the basic concepts of state machines.","date":"2023-08-10T00:00:00.000Z","formattedDate":"August 10, 2023","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"editor","permalink":"/statelyai-docs/blog/tags/editor"},{"label":"videos","permalink":"/statelyai-docs/blog/tags/videos"},{"label":"docs","permalink":"/statelyai-docs/blog/tags/docs"},{"label":"tutorials","permalink":"/statelyai-docs/blog/tags/tutorials"},{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"new","permalink":"/statelyai-docs/blog/tags/new"}],"readingTime":1.87,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Learn Stately with our new editor videos","description":"We\u2019ve created our Learn Stately guidance and accompanying tutorials to introduce the basic concepts of state machines.","tags":["stately","editor","videos","docs","tutorials","changelog","new"],"authors":["laura"],"date":"2023-08-10T00:00:00.000Z","slug":"2023-08-10-new-editor-videos","image":"/blog/2023-08-10-new-editor-videos.png"},"prevItem":{"title":"And all the other improvements this week!","permalink":"/statelyai-docs/blog/2023-08-10-all-the-other-improvements"},"nextItem":{"title":"Markdown in annotations, performance improvements, and more!","permalink":"/statelyai-docs/blog/2023-08-04-markdown-in-annotations"}},"content":"We\u2019ve just released a new way for new users to learn Stately. We know that the learning curve is one of the biggest challenges you face when adopting state machines in your teams. We\u2019ve designed our Learn Stately guidance and accompanying tutorials to introduce the basic concepts of state machines, demonstrate how to build them, simulate them, export them to code, and implement them with the exported code.\x3c!-- truncate --\x3e\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"Learn Stately modal in the editor, with a video of the editor in action.\\"\\n    sources={{\\n      light: \'/blog/2023-08-10-new-editor-videos/onboarding.png\',\\n      dark: \'/blog/2023-08-10-new-editor-videos/onboarding-dm.png\',\\n    }}\\n  />\\n</p>\\n\\n## Learn Stately guidance\\n\\nThe highlight of our Learn Stately guidance is two short videos (less than 8 minutes total!) that provide a step-by-step guide to using Stately and cover the basics of state machines. The videos demonstrate how to build state machines, and the practical examples show you how to use our key features.\\n\\nThe Learn Stately guidance is triggered automatically when a new user visits the Stately editor or if they haven\u2019t viewed the guidance before. You can also relaunch the modal anytime from the Editor menu by selecting Help > Learn Stately or from the Help drawer by selecting Learn Stately.\\n\\n## Updated tutorials\\n\\nWe\u2019ve also updated the tutorials in the Help drawer. We designed the tutorials as a refresher for the concepts learned in the videos and a quick start guide to Stately. They offer a brief overview of the features and functions of Stately, including how to create, edit, and simulate state machines.\\n\\nYou can always check out our [Stately and XState docs](https://stately.ai/docs) if you need further tutorials and examples. The docs cover everything from the basics of state machines to advanced implementation with XState.\\n\\n## We\u2019d love your feedback.\\n\\nThe new Learn Stately guidance and accompanying tutorials will hopefully make it easier than ever for new users to get started with state machines. We\u2019d love your feedback about the videos and tutorials. Please let us know if they\u2019ve helped and what other information you and your team need to get started with state machines. You can [request features, docs, and examples on our feedback board](https://feedback.stately.ai). Or let us know on our social channels below:\\n\\n- [Discord](https://discord.gg/xstate)\\n- [LinkedIn](https://www.linkedin.com/company/statelyai/)\\n- [Mastodon](https://social.stately.ai/@stately)\\n- [Twitter](https://twitter.com/statelyai)\\n- [Instagram](https://instagram.com/statelyai)"},{"id":"2023-08-04-markdown-in-annotations","metadata":{"permalink":"/statelyai-docs/blog/2023-08-04-markdown-in-annotations","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-08-04-markdown-in-annotations/index.mdx","source":"@site/blog/2023-08-04-markdown-in-annotations/index.mdx","title":"Markdown in annotations, performance improvements, and more!","description":"This week\u2019s headlines are that annotations now support markdown, and we\u2019ve made many performance improvements!","date":"2023-08-04T00:00:00.000Z","formattedDate":"August 4, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"improved","permalink":"/statelyai-docs/blog/tags/improved"},{"label":"fixed","permalink":"/statelyai-docs/blog/tags/fixed"}],"readingTime":1.945,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Markdown in annotations, performance improvements, and more!","description":"This week\u2019s headlines are that annotations now support markdown, and we\u2019ve made many performance improvements!","authors":["laura"],"tags":["changelog","improved","fixed"],"date":"2023-08-04T00:00:00.000Z","slug":"2023-08-04-markdown-in-annotations","image":"/blog/2023-08-04-markdown-in-annotations.png"},"prevItem":{"title":"Learn Stately with our new editor videos","permalink":"/statelyai-docs/blog/2023-08-10-new-editor-videos"},"nextItem":{"title":"Stately minor improvements","permalink":"/statelyai-docs/blog/2023-07-26-stately-minor-improvements"}},"content":"This week\u2019s headlines are that annotations now support markdown, and we\u2019ve made many performance improvements!\\n\\n\x3c!--truncate--\x3e\\n\\n## New\\n\\nMarkdown is now supported in [annotations](https://stately.ai/docs/annotations)! Previously you could only use plain text in your annotations; now, you can use markdown, like in [descriptions](https://stately.ai/docs/descriptions).\\n\\n![Markdown being entered into an annotation, and that same annotation with bold text, italic text, a link, and a cute goldfish image.](https://canny.io/images/6ac21f4c3304524750dc52485c1d59fb.png)\\n\\nCreate an annotation by right-clicking anywhere on the canvas.\\n\\n## Bug fixes\\n\\n- Simulation mode has been fixed for embedded machines.\\n- You now only need to press the back button once to return to the Projects list from the editor.\\n- Share image URLs were quickly fixed after being broken by a previous release.\\n- Renamed machines can now be filtered by their new names when filtered in the machines list.\\n- Initial states are now correctly assigned when copying and pasting states.\\n- The keyboard shortcuts button in the help drawer is now fixed.\\n- The Give Feedback button in the help drawer is now easier to click.\\n\\n## Improvements\\n\\n- We have spent some time improving the performance of the canvas and UI, and your large machines should now be much smoother. Please [let us know](mailto:support@stately.ai) if you have any machines which need more attention!\\n- You can now rename your project by double-clicking its name in the editor\u2019s breadcrumb.\\n- Old context values with type array or object are now migrated correctly. Arrays and objects in the old machine context structure were stored as strings, and now when the user opens their machines, they\u2019re correctly converted to JavaScript arrays and objects, respectively.\\n- The starter machine description is now an annotation, making it easier to delete all the states and transitions inside a starter machine if you want a fresh start.\\n- The left panel width is now persisted when you reload the page.\\n- Custom actions are now correctly handled in **Import Code**; top-level action parameters are moved inside the `action.params` object, and `type` now appears before `params` in exported code.\\n- The following machine options are no longer included in exported code: Do not include these in machine options in the exported code: actions with expression `type`, actors with expression `src`, guards with expression names, and delays with expression values.\\n- A motley collection of internal fixes and improvements."},{"id":"2023-07-26-stately-minor-improvements","metadata":{"permalink":"/statelyai-docs/blog/2023-07-26-stately-minor-improvements","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-07-26-stately-minor-improvements/index.mdx","source":"@site/blog/2023-07-26-stately-minor-improvements/index.mdx","title":"Stately minor improvements","description":"The Stately team has released more this week, and we have even more fixes and improvements for you.","date":"2023-07-26T00:00:00.000Z","formattedDate":"July 26, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"beta","permalink":"/statelyai-docs/blog/tags/beta"},{"label":"new","permalink":"/statelyai-docs/blog/tags/new"}],"readingTime":0.94,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Stately minor improvements","description":"The Stately team has released more this week, and we have even more fixes and improvements for you.","authors":["laura"],"tags":["changelog","beta","new"],"date":"2023-07-26T00:00:00.000Z","slug":"2023-07-26-stately-minor-improvements","image":"/blog/2023-07-26-stately-minor-improvements.png"},"prevItem":{"title":"Markdown in annotations, performance improvements, and more!","permalink":"/statelyai-docs/blog/2023-08-04-markdown-in-annotations"},"nextItem":{"title":"Stately Office Hours 68","permalink":"/statelyai-docs/blog/2023-07-26-office-hours-68"}},"content":"We have more fixes and improvements for you this week.\\n\\n\x3c!--truncate--\x3e\\n\\n## Bug fixes\\n\\n- The previously over-eager logged out toast will now only show after successfully signing out.\\n\\n## Improvements\\n\\n- We now use the XState logo for built-in actions to distinguish them from custom actions:\\n  ![State with built-in XState entry actions, including assign, raise, log, send, and stop. These all have a corresponding XState X icon. The custom action has a lightning icon.](https://canny.io/images/15c535b6fcbcfe8213cac46cbf38947c.png)\\n- We\u2019ve labeled the [Export to Mermaid option](https://feedback.stately.ai/changelog/export-to-mermaid) as \u201cBeta\u201d\x9d as we continuously improve this feature.\\n- When a user shares a direct team link with another user who has been invited to the team but has yet to accept the invitation, we will now redirect that recipient to their team invitation page, where they can accept or decline the invitation.\\n- After a user has created a new machine, the editor will always switch back to Design mode, even if the user was previously in Simulation mode.\\n- We\u2019ve improved the page titles so that browser tab text is easier to read and understand.\\n- A melange of internal fixes and improvements."},{"id":"2023-07-26-office-hours-68","metadata":{"permalink":"/statelyai-docs/blog/2023-07-26-office-hours-68","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-07-26-office-hours-68/index.mdx","source":"@site/blog/2023-07-26-office-hours-68/index.mdx","title":"Stately Office Hours 68","description":"We\u2019ve recently launched a huge Stately release, and we covered it all (as well as some even newer features!) in our latest office hours live stream.","date":"2023-07-26T00:00:00.000Z","formattedDate":"July 26, 2023","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"office hours","permalink":"/statelyai-docs/blog/tags/office-hours"},{"label":"colors","permalink":"/statelyai-docs/blog/tags/colors"},{"label":"actions","permalink":"/statelyai-docs/blog/tags/actions"},{"label":"canvas","permalink":"/statelyai-docs/blog/tags/canvas"},{"label":"grid","permalink":"/statelyai-docs/blog/tags/grid"},{"label":"ui","permalink":"/statelyai-docs/blog/tags/ui"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"xstate v5","permalink":"/statelyai-docs/blog/tags/xstate-v-5"}],"readingTime":1.48,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Stately Office Hours 68","description":"We\u2019ve recently launched a huge Stately release, and we covered it all (as well as some even newer features!) in our latest office hours live stream.","tags":["stately","studio","office hours","colors","actions","canvas","grid","ui","xstate","xstate v5"],"authors":["laura"],"date":"2023-07-26T00:00:00.000Z","slug":"2023-07-26-office-hours-68","image":"/blog/2023-07-26-office-hours-68.png"},"prevItem":{"title":"Stately minor improvements","permalink":"/statelyai-docs/blog/2023-07-26-stately-minor-improvements"},"nextItem":{"title":"Improving your flows with color","permalink":"/statelyai-docs/blog/2023-07-24-improving-your-flows-with-color"}},"content":"We\u2019ve recently launched a huge Stately release, and we covered it all (as well as some even newer features!) in our latest office hours live stream.\\n\\n\x3c!--truncate--\x3e\\n\\n<YouTube id=\\"AKAnjF3NKjo\\" />\\n\\nWatch the video to find out all the new features. Use the links below to jump straight to that chapter in the video:\\n\\n- 0:00 [Intro](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=0s )\\n- 0:30 [Team intros](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=30s )\\n- 01:14 [Everything in the new release!](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=74s )\\n- 1:59 [Colors (new!)](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=119s )\\n- 4:34 [Creating directly from the canvas (new!)](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=274s )\\n- 6:16 [Refined statechart design (new!)](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=376s )\\n- 6:41 [Built-in XState actions (new!)](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=401s )\\n- 7:08 [Transition routing and translucency (new!)](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=428s )\\n- 8:30 [Hide UI (new!)](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=510s )\\n- 9:44 [Export to XState V5 beta (new!)](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=584s )\\n- 11:33 [Request the features you want](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=693s )\\n- 12:14 [Filter machines by name (new!)](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=734s )\\n- 13:01 [Do colors appear in the state machine config too?](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=781s )\\n- 14:20 [Will the viz still be replaced by the new editor?](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=860s )\\n- 15:38 [Hiding the canvas grid](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=938s )\\n- 16:10 [When will these features be available in the XState VSCode extension?](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=970s )\\n- 17:30 [How can you use XState on the back-end?](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=1050s )\\n- 19:55 [Will not(\u2026) be coming to the guards UI?](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=1195s )\\n- 21:08 [Autosave for Pro users (new!)](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=1268s )\\n- 25:03 [Improved order when exporting states (new!)](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=1503s )\\n- 28:34 [Export to Mermaid (new!)](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=1714s )\\n- 31:31 [Will there be more keyboard shortcuts?](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=1891s )\\n- 33:10 [Enterprise plans](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=1990s )\\n- 37:06 [Stately code editor Vim mode?](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=2226s )\\n- 37:46 [Stately live streams](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=2266s )\\n- 40:08 [Wrap up](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=2408s )\\n- 40:53 [Will the new merch come in the palette colors?](https://youtube.com/watch?v=AKAnjF3NKjo&amp;t=2453s )\\n\\nDo you want to vote on our upcoming features? [Visit our roadmap to upvote feature suggestions and make your own feature requests](https://feedback.stately.ai)."},{"id":"2023-07-24-improving-your-flows-with-color","metadata":{"permalink":"/statelyai-docs/blog/2023-07-24-improving-your-flows-with-color","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-07-24-improving-your-flows-with-color/index.mdx","source":"@site/blog/2023-07-24-improving-your-flows-with-color/index.mdx","title":"Improving your flows with color","description":"As part of our recent colossal release, we\u2019ve launched a new feature for pro users - colors.","date":"2023-07-24T00:00:00.000Z","formattedDate":"July 24, 2023","tags":[{"label":"stately studio","permalink":"/statelyai-docs/blog/tags/stately-studio"},{"label":"state machines","permalink":"/statelyai-docs/blog/tags/state-machines"},{"label":"color","permalink":"/statelyai-docs/blog/tags/color"},{"label":"pro features","permalink":"/statelyai-docs/blog/tags/pro-features"}],"readingTime":3.3,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Improving your flows with color","description":"As part of our recent colossal release, we\u2019ve launched a new feature for pro users - colors.","tags":["stately studio","state machines","color","pro features"],"authors":["laura"],"slug":"2023-07-24-improving-your-flows-with-color","image":"/blog/2023-07-24-improving-your-flows-with-color.png","date":"2023-07-24T00:00:00.000Z"},"prevItem":{"title":"Stately Office Hours 68","permalink":"/statelyai-docs/blog/2023-07-26-office-hours-68"},"nextItem":{"title":"Export to Mermaid","permalink":"/statelyai-docs/blog/2023-07-20-export-to-mermaid"}},"content":"As part of our recent colossal release, we\u2019ve launched a new feature for pro users - [colors](/docs/colors). With this feature, you can add a layer of visual distinction to your statecharts, making them more organized, informative, and accessible for your team to understand.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"State machine showing how to choose colors from the color palette, and the colors for default (grey in darkmode, white in lightmode), pink, purple, red, orange, yellow, green, and blue states and transitions.\\"\\n    sources={{\\n      light: \'/blog/2023-07-24-improving-your-flows-with-color/choosing-colors.png\',\\n      dark: \'/blog/2023-07-24-improving-your-flows-with-color/choosing-colors-dm.png\',\\n    }}\\n  />\\n</p>\\n\\n\x3c!-- truncate --\x3e\\n\\n## How can I use colors in Stately?\\n\\nYou can assign colors from the palette menu to different states and transitions in your flows. You can choose from various color options, including pink, purple, red, orange, yellow, green, and blue. You can also reset a state or transition back to the default color; gray in dark mode and white in light mode.\\n\\n## Why use colors?\\n\\nMany folks requested colors for their state machines, not just because colors make everything prettier! The bigger a machine gets, the more you want to distinguish or draw attention to particular states or transitions.\\n\\n### Color coding groups or types of states or events\\n\\nOne common use is to connect color to a meaning, such as making error states red and success states green. You could set transition colors to identify a common target, shared source, or group states and transitions meaningfully for your team.\\n\\n<EmbedMachine name=\\"Editor page machine\\" embedURL=\\"https://stately.ai/registry/editor/embed/7b5d60dc-94b0-4a1e-9ade-ea644b8cc35f?machineId=8b2c257c-2060-45a5-bdb1-e91b7f5c9318\\" />\\n\\nThe machine above uses yellow for user events, purple for system events, and red for errors.\\n\\n### Organize flows into regions with distinct colors\\n\\nSome other ways to use color are to use different colors to highlight different user personas or stories or mark popular paths through your app based on usage data.\\n\\n<EmbedMachine name=\\"\\" embedURL=\\"https://stately.ai/registry/editor/embed/7b5d60dc-94b0-4a1e-9ade-ea644b8cc35f?machineId=35d9c021-9b00-4c6f-85c9-1f2fece5d0c5\\" />\\n\\n### Use color for fun!\\n\\nOr maybe you want to use color for fun. You can use color to decorate your flows to fit your brand or decorate your states and transitions.\\n\\n<EmbedMachine name=\\"Traffic light machine\\" embedURL=\\"https://stately.ai/registry/editor/embed/7b5d60dc-94b0-4a1e-9ade-ea644b8cc35f?machineId=e35f9079-722e-4812-8103-e63ada46456f\\" />\\n\\n## How to use colors in your flows\\n\\nRead more about [adding colors](/docs/colors) and [upgrading to a Pro account](/docs/upgrade) in our docs.\\n\\nIf you want to explain your color coding, we\u2019ve had success using an annotation box as a key to help others understand the meaning behind each color.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"State machine with red, yellow, and purple transitions, and an annotation containing a key with yellow for user events, purple for system events and red for errors.\\"\\n    sources={{\\n      light: \'/blog/2023-07-24-improving-your-flows-with-color/color-key.png\',\\n      dark: \'/blog/2023-07-24-improving-your-flows-with-color/color-key-dm.png\',\\n    }}\\n  />\\n</p>\\n\\n\\nWhen using colors to convey information, it is essential to keep accessibility in mind. Not everyone perceives color the same way, and as many as 8% of men and 0.5% of women are color blind. Ensure your statecharts are inclusive by using color to emphasize or decorate your machines, and [do not use color as the only way to convey information](https://www.w3.org/WAI/WCAG21/Understanding/use-of-color.html).\\n\\nTo make your colored machines more accessible, add the color or symbolic name as a tag on your states and transitions, or include them in their descriptions.\\n\\n<EmbedMachine name=\\"Expense machine\\" embedURL=\\"https://stately.ai/registry/editor/embed/7b5d60dc-94b0-4a1e-9ade-ea644b8cc35f?machineId=9a62b8b1-b5a3-4b15-a5ed-acfe5f65da80\\" />\\n\\nColors are a powerful feature that helps you improve your statecharts\' organization, clarity, and user-friendliness. To learn more about using Colors, check out our [documentation](/docs/colors).\\n\\n## More Pro features\\n\\nColors is one of many Pro features we\'ve recently added to Stately. Our current Pro features include:\\n\\n- [Teams and shared projects](/docs/teams)\\n- [Private and unlisted projects](/docs/projects#change-a-projects-visibility)\\n- [Version history](/docs/versions)\\n- [Import from GitHub](/docs/import-from-github)\\n- [Live simulation mode](/docs/live-simulation)\\n- [Color states and transitions](/docs/colors)\\n- [Priority support](/docs/studio-pro-plan#priority-support)\\n- GitHub Sync (coming soon!)\\n- Workflows (coming soon!)\\n- Live collaboration (coming soon!)\\n\\nAnd we\'ve got many more coming soon! Want to suggest a feature? Leave a feature request on our feedback board or upvote other features we should prioritize.\\n\\nWant to try the Pro plan? You can get a 30-day free trial when you [join from our website](/pricing) or [upgrade](/docs/upgrade) from [the editor](https://state.new)."},{"id":"2023-07-20-export-to-mermaid","metadata":{"permalink":"/statelyai-docs/blog/2023-07-20-export-to-mermaid","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-07-20-export-to-mermaid/index.mdx","source":"@site/blog/2023-07-20-export-to-mermaid/index.mdx","title":"Export to Mermaid","description":"You can now export your state machines to Mermaid code and diagrams!","date":"2023-07-20T00:00:00.000Z","formattedDate":"July 20, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"pro","permalink":"/statelyai-docs/blog/tags/pro"},{"label":"improved","permalink":"/statelyai-docs/blog/tags/improved"},{"label":"fixed","permalink":"/statelyai-docs/blog/tags/fixed"}],"readingTime":0.555,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Export to Mermaid","description":"You can now export your state machines to Mermaid code and diagrams!","authors":["laura"],"tags":["changelog","pro","improved","fixed"],"date":"2023-07-20T00:00:00.000Z","slug":"2023-07-20-export-to-mermaid","image":"/blog/2023-07-20-export-to-mermaid.png"},"prevItem":{"title":"Improving your flows with color","permalink":"/statelyai-docs/blog/2023-07-24-improving-your-flows-with-color"},"nextItem":{"title":"Stately Studio minor improvements","permalink":"/statelyai-docs/blog/2023-07-18-stately-studio-minor-improvements"}},"content":"You can now export your state machines to Mermaid code and diagrams! [Mermaid](https://mermaid.js.org) is a JavaScript-based diagramming and charting tool that renders Markdown-inspired text definitions.\\n\\n\x3c!--truncate--\x3e\\n\\n![mermaid](https://canny.io/images/6439446ea46c01d1ad1e8a65e6d922d4.png)\\n\\nMermaid is a useful format because Mermaid diagrams are created using plain text and can be easily version-controlled and shared with others. [GitHub supports Mermaid as an advanced format](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/creating-diagrams) for issues, discussions, pull requests, wikis, and Markdown files.\\n\\nFind the **Mermaid** export in Stately from the dropdown menu in the **Code** panel. You can export as Mermaid-formatted code, preview the diagram, and copy an SVG.\\n\\nThe export to Mermaid feature is in beta. If you have any feedback, please [let us know on Discord](https://discord.gg/xstate)."},{"id":"2023-07-18-stately-studio-minor-improvements","metadata":{"permalink":"/statelyai-docs/blog/2023-07-18-stately-studio-minor-improvements","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-07-18-stately-studio-minor-improvements/index.mdx","source":"@site/blog/2023-07-18-stately-studio-minor-improvements/index.mdx","title":"Stately Studio minor improvements","description":"We launched a huge release last week, but we already have more for you! In the last week, we made the following bug fixes and improvements.","date":"2023-07-18T00:00:00.000Z","formattedDate":"July 18, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"pro","permalink":"/statelyai-docs/blog/tags/pro"},{"label":"improved","permalink":"/statelyai-docs/blog/tags/improved"},{"label":"fixed","permalink":"/statelyai-docs/blog/tags/fixed"}],"readingTime":1.27,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Stately Studio minor improvements","description":"We launched a huge release last week, but we already have more for you! In the last week, we made the following bug fixes and improvements.","authors":["laura"],"tags":["changelog","pro","improved","fixed"],"date":"2023-07-18T00:00:00.000Z","slug":"2023-07-18-stately-studio-minor-improvements","image":"/blog/2023-07-18-stately-studio-minor-improvements.png"},"prevItem":{"title":"Export to Mermaid","permalink":"/statelyai-docs/blog/2023-07-20-export-to-mermaid"},"nextItem":{"title":"Supercharge the canvas","permalink":"/statelyai-docs/blog/supercharge-the-canvas"}},"content":"We launched a huge release last week, but we already have more for you! In the last week, we made the following bug fixes and improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Autosave for Pro users\\n\\nMachine versions are now automatically saved for Pro users every hour. Once created, these versions appear in the list of versions and function just like other versions, with the ability to view, restore, delete, etc. Users can toggle to filter auto-saved versions out of the version history list. A version is also auto-saved when the user\u2019s browser window is closed.\\n\\n## Filter machines\\n\\nGot a really long list of machines in your project? You can now filter these machines by name.\\n\\n![Using the filter machines text input to find machines with export in their name.](https://canny.io/images/7cd5b51ace3e563f7773e18d1f801b2e.gif)\\n\\n## Bug fixes\\n\\n- Importing machines without names will no longer cause errors in Safari.\\n- The zoom controls now slide out of the way of the Help drawer when it\u2019s toggled open and closed.\\n- The reset button now slides out of the way of the Help drawer when it\u2019s toggled open and closed in Simulate mode.\\n\\n## Improvements\\n\\n- States are now exported in a predictable, intuitive order, regardless of the order you added them. Initial states will be first, and the order of states will tend to follow transitions, with the \u201cfurthest\u201d\x9d states being last.\\n- You will now be prompted to sign in when accessing features that require login.\\n- Improved accessibility of dropdown menus.\\n- An assortment of internal fixes and improvements."},{"id":"supercharge-the-canvas","metadata":{"permalink":"/statelyai-docs/blog/supercharge-the-canvas","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-06-14-supercharge-the-canvas/index.mdx","source":"@site/blog/2023-06-14-supercharge-the-canvas/index.mdx","title":"Supercharge the canvas","description":"Today we are excited to release an update to Stately that takes a huge step towards making complexity more manageable.","date":"2023-07-11T00:00:00.000Z","formattedDate":"July 11, 2023","tags":[{"label":"canvas","permalink":"/statelyai-docs/blog/tags/canvas"},{"label":"stately studio","permalink":"/statelyai-docs/blog/tags/stately-studio"}],"readingTime":9.155,"hasTruncateMarker":true,"authors":[{"name":"Nick Perich","title":"Stately Team","url":"https://github.com/cirephe","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/nick.png","key":"nick"}],"frontMatter":{"title":"Supercharge the canvas","description":"Today we are excited to release an update to Stately that takes a huge step towards making complexity more manageable.","tags":["canvas","stately studio"],"authors":["nick"],"slug":"supercharge-the-canvas","image":"/blog/2023-06-14-supercharge-the-canvas.png","date":"2023-07-11T00:00:00.000Z"},"prevItem":{"title":"Stately Studio minor improvements","permalink":"/statelyai-docs/blog/2023-07-18-stately-studio-minor-improvements"},"nextItem":{"title":"New webinar: Intro to Stately Studio and state machines","permalink":"/statelyai-docs/blog/intro-to-stately-studio-webinar"}},"content":"Today we are excited to release an update to Stately that takes a huge step toward making complexity more manageable.\\n\\n- Bring color into your flows! \ud83c\udf08\\n- Design more logic directly on the canvas \ud83d\udcdd\\n- Interact with effects (like entry actions and invoked actors) as visual blocks \ud83e\udde9\\n- Understand complex flows with a refined statechart design \ud83d\udd25\\n- Hide the UI to focus on your content \ud83c\udfa7\\n- Improved transition routing \u21b5\\n- Use tags, action parameters, and many XState actions in the Studio \ud83d\udcaa\x3c!--truncate--\x3e\\n- Export to XState v5 beta \ud83d\ude9a\\n\\n## Making complexity manageable\\n\\nWe believe that making logic explicit using state machines, statecharts, and other visual flows can bring huge benefits like:\\n\\n- Improving collaboration through a shared understanding.\\n- Tapping into our innate visual processing capacities with a spatial format.\\n- Streamlining product creation by helping to sync effort across teams, platforms, and workflows.\\n- Generating code, tests, documentation, and other artifacts.\\n\\nBut much of what we build is complex. And when we represent it visually, the result can itself be complex.\\n\\nOne of our goals at Stately is to make this inherent complexity you face more manageable. We want to help you simplify where possible, automate when useful, and elevate your thinking and communication.\\n\\nToday we are launching an updated design for Stately Studio\u2019s visual canvas that lays a foundation we will build on over the next wave of releases.\\n\\n![A flow in Stately Studio for a video player which can be toggled between Mini and Full states. The states and transitions are colored.](making-complexity-manageable.png)\\n\\n## Create from the canvas to stay in the flow\\n\\nYou can now do much more work on the canvas itself.\\n\\nBeing able to stay on the canvas keeps you closer to your content, lets interactions be more intuitive, can help you stay focused, and can even give you more room to work.\\n\\nFor example, we enhanced the Edit Menu to support adding [actions](/docs/actions#using-actions-in-stately-studio), tags, and other data to [states](/docs/states#using-states-in-stately-studio) and [transitions](/docs/transitions#using-transitions-and-events-in-stately-studio). And most items on the canvas can then be edited directly.\\n\\n<video\\n  src=\\"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/videos/create-from-canvas.mp4\\"\\n  width=\\"720\\"\\n  controls\\n  preload=\\"metadata\\"\\n  poster=\\"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/videos/create-from-canvas-poster.png\\"\\n>\\n  <p>\\n    <a href=\\"https://youtube.com/watch?v=ck9uGikxJ8k\\">\\n      Watch this video on YouTube.\\n    </a>\\n  </p>\\n</video>\\n\\n## Effect blocks make it easy to say what happens when\\n\\nStatecharts are great for modeling how a process goes from state to state when an event occurs. This is especially powerful since you can also make things happen by having effects run at specific times.\\n\\nThe most important addition we\u2019ve made with this release is that effects ([invoked actors](/docs/invoke#using-invoked-actors-in-stately-studio), entry actions, and exit actions) are now interactive. They are represented as blocks on the canvas that can be placed inside states and transitions.\\n\\nThis will make it easy to define, understand, and modify your app\u2019s behavior as users step through your flow.\\n\\n![An OnboardPatient state machine with XState assign actions on multiple transitions, and actors being invoked from multiple states.](effect-blocks-make-it.png)\\n\\nEffect blocks are editable, can be copied, and handle standard keyboard interactions, just as you\u2019d expect. And rumor is, soon you\u2019ll be able to drag them around, enhancing your codebase with a new spatial dimension. Imagine changing when a JavaScript function is called simply by dragging it to a new place in the flow. \ud83e\udd2b\\n\\nSpeaking of upcoming features, if you follow [our live streams](https://youtube.com/statelyai/?source=blog), you\u2019ve already seen [a preview of writing code inside the Studio using the new effect blocks](https://www.youtube.com/live/FY030no59Y4?feature=share&t=1876). But we decided to take this functionality even further before releasing it, so stay tuned!\\n\\n## Streamlined visualization makes complex flows easier to understand\\n\\nOne bit of feedback we consistently get is that statecharts are helpful, but that sometimes it can be difficult to understand what\u2019s happening when a lot of content is visible at once. We also think it\u2019s important that even non-technical contributors be able to use statecharts to build and understand their products.\\n\\nSo we\u2019ve turned over every aspect of how statecharts are represented on the canvas, trying to figure out how to balance the need to show a dense variety of information in a way that is not overwhelming.\\n\\nOne change is that the name of the state is now a header, and most of the other data on it (tags, [description](/docs/descriptions), effects, and so on) are grouped together as part of a new detail section.\\n\\n![A MissingItem state with a bold yellow background. The state also has an exception tag, a description, entry action, and invoked actors. These are all displayed under the MissingItem state heading on a lighter background.](streamlined-viz-1.png)\\n\\nThis means that when you first open the flow, it\u2019s easy to focus on the state names for a quick overview of how they are connected. Then when you want more detail, you can narrow your attention to what interests you.\\n\\nWe\u2019ve also heard feedback that sometimes it can be hard to tell a state from a transition. One reason is that with Stately, unlike other diagramming tools, transitions can have many of the same properties as states (such as actions and descriptions). This gives a powerful option for modeling but can introduce challenges with ambiguity. We mitigated this, however, by adopting a style where states \u201cpop out\u201d while transitions \u201cblend in\u201d.\\n\\n![States have stronger colored more opaque backgrounds and less rounded corners. Events and transitions have more of a rounded pill shape with translucent backgrounds.](streamlined-viz-2.png)\\n\\nEffect blocks, on the other hand, have the same style no matter where they are placed since their location simply says when they are executed. This consistency makes it easy for contributors with various backgrounds to intuitively understand \u201cwhat happens\u201d.\\n\\nAnd you may notice many other small and not-so-small details. For example, a chunky border around each level in the hierarchy gives a new sectioned-off look. This will be useful in the future as we add support for more dynamic views.\\n\\n![The root state and parent state in this flow both have chunky borders that are colored purple to match their state. The child states are a solid color without a border.](streamlined-viz-3.png)\\n\\nAnd one principle we used to guide us was that, because statecharts already involve so many boxes and arrows, any sharply defined line should be significant for the flow. That means we generally looked for other solutions for separating sections.\\n\\nWe think we\u2019ve built something that will increasingly be able to support however you want to use Stately, smoothly growing from casual brainstorming sessions to business-critical production actor systems filled with multi-leveled machines.\\n\\n## Translucency reduces ambiguities\\n\\nAnother part of the improved design is translucency. Because Stately handles the complex, nonlinear flows often required when building apps, it is not always possible to lay out your logic in a nice straight line. This means that arrows can go underneath other items, making the content difficult to read. Also, when working on a canvas, sometimes it\u2019s nice to casually toss items into overlapping piles as your work comes together. But statecharts can get pretty detailed! And this means sometimes states can cover each other up, and it\u2019s hard to even tell anything is underneath.\\n\\nThat\u2019s why we made some canvas elements translucent by default, including state details and transition labels.\\n\\nIt\'s still usually better to avoid overlapping content. And to help content not overlap in the first place, we\'ve also enhanced transition routing.\\n\\nBut with translucency flows should be easier to follow when it happens.\\n\\n![A translucent onDone transition means the transition lines running underneath it are still visible.](translucency.png)\\n\\n## Hide the UI to work without distraction\\n\\nFor when you just want to focus on the content, we\u2019ve added a way to hide the Stately UI, including the header bar, side panels, and canvas controls.\\n\\nTry hiding the UI from the Stately menu in the top left of the editor, or just press `\u2318` + `.` to toggle it instantly. We also support `\u2318` + `\\\\` for the same behavior if you prefer using that shortcut.\\n\\n## Get more of XState\u2019s power inside the Stately Studio\\n\\nWe are continuing to bring more of XState into the visual Studio.\\n\\nTags are now supported in the Studio to help you categorize different state nodes. For example, you can add a \u201cloading\u201d tag to each state representing loading data.\\n\\nAnd the Studio now supports action parameters and several categories of [actions that are built into XState](/docs/xstate-v4/xstate/actions/built-in-actions):\\n\\n- assign\\n- raise\\n- log\\n- sendTo\\n- stop\\n\\nYou can [learn more about tags and the actions built into XState in our documentation](../docs/xstate-v4/xstate/actions).\\n\\nAlso, you can try exporting your machines to XState v5 beta. Note that support for importing from v5 beta is coming soon.\\n\\n## Design in color\\n\\nFinally, we have an enthusiastic community, and one request we\u2019ve heard again and again was the need for color in flows.\\n\\nColor is finally here! \ud83c\udf08\\n\\nAnd it doesn\u2019t just look pretty. There are so many ways that color can help you. For example, you can try:\\n\\n- Setting transition colors to help identify a common target\\n- Setting transition colors to show a shared source\\n- Connect a color to a meaning, such as making error states red\\n- Organize flows into regions with distinct colors\\n- Use different colors for different user personas or stories\\n- Mark popular paths with colors based on usage data\\n\\n![Swatches of red, orange, yellow, green, blues, purple, and pink.](colors.png)\\n\\nWe think you\u2019ll find that color is especially useful when building with others, such as collaborating with team members or presenting to clients. It provides a nice way to convey new layers of meaning. And a colorful image makes the modeling that Stately supports more appealing for non-developers, getting everyone on board and building an attractive bridge between different audiences.\\n\\nBecause color will be used in diagrams in dynamic and varied ways, we implemented our approach using a perceptually uniform color space. This means that no matter which color you choose, in light mode or dark mode, you don\u2019t have to worry about contrast changes affecting legibility. This is because all colors in any group are perceived as being the same lightness.\\n\\nSet a color by selecting a state or transition and choosing the one you want from the Edit Menu above it. You can set colors separately on states and on transitions. Effect blocks and other attached details inherit their color.\\n\\n<video\\n  src=\\"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/videos/colors-2.mp4\\"\\n  width=\\"720\\"\\n  controls\\n  preload=\\"metadata\\"\\n  poster=\\"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/videos/create-from-canvas-poster.png\\"\\n>\\n  <p>\\n    <a href=\\"https://youtube.com/watch?v=Yiij2FaGSd0\\">\\n      Watch this video on YouTube.\\n    </a>\\n  </p>\\n</video>\\n\\nColors are just for Pro subscribers. So if you haven\u2019t signed up yet, [try it out with a free 30-day trial](https://stately.ai/pricing)!\\n\\n## Try out Stately now\\n\\nWith the improved design and new functionality, Stately is even more useful for teams throughout the entire product lifecycle. But this is still just the start of what we\u2019ve been working on this year.\\n\\n[Stately is free to try, so check it out](https://stately.ai). We\u2019re sure you\u2019ll find many ways it can help you. And if there is anything you would love to see added, please [join our Discord community](https://discord.gg/xstate) or [reach out directly](mailto:support@stately.ai) and let us know!"},{"id":"intro-to-stately-studio-webinar","metadata":{"permalink":"/statelyai-docs/blog/intro-to-stately-studio-webinar","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-07-05-webinar-intro-to-stately-studio/index.mdx","source":"@site/blog/2023-07-05-webinar-intro-to-stately-studio/index.mdx","title":"New webinar: Intro to Stately Studio and state machines","description":"Join Anders and Laura for a tour of Stately Studio and an introduction to state machines featuring the next release of Stately Studio.","date":"2023-07-05T00:00:00.000Z","formattedDate":"July 5, 2023","tags":[{"label":"stately studio","permalink":"/statelyai-docs/blog/tags/stately-studio"},{"label":"state machines","permalink":"/statelyai-docs/blog/tags/state-machines"}],"readingTime":1.215,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"New webinar: Intro to Stately Studio and state machines","description":"Join Anders and Laura for a tour of Stately Studio and an introduction to state machines featuring the next release of Stately Studio.","tags":["stately studio","state machines"],"authors":["laura"],"slug":"intro-to-stately-studio-webinar","image":"/blog/2023-07-05-webinar-intro-to-stately-studio.png","date":"2023-07-05T00:00:00.000Z"},"prevItem":{"title":"Supercharge the canvas","permalink":"/statelyai-docs/blog/supercharge-the-canvas"},"nextItem":{"title":"25 new server-side workflow examples","permalink":"/statelyai-docs/blog/serverside-workflow-examples"}},"content":"Last week Anders and I hosted [a webinar introducing Stately Studio and state machines](https://www.youtube.com/watch?v=u_ZU253mH-g). The webinar was a special one, as we previewed the supercharged new editor design which is coming very soon!\x3c!-- truncate --\x3e\\n\\nWatch the whole webinar below, or [use the chapters to jump to each section](#chapters).\\n\\n<YouTube id=\\"u_ZU253mH-g\\" />\\n\\n## Chapters\\n\\n- [0:00 Intro](https://youtube.com/watch?v=u_ZU253mH-g&t=0s)\\n- [1:10 Why state machines?](https://youtube.com/watch?v=u_ZU253mH-g&t=70s)\\n- [3:00 Tour of Stately\u2019s starter machine](https://youtube.com/watch?v=u_ZU253mH-g&t=180s)\\n- [4:27 State machine basics: modeling a dog walk](https://youtube.com/watch?v=u_ZU253mH-g&t=267s)\\n- [8:12 Discovering public machines](https://youtube.com/watch?v=u_ZU253mH-g&t=492s)\\n- [9:46 Forking machines](https://youtube.com/watch?v=u_ZU253mH-g&t=586s)\\n- [11:17 Annotations](https://youtube.com/watch?v=u_ZU253mH-g&t=677s)\\n- [12:49 Adding images and descriptions](https://youtube.com/watch?v=u_ZU253mH-g&t=769s)\\n- [14:52 Filter machines in a project with search](https://youtube.com/watch?v=u_ZU253mH-g&t=892s)\\n- [15:15 Creating a new machine](https://youtube.com/watch?v=u_ZU253mH-g&t=915s)\\n- [15:55 Self-transitions](https://youtube.com/watch?v=u_ZU253mH-g&t=955s)\\n- [17:20 Eventless (always) transitions](https://youtube.com/watch?v=u_ZU253mH-g&t=1040s)\\n- [18:03 Delayed (after) transitions](https://youtube.com/watch?v=u_ZU253mH-g&t=1083s)\\n- [22:13 Entry and exit actions](https://youtube.com/watch?v=u_ZU253mH-g&t=1333s)\\n- [22:50 Invoking actors](https://youtube.com/watch?v=u_ZU253mH-g&t=1370s)\\n- [24:02 Simulating machines](https://youtube.com/watch?v=u_ZU253mH-g&t=1442s)\\n- [26:10 Light and dark mode](https://youtube.com/watch?v=u_ZU253mH-g&t=1570s)\\n- [28:00 Upgrade to a Pro subscription](https://youtube.com/watch?v=u_ZU253mH-g&t=1680s)\\n- [30:11 Colors](https://youtube.com/watch?v=u_ZU253mH-g&t=1811s)\\n- [30:52 Private and unlisted machines](https://youtube.com/watch?v=u_ZU253mH-g&t=1852s)\\n- [32:20 Versions](https://youtube.com/watch?v=u_ZU253mH-g&t=1940s)\\n- [33:28 Live simulation](https://youtube.com/watch?v=u_ZU253mH-g&t=2008s)\\n- [35:01 Guard condition](https://youtube.com/watch?v=u_ZU253mH-g&t=2101s)\\n- [36:02 More on colors](https://youtube.com/watch?v=u_ZU253mH-g&t=2162s)\\n- [36:56 Import from GitHub](https://youtube.com/watch?v=u_ZU253mH-g&t=2216s)\\n- [39:09 Teams](https://youtube.com/watch?v=u_ZU253mH-g&t=2349s)\\n- [42:38 Export to code](https://youtube.com/watch?v=u_ZU253mH-g&t=2558s)\\n- [43:39 Wrap up](https://youtube.com/watch?v=u_ZU253mH-g&t=2619s)\\n\\n## Links and resources\\n\\n- [Stately docs](https://stately.ai/docs)\\n- [Create your own state machine](https://state.new)\\n- [Introduction to state machines and statecharts](https://stately.ai/docs/state-machines-and-statecharts)\\n- [Annotations](https://stately.ai/docs/annotations)\\n- [Descriptions](https://stately.ai/docs/descriptions)\\n- [Changelog](https://feedback.stately.ai/changelog)\\n- [Request features](https://feedback.stately.ai)\\n- [Upvote and track support for XState V5 beta in Stately Studio](https://feedback.stately.ai/editor/p/stately-studio-xstate-v5-compatibility)\\n- [Migration guide for XState V4 - XState V5](https://stately.ai/docs/migration)"},{"id":"serverside-workflow-examples","metadata":{"permalink":"/statelyai-docs/blog/serverside-workflow-examples","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-06-20-serverside-workflow-examples/index.mdx","source":"@site/blog/2023-06-20-serverside-workflow-examples/index.mdx","title":"25 new server-side workflow examples","description":"We\u2019ve added 25 new server-side workflows examples for XState V5, from simple state machines to more complex workflows.","date":"2023-06-20T00:00:00.000Z","formattedDate":"June 20, 2023","tags":[{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"xstate v5","permalink":"/statelyai-docs/blog/tags/xstate-v-5"},{"label":"examples","permalink":"/statelyai-docs/blog/tags/examples"},{"label":"workflow","permalink":"/statelyai-docs/blog/tags/workflow"},{"label":"serverside","permalink":"/statelyai-docs/blog/tags/serverside"}],"readingTime":1.605,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"25 new server-side workflow examples","description":"We\u2019ve added 25 new server-side workflows examples for XState V5, from simple state machines to more complex workflows.","tags":["xstate","xstate v5","examples","workflow","serverside"],"authors":["laura"],"slug":"serverside-workflow-examples","image":"/blog/2023-06-20-serverside-workflow-examples.png","date":"2023-06-20T00:00:00.000Z"},"prevItem":{"title":"New webinar: Intro to Stately Studio and state machines","permalink":"/statelyai-docs/blog/intro-to-stately-studio-webinar"},"nextItem":{"title":"Stately Studio minor improvements","permalink":"/statelyai-docs/blog/2023-06-14-stately-studio-minor-improvements"}},"content":"As part of helping make learning about state machines, the actor model, and XState easier, we\u2019ve been working hard on creating examples for the community. One of the most frequently requested examples has been server-side workflows. And now they\u2019re here! We\u2019ve got 25 new examples specifically for this purpose in the [XState GitHub repo](https://github.com/statelyai/xstate/tree/next/examples).\x3c!-- truncate --\x3e\\n\\nBased on the [CNCF Serverless workflow specification](https://github.com/serverlessworkflow/specification/tree/main), these examples showcase the power and versatility of [XState v5](/blog/announcing-xstate-v5-beta) when it comes to server-side workflows. These examples cover many use cases, from simple state machines to more complex workflows. Whether you are new to XState or an experienced user, we hope you\u2019ll find these examples useful.\\n\\n- [Hello world workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-hello)\\n- [Greeting workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-greeting)\\n- [Event-based greeting workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-event-greeting)\\n- [Solving math problems example](https://github.com/statelyai/xstate/tree/next/examples/workflow-math-problem)\\n- [Parallel execution workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-parallel)\\n- [Async function invocation workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-async-function)\\n- [Async subflow invocation workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-async-subflow)\\n- [Event-based transitions workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-event-based)\\n- [Applicant request decision workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-applicant-request)\\n- [Provision orders (error handling) workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-provision-orders)\\n- [Monitor job for completion (polling) workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-monitor-job)\\n- [Send CloudEvent on workflow completion example](https://github.com/statelyai/xstate/tree/next/examples/workflow-send-cloudevent)\\n- [Monitor patient vital signs workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-monitor-patient)\\n- [Finalize college application workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-finalize-college-app)\\n- [Perform customer credit check workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-credit-check)\\n- [Handle car auction bids (scheduled start) workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-car-auction-bids)\\n- [Check inbox periodically (cron-based workflow start) example](https://github.com/statelyai/xstate/tree/next/examples/workflow-check-inbox)\\n- [Event-based service workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-event-based-service)\\n- [Reusing function and event definitions workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-reusing-functions)\\n- [New patient onboarding (error checking and retries) workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-new-patient-onboarding)\\n- [Purchase order deadline (ExecTimeout) workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-purchase-order-deadline)\\n- [Accumulate room readings and create timely reports (ExecTimeout and KeepActive) workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-accumulate-room-readings)\\n- [Car vitals checks (SubFlow Repeat) workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-car-vitals)\\n- [Book lending workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-book-lending)\\n- [Filling a glass of water workflow example](https://github.com/statelyai/xstate/tree/next/examples/workflow-filling-water)\\n\\nHave you any examples to add? Check out [our contribution guidelines](https://github.com/statelyai/xstate/blob/next/CONTRIBUTING.md); we\u2019d love your pull request! If you have any questions or want to chat about these examples, please [join our Discord](https://discord.gg/xstate). Our team and community will be happy to help."},{"id":"2023-06-14-stately-studio-minor-improvements","metadata":{"permalink":"/statelyai-docs/blog/2023-06-14-stately-studio-minor-improvements","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-06-14-stately-studio-minor-improvements/index.mdx","source":"@site/blog/2023-06-14-stately-studio-minor-improvements/index.mdx","title":"Stately Studio minor improvements","description":"In the last week, we made the following bug fixes and improvements.","date":"2023-06-14T00:00:00.000Z","formattedDate":"June 14, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"improved","permalink":"/statelyai-docs/blog/tags/improved"},{"label":"fixed","permalink":"/statelyai-docs/blog/tags/fixed"}],"readingTime":0.68,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Stately Studio minor improvements","description":"In the last week, we made the following bug fixes and improvements.","authors":["laura"],"tags":["changelog","improved","fixed"],"date":"2023-06-14T00:00:00.000Z","slug":"2023-06-14-stately-studio-minor-improvements","image":"/blog/2023-06-14-stately-studio-minor-improvements.png"},"prevItem":{"title":"25 new server-side workflow examples","permalink":"/statelyai-docs/blog/serverside-workflow-examples"},"nextItem":{"title":"What is the actor model and when should I use it?","permalink":"/statelyai-docs/blog/what-is-the-actor-model"}},"content":"In the last week, we made the following bug fixes and improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Bug fixes\\n\\n- Annotations will no longer cause validation warnings and errors when exporting machines.\\n- You can no longer create annotations or access autolayout from embedded mode. The embedded mode will also no longer show a banner when a new version of Stately Studio is available.\\n\\n## Improvements\\n\\n- You can no longer simulate a machine that has errors. So fix those errors before you head over to Simulate mode!\\n- You can now resize the left sidebar to an even smaller width.\\n- Viewing somebody else\u2019s machine in Discovery will no longer show a banner telling you the machine is view-only.\\n- The meta value field now auto-resizes to fit the content.\\n- An array of internal fixes and improvements."},{"id":"what-is-the-actor-model","metadata":{"permalink":"/statelyai-docs/blog/what-is-the-actor-model","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-5-30-what-is-the-actor-model-and-when-should-i-use-it/index.mdx","source":"@site/blog/2023-5-30-what-is-the-actor-model-and-when-should-i-use-it/index.mdx","title":"What is the actor model and when should I use it?","description":"At Stately, the Actor Model is one of our favorite programming paradigms, and we think it\u2019s for good reason!","date":"2023-05-30T00:00:00.000Z","formattedDate":"May 30, 2023","tags":[{"label":"actor model","permalink":"/statelyai-docs/blog/tags/actor-model"},{"label":"modeling","permalink":"/statelyai-docs/blog/tags/modeling"},{"label":"statechart","permalink":"/statelyai-docs/blog/tags/statechart"},{"label":"tutorials","permalink":"/statelyai-docs/blog/tags/tutorials"},{"label":"state machine","permalink":"/statelyai-docs/blog/tags/state-machine"},{"label":"typescript","permalink":"/statelyai-docs/blog/tags/typescript"},{"label":"blog","permalink":"/statelyai-docs/blog/tags/blog"}],"readingTime":4.525,"hasTruncateMarker":true,"authors":[{"name":"Gavin Bauman","title":"Stately Team","url":"https://github.com/gavination","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/gavin.png","key":"gavin"}],"frontMatter":{"title":"What is the actor model and when should I use it?","description":"At Stately, the Actor Model is one of our favorite programming paradigms, and we think it\u2019s for good reason!","tags":["actor model","modeling","statechart","tutorials","state machine","typescript","blog"],"authors":["gavin"],"slug":"what-is-the-actor-model","image":"/blog/2023-5-30-what-is-the-actor-model-and-when-should-i-use-it.png","date":"2023-05-30T00:00:00.000Z"},"prevItem":{"title":"Stately Studio minor improvements","permalink":"/statelyai-docs/blog/2023-06-14-stately-studio-minor-improvements"},"nextItem":{"title":"Stately Studio minor improvements","permalink":"/statelyai-docs/blog/2023-05-26-stately-studio-minor-improvements"}},"content":"At Stately, the [Actor Model](https://en.wikipedia.org/wiki/Actor_model) is one of our favorite programming paradigms, and we think it\u2019s for good reason! The actor model allows developers to build reliable message-based systems by using _actors_ to communicate. This works extremely well with state machines and statecharts, which can also be modeled as actors and can communicate much in the same ways. Read on to learn what the actor model is, the problems it seeks to solve, and how you can use it in your projects to communicate reliably across different entities.\x3c!--truncate--\x3e\\n\\n## What is the actor model?\\n\\nThe actor model has been around for quite a while, dating back to the 1970\u2019s. That it\u2019s used with frameworks like [Akka](https://akka.io/) and built natively into languages like [Erlang](https://www.erlang.org/) are testaments to its utility. When researching the actor model, it\u2019s very common to see the phrase \u201ceverything is an actor\u201d, as it is a core tenet in the actor model philosophy. This simply means that in a given system, the _actor_ is the core unit of execution. Every action that occurs in the system is driven by an actor. An actor can communicate with other actors with the use of messaging, and they can also interact with external systems. Specifically, an actor can perform the following basic tasks:\\n\\n- Actors can manage their own internal state\\n- Actors can spawn other actors\\n- Actors can send messages to other actors\\n\\nIt may sound simple, but this programming model allows for the development of highly scalable and concurrent systems. There are constraints though, the most important of which is that an actor _cannot_ modify the internal state of another actor directly. This can be done implicitly with messaging (i.e an actor updating its state in response to a message) but _never directly_.\\n\\n## When should I use it?\\n\\nThe actor model is extremely useful for splitting up work that can be processed in parallel. It\u2019s excellent for [\u201cfan-out/fan-in\u201d](https://java-design-patterns.com/patterns/fanout-fanin/) scenarios where several functions need to be run at once and have their results combined before final processing. It also works well with building [pub/sub](https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern) systems, where several actors can be \u201cworkers\u201d, waiting for messages from the \u201cpublisher\u201d. Our last example, but certainly not the least, is in the case of systems that need to manage several similar entities, like a multiplayer game where every player is represented as an actor. A good rule of thumb is to at least consider the actor model whenever distribution and concurrency are core requirements.\\n\\n## When not to use it\\n\\nAs with any pattern, it\u2019s just as important to understand its weaknesses as it is to understand its strengths. Typically you may not want to use the actor pattern when order really matters. Order is usually not promised in the actor pattern, and if one of the actors fails, you\u2019ll have to deal with the concern of rolling back events. The actor model is often unnecessary when dealing with synchronous problems as well and can add unnecessary overhead. Additionally, error handling can be tricky with actors. Erlang popularized the \u201clet it crash\u201d philosophy, but given the problem, it may not always be the most reasonable answer.\\n\\n## How does XState work with the actor model?\\n\\nWith XState, we expose the ability to create instances of machines as actors! Looking at the example below, we can see that after defining our machine and its attributes, we only need to use `interpret()` to instantiate an actor (called `toggleActor`) and send it messages.\\n\\n```typescript\\nimport { createMachine, interpret } from \'xstate\';\\n\\n// State machine definition\\nconst toggleMachine = createMachine({\\n  id: \'toggle\',\\n  initial: \'inactive\',\\n  states: {\\n    inactive: { on: { TOGGLE: \'active\' } },\\n    active: { on: { TOGGLE: \'inactive\' } },\\n  },\\n});\\n\\n// Machine instance with internal state\\nconst toggleActor = interpret(toggleMachine);\\ntoggleActor.subscribe((state) => {\\n  console.log(state.value);\\n});\\ntoggleActor.start();\\n// => logs \'inactive\'\\n\\ntoggleActor.send({ type: \'TOGGLE\' });\\n// => logs \'active\'\\n\\ntoggleActor.send({ type: \'TOGGLE\' });\\n// => logs \'inactive\'\\n```\\n\\nThis actor has its own state and context, and it can be updated whenever it receives events. Of course, in order for the internal state of an actor to be updated, the event must be a legal transition defined with the machine.\\n\\n### Spawning Actors\\n\\nXState can also be used to spawn other actors and communicate with each other:\\n\\n```typescript\\nimport { createMachine, spawn } from \'xstate\';\\nimport { todoMachine } from \'./todoMachine\';\\n\\nconst todosMachine = createMachine({\\n  // ...\\n  on: {\\n    \'NEW_TODO.ADD\': {\\n      actions: assign({\\n        todos: ({ context, event }) => [\\n          ...context.todos,\\n          {\\n            todo: event.todo,\\n            // add a new todoMachine actor with a unique name\\n            ref: spawn(todoMachine, `todo-${event.id}`),\\n          },\\n        ],\\n      }),\\n    },\\n    // ...\\n  },\\n});\\n```\\n\\nWith the use of `spawn()` and `assign()`, we create a new actor instance when provided the machine logic and a unique identifier.\\nBy their nature, actions are [\\"fire and forget\\" effects](../docs/xstate-v4/xstate/actions), meaning they are executed with no expectation of receiving events back to the actor. This makes sense for creating a new actor, but we may still want the parent actor to have a reference to its child, so we save that in its context using `assign()`. `spawn()` is the function called that actually creates the new actor. The parent can access this state easily by calling `getSnapshot()` on the reference to the child.\\n\\nFor more detailed examples around working with actors in XState, like callback or promised-based actor spawning, sending updates, and communicating between actors, [check out our docs on actors](../docs/xstate-v4/actions-and-actors/actors)."},{"id":"2023-05-26-stately-studio-minor-improvements","metadata":{"permalink":"/statelyai-docs/blog/2023-05-26-stately-studio-minor-improvements","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-05-26-stately-studio-minor-improvements/index.mdx","source":"@site/blog/2023-05-26-stately-studio-minor-improvements/index.mdx","title":"Stately Studio minor improvements","description":"In the last week, we made the following bug fixes and improvements.","date":"2023-05-26T00:00:00.000Z","formattedDate":"May 26, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"improved","permalink":"/statelyai-docs/blog/tags/improved"},{"label":"fixed","permalink":"/statelyai-docs/blog/tags/fixed"}],"readingTime":0.51,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Stately Studio minor improvements","description":"In the last week, we made the following bug fixes and improvements.","authors":["laura"],"tags":["changelog","improved","fixed"],"date":"2023-05-26T00:00:00.000Z","slug":"2023-05-26-stately-studio-minor-improvements","image":"/blog/2023-05-26-stately-studio-minor-improvements.png"},"prevItem":{"title":"What is the actor model and when should I use it?","permalink":"/statelyai-docs/blog/what-is-the-actor-model"},"nextItem":{"title":"Announcing XState v5 beta","permalink":"/statelyai-docs/blog/announcing-xstate-v5-beta"}},"content":"In the last week, we made the following bug fixes and improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Bug fixes\\n\\n- Live simulation mode is now stopped when you switch machines.\\n- The child state of a new parallel state will no longer be marked as the initial state.\\n\\n## Improvements\\n\\n- The editor menu is now available when in version view mode.\\n- Meta values now support multi-line text input.\\n- Improved the layout of the starter machine at state.new.\\n- Improved accessibility of the left drawer toggle.\\n- Improved accessibility of the Discovery search and filters.\\n- A variety of internal fixes and improvements."},{"id":"announcing-xstate-v5-beta","metadata":{"permalink":"/statelyai-docs/blog/announcing-xstate-v5-beta","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-05-25-announcing-xstate-v5-beta/index.mdx","source":"@site/blog/2023-05-25-announcing-xstate-v5-beta/index.mdx","title":"Announcing XState v5 beta","description":"We\u2019re excited to announce the beta release of XState v5 and related packages after many years of development.","date":"2023-05-25T00:00:00.000Z","formattedDate":"May 25, 2023","tags":[{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"xstate v5","permalink":"/statelyai-docs/blog/tags/xstate-v-5"},{"label":"announcement","permalink":"/statelyai-docs/blog/tags/announcement"},{"label":"beta","permalink":"/statelyai-docs/blog/tags/beta"}],"readingTime":13.325,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"Announcing XState v5 beta","description":"We\u2019re excited to announce the beta release of XState v5 and related packages after many years of development.","tags":["xstate","xstate v5","announcement","beta"],"authors":["david"],"slug":"announcing-xstate-v5-beta","image":"/blog/2023-05-25-announcing-xstate-v5-beta.png","date":"2023-05-25T00:00:00.000Z"},"prevItem":{"title":"Stately Studio minor improvements","permalink":"/statelyai-docs/blog/2023-05-26-stately-studio-minor-improvements"},"nextItem":{"title":"Context-aware search in the docs","permalink":"/statelyai-docs/blog/2023-05-19-context-aware-search"}},"content":"We\u2019re excited to announce the v5 beta release of XState and related packages after many years of development.\x3c!--truncate--\x3e XState is a powerful, fully open-source (MIT-licensed) and zero-dependency state management & orchestration solution based on state machines, statecharts, and the actor model. It is currently being used in production by many companies for both frontend and backend applications.\\n\\n**XState orchestrates any logic**, from promises to state machines and everything in between.\\n\\nYou can try out XState v5 beta today by installing `xstate@beta`:\\n\\n```bash\\nyarn add xstate@beta\\n```\\n\\n**Note:** XState v5 beta support in XState tools such as typegen, the visual inspector, and Stately Studio is still in progress. We appreciate your patience as we work to ensure full compatibility with XState v4 and v5 in all of the XState/Stately tools. For more information, see the [list of items in progress](#in-progress).\\n\\nOver the past few years, we have collected a wealth of valuable feedback from the community regarding features they would like to see. These include ways to gradually adopt XState within their team and reduce the learning curve. We have responded by adding numerous new features and improvements that address these desires. Let\u2019s dive in and explore them!\\n\\n## Flattening the learning curve\\n\\nOne of the biggest items of feedback we\u2019ve received about XState is that although it is powerful, there is a substantial learning curve. There are some ~~new~~ old concepts to learn with XState, such as the actor model, state machines, and statecharts. With these concepts comes new terminology. In XState v5 beta and [the documentation](https://stately.ai/docs/xstate-v5), we have made a concerted effort to make XState as approachable as possible, and to reduce the learning curve as much as possible. Here are some of the changes we\u2019ve made:\\n\\n- **Simplified terminology**. Concepts shouldn\u2019t have multiple names, so we have simplified terms wherever possible. The basic unit of abstraction in XState v5 beta is the **actor**, and we\u2019ve removed some of the more confusing terms, such as \u201cservice\u201d and \u201cinterpreter,\u201d \u201ctransient transitions\u201d to \u201ceventless transitions,\u201d \u201ccond\u201d to \u201cguard\\", \u201cinternal: false\u201d to \u201creenter: true,\u201d and [more](https://stately.ai/docs/migration).\\n- **Reduced API surface area**. Some of the new features, such as [input](#actor-input) made existing features redundant, such as `machine.withContext(...)`. We\u2019ve also removed redundant functionality, such as `actor.onTransition(...)`, in favor of `actor.subscribe(...)`. [Read about all the breaking changes](https://stately.ai/docs/migration).\\n- **Examples, examples, examples**. We\u2019re adding many [XState v5 beta examples in the XState repository\u2019s examples folder](https://github.com/statelyai/xstate/tree/next/examples) to help you quickly understand how XState can help with your use cases.\\n- **Interactive documentation**. We\u2019re working on adding interactive examples to the documentation, so you can visualize the concepts as you learn them.\\n- **From zero to \u201chello world\u201d as quickly as possible**. Our goal with XState v5 and the [updated documentation (work in progress)](https://stately.ai/docs/xstate-v5) is to make developers productive with XState quickly. A simple, complete counter example in XState looks like this:\\n\\n```ts\\nimport { createMachine, interpret, assign } from \'xstate\';\\n\\nconst counterMachine = createMachine({\\n  id: \'counter\',\\n  context: {\\n    count: 0,\\n  },\\n  on: {\\n    increment: {\\n      actions: assign({ count: ({ context }) => context.count + 1 }),\\n    },\\n    decrement: {\\n      actions: assign({ count: ({ context }) => context.count - 1 }),\\n    },\\n  },\\n});\\n\\nconst counterActor = interpret(counterMachine);\\ncounterActor.subscribe((state) => console.log(state.context.count));\\ncounterActor.start();\\n\\ncounterActor.send({ type: \'increment\' }); // logs 1\\ncounterActor.send({ type: \'increment\' }); // logs 2\\ncounterActor.send({ type: \'decrement\' }); // logs 1\\n```\\n\\nThis functionality is already capable of meeting the majority of state management needs for most applications. If you require more advanced use cases, have no fear - XState v5 beta has got you covered.\\n\\n## Actor-first approach for any logic\\n\\nActors are now first-class citizens. In v4, you could invoke/spawn promises, callbacks, observables, and other state machines, but these were special-cased, and you could only `interpret()` machines. In v5, you can invoke/spawn _anything_; actors can be created from any type of logic, which can be invoked, spawned, or even interpreted:\\n\\n```ts\\nimport {\\n  interpret,\\n  fromPromise,\\n  fromTransition,\\n  fromObservable,\\n  fromEventObservable,\\n  fromCallback,\\n  createMachine,\\n} from \'xstate\';\\nimport { interval, fromEvent } from \'rxjs\';\\n\\n// Promise logic\\nconst promiseLogic = fromPromise(() => fetch(\'https://api.example.com/users\'));\\n\\n// Transition logic\\nconst transitionLogic = fromTransition(\\n  (state, event) => {\\n    if (event.type === \'increment\') {\\n      return { ...state, count: state.count + 1 };\\n    } else if (event.type === \'decrement\') {\\n      return { ...state, count: state.count - 1 };\\n    }\\n\\n    return state;\\n  },\\n  { count: 0 },\\n);\\n\\n// Observable logic\\nconst observableLogic = fromObservable(() => interval(1000));\\n\\n// Event observable logic\\nconst eventObservableLogic = fromEventObservable(() =>\\n  fromEvent(window, \'resize\'),\\n);\\n\\n// Callback logic\\nconst callbackLogic = fromCallback(({ sendBack }) => {\\n  const handler = (ev) => {\\n    sendBack(ev);\\n  };\\n\\n  window.addEventListener(\'resize\', handler);\\n\\n  return () => {\\n    window.removeEventListener(\'resize\', handler);\\n  };\\n});\\n\\nconst machine = createMachine({\\n  // Invoke any logic\\n  invoke: {\\n    src: callbackLogic,\\n  },\\n  // Spawn any logic\\n  on: {\\n    event: {\\n      actions: assign({\\n        promiseRef: ({ spawn }) => spawn(promiseLogic),\\n      }),\\n    },\\n  },\\n});\\n\\nconst actor = interpret(machine);\\nactor.start();\\n```\\n\\nThe composable building block to this is \u201cactor logic,\u201d which is an object consisting of `.transition(...)`, `.getInitialState(...)`, and `.getSnapshot()` methods, among other useful properties and methods. XState v5 beta provides the following actor logic creators:\\n\\n- `createMachine(machineDef)`: useful for more complex state machine/statechart logic; can spawn/invoke actors and declaratively handle effects\\n- `fromTransition(fn, initialState)`: useful for basic reducer-like state management, similar to Redux, Zustand, Pinia, NgRx, etc.\\n- `fromPromise(promiseFn)`: useful for async/await promise-based logic\\n- `fromCallback(fn)`: useful for subscription-based or other free-form logic that can send events back to the parent actor\\n- `fromObservable(observableFn)`: useful for subscribing to an observable stream of values\\n- `fromEventObservable(observableFn)`: useful for subscribing to an observable stream of events\\n\\nWith this new actor logic abstraction, it is now possible to create your own actor logic for any use-case; imagine `fromWebSocket(...)`, `fromQuery(...)`, and `fromWebWorker(...)` logic creator functions. Furthermore, higher-order actor functions can be made that bring additional functionality to actors, such as `withUndoRedo(actorLogic)` or `withLocalStoragePersistence(actorLogic)`. We\u2019re still writing documentation and examples of these new patterns, so keep on the lookout for them.\\n\\n## Deep persistence\\n\\nActor persistence is a pattern where the internal state of an actor can be persisted and restored at any time. In XState v4, machines can invoke/spawn actors, but those child actors are not persisted. In XState v5 beta, actors are now deeply (recursively) persisted. Invoked/spawned actors will be persisted, as well as actors invoked/spawned from those actors, and so on.\\n\\nIn the following example, the state of the `mainActor` will be persisted, as well as the state of the invoked `someCounter` actor. When the `restoredActor` is started, it will start at the persisted state of `mainActor`, which includes the persisted state of `someCounter`:\\n\\n```ts\\nconst machine = createMachine({\\n  invoke: {\\n    src: \'counter\',\\n    id: \'someCounter\',\\n  },\\n  // ...\\n});\\n\\nconst mainActor = interpret(machine);\\nmainActor.start();\\n\\n// Deeply persist state\\n// Also persists the \\"someCounter\\" actor!\\nconst persistedState = mainActor.getPersistedState();\\n\\n// Restore state\\nconst restoredActor = interpret(machine, {\\n  state: persistedState,\\n});\\n\\n// Starts at recursively persisted state\\nrestoredActor.start();\\n```\\n\\nThis is useful for both client-side (e.g. handling page refreshes) and server-side (e.g. persisting workflow state) use cases. Customizing persistence/restoration logic for actors is also possible, and we will document those options soon.\\n\\n## Actor system\\n\\nAs actors can spawn other actors, which in turn can spawn other actors, these connected actors form a natural hierarchy. This collection of connected actors is known as an actor system.\\n\\nIn XState v5 beta, calling `interpret(...)` to create a root actor will also create an implicit actor system. This enables a key feature called the **receptionist pattern**. The receptionist pattern means actors can be registered and looked up by their `systemId`, which is useful for actors that need to communicate with each other but don\u2019t directly know about each other (i.e., actors not in a parent-child relationship).\\n\\nFor example, let\u2019s say you have a `checkoutMachine` that orchestrates the state of an online shop. If you want a notifier actor to be available to any machines spawned anywhere within the `checkoutMachine` system, you can register it by providing a `systemId`:\\n\\n```ts\\nimport { notifierMachine } from \'../notifierMachine\';\\nimport { shippingMachine } from \'../shippingMachine\';\\n\\nconst checkoutMachine = createMachine({\\n  invoke: {\\n    src: notifierMachine,\\n    systemId: \'notifier\',\\n  },\\n  // ...\\n  states: {\\n    // ...\\n    shipping: {\\n      invoke: {\\n        src: shippingMachine,\\n      },\\n    },\\n  },\\n});\\n\\nconst checkoutActor = interpret(checkoutMachine);\\ncheckoutActor.start();\\n```\\n\\nNow, any actor within the `checkoutActor` system can access the notifier actor by calling `system.get(\\"notifier\\")`:\\n\\n```ts\\nconst shippingMachine = createMachine({\\n  // ...\\n  on: {\\n    \'address.updated\': {\\n      actions: sendTo(({ system }) => system.get(\'notifier\'), {\\n        type: \'notify\',\\n        message: \'Shipping address updated\',\\n      }),\\n    },\\n  },\\n});\\n```\\n\\nThe implicit system and receptionist pattern make it much easier to model arbitrary actor-to-actor communication, event buses, and other event-driven patterns.\\n\\n## Actor input\\n\\nIn some cases where you want to specify initial \u201cinput data\u201d for actors. Providing that input data in XState v4 was not easy. You had to either:\\n\\n- Create a factory machine function that took in some input data and returned a machine with that input data in context.\\n- Create a new machine with `machine.withContext(...)` and pass the entire context with the input data inside.\\n\\nSince only the machine should initially determine `context`, this was not ideal, as it was possible to initialize a machine at some impossible state. Additionally, you may want to consider some `context` properties _private_ (internal to the machine) and not externally configurable.\\n\\nIn XState v5 beta, you can now provide input data to machines by passing it as the second argument to `interpret(machine, { input })`. This input data can be read by machines in the `context` initialization function:\\n\\n```ts\\nconst greetingMachine = createMachine({\\n  context: ({ input }) => ({\\n    greeting: `Hello, ${input.name}!`,\\n  }),\\n});\\n\\nconst greetingActor = interpret(greetingMachine, {\\n  input: {\\n    name: \'David\',\\n  },\\n});\\n```\\n\\nFurthermore, this works for any actor logic, not just state machines:\\n\\n```ts\\nconst promiseLogic = fromPromise(({ input }) =>\\n  fetch(`https://api.example.com/users/${input.id}`).then((res) => res.json()),\\n);\\n\\nconst promiseActor = interpret(promiseLogic, {\\n  input: {\\n    id: 42,\\n  },\\n});\\n```\\n\\n## Unified arguments\\n\\n<Tweet id=\\"1555175849569263618\\" />\\n\\nThe crowd has spoken. Most of you wanted a unified arguments object for all implementation functions. Implementation functions previously took multiple arguments, making it hard to remember which argument to use or awkward to ignore certain arguments. In XState v5 beta, all implementation functions now take a single unified argument object, which contains `context`, `event`, and other properties relevant to the implementation function:\\n\\n```ts\\nconst machine = createMachine({\\n  context: {\\n    count: 0,\\n  },\\n  on: {\\n    increment: {\\n      // Single argument, instead of:\\n      // guard: (_, event) => ...\\n      guard: ({ event }) => !Number.isNaN(event.value),\\n      // Single argument, instead of:\\n      // actions: (context, event) => ...\\n      actions: ({ context, event }) => {\\n        console.log(context, event);\\n      },\\n    },\\n  },\\n});\\n```\\n\\n## Self reference\\n\\nIn the unified argument object, there is a `self` property that references the actor itself. This enables new, flexible patterns for actor communication, as you can pass this `self` reference to other actors in events:\\n\\n```ts\\nconst pingMachine = createMachine({\\n  invoke: {\\n    src: \'pong\',\\n    id: \'pong\',\\n  },\\n  on: {\\n    ping: {\\n      actions: sendTo(\'pong\', ({ self }) => ({ type: \'ping\', sender: self })),\\n    },\\n  },\\n});\\n\\n// ...\\n\\nconst pongMachine = createMachine({\\n  on: {\\n    ping: {\\n      actions: sendTo(({ event }) => event.sender, { type: \'pong\' }),\\n    },\\n  },\\n});\\n```\\n\\n## Higher-order guards\\n\\nIn XState v4, guards were simple functions on the `.cond` transition property that returned `true` or `false` to determine if a transition would be taken. To negate a guard or combine guards, you had to create a new guard, which resulted in duplication or redundant code. In XState v5 beta, you can now use higher-order guards, which are functions that take in guards (referenced and/or inline) and return a guard function. There are 3 built-in higher-order guard functions: `and([...guards])`, `or([...guards])`, and `not(guard)`:\\n\\n```ts\\nimport { createMachine, and, not } from \'xstate\';\\n\\nconst userMachine = createMachine(\\n  {\\n    // ...\\n    on: {\\n      doSomething: {\\n        // Higher-order guard\\n        // Renamed from \\"cond\\" (v4) -> \\"guard\\" (v5)\\n        guard: and([\'isAuthenticated\', \'isAdmin\', not(\'isBanned\')]),\\n      },\\n    },\\n  },\\n  {\\n    guards: {\\n      isAuthenticated: ({ context }) => context.user !== undefined,\\n      isAdmin: ({ context }) => context.user.role === \'admin\',\\n      isBanned: ({ context }) => context.user.status === \'banned\',\\n    },\\n  },\\n);\\n```\\n\\nThese higher-order guards can be combined in many different ways to express any complex condition. In the future, Stately visual tooling will be able to visualize complex conditional logic expressed in guards.\\n\\n## Predictable events and actions\\n\\nIn XState v4, actions and events had nuanced default behavior: `assign(...)` actions were prioritized over other actions, which made action order less predictable. Additionally, events were _nullified_ when going through eventless transitions, making it difficult to reference data from the original event. The `predictableActionArguments: true` flag was a necessary workaround for this. In XState v5 beta, actions are always executed in order, and events are always preserved, even when going through eventless transitions. No need for flags \u26f3\ufe0f:\\n\\n```diff\\nconst machine = createMachine({\\n  // ...\\n  // Action order is now predictable by default\\n- predictableActionArguments: true,\\n})\\n```\\n\\n## Partial event descriptors\\n\\nPartial event descriptors, also known as _partial wildcards_, are a powerful new feature in XState v5 beta that makes it easier to handle groups of events. In XState v4, you could use wildcards to handle any event that wasn\u2019t matched by any other transition, but you had to be careful not to handle events that you didn\u2019t intend to handle accidentally. In XState v5 beta, you can use partial event descriptors to handle groups of events by placing a wildcard after the delimiter (`.*`), and you can be explicit about which events you want to handle:\\n\\n```ts\\nconst machine = createMachine({\\n  // ...\\n  on: {\\n    // Will handle any event that starts with \\"pointer.\\":\\n    // \\"pointer.down\\", \\"pointer.up\\", \\"pointer.move\\", etc.\\n    \'pointer.*\': {\\n      actions: \'logPointerEvent\',\\n    },\\n  },\\n});\\n```\\n\\n## Examples\\n\\n[Check out the TodoMVC example with React, TypeScript, and XState v5 beta](https://codesandbox.io/p/sandbox/github/statelyai/xstate/tree/next/examples/todomvc-react).\\n\\nFor more examples, [visit the `/examples` directory in the XState repository](https://github.com/statelyai/xstate/tree/next/examples).\\n\\n## Migration and breaking changes\\n\\nAs with any major version, there are some breaking changes. We\u2019ve tried to keep these to a minimum, but some are necessary to make XState v5 beta as powerful and flexible as possible. [Read our current guide for migrating from XState v4 to v5 and the list of breaking changes](https://stately.ai/docs/migration).\\n\\n## In progress\\n\\nXState v5 beta API is mostly stabilized, and there is still much work for us to do now we\u2019ve reached this milestone. We are working on the following:\\n\\n- Type safety is a priority. We are working on using the latest TypeScript features to make XState v5 beta as type-safe as possible. This includes better type inference for as many parts of the machine as possible, including `context`, events, guards, actions, finite state values, and more. For everything that cannot be inferred or specified, we are updating [XState Typegen](https://stately.ai/docs/xstate/typescript/typegen) to generate accurate TypeScript types for your machines. And yes, we\u2019re still figuring out typestates.\\n- We will update the [XState VS Code extension](https://marketplace.visualstudio.com/items?itemName=statelyai.vscode-xstate) to support XState v5 beta.\\n- We will also update [Stately Studio](https://stately.ai/editor) to support importing/exporting XState v5 machines and provide visual tooling for the new features in XState v5 beta, such as machine input/output, partial events, higher-order guards, and more.\\n- We\u2019re making the inspector protocol and `@xstate/inspect` much more flexible to support XState v5 beta and beyond (even other state management libraries).\\n\\n## Stately Studio\\n\\nSpeaking of Stately Studio, besides adding support for XState v5, we\u2019re taking the \u201ceverything is an actor\u201d support to heart. We will be building visual tooling for not just managing actor logic (state machines & statecharts) but also visualization of entire actor systems (architecture diagrams) and the communication between actors (sequence diagrams). This will be a huge step forward for visually understanding and debugging complex systems, and we\u2019re excited to share more about this in the future.\\n\\n## We hope you enjoy XState v5 beta!\\n\\nWe\u2019re excited to see what you build with it (I know everyone says this, but we truly mean it). If you have any questions, feel free to reach out to us on [Discord](https://discord.gg/xstate) or [Twitter](https://twitter.com/statelyai)."},{"id":"2023-05-19-context-aware-search","metadata":{"permalink":"/statelyai-docs/blog/2023-05-19-context-aware-search","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-05-19-context-aware-search/index.mdx","source":"@site/blog/2023-05-19-context-aware-search/index.mdx","title":"Context-aware search in the docs","description":"The search results in the Stately Studio and XState docs are now context-aware. ","date":"2023-05-19T00:00:00.000Z","formattedDate":"May 19, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"new","permalink":"/statelyai-docs/blog/tags/new"},{"label":"improved","permalink":"/statelyai-docs/blog/tags/improved"}],"readingTime":0.635,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Context-aware search in the docs","description":"The search results in the Stately Studio and XState docs are now context-aware. ","authors":["laura"],"tags":["changelog","new","improved"],"date":"2023-05-19T00:00:00.000Z","slug":"2023-05-19-context-aware-search","image":"/blog/2023-05-19-context-aware-search.png"},"prevItem":{"title":"Announcing XState v5 beta","permalink":"/statelyai-docs/blog/announcing-xstate-v5-beta"},"nextItem":{"title":"Explain your machines with annotations","permalink":"/statelyai-docs/blog/explain-your-machines-with-annotations"}},"content":"The search results in the [Stately Studio and XState docs](https://stately.ai/docs) are now context-aware. So if you\u2019re browsing the current XState V4 version of the docs, you\u2019ll get results for V4, and if you\u2019re browsing the XState V5 beta version of the docs, you\u2019ll get results for V5.\\n\\n\x3c!--truncate--\x3e\\n\\n![Side-by-side comparison of search results for cond in the Stately docs. In the V4 docs, it gives you results about combining cond and in. In the V5 docs, it gives you results telling you to use guard instead of cond.](https://canny.io/images/0a39d4269b59a7a5268b9b85bf0a172a.png)\\n\\nThanks to Chev for bringing this up in [our Discord](https://discord.gg/xstate), Tobi for suggesting the solution, and Anders for quickly implementing it! If you have any feedback about our docs, please let us know in our [#documentation channel in Discord](https://discord.gg/xstate)."},{"id":"explain-your-machines-with-annotations","metadata":{"permalink":"/statelyai-docs/blog/explain-your-machines-with-annotations","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-05-18-explain-your-machines-with-annotations/index.mdx","source":"@site/blog/2023-05-18-explain-your-machines-with-annotations/index.mdx","title":"Explain your machines with annotations","description":"Sometimes you want to share a machine with descriptive details or comments, so we\u2019ve added annotations to Stately Studio.","date":"2023-05-18T00:00:00.000Z","formattedDate":"May 18, 2023","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"annotations","permalink":"/statelyai-docs/blog/tags/annotations"},{"label":"comments","permalink":"/statelyai-docs/blog/tags/comments"},{"label":"teams","permalink":"/statelyai-docs/blog/tags/teams"}],"readingTime":1.075,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Explain your machines with annotations","description":"Sometimes you want to share a machine with descriptive details or comments, so we\u2019ve added annotations to Stately Studio.","tags":["stately","studio","annotations","comments","teams"],"authors":["laura"],"publishedAt":"2023-05-18T00:00:00.000Z","slug":"explain-your-machines-with-annotations","image":"/blog/2023-05-18-explain-your-machines-with-annotations.png"},"prevItem":{"title":"Context-aware search in the docs","permalink":"/statelyai-docs/blog/2023-05-19-context-aware-search"},"nextItem":{"title":"Stately Studio minor improvements","permalink":"/statelyai-docs/blog/2023-05-17-stately-studio-minor-improvements"}},"content":"import EmbedMachine from \'@site/src/components/EmbedMachine\';\\n\\nSometimes you want to share a machine with descriptive details or comments, so we\u2019ve added [annotations](https://stately.ai/docs/annotations) to Stately Studio.\\n\\n\x3c!--truncate--\x3e\\n\\nUnlike [descriptions](https://stately.ai/docs/descriptions), annotations are notes you can use to annotate your machine that only appear in Stately Studio\u2019s editor. To add an annotation, right-click anywhere on the canvas to bring up the canvas menu and use **Add annotation** to add your annotation.\\n\\n[Check out the dog walk machine below](https://stately.ai/registry/editor/embed/5b170468-d66a-4136-84c8-676c8fea82e8?machineId=7879be19-d267-4e75-9a7d-6a870d540257), which I\u2019ve annotated with notes describing the machine and how some of the states work.\\n\\n<EmbedMachine\\n  name=\\"Annotated dog walk machine\\"\\n  embedURL=\\"https://stately.ai/registry/editor/embed/5b170468-d66a-4136-84c8-676c8fea82e8?machineId=7879be19-d267-4e75-9a7d-6a870d540257\\"\\n/>\\n\\n_You can now also [embed your machines anywhere `iframe`s are supported](https://stately.ai/docs/embed)!_\\n\\nAnnotations are not exported when you [export your machine as code](https://stately.ai/docs/export-as-code), so you can add as many as you like without affecting your codebase!\\n\\nAnnotations are particularly useful when you\u2019re sharing machines with your teams. [Teams](https://stately.ai/docs/teams) are a pro feature of Stately Studio, where you can share and collaborate on your app logic. We offer a **30-day free trial** on the [Stately Studio Pro account](https://stately.ai/pricing) so you can explore how our Pro features work for you and your team.\\n\\nWe hope annotations make sharing a link to your machine even easier without additional supporting information or explanation. Try them out today and see how they can enhance your workflow!"},{"id":"2023-05-17-stately-studio-minor-improvements","metadata":{"permalink":"/statelyai-docs/blog/2023-05-17-stately-studio-minor-improvements","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-05-17-stately-studio-minor-improvements/index.mdx","source":"@site/blog/2023-05-17-stately-studio-minor-improvements/index.mdx","title":"Stately Studio minor improvements","description":"Over the week, the Stately team made the following improvements.","date":"2023-05-17T00:00:00.000Z","formattedDate":"May 17, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"improved","permalink":"/statelyai-docs/blog/tags/improved"}],"readingTime":0.31,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Stately Studio minor improvements","description":"Over the week, the Stately team made the following improvements.","authors":["laura"],"tags":["changelog","improved"],"date":"2023-05-17T00:00:00.000Z","slug":"2023-05-17-stately-studio-minor-improvements","image":"/blog/2023-05-17-stately-studio-minor-improvements.png"},"prevItem":{"title":"Explain your machines with annotations","permalink":"/statelyai-docs/blog/explain-your-machines-with-annotations"},"nextItem":{"title":"Watch in-depth demos in our Stately Streams","permalink":"/statelyai-docs/blog/stately-streams-may-2023"}},"content":"Over the week we made the following improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n- When copy and pasting states and transitions, the pasted layout is now much improved. [Watch a demo of copy paste in last week\u2019s office hours](https://www.youtube.com/watch?v=fPrZ19EKlJU&t=128s).\\n- The background of the **Live simulation** mode panel is now easier to read in light mode.\\n- A whole range of internal minor improvements and fixes."},{"id":"stately-streams-may-2023","metadata":{"permalink":"/statelyai-docs/blog/stately-streams-may-2023","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-05-16-stately-streams/index.mdx","source":"@site/blog/2023-05-16-stately-streams/index.mdx","title":"Watch in-depth demos in our Stately Streams","description":"Tomorrow is part four in our popular Stately Stream series, where we are modeling a semi-complex client-side application using XState, Stately Studio, React and TypeScript.","date":"2023-05-16T00:00:00.000Z","formattedDate":"May 16, 2023","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"xstate v5","permalink":"/statelyai-docs/blog/tags/xstate-v-5"},{"label":"stately stream","permalink":"/statelyai-docs/blog/tags/stately-stream"},{"label":"demo","permalink":"/statelyai-docs/blog/tags/demo"},{"label":"examples","permalink":"/statelyai-docs/blog/tags/examples"}],"readingTime":0.915,"hasTruncateMarker":true,"authors":[{"name":"Farzad Yousefzadeh","title":"Stately Team","url":"https://github.com/farskid","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/farzad.png","key":"farzad"}],"frontMatter":{"title":"Watch in-depth demos in our Stately Streams","description":"Tomorrow is part four in our popular Stately Stream series, where we are modeling a semi-complex client-side application using XState, Stately Studio, React and TypeScript.","tags":["stately","studio","xstate","xstate v5","stately stream","demo","examples"],"authors":["farzad"],"date":"2023-05-16T00:00:00.000Z","slug":"stately-streams-may-2023","image":"/blog/2023-05-16-stately-streams.png"},"prevItem":{"title":"Stately Studio minor improvements","permalink":"/statelyai-docs/blog/2023-05-17-stately-studio-minor-improvements"},"nextItem":{"title":"Watch our \u201cbest Stately office hours yet\u201d","permalink":"/statelyai-docs/blog/office-hours-64"}},"content":"[Tomorrow is part four in our popular Stately Stream series](https://www.youtube.com/watch?v=sigMw-Xelvw), where we are modeling a semi-complex client-side app using XState, Stately Studio, React and TypeScript. You can catch up on the previous videos in the series below or [watch all our past videos in our Stately Streams YouTube playlist](https://www.youtube.com/playlist?list=PLvWgkXBB3dd5UEJZCk4C3Wn1Ys8WRMDbi).\x3c!--truncate--\x3e\\n\\nAcross this series, David and I have been working on a canvas-based app project that showcases using statecharts for both components and globally accessible actors across an entire system, as well as multi-actor communication and state orchestration.\\n\\n## Part 1\\n\\nIn part 1 we look at the power of using statecharts to model and implement a canvas-based app.\\n\\n<YouTube id=\\"9xIgDYAUfBc\\" />\\n\\n## Part 2\\n\\nIn part 2, we look at implementing multiple selection, including collision detection and what you might need for live collaboration.\\n\\n<YouTube id=\\"kYj4UsLfmlg?\\" />\\n\\n## Part 3\\n\\nIn part 3, we migrate our code from XState V4 to [XState V5](https://stately.ai/docs/migration).\\n\\n<YouTube id=\\"mgeFXyIr9iw?\\" />\\n\\n## Watch part 4 tomorrow at 6.30 PM ET\\n\\nJoin us tomorrow at 6.30 PM ET on YouTube or [LinkedIn](https://www.linkedin.com/events/statelystream-modelingagraphica7064177817600581634/) for our next live stream!\\n\\n<YouTube id=\\"sigMw-Xelvw?\\" />"},{"id":"office-hours-64","metadata":{"permalink":"/statelyai-docs/blog/office-hours-64","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-05-12-office-hours-64/index.mdx","source":"@site/blog/2023-05-12-office-hours-64/index.mdx","title":"Watch our \u201cbest Stately office hours yet\u201d","description":"Two weeks ago we had what some have called our \u201cbest office hours yet.\u201d Watch the video to find out what\u2019s coming soon to Stately Studio.","date":"2023-05-12T00:00:00.000Z","formattedDate":"May 12, 2023","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"office hours","permalink":"/statelyai-docs/blog/tags/office-hours"},{"label":"starter machine","permalink":"/statelyai-docs/blog/tags/starter-machine"},{"label":"annotations","permalink":"/statelyai-docs/blog/tags/annotations"},{"label":"embed mode","permalink":"/statelyai-docs/blog/tags/embed-mode"},{"label":"version history","permalink":"/statelyai-docs/blog/tags/version-history"},{"label":"blocks","permalink":"/statelyai-docs/blog/tags/blocks"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"xstate v5","permalink":"/statelyai-docs/blog/tags/xstate-v-5"},{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"}],"readingTime":1.22,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Watch our \u201cbest Stately office hours yet\u201d","description":"Two weeks ago we had what some have called our \u201cbest office hours yet.\u201d Watch the video to find out what\u2019s coming soon to Stately Studio.","tags":["stately","studio","office hours","starter machine","annotations","embed mode","version history","blocks","xstate","xstate v5","changelog"],"authors":["laura"],"date":"2023-05-12T00:00:00.000Z","slug":"office-hours-64","image":"/blog/2023-05-12-office-hours-64.png"},"prevItem":{"title":"Watch in-depth demos in our Stately Streams","permalink":"/statelyai-docs/blog/stately-streams-may-2023"},"nextItem":{"title":"Everything new since Stately Studio 1.0!","permalink":"/statelyai-docs/blog/everything-new-since-stately-studio-1-0"}},"content":"Two weeks ago, we had what some have called our \u201cbest office hours yet.\u201d We introduced a whole bunch of new features and improvements to Stately Studio, including [state.new](https://state.new?source=blog) with our new starter machine, annotations, embed mode, and version history. We also gave the first peek at our most significant editor update to date; we call it \u201ccodename: blocks,\u201d check out the video to find out why!\\n\\n\x3c!--truncate--\x3e\\n\\nWe also talk about XState v5 being in beta (more on that soon!) and [how to migrate from XState V4 to V5](https://stately.ai/docs/migration).\\n\\n<YouTube id=\\"FY030no59Y4\\" />\\n\\nWatch the video to find out what\u2019s coming soon to Stately Studio. Use the links below to jump straight to that chapter in the video:\\n\\n- [0:00:00 Intro](https://www.youtube.com/watch?v=FY030no59Y4&t=0s)\\n- [0:00:10 Team intros](https://www.youtube.com/watch?v=FY030no59Y4&t=10s)\\n- [0:02:02 state.new \ud83c\udd95](https://www.youtube.com/watch?v=FY030no59Y4&t=122s)\\n- [0:02:20 New default machine](https://www.youtube.com/watch?v=FY030no59Y4&t=140s)\\n- [0:02:30 Annotations \ud83c\udd95](https://www.youtube.com/watch?v=FY030no59Y4&t=150s)\\n- [0:05:08 Embed mode \ud83c\udd95](https://www.youtube.com/watch?v=FY030no59Y4&t=308s)\\n- [0:10:47 Version history \ud83c\udd95](https://www.youtube.com/watch?v=FY030no59Y4&t=647s)\\n- [0:19:31 Deletion confirmation \ud83c\udd95](https://www.youtube.com/watch?v=FY030no59Y4&t=1171s)\\n- [0:20:51 Codename: blocks (coming soon)](https://www.youtube.com/watch?v=FY030no59Y4&t=1251s)\\n- [0:27:57 Codename: blocks continued\u2026 colors! (coming soon)](https://www.youtube.com/watch?v=FY030no59Y4&t=1677s)\\n- [0:31:12 Codename: blocks as machine options (coming soon)](https://www.youtube.com/watch?v=FY030no59Y4&t=1872s)\\n- [0:49:40 XState v5 (in beta)](https://www.youtube.com/watch?v=FY030no59Y4&t=2980s)\\n- [0:53:42 Use cases for XState in the backend](https://www.youtube.com/watch?v=FY030no59Y4&t=3222s)\\n- [0:55:29 Changelog \ud83c\udd95](https://www.youtube.com/watch?v=FY030no59Y4&t=3329s)\\n- [0:57:11 Remote inspect via websockets](https://www.youtube.com/watch?v=FY030no59Y4&t=3431s)\\n- [0:58:49 Detecting the version of XState you\u2019re using](https://www.youtube.com/watch?v=FY030no59Y4&t=3529s)\\n- [0:59:38 Wrap up](https://www.youtube.com/watch?v=FY030no59Y4&t=3578s)\\n\\nYou can join us for our [next office hours live today at 10 AM ET](https://www.youtube.com/watch?v=fPrZ19EKlJU). We\u2019ll share more demos and take your questions live; we hope to see you there!"},{"id":"everything-new-since-stately-studio-1-0","metadata":{"permalink":"/statelyai-docs/blog/everything-new-since-stately-studio-1-0","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-05-04-everything-new-since-stately-studio-1-0/index.mdx","source":"@site/blog/2023-05-04-everything-new-since-stately-studio-1-0/index.mdx","title":"Everything new since Stately Studio 1.0!","description":"It\u2019s been more than six months since the release of Stately Studio 1.0, and we\u2019ve been busy working on Stately Studio and XState. Here are some of the highlights.","date":"2023-05-04T00:00:00.000Z","formattedDate":"May 4, 2023","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"version histroy","permalink":"/statelyai-docs/blog/tags/version-histroy"},{"label":"live simulation mode","permalink":"/statelyai-docs/blog/tags/live-simulation-mode"},{"label":"import","permalink":"/statelyai-docs/blog/tags/import"},{"label":"github","permalink":"/statelyai-docs/blog/tags/github"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"extension","permalink":"/statelyai-docs/blog/tags/extension"},{"label":"docs","permalink":"/statelyai-docs/blog/tags/docs"}],"readingTime":3.93,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Everything new since Stately Studio 1.0!","description":"It\u2019s been more than six months since the release of Stately Studio 1.0, and we\u2019ve been busy working on Stately Studio and XState. Here are some of the highlights.","tags":["stately","studio","version histroy","live simulation mode","import","github","xstate","extension","docs"],"authors":["laura"],"image":"/blog/2023-05-04-everything-new-since-stately-studio-1-0.png","slug":"everything-new-since-stately-studio-1-0","date":"2023-05-04"},"prevItem":{"title":"Watch our \u201cbest Stately office hours yet\u201d","permalink":"/statelyai-docs/blog/office-hours-64"},"nextItem":{"title":"Introducing \u27a1\ufe0f state . new","permalink":"/statelyai-docs/blog/2023-05-03-introducing-state-new"}},"content":"It\u2019s been more than six months since the release of Stately Studio 1.0, and we\u2019ve been busy working on Stately Studio and XState. Here are some of the highlights:\\n\\n\x3c!--truncate--\x3e\\n\\n## Version History\\n\\nWe\u2019ve added [Version History](https://stately.ai/blog/2023-05-02-version-history) to Stately Studio, so you can easily track the changes made to your machines over time, whether you want to align your machines with versions in your codebase or record milestones for your machine. Version History is the first of our new features exclusively for [Pro users](https://stately.ai/docs/studio-pro-plan).\\n\\n[Try out all these features with our 30-day free trial \u2192](https://stately.ai/pricing)\\n\\n![Version History panel opened from the toolbox showing a current version selected and three older versions.](2023-05-04-version-history.png)\\n\\n## Live Simulation Mode\\n\\nStately Studio now includes live simulation in Simulate mode. Share your machine URL with your team, and walkthrough your machine live! We\u2019ve got big plans for more live features in the future.\\n\\n[Watch a demo of Live Simulation Mode \u2192](https://www.youtube.com/live/ysB2oKIig-k?feature=share&t=2824)\\n\\n## Import from Code\\n\\nImport from Code was one of our most-requested features from users who had already created machines using XState or our Stately Viz. You can now import an existing machine (or multiple machines!) from JavaScript, TypeScript or JSON using the code panel in the editor\u2019s right tool menu or the Machines list in the left drawer.\\n\\n[Read more about Import from Code \u2192](https://stately.ai/blog/2022-11-29-import-from-code)\\n\\n![Code panel open in the Studio with the Import button highlighted.](2023-05-04-import-from-code.png)\\n\\n## Import from GitHub\\n\\nUsers on our Pro plan can now also import machines from GitHub. You can import every machine in your repo or use the GitHub URL to import all machines in that file.\\n\\n[Watch Laura\u2019s video on two ways to import machines from GitHub \u2192](https://www.youtube.com/watch?v=5OAxh0SG18Y)\\n\\n## Recovery Mode\\n\\nRecovery Mode is one of those features we hope you never have to use. We now try to detect any missing connectivity or backend failure on our end while you\u2019re editing your machines. We will let you know if a connectivity issue or other failure happens and start saving your work locally on your device. The next time you visit the Studio from that same device, we compare what we saved with the machine from the server. If the versions are different, we will give you the option to restore the saved copy to a new machine.\\n\\n[Read more about Recovery Mode \u2192](https://stately.ai/blog/2022-12-22-machine-recovery)\\n\\n## XState VS Code update\\n\\nThe XState VS Code extension has had a significant overhaul making it run much faster and giving it more accurate bi-directional editing between the code and visual editing modes. We\u2019ve also added two much-requested features from our VS Code users; you can now use the XState VS Code extension without logging in and entirely offline.\\n\\n[Get our XState VS Code extension \u2192](https://marketplace.visualstudio.com/items?itemName=statelyai.stately-vscode)\\n\\n## All-new docs\\n\\nWe\u2019ve finally launched our new Stately docs. We now have docs for Stately Studio and XState, with how-tos, tutorials, code examples, and much more. And yes, the new docs have dark mode!\\n\\n[Check out our new Stately docs \u2192](https://stately.ai/docs)\\n\\n## Editor tutorials\\n\\nThe editor now has several tutorials to help get you started, along with basic state machine and statechart concepts. You can access the tutorials from the blue question mark button in the lower right of the editor canvas or our new editor menu. Most tutorials also have an accompanying short video for those who like to learn visually.\\n\\n[Watch the playlist of all the tutorial videos on YouTube \u2192](https://www.youtube.com/watch?v=Aixi0e53qAE&list=PLvWgkXBB3dd4I_l-djWVU2UGPyBgKfnTQ)\\n\\n![The editor menu with Tutorials selected, and the tutorials panel opened showing a tutorial for states.](2023-05-04-tutorials.png)\\n\\n## New editor menu\\n\\nThe Stately editor now has a menu for quickly accessing your projects, machines, and frequently-used commands. The new menu is one of the most visible of the many small improvements we\u2019re continuously making to Stately Studio.\\n\\n## Moving machines\\n\\nYou can now quickly move machines between projects from the machines list menu. You can move your machines to your own projects or any projects you share with your teams.\\n\\n## Pro features extended to all team members\\n\\nFinally, we\u2019re happy to announce that we\u2019ve extended our pro features to all team members for their own projects, not just projects worked on as part of your team. Everyone with a seat on your team can now take advantage of new and upcoming features, including Import from GitHub, Version History, and Live Simulation Mode.\\n\\n[Try all of Stately Studio\u2019s Pro features with our 30-day free trial \u2192](https://stately.ai/pricing)\\n\\n## More coming very soon\\n\\nWe\u2019ve got so much more to share with you soon. If you want to be the first to know about our new features, join us on [YouTube](https://www.youtube.com/c/statelyai), [Discord](https://discord.gg/xstate), [Mastodon](https://social.stately.ai/@stately), [LinkedIn](https://www.linkedin.com/company/statelyai), or [Twitter](https://twitter.com/statelyai). Want to know what we\u2019re working on before it\u2019s released? Check out our [office hours](https://www.youtube.com/watch?v=PfUIqTkDkfI&list=PLvWgkXBB3dd6PXbSoctwDXjWX-AQrxhds), live-streamed bi-weekly."},{"id":"2023-05-03-introducing-state-new","metadata":{"permalink":"/statelyai-docs/blog/2023-05-03-introducing-state-new","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-05-03-introducing-state-new/index.mdx","source":"@site/blog/2023-05-03-introducing-state-new/index.mdx","title":"Introducing \u27a1\ufe0f state . new","description":"We\u2019re making it even easier to create state diagrams with our new domain state.new.","date":"2023-05-03T00:00:00.000Z","formattedDate":"May 3, 2023","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"state diagrams","permalink":"/statelyai-docs/blog/tags/state-diagrams"},{"label":"state charts","permalink":"/statelyai-docs/blog/tags/state-charts"},{"label":"state machines","permalink":"/statelyai-docs/blog/tags/state-machines"},{"label":"create","permalink":"/statelyai-docs/blog/tags/create"}],"readingTime":1.495,"hasTruncateMarker":true,"authors":[{"name":"Anders Bech Mellson","title":"Stately Team","url":"https://github.com/mellson","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/anders.png","key":"anders"}],"frontMatter":{"title":"Introducing \u27a1\ufe0f state . new","description":"We\u2019re making it even easier to create state diagrams with our new domain state.new.","tags":["stately","studio","state diagrams","state charts","state machines","create"],"authors":["anders"],"image":"/blog/2023-05-03-introducing-state-new.png","slug":"2023-05-03-introducing-state-new","date":"2023-05-03T00:00:00.000Z"},"prevItem":{"title":"Everything new since Stately Studio 1.0!","permalink":"/statelyai-docs/blog/everything-new-since-stately-studio-1-0"},"nextItem":{"title":"Track changes as you work with Version History","permalink":"/statelyai-docs/blog/2023-05-02-version-history"}},"content":"Our top priority at Stately is to make it as easy as possible to create robust app logic in the form of state diagrams. That\u2019s why we\u2019re constantly striving to remove any potential barriers.\\n\\n\x3c!--truncate--\x3e\\n\\n## What\u2019s the problem?\\n\\nOne barrier we\u2019ve identified is; **where to start when you want to create a state diagram?** Well, as some of you might have noticed from David\u2019s tweet the other day, we now have a solution for this.\\n\\nWe\u2019re excited to share that generating a new diagram has never been easier. Simply input [`state.new`](https://state.new) into your browser, and you can edit your brand-new diagram immediately.\\n\\n<Tweet id=\\"1652038443105394694\\" />\\n\\n_By the way_, that tweet caused quite a splash. At this point in time it has over 1.5K likes and around 250K views. We also got a big spike of new users and are thrilled to have you!\\n\\nState machines, charts and diagrams might be old, but luckily never go out of fashion!\\n\\n## Why state.new?\\n\\nSorry for being captain obvious here, but we think state.new is the perfect domain for creating a new state. A new state diagram, a new state machine, even a new state of mind, perhaps if you haven\u2019t used machines and state diagrams for your app logic before. Give it a try, and let us know what you think.\\n\\n## What does it look like?\\n\\nWhen you land in the editor for the first time, you\u2019ll find an example diagram to familiarize you with the concepts. You\u2019re free to edit and delete this starting point to your liking. Notice that we have a little blue helper button in the bottom-right corner which you can click to [learn more about creating state diagrams](2022-10-27-studio-tutorials/index.mdx).\\n\\n![Viewing the template state diagram in the Editor.](state.new-starter-diagram.png)\\n\\nWe can\u2019t wait to see what you create!"},{"id":"2023-05-02-version-history","metadata":{"permalink":"/statelyai-docs/blog/2023-05-02-version-history","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-05-02-track-changes-as-you-work-with-version-history/index.mdx","source":"@site/blog/2023-05-02-track-changes-as-you-work-with-version-history/index.mdx","title":"Track changes as you work with Version History","description":"Version History is one of our most recent Pro features in Stately Studio. You can track changes to your work as you go.","date":"2023-05-02T00:00:00.000Z","formattedDate":"May 2, 2023","tags":[{"label":"versions","permalink":"/statelyai-docs/blog/tags/versions"},{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"tutorial","permalink":"/statelyai-docs/blog/tags/tutorial"},{"label":"editor","permalink":"/statelyai-docs/blog/tags/editor"},{"label":"announcement","permalink":"/statelyai-docs/blog/tags/announcement"},{"label":"modeling","permalink":"/statelyai-docs/blog/tags/modeling"},{"label":"statechart","permalink":"/statelyai-docs/blog/tags/statechart"}],"readingTime":5.165,"hasTruncateMarker":true,"authors":[{"name":"Kevin Maes","title":"Stately Team","url":"https://github.com/kevinmaes","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/kevin.png","key":"kevin"}],"frontMatter":{"title":"Track changes as you work with Version History","description":"Version History is one of our most recent Pro features in Stately Studio. You can track changes to your work as you go.","tags":["versions","stately","studio","tutorial","editor","announcement","modeling","statechart"],"authors":["kevin"],"image":"/blog/2023-05-02-track-changes-as-you-work-with-version-history.png","slug":"2023-05-02-version-history","date":"2023-05-02T00:00:00.000Z"},"prevItem":{"title":"Introducing \u27a1\ufe0f state . new","permalink":"/statelyai-docs/blog/2023-05-03-introducing-state-new"},"nextItem":{"title":"New default machine","permalink":"/statelyai-docs/blog/2023-04-28-new-default-machine"}},"content":"Today we\u2019re happy to introduce another pro feature for our Stately Studio subscribers; **Version History**. With this feature, you can save versions of your work as you go and refer back to them in the future. \x3c!--truncate--\x3eYou can use those versions to compare changes, revert to a previous version, or even create a new machine from a version \ud83c\udf89\\n\\n![Viewing the past version of your machine in the Editor.](2023-05-02-example-version-view-plain.png)\\n\\n## Why use Version History?\\n\\nVersion history allows you to save the current state of your machine as snapshots that you can go back to at a later time. This allows for a much more flexible way of working and evolving your machine.\\n\\n### Progressive layers of detail\\n\\nWhen you\u2019re working on a machine, you often start with a high-level overview of the machine\u2019s states and transitions and then gradually add more detail as you go. That detail could include adding actions, guards, nested states, markdown descriptions, and images. Version history allows you to save each of these layers of detail as a version so that you can refer back to them, much like commits in a version control system.\\n\\n![Example of creating versions of your machine for different layers of detail.](2023-05-02-example-why-layers-of-detail.png)\\n\\n### Modeling experiments\\n\\nThere are often many ways to model a system with statecharts, all of which are legitimate. Many decisions need to be made regarding state granularity, nesting, grouping or separating transitions and actions, context vs finite states, etc. Version history allows you to save each of these different versions so you can freely compare various approaches and be more experimental when modeling your software.\\n\\n![Example of creating versions of your machine for experimenting with different modeling approaches.](2023-05-02-example-why-modeling-experiments.png)\\n\\n### Creating for different audiences\\n\\nYou can also use version history to create different versions of your machine for different audiences. For example, you might want to create a version of your machine that is more detailed for your team and a version that is more high-level for your stakeholders. This can be done by creating screenshots of versions or even by creating new machines from your versions.\\n\\n![Example of creating versions of your machine intended for different audiences.](2023-05-02-example-why-audiences.png)\\n\\n### Organization and alignment with other versioning systems\\n\\nVersion history is a great way to keep your work organized. Just as git commits encourage a more organized workflow, version history encourages you to save your work as you go. It\u2019s very quick to save a version at any time while also convenient to edit a version name or even delete it later on.\\n\\nVersion history can also be used to sync up with semantic versioning of your application or with corresponding tickets in a tracking system. Any other versioning system can be mirrored in Stately Studio using this feature.\\n\\n## How to use Version History\\n\\n### Version history panel\\n\\nThe version history panel is located on the right side of the editor. It shows a list of all the versions of your machine that you have saved. You can see the date and time of each version, as well as the author of the version.\\n\\n### Saving a version\\n\\nTo save a version, click the **+ Save** button in the version history panel. A new version will be added to the top of the list. You can edit the version name or just keep the timestamp as the name.\\n\\n### Viewing past versions\\n\\nClicking on a version in the list will show you the machine as it was at that point in time. You can still inspect properties of your machine along with canvas elements and you can switch between Design mode and Simulate mode to simulate this version of the machine.\\n\\n![Viewing the past version of your machine in the Editor, indicating the features for working with that version.](2023-05-02-example-version-view-explained.png)\\n\\n#### Restoring a Version\\n\\nThe top header includes a button to **Restore** [1] the machine to this version. This will overwrite the current machine with the version you are viewing. However, you can undo that restoration using the Undo button to the bottom right of the canvas as you would with any other edit you make.\\n\\n#### Creating a new machine from a version\\n\\nThe Copy button [2] allows you to create a new machine (like a fork) from this version which will reside alongside the original machine within the same project.\\n\\n#### Deleting a Version\\n\\nThe Delete button [3] will permanently delete the version and remove it from the list of versions.\\n\\n#### Returning to the current version\\n\\nClicking the Close button [4] in the header, clicking the **Current version** button [5] in the Version History panel, or pressing the Escape key will return you to the current version of the machine.\\n\\n### Restoring a version from the version list\\n\\nAs an added convenience, you can also restore a version directly from the version list in the **Version History** panel without first viewing that version. To do this, click the Restore button to the right of the version you want to restore. This will overwrite the current machine with the version you selected but can be undone using the Undo button.\\n![Restoring your machine to a past version from the versions list.](2023-05-02-example-restore-from-version-list.png)\\n\\n## Accessing and sharing versions via URL\\n\\nWhen viewing a specific version, a unique URL is created so it is possible to copy and share that URL with others. Assuming the recipient has access to the machine, this URL will take them to that machine at the specific version.\\n\\n## Future plans\\n\\nSaving versions of machines is a significant step in a larger effort to make the modeling experience in Stately Studio more robust and even more useful in software production. It will soon enable some exciting new features we are already building on top of versions. In the meantime, we are also thinking about more ways to create and interact with versions and we would love to hear your feedback on how you would like to use version history in your workflow!\\n\\n## Try it out\\n\\nVersion history is included with the [Pro subscription](https://stately.ai/pricing) to Stately Studio. If you\u2019re not a Pro subscriber yet, you can still get started today with versioning your work by getting a 30-day free trial!"},{"id":"2023-04-28-new-default-machine","metadata":{"permalink":"/statelyai-docs/blog/2023-04-28-new-default-machine","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-04-28-new-default-machine/index.mdx","source":"@site/blog/2023-04-28-new-default-machine/index.mdx","title":"New default machine","description":"There\u2019s now a more detailed default machine when you create a new machine in Stately Studio or jump straight into modeling at state.new.","date":"2023-04-28T00:00:00.000Z","formattedDate":"April 28, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"improved","permalink":"/statelyai-docs/blog/tags/improved"}],"readingTime":0.52,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"New default machine","description":"There\u2019s now a more detailed default machine when you create a new machine in Stately Studio or jump straight into modeling at state.new.","authors":["laura"],"tags":["changelog","improved"],"date":"2023-04-28T00:00:00.000Z","slug":"2023-04-28-new-default-machine","image":"/blog/2023-04-28-new-default-machine.png"},"prevItem":{"title":"Track changes as you work with Version History","permalink":"/statelyai-docs/blog/2023-05-02-version-history"},"nextItem":{"title":"Embed URL","permalink":"/statelyai-docs/blog/2023-04-21-embed-url"}},"content":"There\u2019s now a more detailed default machine when you create a new machine in Stately Studio or when you jump straight into modeling at state.new.\\n\\n\x3c!--truncate--\x3e\\n\\n![Stately Studio machine featuring initial state, guards, parent and child states, and using descriptions.](https://canny.io/images/362e27b65f13dfe7ce6979a91a5fdd6c.png)\\n\\nWe hope this will help you get started and maybe learn more about features you\u2019ve not used before.\\n\\nIf you don\u2019t want any of these states and transitions in your new machine, you can drag to select all the unwanted features and hit backspace to delete them.\\n\\nWe\u2019d love your thoughts about our new default machine; please [give us your feedback in our Discord!](https://discord.gg/xstate)"},{"id":"2023-04-21-embed-url","metadata":{"permalink":"/statelyai-docs/blog/2023-04-21-embed-url","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-04-21-embed-url/index.mdx","source":"@site/blog/2023-04-21-embed-url/index.mdx","title":"Embed URL","description":"\ud83e\udd2b We\u2019re testing a new feature where you can embed machines.","date":"2023-04-21T00:00:00.000Z","formattedDate":"April 21, 2023","tags":[{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"},{"label":"new","permalink":"/statelyai-docs/blog/tags/new"},{"label":"beta","permalink":"/statelyai-docs/blog/tags/beta"}],"readingTime":0.33,"hasTruncateMarker":false,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Embed URL","description":"\ud83e\udd2b We\u2019re testing a new feature where you can embed machines.","authors":["laura"],"tags":["changelog","new","beta"],"date":"2023-04-21T00:00:00.000Z","slug":"2023-04-21-embed-url","image":"/blog/2023-07-18-embed-url.png"},"prevItem":{"title":"New default machine","permalink":"/statelyai-docs/blog/2023-04-28-new-default-machine"},"nextItem":{"title":"Book a demo with the Stately team","permalink":"/statelyai-docs/blog/2023-04-03-book-a-demo"}},"content":"\ud83e\udd2b We\u2019re testing a new feature where you can embed machines.\\n\\nFrom the **Share** menu, there\u2019s now a **Copy embed URL** button. You can use this URL in an `<iframe>` to embed your machine anywhere `<iframe>`s are allowed. We love to use embedded machines in our docs!\\n\\n![embed-url](https://canny.io/images/d1135e463827ba77d2199971d2e7d1e9.png)\\n\\nWe plan to add more to this feature in the future, and [we\u2019d love to hear your feedback](https://discord.gg/xstate)."},{"id":"2023-04-03-book-a-demo","metadata":{"permalink":"/statelyai-docs/blog/2023-04-03-book-a-demo","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-04-03-book-a-demo/index.mdx","source":"@site/blog/2023-04-03-book-a-demo/index.mdx","title":"Book a demo with the Stately team","description":"Are you looking to take your team collaboration to the next level? Do you want to explore the features of Stately and XState to their fullest potential? Then book a live demo with the Stately team!","date":"2023-04-03T00:00:00.000Z","formattedDate":"April 3, 2023","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"demo","permalink":"/statelyai-docs/blog/tags/demo"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"}],"readingTime":1.56,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Book a demo with the Stately team","description":"Are you looking to take your team collaboration to the next level? Do you want to explore the features of Stately and XState to their fullest potential? Then book a live demo with the Stately team!","tags":["stately","studio","demo","xstate"],"authors":["laura"],"image":"/blog/2023-04-03-book-a-demo.png","slug":"2023-04-03-book-a-demo","date":"2023-04-03T00:00:00.000Z"},"prevItem":{"title":"Embed URL","permalink":"/statelyai-docs/blog/2023-04-21-embed-url"},"nextItem":{"title":"Import all machines from your GitHub repo","permalink":"/statelyai-docs/blog/2023-03-09-import-all-machines-from-github-repo"}},"content":"Are you looking to take your team collaboration to the next level? Do you want to explore the features of Stately and XState to their fullest potential? Then <a href=\\"https://calendly.com/d/yc8-3hq-rpc/request-a-demo\\">book a live demo with the Stately team</a>!\\n\\n\x3c!--truncate--\x3e\\n\\nOur team is excited to give you a walkthrough of the Stately Studio and explore your use cases. During the demo, you can get answers to all your questions about Stately and XState. Learning more about you and your team will help us develop future features that benefit your work.\\n\\nWhat can you expect from a live demo with the Stately team?\\n\\n## Walkthrough of the Stately Studio \\n\\nGet an in-depth tour of Stately\u2019s visual editor and its features. Explore how the Stately Studio works for teams and learn how to build complex state machines quickly.\\n\\n## Explore your use cases\\n\\nOur team will help you explore the Stately Studio\u2019s features by walking you through your use cases. We can help you understand how Stately can be used to solve your specific problems and how you can integrate it into your workflow.\\n\\n## Answer any questions you have about Stately and XState\\n\\nDuring the demo, our team will answer your questions about Stately and XState. Whether you\u2019re curious about a particular feature or want to know how Stately can help you solve a specific problem, our team will provide the answers you need.\\n\\n## Follow-up demo designed for your team and use cases\\n\\nAfter the demo, our team can work with you to schedule a follow-up demo that is designed specifically for your team and use cases. We will consider your feedback from the initial demo and create a customized demo that meets your specific needs.\\n\\n<Announcement cta=\\"Book a demo\\" href=\\"https://calendly.com/d/yc8-3hq-rpc/request-a-demo\\">\\n  Use the link below to book your live demo. We look forward to helping you build amazing applications with Stately and XState.\\n</Announcement>"},{"id":"2023-03-09-import-all-machines-from-github-repo","metadata":{"permalink":"/statelyai-docs/blog/2023-03-09-import-all-machines-from-github-repo","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-03-09-import-all-machines-from-github-repo/index.mdx","source":"@site/blog/2023-03-09-import-all-machines-from-github-repo/index.mdx","title":"Import all machines from your GitHub repo","description":"Learn about a new pro feature in the Stately Studio; importing all your machines from a GitHub repo.","date":"2023-03-09T00:00:00.000Z","formattedDate":"March 9, 2023","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"integration","permalink":"/statelyai-docs/blog/tags/integration"},{"label":"github","permalink":"/statelyai-docs/blog/tags/github"}],"readingTime":1.81,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Import all machines from your GitHub repo","description":"Learn about a new pro feature in the Stately Studio; importing all your machines from a GitHub repo.","tags":["stately","studio","integration","github"],"authors":["laura"],"image":"/blog/2023-03-09-import-all-machines-from-github-repo.png","slug":"2023-03-09-import-all-machines-from-github-repo","date":"2023-03-09T00:00:00.000Z"},"prevItem":{"title":"Book a demo with the Stately team","permalink":"/statelyai-docs/blog/2023-04-03-book-a-demo"},"nextItem":{"title":"Import machines from GitHub","permalink":"/statelyai-docs/blog/2023-02-06-github-import-machines"}},"content":"Last month, Anders showed you how you could [import a machine from GitHub by changing the GitHub URL in the browser\u2019s address bar](/blog/2023-02-06-github-import-machines/index.mdx). We\u2019ve added more to our GitHub integration. Our [Pro](https://stately.ai/pricing) users can now import all the machines from a repository into a Stately Studio project with the **Import from GitHub** button.\\n\\n\x3c!--truncate--\x3e\\n\\n![Stately Studio My Projects page showing a list of projects. Above the list is an Import from GitHub button, alongside the Create project button.](2023-03-09-import-all-machines-from-github-repo-button.png)\\n\\nIf you\u2019ve been working with state machines in XState or using the [XState VS Code extension](https://marketplace.visualstudio.com/items?itemName=statelyai.stately-vscode) to visualize your machines, this is a great way to import all the machines in your repo quickly. Once you\u2019ve imported your machines into the Stately Studio, you can visualize and improve them in our Editor and easily share your machines with your team.\\n\\n## How to import all the machines from a GitHub repository\\n\\n1. Navigate to **My Projects** from the sidebar or the Stately menu.\\n2. Use **Import from GitHub** to open the Import repo from GitHub modal.\\n3. The GitHub integration will fetch all available repositories (public and private).\\n4. Choose the repository from which you wish to import machines.\\n5. The Studio will import your machines into a new private project using the same name as your repository and open your project in the Editor.\\n\\nImporting a machine with **Import from GitHub** or importing a machine with a GitHub URL will prompt you to **Allow integration** to give our GitHub integration access to your GitHub repositories. You will only be prompted if you have not yet given the GitHub integration access on your current device.\\n\\nCurrently, the **Import from GitHub** feature imports all machines from the *default branch* in your GitHub repository. If you want to import machines from a different branch or a pull request, we recommend [importing each machine from a GitHub URL](/blog/2023-02-06-github-import-machines/index.mdx).\\n\\n## Try our Pro plan to import from GitHub\\n\\nImport from GitHub is one of the [Pro features](https://stately.ai/docs/studio-pro-plan) of the Stately Studio. We offer a **30-day free trial** on the [Stately Studio Pro account](https://stately.ai/pricing) so you can explore how our Pro features work for you and your team today!"},{"id":"2023-02-06-github-import-machines","metadata":{"permalink":"/statelyai-docs/blog/2023-02-06-github-import-machines","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-02-06-github-import-machines/index.mdx","source":"@site/blog/2023-02-06-github-import-machines/index.mdx","title":"Import machines from GitHub","description":"Learn about a new pro feature in the Stately Studio; importing machines from GitHub.","date":"2023-02-06T00:00:00.000Z","formattedDate":"February 6, 2023","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"integration","permalink":"/statelyai-docs/blog/tags/integration"},{"label":"github","permalink":"/statelyai-docs/blog/tags/github"}],"readingTime":1.915,"hasTruncateMarker":true,"authors":[{"name":"Anders Bech Mellson","title":"Stately Team","url":"https://github.com/mellson","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/anders.png","key":"anders"}],"frontMatter":{"title":"Import machines from GitHub","description":"Learn about a new pro feature in the Stately Studio; importing machines from GitHub.","tags":["stately","studio","integration","github"],"authors":["anders"],"image":"/blog/2023-02-06-github-import-machines.png","slug":"2023-02-06-github-import-machines","date":"2023-02-06T00:00:00.000Z"},"prevItem":{"title":"Import all machines from your GitHub repo","permalink":"/statelyai-docs/blog/2023-03-09-import-all-machines-from-github-repo"},"nextItem":{"title":"Making state machines global in React","permalink":"/statelyai-docs/blog/2023-1-27-making-state-machines-global-in-react"}},"content":"Today we\u2019re happy to introduce another pro feature for our Stately Studio subscribers; **import machines from GitHub**. With this feature, you can quickly visually machines in any of your GitHub repositories. You can even import the machines to the Studio and keep working on them here \ud83c\udf89\\n\\n\x3c!--truncate--\x3e\\n\\n## How to\\n\\nImporting a machine is easy. You open a file containing one or more machines on GitHub. Next, you modify the URL, replace `.com` with `.stately.ai`, and the import will start.\\n\\n![Updating the URL on GitHub imports a machine into the Stately Studio.](github-import-machine.gif)\\n\\n### Example\\n\\nIf you have a machine hosted at GitHub: `https://github.com/username/repo/blob/main/apps/superMachine.ts`, you update the URL to `https://github.stately.ai/username/repo/blob/main/apps/superMachine.ts` and the import will start \ud83d\ude80\\n\\n### Saving the machine\\n\\nYou can easily save imported machines into a Studio project. After the import, you click the save button and choose a project for the machine.\\n\\n![Saving a machine into a new project after a machine is imported into Stately Studio.](github-save-machine.gif)\\n\\n## Get started\\n\\nThis feature requires the following prerequisites:\\n\\n- A **professional or enterprise** subscription to the Stately Studio.\\n- You must install the GitHub integration app.\\n\\nWhen importing a machine, we help you with both of those tasks.\\n\\nYour GitHub token is stored on your own devices by design; we don\u2019t save it in our database. This is to keep your data as safe as possible with the tradeoff being that you must accept the integration on the initial import for each device you use.\\n\\nSee this example where the GitHub integration gets installed during the initial import.\\n\\n![The user is asked to install our GitHub integration during the initial import of a machine.](github-save-machine.gif)\\n\\n## Future work\\n\\nWe have much more planned for integrating with GitHub; this is just the start. Let us know what you think about the machine import and what GitHub integration features you would like to see in the Stately Studio.\\n\\n### Bookmarklet bonus\\n\\nYou can create a [bookmarklet](https://en.wikipedia.org/wiki/Bookmarklet) if you want to make it extra easy to import machines from GitHub. You do this by adding a new bookmark and setting the web address to `javascript:(function(){ location.href = \'https://github.stately.ai/\' + window.location.pathname;})();`. Now you can click the bookmarklet whenever you want to import a machine. The bookmarklet will work on any GitHub file containing one or more machines."},{"id":"2023-1-27-making-state-machines-global-in-react","metadata":{"permalink":"/statelyai-docs/blog/2023-1-27-making-state-machines-global-in-react","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-1-27-making-state-machines-global-in-react/index.mdx","source":"@site/blog/2023-1-27-making-state-machines-global-in-react/index.mdx","title":"Making state machines global in React","description":"Learn how to use the `createActorContext` function to make state machines global in React.","date":"2023-01-27T00:00:00.000Z","formattedDate":"January 27, 2023","tags":[{"label":"react","permalink":"/statelyai-docs/blog/tags/react"},{"label":"hook","permalink":"/statelyai-docs/blog/tags/hook"},{"label":"tutorial","permalink":"/statelyai-docs/blog/tags/tutorial"}],"readingTime":2.69,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"Making state machines global in React","description":"Learn how to use the `createActorContext` function to make state machines global in React.","tags":["react","hook","tutorial"],"authors":["david"],"image":"/blog/2023-1-27-making-state-machines-global-in-react.png","slug":"2023-1-27-making-state-machines-global-in-react","date":"2023-01-27T00:00:00.000Z"},"prevItem":{"title":"Import machines from GitHub","permalink":"/statelyai-docs/blog/2023-02-06-github-import-machines"},"nextItem":{"title":"What\u2019s new for Stately in 2023","permalink":"/statelyai-docs/blog/2023-01-20-whats-new-in-2023"}},"content":"React developers often need to share state between components. While the `useMachine(...)` hook provides a convenient way to represent local state as a state machine, it\u2019s not very feasible for shared or global state. Thankfully, `@xstate/react`\u2019s `createActorContext(machine)` function, released in `@xstate/react@3.1.0`, is a convenient way to share state machines globally in any React application.\\n\\n\x3c!--truncate--\x3e\\n\\nThe `createActorContext(machine)` function returns a [React Context object](https://beta.reactjs.org/learn/passing-data-deeply-with-context) that interprets the machine and makes the actor (interpreted machine) available through React Context. The object returned from `createActorContext(...)` has helper methods for accessing state and the actor ref. It takes one argument, `machine`, which is a state machine from `createMachine(...)` or a function that lazily returns a machine.\\n\\n[\u25b6\ufe0f Stately Stream: Simple React todo app with `createActorContext`](https://www.youtube.com/watch?v=M6KjEogxfQE)\\n\\n## Creating an actor context\\n\\nHere\u2019s how you would create a React Context for an actor created from a machine and provide it in app scope:\\n\\n```tsx\\n// ./App.tsx\\nimport { createActorContext } from \\"@xstate/react\\";\\nimport { someMachine } from \\"../path/to/someMachine\\";\\n\\n// Create a React Context for the actor\\nexport const SomeMachineContext = createActorContext(someMachine);\\n\\n// ...\\n\\nfunction App() {\\n  return (\\n    // Provide the actor context in app scope\\n    <SomeMachineContext.Provider>\\n      <SomeComponent />\\n    </SomeMachineContext.Provider>\\n  );\\n}\\n```\\n\\nThis provider will make the actor available to any component that consumes it. You can also provide the actor context in any part of the component tree, such as a modal or a sidebar.\\n\\n## Consuming the actor context\\n\\nTo consume the actor in a component, you can use the `useActor()` hook to get the `state` and `send` function, or you can use `useSelector(selector, compare?)` hook to derive a specific value from the snapshot:\\n\\n```tsx\\n// ./SomeComponent.tsx\\nimport { SomeMachineContext } from \\"./App\\";\\n\\nfunction SomeComponent() {\\n  // Read full snapshot and get `send` function from `useActor()`\\n  const [state, send] = SomeMachineContext.useActor();\\n  // Or derive a specific value from the snapshot with `useSelector()`\\n  const count = SomeMachineContext.useSelector((state) => state.context.count);\\n\\n  return (\\n    <div>\\n      <p>Count: {count}</p>\\n      <button onClick={() => send({ type: \\"INCREMENT\\" })}>Increment</button>\\n    </div>\\n  );\\n}\\n```\\n\\nAs a reminder, the `useSelector(...)` hook is better when you want to control rerenders, as it will only rerender when the selected state changes.\\n\\nIf you only need the `actorRef`, which is a reference to the invoked actor, you can use the `useActorRef()` hook:\\n\\n```tsx\\nimport { SomeMachineContext } from \\"./App\\";\\n\\nfunction SomeComponent() {\\n  const actorRef = SomeMachineContext.useActorRef();\\n\\n  return (\\n    <div>\\n      <button onClick={() => actorRef.send({ type: \\"INCREMENT\\" })}>\\n        Increment\\n      </button>\\n    </div>\\n  );\\n}\\n```\\n\\n## Providing custom machines\\n\\nLastly, if you need to provide implementation details to the machine, such as `actions`, `guards`, or `delays`, you can provide these options in the `options={...}` prop on the `Provider` component:\\n\\n```tsx\\nimport { SomeMachineContext } from \\"../path/to/SomeMachineContext\\";\\nimport { someMachine } from \\"../path/to/someMachine\\";\\n\\nfunction SomeComponent() {\\n  return (\\n    <SomeMachineContext.Provider\\n      options={{\\n        actions: {\\n          doSomething: (ctx, ev) => {\\n            // ...\\n          },\\n        },\\n      }}\\n    >\\n      <SomeOtherComponent />\\n    </SomeMachineContext.Provider>\\n  );\\n}\\n```\\n\\n## Conclusion\\n\\nThe `createActorContext(...)` function from `@xstate/react` is a convenient way to share state machines globally in any React application, or in any part of the component tree. It is available as of version `@xstate/react@3.1.0`. If you have any questions or feedback, please [let us know on Discord](https://discord.gg/xstate) to get help, ask questions, and give us your feedback.\\n\\nHappy modeling!"},{"id":"2023-01-20-whats-new-in-2023","metadata":{"permalink":"/statelyai-docs/blog/2023-01-20-whats-new-in-2023","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-01-20-whats-new-in-2023/index.mdx","source":"@site/blog/2023-01-20-whats-new-in-2023/index.mdx","title":"What\u2019s new for Stately in 2023","description":"Happy 2023! We thought we\u2019d kick off the year with a reminder of all the features we\u2019ve released since the Stately Studio 1.0 release in October.","date":"2023-01-20T00:00:00.000Z","formattedDate":"January 20, 2023","tags":[{"label":"recovery","permalink":"/statelyai-docs/blog/tags/recovery"},{"label":"restore","permalink":"/statelyai-docs/blog/tags/restore"},{"label":"offline","permalink":"/statelyai-docs/blog/tags/offline"},{"label":"editor","permalink":"/statelyai-docs/blog/tags/editor"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"}],"readingTime":5.205,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"What\u2019s new for Stately in 2023","description":"Happy 2023! We thought we\u2019d kick off the year with a reminder of all the features we\u2019ve released since the Stately Studio 1.0 release in October.","tags":["recovery","restore","offline","editor","studio"],"authors":["laura"],"image":"/blog/2023-01-20-whats-new-in-2023.png","slug":"2023-01-20-whats-new-in-2023","date":"2023-01-20T00:00:00.000Z"},"prevItem":{"title":"Making state machines global in React","permalink":"/statelyai-docs/blog/2023-1-27-making-state-machines-global-in-react"},"nextItem":{"title":"Introducing the Stately docs","permalink":"/statelyai-docs/blog/2023-01-19-introducing-the-stately-docs"}},"content":"Happy 2023! The Stately team is back from their [first off-site of the year in Lisbon](https://twitter.com/statelyai/status/1615394794251096065) and excited to get started on our plans for this year. We thought we\u2019d kick off the year with a reminder of all the features we\u2019ve released since the [Stately Studio 1.0 release](https://stately.ai/blog/2022-10-18-introducing-stately-studio-1-0) in October. It\u2019s been just three months, and we already have so much to share.\\n\\n\x3c!--truncate--\x3e\\n\\n![Jenny takes a selfie including the team all sitting at a long table in a room with stone and Portuguese tiled walls with laptops, coffees, and juices. David, Mateusz, Laura, Farzad, Anders, Kevin, and Gavin are all working, looking at the camera, or chatting to each other.](2023-01-20-team-in-lisbon.png)\\n\\n## Import from code\\n\\n[Import from code](https://stately.ai/blog/2022-11-29-import-from-code) was one of our most-requested features from users who had already created machines using XState or our Stately Viz. You can import an existing machine from JavaScript, TypeScript or JSON using the code panel in the editor\u2019s right tool menu or the Machines list in the left drawer. Import from code works well with our existing export as code feature, where you can export your machine as JSON, JavaScript, and TypeScript using the code panel in the right tool menu.\\n\\n![Code panel open in the Studio with the Import button highlighted.](2022-11-29-import-from-code-right-panel.png)\\n\\n## Moving machines\\n\\nYou can now quickly move machines between projects from the machines list menu. You can move your machines to your own projects or any projects you share with your teams. [Watch Kevin demo moving machines](https://www.youtube.com/watch?v=MpbbgOQ9WAI&t=709s) during our office hours in December last year.\\n\\n## Recovery mode\\n\\nRecovery mode is one of those features we hope you never have to use. We now try to detect any missing connectivity or backend failure on our end while you\u2019re editing your machines. We will let you know if a connectivity issue or other failure happens and start saving your work locally on your device. The next time you visit the Studio from that same device, we compare what we saved with the machine from the server. If the versions are different, we will give you the option to restore the safe copy to a new machine.\\n\\n![The Stately Studio shows an option to restore changes made to a machine while the user was offline.](recovery_restore_machine.gif)\\n\\n## Editor tutorials\\n\\nThe editor now has several tutorials to help get you started, along with basic state machine and statechart concepts. You can access the tutorials from the blue question mark button in the lower right of the editor canvas. Most tutorials also have an accompanying short video for those who like to learn visually. You can [watch the playlist of all the tutorial videos on YouTube](https://www.youtube.com/watch?v=Aixi0e53qAE&list=PLvWgkXBB3dd4I_l-djWVU2UGPyBgKfnTQ).\\n\\n## XState VS Code update\\n\\nThe XState VS Code extension has had a significant overhaul making it run much faster and giving it more accurate bi-directional editing between the code and visual editing modes.\\n\\n![XState VSCode extension installation page in VS Code.](2023-01-20-xstate-vscode.png)\\n\\nWe\u2019ve also added two much-requested features from our VS Code users; you can now use the XState VS Code without logging in, and use the extension entirely offline.\\n\\n## Learn more with the Stately streams\\n\\nIf you want to learn more about using the Stately Studio and XState, check out [David and Farzad\u2019s Stately streams](https://www.youtube.com/watch?v=25zL7hUOc1k&list=PLvWgkXBB3dd5UEJZCk4C3Wn1Ys8WRMDbi). These are a series of videos where David and Farzad work through modeling and coding features and best practices with state orchestration.\\n\\n![Stately Streams video playlist on YouTube.](2023-01-20-stately-streams.png)\\n\\n## Docs\\n\\n[We\u2019ve finally launched our new Stately docs](https://stately.ai/blog/2023-01-19-introducing-the-stately-docs). We now have docs for the Stately Studio and XState, with how-tos, tutorials, code examples, and much more. And yes, the new docs have dark mode!\\n\\n![Stately docs homepage.](2023-01-19-docs.png)\\n\\n## Even more in the Studio\\n\\nWe continue making improvements to the Studio to improve your experience. We\u2019ve improved how we track features in the Studio, enhancing your privacy by keeping our users entirely anonymous in our analytics. We now support Safari and hope to work on the touchscreen experience in the future. And we\u2019ve also introduced dedicated support for our Pro subscription users, which has a 100% success and speedy response record so far!\\n\\n### Machine metadata\\n\\nWe now support metadata for states and events for those who want to include static data in their machines. You can add your metadata as JSON key-value pairs at the end of the State details panel. The Studio will recognize and format your values as strings, numbers, or booleans; all metadata is included when you export your machines to code.\\n\\n### Read-only mode\\n\\nAt the end of last year, we added a read-only mode to the editor. Previously when viewing a read-only machine, you\u2019d be able to edit the machine even though the editor wouldn\u2019t save your changes. Now, when checking out a read-only machine, you won\u2019t be able to edit the machine, and you\u2019ll see a banner explaining why you can\u2019t make changes.\\n\\n![A machine in the editor with a banner on top that says \u2018This machine is read only. Changes will not be saved.\u2019](2023-01-20-read-only.png)\\n\\n### Machine images\\n\\nYou\u2019ll love our new machine images if you\u2019ve been looking for an easy way to share an overview of your machines on GitHub, Slack, Discord, or any other web platform. From the machines list menu, you can choose **Copy image URL** and use that URL anywhere you want to share your machine. The image will be live-updated when your machine is updated, so you don\u2019t need to worry about your reference images going out of date. \\n\\n![A machine image in both light and dark mode in the Stately docs.](2023-01-20-machine-images.png)\\n\\nI\u2019ve been using these images everywhere in our new docs, and you can see there that you can get light and dark mode versions of each image. The image URL copied to your clipboard will use the same mode you\u2019re using in the Studio, but you can always change the mode by switching the .dark.png and .light.png suffixes in the URL. This feature is part of our work toward our GitHub integration, so look out for that coming soon!\\n\\n## Find out more\\n\\nIf all of that isn\u2019t enough for you, you can catch up with [David\u2019s wrap-up of 2022](https://www.youtube.com/watch?v=-uoEro1jsBI&t=1916s) and a [preview of what\u2019s to come from Stately in 2023](https://www.youtube.com/watch?v=-uoEro1jsBI&t=2140s). We can\u2019t wait to share what we\u2019re working on!"},{"id":"2023-01-19-introducing-the-stately-docs","metadata":{"permalink":"/statelyai-docs/blog/2023-01-19-introducing-the-stately-docs","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-01-19-introducing-the-stately-docs/index.mdx","source":"@site/blog/2023-01-19-introducing-the-stately-docs/index.mdx","title":"Introducing the Stately docs","description":"The time has finally come; our new docs are ready to share with you all. If you\u2019ve been following our office hours, you know I\u2019ve been talking about these docs for a long time\u2026","date":"2023-01-19T00:00:00.000Z","formattedDate":"January 19, 2023","tags":[{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"docs","permalink":"/statelyai-docs/blog/tags/docs"},{"label":"search","permalink":"/statelyai-docs/blog/tags/search"},{"label":"light mode and dark mode","permalink":"/statelyai-docs/blog/tags/light-mode-and-dark-mode"},{"label":"contribute","permalink":"/statelyai-docs/blog/tags/contribute"}],"readingTime":2.88,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Introducing the Stately docs","description":"The time has finally come; our new docs are ready to share with you all. If you\u2019ve been following our office hours, you know I\u2019ve been talking about these docs for a long time\u2026","tags":["studio","xstate","docs","search","light mode and dark mode","contribute"],"authors":["laura"],"image":"/blog/2023-01-19-introducing-the-stately-docs.png","slug":"2023-01-19-introducing-the-stately-docs","date":"2023-01-19T00:00:00.000Z"},"prevItem":{"title":"What\u2019s new for Stately in 2023","permalink":"/statelyai-docs/blog/2023-01-20-whats-new-in-2023"},"nextItem":{"title":"New in the Studio: Machine restore","permalink":"/statelyai-docs/blog/2022-12-22-machine-recovery"}},"content":"The time has finally come; [our new docs](https://stately.ai/docs) are ready to share with you all. If you\u2019ve been following our office hours, you know I\u2019ve been talking about these docs for a long time. Thanks to Anders, who used [Docusaurus](https://docusaurus.io) to build us a rock solid easily-maintainable platform with search that actually works, and the whole team, who have contributed reviews, explainers, and examples to get these docs started.\\n\\n\x3c!--truncate--\x3e\\n\\n![Stately docs homepage.](2023-01-19-docs.png)\\n\\n## Docs for the Stately Studio\\n\\nOur new docs have documentation for both the [Stately Studio](https://stately.ai/editor) and [XState](https://xstate.js.org). If you want to learn how to use the Studio without having to learn any code, we\u2019ve got you covered with a [no-code introduction to state machines and statecharts](https://stately.ai/docs/state-machines-and-statecharts) and [step-by-step tutorials for different features in the Studio](https://stately.ai/docs/states/intro). We\u2019ve also got a [modeling section](https://stately.ai/docs/descriptions) where we\u2019ll add more guides to modeling your machines in the future.\\n\\n## Docs for XState\\n\\nIf you\u2019re a more experienced developer who wants to [jump straight into XState](https://stately.ai/docs/xstate/basics/what-is-a-statechart), we have docs that focus on the coding experience and cover all the concepts you need to know when working with XState. Shoutout to [Matt Pocock](https://totaltypescript.com), who used his vast knowledge of XState to kick these docs off when he was with us last year.\\n\\n![The \u2018What is a statechart?\u2019 section of the XState docs with code examples.](2023-01-19-docs-xstate.png)\\n\\n## Useful search\\n\\nAs I mentioned earlier, the search in the docs really works. Search is a problem for a lot of documentation across the web and something we were keen to improve over the previous XState docs. Anders worked hard to make the Algolia search work for us, and while the structure of our docs navigation is essential, we all know the search is where you\u2019ll likely go first.\\n\\n![Docs search showing results for \u2018actor\u2019 which includes relevant and useful results.](2023-01-19-docs-search.png)\\n\\n## Dark mode\\n\\nOne of our most-requested features for our docs was dark mode. Inspired by Nick\u2019s light and dark mode designs for the Studio, I\u2019ve given the docs light mode and dark modes that should hopefully be easy on the eyes and give you the best possible reading experience. Even our images respond to the light and dark modes!\\n\\n![Stately docs homepage split into light mode and dark mode.](2023-01-19-docs-light-mode.png)\\n\\n## Easy to contribute\\n\\nAt the end of every page, we have an **Edit this page on GitHub** link, which takes you directly to that page in our docs\u2019 GitHub repository. We appreciate any contributions that help our community learn XState and the Stately Studio. We have a short [Stately Guide to Writing Docs wiki](https://github.com/statelyai/docs/wiki) on [our repository](https://github.com/statelyai/docs/) with recommendations on structure and style. Read below if you want to suggest an improvement to our docs.\\n\\n![A link at the bottom of a Stately docs page with an \u2018Edit this page on GitHub\u2019 link.](2023-01-19-docs-contribute.png)\\n\\n## Still in beta\\n\\nThese docs are still in beta, and we want your feedback! At Stately, we care a great deal about accessible and valuable education. Our docs are a living iterable product, and we want to continuously improve them to make them as valuable a resource as possible. Please [let us know in Discord](https://discord.gg/xstate) or [on Twitter](https://twitter.com/statelyai) if you have suggestions for improvements or where we could make the docs clearer or better for you. Use [our Canny documentation request board](https://feedback.stately.ai/docs) if you have a page, feature, or example request. \\n\\nWe hope you like our new, improved docs, and we\u2019re looking forward to hearing from you!"},{"id":"2022-12-22-machine-recovery","metadata":{"permalink":"/statelyai-docs/blog/2022-12-22-machine-recovery","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-12-13-new-in-the-studio-machine-disaster-recovery/index.mdx","source":"@site/blog/2022-12-13-new-in-the-studio-machine-disaster-recovery/index.mdx","title":"New in the Studio: Machine restore","description":"We have introduced a new feature to the Stately Studio, a feature we hope you\u2019ll never see. Let\u2019s call it machine restore, for lack of a better description.","date":"2022-12-13T00:00:00.000Z","formattedDate":"December 13, 2022","tags":[{"label":"recovery","permalink":"/statelyai-docs/blog/tags/recovery"},{"label":"restore","permalink":"/statelyai-docs/blog/tags/restore"},{"label":"offline","permalink":"/statelyai-docs/blog/tags/offline"},{"label":"editor","permalink":"/statelyai-docs/blog/tags/editor"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"}],"readingTime":1.955,"hasTruncateMarker":true,"authors":[{"name":"Anders Bech Mellson","title":"Stately Team","url":"https://github.com/mellson","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/anders.png","key":"anders"}],"frontMatter":{"title":"New in the Studio: Machine restore","description":"We have introduced a new feature to the Stately Studio, a feature we hope you\u2019ll never see. Let\u2019s call it machine restore, for lack of a better description.","tags":["recovery","restore","offline","editor","studio"],"authors":["anders"],"image":"/blog/2022-12-22-machine-recovery.png","slug":"2022-12-22-machine-recovery","date":"2022-12-13T00:00:00.000Z"},"prevItem":{"title":"Introducing the Stately docs","permalink":"/statelyai-docs/blog/2023-01-19-introducing-the-stately-docs"},"nextItem":{"title":"New in the Studio: Import from code","permalink":"/statelyai-docs/blog/2022-11-29-import-from-code"}},"content":"We have introduced a new feature to the Stately Studio, a feature we hope you\u2019ll never see. Let\u2019s call it machine restore, for lack of a better description.\\n\\n\x3c!--truncate--\x3e\\n\\n### What\'s the challenge?\\n\\nAt this moment in time, the Studio is using a traditional server-client architecture. Whenever you edit a machine, we will persist these changes to our central database, ready for you to use when you return - on any device with an internet connection.\\n\\n![Simplified drawing of the Stately Studio architecture described above.](studio_architecture_challenges.png)\\n\\nBut what happens with your edits if your internet connection fails or the Stately backend is having problems? This is where our new feature comes into play.\\n\\n### Example\\n\\nIn our example, Santa\u2019s delivery machine has a problem; the Christmas-time state is unreachable. So we do as any good Santa\u2019s helper would; we create an event to get to Christmas. But alas, we\u2019re offline, so our changes could get lost. Before this new feature, there was a chance you wouldn\u2019t notice you\u2019d gone offline or that the server returned an error. But as you can see in the GIF below, we\u2019ve introduced new error banners to show you what\u2019s happening.\\n\\n![Santa\u2019s delivery state machine shows an error while trying to edit offline.](recovery_offline_error.gif)\\n\\n### How to restore\\n\\nWe try our best to detect any failure or missing connectivity when you edit your machines. If you hit any error state, we will inform you and start saving your work locally on your device. So next time you visit the Studio from that same device, we will compare what we saved with the machine from the server. And if they are different, we will give you the option to restore the safe copy to a new machine.\\n\\nYou can see this in action using our example from above. When I return to the Studio, I can restore the changes I did while offline. Christmas is saved.\\n\\n![The Stately Studio shows an option to restore changes made to a machine while the user was offline.](recovery_restore_machine.gif)\\n\\nHopefully, you\u2019ll never see this feature, but if you do, I hope you find it helpful.\\n\\n### What\'s next\\n\\nWe have some exciting plans around an offline-first approach for the Studio which should make this restore feature obsolete and also enable features such as multi-player editing. Stay tuned for more news about this in 2023."},{"id":"2022-11-29-import-from-code","metadata":{"permalink":"/statelyai-docs/blog/2022-11-29-import-from-code","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-11-29-import-from-code/index.mdx","source":"@site/blog/2022-11-29-import-from-code/index.mdx","title":"New in the Studio: Import from code","description":"One of our most-requested features has just landed in the Stately Studio; you can now import from code!","date":"2022-11-29T00:00:00.000Z","formattedDate":"November 29, 2022","tags":[{"label":"editor","permalink":"/statelyai-docs/blog/tags/editor"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"import","permalink":"/statelyai-docs/blog/tags/import"},{"label":"code","permalink":"/statelyai-docs/blog/tags/code"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"}],"readingTime":2.33,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"New in the Studio: Import from code","description":"One of our most-requested features has just landed in the Stately Studio; you can now import from code!","tags":["editor","studio","import","code","xstate"],"authors":["laura"],"image":"/blog/2022-11-29-import-from-code.png","slug":"2022-11-29-import-from-code","date":"2022-11-29T00:00:00.000Z"},"prevItem":{"title":"New in the Studio: Machine restore","permalink":"/statelyai-docs/blog/2022-12-22-machine-recovery"},"nextItem":{"title":"New: Safari support, new login providers, and more!","permalink":"/statelyai-docs/blog/2022-11-22-studio-update"}},"content":"One of our most-requested features has just landed in the Stately Studio; you can now import your machines from code! \\n\\n[Watch import from code in action in our latest video](https://www.youtube.com/watch?v=DAoIFaugDLo).\\n\\nImporting from code is handy if you\u2019ve already built machines while working with [XState](https://xstate.js.org/docs), or have created a machine using our older [Stately Viz](https://stately.ai/viz) and haven\u2019t yet tried the [Stately visual editor](https://stately.ai/editor).\\n\\n\x3c!--truncate--\x3e\\n\\n### How to import from code\\n\\nYou can import an existing machine from JavaScript and TypeScript using the code panel in the right tool menu or from the **Machines** list in the left drawer.\\n\\n![Code panel open in the Studio with the Import button highlighted.](2022-11-29-import-from-code-right-panel.png)\\n\\n![Left drawer open in the Studio showing the Machines list. A machine\u2019s contextual menu is open with the Import Code option highlighted.](2022-11-29-import-from-code-left-drawer.png)\\n\\nYour code should be formatted as a [`createMachine()` factory function](https://xstate.js.org/docs/guides/machines.html) before import. The importer has basic validation in case your machine has basic errors, including reminding you if the `createMachine` definition is missing.\\n\\n![Left drawer open in the Studio showing the Machines list New machine dialog with the Import Code slider switched on. There\u2019s JavaScript already in the text area and the cursor is hovering over the Create machine button.](2022-11-29-import-from-code-create-machine.png)\\n\\nAnd please import your code into an existing machine with caution! Importing code from the code panel will overwrite the current machine in the editor. You may have multiple `createMachine`s included in the code you insert in the text area, but the Studio will currently only import the first machine found in the code. We plan to support importing multiple machines in the future, if that\u2019s a feature you\u2019d love, please [upvote the multiple machine import feature request](https://feedback.stately.ai/editor/p/import-multiple-machines-from-one-code-import) on our board.\\n\\n![Import Code modal. There\u2019s JavaScript formatted as a createMachine factory function inside the text area. A warning at the top of the dialog warns you that importing from JSON will overwrite all data in \u201cMy new machine\u201d.](2022-11-29-import-from-code-importer.png)\\n\\n## Export code\\n\\nWhat about exporting your machines as code? You might have missed this feature as we released it as part of the [Stately Studio 1.0 release](https://stately.ai/blog/2022-10-18-introducing-stately-studio-1-0#more-export-options). You can export your machine as JSON, JavaScript, and TypeScript using the code panel in the right tool menu. \\n\\nUsing the export icon button in the editor\u2019s top bar, you can also export as code from the **Export machine** dialog. [Check out Laura\u2019s demo utilizing this feature to go from modeling your machine to code](https://www.youtube.com/watch?v=NVQai9SBpiU).\\n\\n## Please give us your feedback!\\n\\nHave you used the import and export features yet? We\u2019d love to hear your thoughts! The team loves hearing your feedback [on our Stately Discord](https://discord.gg/xstate) or during our next [office hours live stream](https://youtube.com/statelyai). If you have any feature requests, please add them to our [feature request board](https://feedback.stately.ai), and we\u2019ll keep you updated if it\u2019s planned, in progress, or complete!"},{"id":"2022-11-22-studio-update","metadata":{"permalink":"/statelyai-docs/blog/2022-11-22-studio-update","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-11-22-studio-update/index.mdx","source":"@site/blog/2022-11-22-studio-update/index.mdx","title":"New: Safari support, new login providers, and more!","description":"It\u2019s been just over a month since we released Stately Studio 1.0, and the team has barely slowed down! We\u2019ve got more features live in the Studio today and even more planned before the end of the year.","date":"2022-11-22T00:00:00.000Z","formattedDate":"November 22, 2022","tags":[{"label":"editor","permalink":"/statelyai-docs/blog/tags/editor"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"safari","permalink":"/statelyai-docs/blog/tags/safari"},{"label":"login","permalink":"/statelyai-docs/blog/tags/login"},{"label":"performance","permalink":"/statelyai-docs/blog/tags/performance"}],"readingTime":2.8,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"New: Safari support, new login providers, and more!","description":"It\u2019s been just over a month since we released Stately Studio 1.0, and the team has barely slowed down! We\u2019ve got more features live in the Studio today and even more planned before the end of the year.","tags":["editor","studio","safari","login","performance"],"authors":["laura"],"image":"/blog/2022-11-22-studio-update.png","slug":"2022-11-22-studio-update","date":"2022-11-22T00:00:00.000Z"},"prevItem":{"title":"New in the Studio: Import from code","permalink":"/statelyai-docs/blog/2022-11-29-import-from-code"},"nextItem":{"title":"Learn the Stately Studio with our new video tutorials","permalink":"/statelyai-docs/blog/2022-10-27-studio-tutorials"}},"content":"It\u2019s been just over a month since [we released Stately Studio 1.0](/blog/2022-10-18-stately-studio-1-0/index.mdx), and the team has barely slowed down! We\u2019ve got more features live in the Studio today and even more planned before the end of the year.\\n\\n[Watch a demo of these features in our release video](https://www.youtube.com/watch?v=N9QtPcknqDw).\\n\\n\x3c!--truncate--\x3e\\n\\n## Safari support\\n\\nWe\u2019re happy to tell you [the Stately Studio](https://stately.ai/studio) now works in Safari. It took a significant code refactor, which doesn\u2019t just mean that you can now edit your statecharts using Safari; the new code structure should also give us bonuses for accessibility and future integrations. If you\u2019re curious about what David refactored, you can watch him talk about the Safari support during [our office hours from last week](https://youtu.be/JBckQTgeD9g?t=2153).\\n\\nSafari support is still in beta, you\u2019ll get a message warning you when you open the Studio in Safari for the first time. Your machines are not in danger; you might encounter a few bugs when using the Safari browser. If you do come across any bugs, please let us know in the #studio-feedback channel in [our Discord](https://discord.gg/xstate), and we\u2019ll try to get them fixed as quickly as possible.\\n\\n## Sign up and log in with Twitter, Google, and email\\n\\nYou can now log into the Stately Studio with Twitter or Google, or set up an account with your email address and password. We\u2019ve had GitHub login support since we first launched the Studio, and alternative login providers have been a popular request from our community.\\n\\n![The Stately Studio sign up page with login options for GitHub, Google, Twitter, as well as email address and password fields for sign up.](2022-11-22-studio-update-login-providers.png)\\n\\nAre there any login providers we should add? Please let us know as a [feature request on our Studio board](https://feedback.stately.ai/studio). Many options are available to us, and we aim to support the community\u2019s most popular providers.\\n\\n## More editor improvements\\n\\nWe\u2019ve continued making usability improvements to the editor. You might notice that transition lines now run underneath the nodes, resulting in tidier, more readable machines by default. We also now highlight the selected event and its target and source states, fading out other nodes. Changes like this should help you focus and understand the machine, especially inside vast and complex machines.\\n\\n![Section of a machine in the Stately Studio showing the event selected, its transitions, and source and target states all at 100% opacity, and all other nodes and transition lines at a faded out transparency.](2022-11-22-studio-update-highlighted-selected-event.png)\\n\\n## Better overall performance\\n\\nThe team has also migrated the Studio to tRPC v10 on the back end and TanStack Query on the front end. The migration isn\u2019t a change you can see, but it has enormously improved the performance of the Studio, making everything feel speedier and smoother.\\n\\n## Want to know what\u2019s coming up?\\n\\nIf you want to keep up with the team\u2019s latest work-in-progress, [subscribe to our YouTube channel](https://youtube.com/statelyai). We share our work, upcoming features, and answer your questions in our regular office hours live streams. [Check out last week\u2019s office hours live stream](https://www.youtube.com/watch?v=JBckQTgeD9g) for a peek into features we\u2019re looking to release very soon.\\n\\n## Request the features you want\\n\\nIf you\u2019ve watched [our office hours](https://www.youtube.com/watch?v=JBckQTgeD9g&list=PLvWgkXBB3dd6PXbSoctwDXjWX-AQrxhds), you know the team listens to every feature request and loves to make our community happy. You can request features, upvote other people\u2019s suggestions, and check out what\u2019s in progress on [our Canny roadmap](https://feedback.stately.ai)."},{"id":"2022-10-27-studio-tutorials","metadata":{"permalink":"/statelyai-docs/blog/2022-10-27-studio-tutorials","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-10-27-studio-tutorials/index.mdx","source":"@site/blog/2022-10-27-studio-tutorials/index.mdx","title":"Learn the Stately Studio with our new video tutorials","description":"If you\u2019re new to the Stately Studio, state machines or statecharts, we have the videos for you! Our new Stately Studio tutorials playlist on YouTube features bite-size videos to help you get started with understanding statecharts and state machines, and start modeling in the Stately Studio.","date":"2022-10-27T00:00:00.000Z","formattedDate":"October 27, 2022","tags":[{"label":"editor","permalink":"/statelyai-docs/blog/tags/editor"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"tutorials","permalink":"/statelyai-docs/blog/tags/tutorials"},{"label":"video","permalink":"/statelyai-docs/blog/tags/video"}],"readingTime":1.01,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Learn the Stately Studio with our new video tutorials","description":"If you\u2019re new to the Stately Studio, state machines or statecharts, we have the videos for you! Our new Stately Studio tutorials playlist on YouTube features bite-size videos to help you get started with understanding statecharts and state machines, and start modeling in the Stately Studio.","tags":["editor","studio","tutorials","video"],"authors":["laura"],"image":"/blog/2022-10-27-studio-tutorials.png","slug":"2022-10-27-studio-tutorials","date":"2022-10-27T00:00:00.000Z"},"prevItem":{"title":"New: Safari support, new login providers, and more!","permalink":"/statelyai-docs/blog/2022-11-22-studio-update"},"nextItem":{"title":"Introducing Stately Studio 1.0","permalink":"/statelyai-docs/blog/2022-10-18-introducing-stately-studio-1-0"}},"content":"If you\u2019re new to the Stately Studio, state machines or statecharts, we have the videos for you! Our new Stately Studio tutorials playlist on YouTube features bite-size videos to help you get started with understanding statecharts and state machines, and start modeling in the Stately Studio.\\n\\n\x3c!--truncate--\x3e\\n\\nEach video explains a concept with an example machine and shows you how to use the features in the Stately Studio. You can [watch the whole playlist](https://www.youtube.com/playlist?list=PLvWgkXBB3dd4I_l-djWVU2UGPyBgKfnTQ) in one go or watch the videos individually, as shown below.\\n\\n## What are state machines and statecharts?\\n\\n<YouTube id=\\"Aixi0e53qAE?\\"/>\\n\\n## States\\n\\n<YouTube id=\\"z-6yhmSWUcc?\\"/>\\n\\n## Initial states\\n\\n<YouTube id=\\"goCpmgyrjL0?\\"/>\\n\\n## Transitions and events\\n\\n<YouTube id=\\"0qgP4RZyq58?\\"/>\\n\\n## Parent and child states\\n\\n<YouTube id=\\"aUhEdeIf_mQ?\\"/>\\n\\n## Parallel states\\n\\n<YouTube id=\\"CWwgT1TbI4c?\\"/>\\n\\n## Final states\\n\\n<YouTube id=\\"wqW8Gz4NYDc?\\"/>\\n\\n## Entry and exit actions\\n\\n<YouTube id=\\"GYoYZ1Dt1sA?\\"/>\\n\\n## Delayed (after) transitions\\n\\n<YouTube id=\\"5RE_eazRhrw?\\"/>\\n\\n## State done events\\n\\n<YouTube id=\\"3laC3gWBLnM?\\"/>\\n\\n## Invoked actors\\n\\n<YouTube id=\\"TRMS8NYKWnA?\\"/>\\n\\n## Descriptions\\n\\n<YouTube id=\\"qflVEMsCrEE?\\"/>\\n\\n## More videos coming soon\\n\\nWe\u2019ll be adding more videos to the playlist very soon! Do you want us to make tutorials for a concept you need help understanding? Or how to use a particular feature in the Stately Studio? [Leave us a request on our Canny roadmap](https://feedback.stately.ai)."},{"id":"2022-10-18-introducing-stately-studio-1-0","metadata":{"permalink":"/statelyai-docs/blog/2022-10-18-introducing-stately-studio-1-0","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-10-18-stately-studio-1-0/index.mdx","source":"@site/blog/2022-10-18-stately-studio-1-0/index.mdx","title":"Introducing Stately Studio 1.0","description":"We\u2019re excited to announce the release of Stately Studio 1.0! We\u2019ve been working on Stately Studio for over a year now, and we\u2019re thrilled to share it with you.","date":"2022-10-18T00:00:00.000Z","formattedDate":"October 18, 2022","tags":[{"label":"editor","permalink":"/statelyai-docs/blog/tags/editor"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"announcement","permalink":"/statelyai-docs/blog/tags/announcement"}],"readingTime":5.78,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"Introducing Stately Studio 1.0","description":"We\u2019re excited to announce the release of Stately Studio 1.0! We\u2019ve been working on Stately Studio for over a year now, and we\u2019re thrilled to share it with you.","tags":["editor","studio","announcement"],"authors":["david"],"image":"/blog/2022-10-18-introducing-stately-studio-1-0.png","slug":"2022-10-18-introducing-stately-studio-1-0","date":"2022-10-18T00:00:00.000Z"},"prevItem":{"title":"Learn the Stately Studio with our new video tutorials","permalink":"/statelyai-docs/blog/2022-10-27-studio-tutorials"},"nextItem":{"title":"What\u2019s new in September 2022?","permalink":"/statelyai-docs/blog/2022-09-14-whats-new-september-2022"}},"content":"We\u2019re excited to announce the release of Stately Studio 1.0! \ud83d\ude80 Our mission is for all app logic to be visually collaborative and accessible to your entire team, and we\u2019ve been working hard to make that a reality.\\n\\n\x3c!--truncate--\x3e\\n\\n## Thank you for your support!\\n\\nEarlier this year, we released [the first beta of Stately Editor & Stately Registry](/blog/2022-2-6-stately-editor-public-beta/index.mdx) (together called the Stately Studio). We also released [Stately Viz](https://stately.ai/viz), a visualizer for XState machines, and the [XState VS Code extension](https://marketplace.visualstudio.com/items?itemName=statelyai.stately-vscode). Since then, over 10,000 of you have tried our tools out, creating and sharing tens of thousands of machines (we don\u2019t know the exact number because machines built with the extension are always private!) \\n\\nThank you for giving our tools a go and for all the valuable feedback you\u2019ve given us; we\u2019ve been blown away by the response. We\u2019re listening and continuing to improve the Stately Studio. As always, you can [create and upvote feature requests on our Canny roadmap](https://feedback.stately.ai).\\n\\n## Teams\\n\\nCollaborating on app logic is one of Stately\u2019s key goals. That\u2019s why we\u2019ve introduced **teams**, where you can organize, privately share, and edit projects with your teammates. A **project** is a collection of related machines you can keep to yourself or share with your team. You can invite teammates to your team, and they can join your team by accepting the invitation.\\n\\n![Stately Studio view of My Projects, with a big Create Projects button and a list of My Projects. Each project has a title such as Flows, its visibility, such as public, unlisted or private, and the number of machines inside that project.](studio-1-0-projects.png)\\n\\nThe teams feature is the first step to providing more powerful collaboration features. We\u2019re working on GitHub integration with public and private repos, commenting, machine revisions with visual diffs, multiplayer mode for collaboratively editing machines in real time, and much more.\\n\\nTeams (previously known as Systems) are available on [our new Pro subscription](https://stately.ai/pricing).\\n\\n![The Members view of the Stately team in the Stately Studio. There\u2019s an inline Invite Members form with options for an email address, and dropdown for role with \u201cViewer\u201d currently selected. In the team there\u2019s a list of Owners/Admins including David Khourshid and Laura Kalbag. David has a badge of \u201cOwner\u201d alongside his avatar.](studio-1-0-teams.png)\\n\\n## Machine visibility and roles\\n\\nMachines may contain business logic you don\u2019t want to share with the world; that\u2019s why we\u2019ve introduced **visibility** and **roles**. You can set a machine to be *private*, *public*, or *unlisted*. Private machines are only visible to you and your teammates. Public machines are visible to everyone, and [discoverable through search](https://stately.ai/registry/discover). Unlisted machines are only visible to those with the link, as they don\u2019t appear in search results.\\n\\n![Share menu in the Stately Studio with an option to copy link, and set the project to either public, unlisted, or private. The private option is selected and Permissions text under the option states that this project is only visible to you and your team.](studio-1-0-visibility.png)\\n\\nYou can also set roles for teammates to restrict how they can edit projects and machines. You can set a teammate to be a viewer, editor, or admin. Viewers can view projects and machines, but can\u2019t edit them. Editors can edit projects and machines, but can\u2019t delete them. Admins can do everything, including assigning roles.\\n\\nPrivate/unlisted machines and team roles are available on [our new Pro subscription.](https://stately.ai/pricing)\\n\\n## Editor redesign\\n\\nYou might have noticed a refreshed redesign of the editor. The editor view is now more project-centric, allowing you to switch between machines with a single click. And we\u2019ve improved the layout of states to give you more space to create and rearrange states. \\n\\n![Simulate view in the Stately Studio showing a video player machine. In the mini state of the machine, there\u2019s an image of a video player embedded in the description. There\u2019s a popover menu showing the simulation event log. There\u2019s a drawer icon in the top left showing where the tree view is hidden away. A breadcrumb in the header shows this machine is in the Stately team and Learn Stately studio project. The current tab in the top navigation is Simulate, but Edit is also available.](studio-1-0-simulate.png)\\n\\nWe\u2019ve also redesigned guarded transitions. They are now individual transitions connected with a dotted line and a diamond, which should feel natural to anyone that has worked with flowcharts. The separated transitions make it easier to read and arrange the conditions for each transition, allowing you to change the source and target states of individual transitions quickly.\\n\\n![Detail of a state machine in the Stately Studio featuring a guard in a rounded rectangle labeled with \u201cif\u201d and a diamound shape and 1, where a guard is a condition that is checked when a machine goes through an event, attached by dotted lines to its conditions which are also in rounded rectangles, numbered 2 and 3 in diamond labels. The first condition is labeled \u201celse if\u201d, the second condition is labeled \u201celse\u201d.](studio-1-0-guards.png)\\n\\nSimulation mode has also been redesigned, making it easier to see active states and transitions. There are many more improvements to the editor, but we\u2019ll leave them to you to discover.\\n\\n## More export options\\n\\nYou asked, and we listened (we\u2019re currently in the listening state). We\u2019ve added more export options beyond JSON, including JavaScript and TypeScript. We have plans to add more export options in the future, including:\\n\\n- Markdown\\n- CodeSandbox\\n- StackBlitz\\n- SVG, PNG, PDF\\n- And others \\n\\n[Request your favorite export options on our Canny roadmap](https://feedback.stately.ai).\\n\\n![The code popover panel showing over a video player machine. The Code options are JSON, JavaScript and TypeScript. The JavaScript option is selected, alongside a button to copy to clipboard. The code is shown in a text area below as JavaScript object describing the video player machine.](studio-1-0-export.png)\\n\\n## What\u2019s next?\\n\\nWe have so many things planned for the future:\\n\\n- A Stately GitHub integration for public and private repos\\n- XState parity: supporting all of [XState\u2019s features](https://github.com/statelyai/xstate) in the Stately Studio (we\u2019re almost there!)\\n- More export options and an embeddable editor\\n- Support for other graph-based tools, CI/CD pipelines and other workflow engines/DSLs\\n- Static graph analysis to help you catch logic errors ahead of time, which is difficult to do with plain code\\n- Many more examples, tutorials, videos, and documentation\\n\\n## Try out the Studio\\n\\nAll our new Pro features are available with a 30-day free trial you can try with your whole team. Upgrade today using the Upgrade button in [the Stately Studio](https://stately.ai/editor) or Sign in with GitHub to create a new account.\\n\\n![The Upgrade button has an orange border and is located in the top right of the Studio navigation, between the Export machine icon and the user avatar.](studio-1-0-upgrade.png)\\n\\nIf you\u2019re a Product Hunt fan, you can also [find Stately Studio 1.0 on Product Hunt](https://www.producthunt.com/posts/stately-studio-1-0).\\n\\nHave any questions? Join us in [our office hours live stream this Friday](https://www.youtube.com/watch?v=JcT7iJOPFjE), where we\u2019ll answer your questions and give you more demos."},{"id":"2022-09-14-whats-new-september-2022","metadata":{"permalink":"/statelyai-docs/blog/2022-09-14-whats-new-september-2022","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-09-14-whats-new-september-2022/index.mdx","source":"@site/blog/2022-09-14-whats-new-september-2022/index.mdx","title":"What\u2019s new in September 2022?","description":"The Stately team has got some huge features to share with you soon. Here\u2019s what we\u2019ve been working hard on through the summer!","date":"2022-09-14T00:00:00.000Z","formattedDate":"September 14, 2022","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"}],"readingTime":2.045,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"What\u2019s new in September 2022?","description":"The Stately team has got some huge features to share with you soon. Here\u2019s what we\u2019ve been working hard on through the summer!","tags":["stately","xstate","studio"],"authors":["laura"],"image":"/blog/2022-09-14-whats-new-september-2022.png","slug":"2022-09-14-whats-new-september-2022","date":"2022-09-14T00:00:00.000Z"},"prevItem":{"title":"Introducing Stately Studio 1.0","permalink":"/statelyai-docs/blog/2022-10-18-introducing-stately-studio-1-0"},"nextItem":{"title":"Building a resizable panel: Part 2","permalink":"/statelyai-docs/blog/2022-08-31-building-a-resizable-panel"}},"content":"The Stately team has got some huge features to share with you soon. We\u2019ve been working hard through the summer, which is why we\u2019re already halfway into September by the time I\u2019ve gotten around to this update post.\\n\\n\x3c!--truncate--\x3e\\n\\n## Human-readable timers\\n\\nWhen building after events, the convention is to specify the delay length in milliseconds, which is great for computers, but less easy for humans to understand. Now we display the timers in more human-friendly terms, including years, weeks, minutes, and seconds. You can still access the delay in milliseconds from the right panel when the event is selected.\\n\\n![An after event in the studio showing \u201cafter 3 mins\u201d as the event label and 180000 milliseconds in the delay field in the side panel.](human-readable-timers.png)\\n\\n## New version alerts in the Stately studio\\n\\nWe will now notify you in the browser when there is a new version of the studio. You\u2019ll likely have seen other platforms with similar notifications in the past. This alert is our way of getting you the latest changes to the studio without the risk of losing your work in progress.\\n\\n[Watch the office hours from August 26 for more on the new version alerts](https://youtu.be/HI8LbL5Yu74?t=150).\\n\\n## XState 4.33.6 patch release\\n\\nWe\u2019re all looking forward to the XState version 5 release. In the meantime, we\u2019ve got some migratory moves towards v5 in the form of the [XState 4.33.6 patch release](https://github.com/statelyai/xstate/releases/tag/xstate%404.33.6).\\n\\nReading state directly from `someService.state` is now deprecated, and we encourage you to use `someService.getSnapshot()` instead. `.getSnapshot()` will become the go-to way to read the current snapshot from any actor.\\n\\nWe\u2019re also deprecating the `send()` action in favor of the new `sendTo()` action. `sendTo(actorName, event)` allows you to send to a specific, named actor with the `actorName` string. `sendTo()` paves the way for more improved typings and making the terms and concepts we use easier to understand for folks new to XState.\\n\\n[Find out more in David\u2019s update on the 4.33.6 patch release from last week\u2019s office hours](https://youtu.be/H0uTQbaW9rk?t=115).\\n\\n## Have you attended our office hours?\\n\\nIf you want more regular updates from the Stately team, check out the [Stately office hours](https://youtube.com/playlist?list=PLvWgkXBB3dd6PXbSoctwDXjWX-AQrxhds). Every Friday at 10 AM ET, we live stream demos and discussions of our recent work at Stately and on XState. Live streaming on YouTube, Twitter, LinkedIn and Twitch, they\u2019re a real highlight of our week, and we\u2019re nearing our 50th edition \ud83c\udf89.\\n\\nBe sure to join us at [our next office hours this Friday](https://www.youtube.com/watch?v=37YVzAjhDHA)!"},{"id":"2022-08-31-building-a-resizable-panel","metadata":{"permalink":"/statelyai-docs/blog/2022-08-31-building-a-resizable-panel","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-08-31-building-a-resizable-panel/index.mdx","source":"@site/blog/2022-08-31-building-a-resizable-panel/index.mdx","title":"Building a resizable panel: Part 2","description":"Farzad and David add more features to their resizable panel using XState and React.","date":"2022-08-31T00:00:00.000Z","formattedDate":"August 31, 2022","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"stately stream","permalink":"/statelyai-docs/blog/tags/stately-stream"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"react","permalink":"/statelyai-docs/blog/tags/react"}],"readingTime":0.135,"hasTruncateMarker":false,"authors":[{"name":"Farzad Yousefzadeh"}],"frontMatter":{"title":"Building a resizable panel: Part 2","description":"Farzad and David add more features to their resizable panel using XState and React.","tags":["stately","stately stream","xstate","studio","react"],"authors":{"name":"Farzad Yousefzadeh"},"image":"/blog/2022-08-31-building-a-resizable-panel.png","slug":"2022-08-31-building-a-resizable-panel","date":"2022-08-31T00:00:00.000Z"},"prevItem":{"title":"What\u2019s new in September 2022?","permalink":"/statelyai-docs/blog/2022-09-14-whats-new-september-2022"},"nextItem":{"title":"Building a resizable panel","permalink":"/statelyai-docs/blog/2022-08-22-building-a-resizable-panel"}},"content":"Farzad and David add more features to their resizable panel using XState and React. [Watch Part 1](/blog/2022-08-23-building-a-resizable-panel/index.mdx).\\n\\n[Check out the accompanying code on Code Sandbox](https://codesandbox.io/s/resizable-panel-example-jjgkzl?file=/src/index.tsx).\\n\\n<YouTube id=\\"OoE9DykTDC8?\\"/>"},{"id":"2022-08-22-building-a-resizable-panel","metadata":{"permalink":"/statelyai-docs/blog/2022-08-22-building-a-resizable-panel","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-08-23-building-a-resizable-panel/index.mdx","source":"@site/blog/2022-08-23-building-a-resizable-panel/index.mdx","title":"Building a resizable panel","description":"Farzad and David use XState to build the logic for a resizable panel with React in an impromptu live stream.","date":"2022-08-22T00:00:00.000Z","formattedDate":"August 22, 2022","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"react","permalink":"/statelyai-docs/blog/tags/react"}],"readingTime":0.16,"hasTruncateMarker":false,"authors":[{"name":"Farzad Yousefzadeh","title":"Stately Team","url":"https://github.com/farskid","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/farzad.png","key":"farzad"}],"frontMatter":{"title":"Building a resizable panel","description":"Farzad and David use XState to build the logic for a resizable panel with React in an impromptu live stream.","tags":["stately","xstate","studio","react"],"authors":["farzad"],"image":"/blog/2022-08-22-building-a-resizable-panel.png","slug":"2022-08-22-building-a-resizable-panel","date":"2022-08-22T00:00:00.000Z"},"prevItem":{"title":"Building a resizable panel: Part 2","permalink":"/statelyai-docs/blog/2022-08-31-building-a-resizable-panel"},"nextItem":{"title":"\u201cGoodbye, useEffect\u201d at React Next conference","permalink":"/statelyai-docs/blog/2022-08-17-goodbye-use-effect-at-react-next"}},"content":"Farzad and David use XState to build the logic for a resizable panel with React in an impromptu live stream.\\n\\n[Check out the accompanying code on CodeSandbox](https://codesandbox.io/s/resizable-panel-example-jjgkzl?file=/src/index.tsx).\\n\\n[Watch part 2](/blog/2022-08-31-building-a-resizable-panel/index.mdx).\\n\\n<YouTube id=\\"Q6LdO3H77Lo?\\"/>"},{"id":"2022-08-17-goodbye-use-effect-at-react-next","metadata":{"permalink":"/statelyai-docs/blog/2022-08-17-goodbye-use-effect-at-react-next","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-08-17-goodbye-use-effect-at-react-next/index.mdx","source":"@site/blog/2022-08-17-goodbye-use-effect-at-react-next/index.mdx","title":"\u201cGoodbye, useEffect\u201d at React Next conference","description":"Create a state machine in seconds and edit using our visual editor.","date":"2022-08-17T00:00:00.000Z","formattedDate":"August 17, 2022","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"conference","permalink":"/statelyai-docs/blog/tags/conference"},{"label":"talk","permalink":"/statelyai-docs/blog/tags/talk"}],"readingTime":0.48,"hasTruncateMarker":false,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"\u201cGoodbye, useEffect\u201d at React Next conference","description":"Create a state machine in seconds and edit using our visual editor.","tags":["stately","xstate","studio","conference","talk"],"authors":["david"],"image":"/blog/2022-08-17-goodbye-use-effect-at-react-next.png","slug":"2022-08-17-goodbye-use-effect-at-react-next","date":"2022-08-17T00:00:00.000Z"},"prevItem":{"title":"Building a resizable panel","permalink":"/statelyai-docs/blog/2022-08-22-building-a-resizable-panel"},"nextItem":{"title":"XState + VS Code: xsm snippet","permalink":"/statelyai-docs/blog/2022-08-10-get-started-with-xstate-using-xsm-snippet"}},"content":"From fetching data to fighting with imperative APIs, side effects are one of the biggest sources of frustration in web app development. And let\u2019s be honest, putting everything in useEffect hooks doesn\u2019t help much. \\n\\nThankfully, there is a science (well, math) to side effects, formalized in state machines and statecharts, that can help us visually model and understand how to declaratively orchestrate effects, no matter how complex they get. In this talk, David ditches the `useEffect` hook and discovers how these computer science principles can be used to simplify effects in our React apps.\\n\\n<YouTube id=\\"RW9TVhmxu6Q?\\"/>"},{"id":"2022-08-10-get-started-with-xstate-using-xsm-snippet","metadata":{"permalink":"/statelyai-docs/blog/2022-08-10-get-started-with-xstate-using-xsm-snippet","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-08-10-get-started-with-xstate-using-xsm-snippet/index.mdx","source":"@site/blog/2022-08-10-get-started-with-xstate-using-xsm-snippet/index.mdx","title":"XState + VS Code: xsm snippet","description":"Create a state machine in seconds and edit using our visual editor.","date":"2022-08-10T00:00:00.000Z","formattedDate":"August 10, 2022","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"vscode extension","permalink":"/statelyai-docs/blog/tags/vscode-extension"},{"label":"snippet","permalink":"/statelyai-docs/blog/tags/snippet"}],"readingTime":0.26,"hasTruncateMarker":false,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"XState + VS Code: xsm snippet","description":"Create a state machine in seconds and edit using our visual editor.","tags":["stately","xstate","vscode extension","snippet"],"authors":["laura"],"image":"/blog/2022-08-10-get-started-with-xstate-using-xsm-snippet.png","slug":"2022-08-10-get-started-with-xstate-using-xsm-snippet","date":"2022-08-10T00:00:00.000Z"},"prevItem":{"title":"\u201cGoodbye, useEffect\u201d at React Next conference","permalink":"/statelyai-docs/blog/2022-08-17-goodbye-use-effect-at-react-next"},"nextItem":{"title":"What\u2019s new in August 2022?","permalink":"/statelyai-docs/blog/2022-08-03-whats-new-august-2022"}},"content":"Using the XState extension for VS Code, you can create a state machine in seconds and edit the machine using our visual editor. Use the `xsm` snippet to quickly generate the code required for your state machine, then drag and drop inside our visual editor to rapidly model your machine.\\n\\n<YouTube id=\\"Gk3mdlqadYM?\\"/>"},{"id":"2022-08-03-whats-new-august-2022","metadata":{"permalink":"/statelyai-docs/blog/2022-08-03-whats-new-august-2022","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-08-03-whats-new-august-2022/index.mdx","source":"@site/blog/2022-08-03-whats-new-august-2022/index.mdx","title":"What\u2019s new in August 2022?","description":"Get up and running faster with our XState VS Code extension and enjoy all the design details in the Stately studio experience.","date":"2022-08-05T00:00:00.000Z","formattedDate":"August 5, 2022","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"announcement","permalink":"/statelyai-docs/blog/tags/announcement"},{"label":"vscode extension","permalink":"/statelyai-docs/blog/tags/vscode-extension"},{"label":"studio","permalink":"/statelyai-docs/blog/tags/studio"},{"label":"survey","permalink":"/statelyai-docs/blog/tags/survey"}],"readingTime":4.145,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"What\u2019s new in August 2022?","description":"Get up and running faster with our XState VS Code extension and enjoy all the design details in the Stately studio experience.","tags":["stately","xstate","announcement","vscode extension","studio","survey"],"authors":["laura"],"image":"/blog/2022-08-03-whats-new-august-2022.png","slug":"2022-08-03-whats-new-august-2022","date":"2022-08-05T00:00:00.000Z"},"prevItem":{"title":"XState + VS Code: xsm snippet","permalink":"/statelyai-docs/blog/2022-08-10-get-started-with-xstate-using-xsm-snippet"},"nextItem":{"title":"\u201cJust Use Hooks\u201d: XState in React Components","permalink":"/statelyai-docs/blog/2022-07-18-just-use-hooks-xstate-in-react-components"}},"content":"## Updates to our VS Code extension\\n\\nOur [XState VS Code extension](https://marketplace.visualstudio.com/items?itemName=statelyai.stately-vscode) has now been installed 10k times! Install the extension yourself from inside VS Code or find the [XState extension on the Open VSX Registry](https://stately.ai/blog/2022/03/11/xstate-vscode-extension-now-available-on-the-open-vsx-registry) to enjoy the following new features.\\n\\n\x3c!--truncate--\x3e\\n\\n### `xsm` snippet\\n\\nWe want to make it fast and easy to use XState and the visual editor in your code. By adding the `xsm` snippet to our VS Code extension, we\u2019ve made it possible to go from nothing to a full-blown machine you can open in the visual editor in a few keystrokes.\\n\\nUse our new `xsm` snippet ([Anders says \u201cthink **X** **S**tate **M**achine\u201d](https://youtu.be/EkhWpJfVLDo?t=155)) with the latest version of the extension to insert a state machine template into your code, with the cursor ready for you to type the name of the machine. \\n\\n```js\\nimport { createMachine } from \'xstate\';\\nconst nameOfMachine = createMachine({\\n  id: \'nameOf\',\\n  initial: \'initialState\',\\n  states: {\\n    initialState: {},\\n  }\\n});\\n```\\n\\nJust give your machine a name, hit \u201cOpen visual editor,\u201d and you\u2019ll be able to continue creating your machine with the visual editor.\\n\\n![Statechart showing a no nodes selected state then an event of using cmd/ctrl + A transitioning to an all node selected state.](xsm-snippet.gif)\\n\\n### The editor now syncs with your VS Code theme\\n\\nYou can now set your light mode or dark mode preference for the visual editor inside the VS Code extension:\\n\\n- Auto: syncs to your VS Code preference\\n- Light: always uses light mode\\n- Dark: always uses dark mode\\n\\n![The XState: theme setting in VSCode is set to light and the visual editor is in light mode.](vscode-lightmode.png)\\n\\n![The XState: theme setting in VSCode is set to dark and the visual editor is in dark mode.](vscode-darkmode.png)\\n\\nIf the editor is open when you change the setting, you\u2019ll need to close and re-open the editor tab to view the change.\\n\\n### Initial support for non-VS Code editors\\n\\nIf you don\u2019t use VS Code, we haven\u2019t forgotten about you! We intend to support more code editors in the future and have recently taken the first step of making it easier to edit machine code using other code editors. Watch [Anders\u2019 demo using Webstorm](https://www.youtube.com/watch?v=EkhWpJfVLDo&t=252s) during last week\u2019s office hours to find out more.\\n\\n## Updates to Stately editor\\n\\nIf you haven\u2019t used the  [Stately editor](https://stately.ai/editor) in a while, you\u2019re in for a treat!\\n\\n### Canvas refinements\\n\\nWe\u2019ve made some small changes that have significantly changed how machines look and behave. Icons are now only used to distinguish the history states and final states, reducing the noise and increasing the readability of your machines.\\n\\n![State machine for editor improvements, starting in a July state, transitioning through an event of \u201cCanvas improvements go live\u201d with a description saying \u201cWe\'ve made many small improvements to the canvas in the last month.\u201d Ending in a parent state of August with a child state of \u201cMy machines are so easy to read!\u201d.](august-22-editor-improvements.png)\\n\\nThe transition line drawing algorithm has been improved further for straighter, more reasonable lines with fewer bends. The lines are now highlighted on hover, making them easier to select. We\u2019ll continue to improve the algorithm so that it\u2019s more intelligent about drawing even better lines.\\n\\nWe\u2019ve also removed the terminal squares at the end of the transition lines and put a little space between the transition lines and nodes. These subtle changes make the machines look less crowded, helping you focus more on your modeling.\\n\\n### Select all with the keyboard shortcut\\n\\nYou can now use the <kbd>cmd</kbd>/<kbd>ctrl</kbd> **+** <kbd>a</kbd> keyboard shortcut to select all nodes and transitions in the editor. This shortcut is so common that you\u2019ve probably tried to use it already\u2026 now the shortcut will work!\\n\\n![Statechart showing a no nodes selected state then an event of using cmd/ctrl + A transitioning to an all node selected state.](select-all-keyboard-shortcut.gif)\\n\\n## New privacy options\\n\\nWe now have a modal asking for your consent the next time you log into the Stately Studio. We are sending some non-personal activity data to Mixpanel to help us understand how you use our features, but we need your permission to connect this data to a hash of your user ID. Many tech companies won\u2019t ask for your explicit consent for similar activities. Still, at Stately, we want to use best practices regarding your privacy and be transparent about the minimal data we collect, how we use that data, and how we design for privacy by default. You can update your choices at any time in the studio settings.\\n\\n## Please give us feedback in our yearly survey\\n\\nSoon we\u2019ll be closing [the Stately 2022 survey](https://stately.ai/survey). Do you know someone who isn\u2019t using our tools but should be? Please get them to respond to our survey! We\u2019d love to understand what features folks need to start using Stately tools. And if you\u2019ve not responded yet, get your response in soon! All the questions are optional, and it will take just five minutes of your time."},{"id":"2022-07-18-just-use-hooks-xstate-in-react-components","metadata":{"permalink":"/statelyai-docs/blog/2022-07-18-just-use-hooks-xstate-in-react-components","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-07-18-just-use-hooks-xstate-in-react-components/index.mdx","source":"@site/blog/2022-07-18-just-use-hooks-xstate-in-react-components/index.mdx","title":"\u201cJust Use Hooks\u201d: XState in React Components","description":"XState can be easily added to React components by using custom machine hooks for greater encapsulation and reusability.","date":"2022-07-18T00:00:00.000Z","formattedDate":"July 18, 2022","tags":[{"label":"component","permalink":"/statelyai-docs/blog/tags/component"},{"label":"hook","permalink":"/statelyai-docs/blog/tags/hook"},{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"react","permalink":"/statelyai-docs/blog/tags/react"},{"label":"state machine","permalink":"/statelyai-docs/blog/tags/state-machine"},{"label":"prop","permalink":"/statelyai-docs/blog/tags/prop"}],"readingTime":9.36,"hasTruncateMarker":true,"authors":[{"name":"Kevin Maes","title":"Stately Team","url":"https://github.com/kevinmaes","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/kevin.png","key":"kevin"}],"frontMatter":{"title":"\u201cJust Use Hooks\u201d: XState in React Components","description":"XState can be easily added to React components by using custom machine hooks for greater encapsulation and reusability.","tags":["component","hook","stately","xstate","react","state machine","prop"],"authors":["kevin"],"image":"/blog/2022-07-18-just-use-hooks-xstate-in-react-components.png","slug":"2022-07-18-just-use-hooks-xstate-in-react-components","date":"2022-07-18T00:00:00.000Z"},"prevItem":{"title":"What\u2019s new in August 2022?","permalink":"/statelyai-docs/blog/2022-08-03-whats-new-august-2022"},"nextItem":{"title":"What\u2019s new in July 2022?","permalink":"/statelyai-docs/blog/2022-07-06-whats-new-july-2022"}},"content":"Are you a React developer using [XState](https://xstate.js.org/) to model your application logic? Perhaps you\u2019ve heard of XState but have been looking for an easy way to try it out in one of your projects. If so, then I\u2019d like to share with you a pattern I was introduced to when first diving into codebase at Stately, that of using **custom machine hooks**. This lightweight, reusable way to integrate XState into React components is a delight to work with and I think you might like it as much as I do!\\n\\n\x3c!--truncate--\x3e\\n\\n### Introduction\\n\\nIn this post I\u2019ll review the most common way to use the [`@xstate/react`](https://xstate.js.org/docs/packages/xstate-react/) library in a project. I\u2019ll then demonstrate how encapsulation and reuse of state machines can be achieved by using hooks in your components, with some examples. I\u2019ll also touch on the advantages and disadvantages to using this level of abstraction.\\n\\nFor more background, you can check out [\u201cJust Use Props\u201d: An opinionated guide to React and XState](https://stately.ai/blog/2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate) by Matt Pocock.\\n\\nAfter years of usage in the wild, and in response to confusion and frustration about hooks, the React Team has been putting a lot of effort into making the use of hooks clearer and simpler. Now is the perfect time to re-explore how hooks, when used effectively, can help make component creation easier.\\n\\n### XState in React components\\n\\nFor those of you who are already using XState with React, you\u2019re probably used to creating a machine using `createMachine()` and then passing that machine to the `useMachine` hook from within a component.\\n\\nHere is the code from the [Quick Start example](https://xstate.js.org/docs/packages/xstate-react/#quick-start) in the `@xstate/react` docs, where a `toggleMachine` ([view in the Editor](https://stately.ai/registry/editor/5e6286ca-5075-42da-9af8-99358530a0ac)) is created with `createMachine()` and then passed to `useMachine()` for use in a `Toggler` component.\\n\\n```tsx\\nimport { useMachine } from \\"@xstate/react\\";\\nimport { createMachine } from \\"xstate\\";\\n\\nconst toggleMachine = createMachine({\\n  id: \\"toggle\\",\\n  initial: \\"inactive\\",\\n  states: {\\n    inactive: {\\n      on: { TOGGLE: \\"active\\" },\\n    },\\n    active: {\\n      on: { TOGGLE: \\"inactive\\" },\\n    },\\n  },\\n});\\n\\nexport const Toggler = () => {\\n  const [state, send] = useMachine(toggleMachine);\\n\\n  return (\\n    <button onClick={() => send(\\"TOGGLE\\")}>\\n      {state.value === \\"inactive\\"\\n        ? \\"Click to activate\\"\\n        : \\"Active! Click to deactivate\\"}\\n    </button>\\n  );\\n};\\n```\\n\\nThis example shows how you can then evaluate `state.value` to render the corresponding UI for the toggle state and you can also call `send(\'TOGGLE\')` in a button\u2019s `onClick` handler to toggle the state.\\n\\nSimilarly, one could access other state methods and properties like `state.matches()`, `state.can()`, `state.hasTag()`, or even `state.context` to evaluate state and show the correct UI.\\n\\n### A custom machine hook\\n\\nBut what if your component really doesn\u2019t need access to all of those features when using a machine? That\u2019s where the custom machine hook comes into play. We can still create a machine and pass it to the `useMachine` hook but this can all be done inside of the custom hook.\\n\\nHere\u2019s an example of what that custom hook might look like, including a [React/TypeScript CodeSandbox version](https://codesandbox.io/s/usetogglemachine-example-1-lazy-machine-8zcbvs?file=/src/Toggler.tsx):\\n\\n```ts\\nimport { useMachine } from \\"@xstate/react\\";\\nimport { useEffect } from \\"react\\";\\nimport { createMachine } from \\"xstate\\";\\n\\nexport const useToggleMachine = (\\n  initialActive: boolean = false\\n): [boolean, () => void] => {\\n  const [state, send] = useMachine(() =>\\n    createMachine({\\n      id: \\"toggle\\",\\n      initial: initialActive ? \\"active\\" : \\"inactive\\",\\n      states: {\\n        inactive: {\\n          on: { TOGGLE: \\"active\\" },\\n        },\\n        active: {\\n          on: { TOGGLE: \\"inactive\\" },\\n        },\\n      },\\n    })\\n  );\\n\\n  const isActive = state.matches(\\"active\\");\\n  const toggle = () => send(\\"TOGGLE\\");\\n\\n  return [isActive, toggle];\\n};\\n```\\n\\n#### Why a hook?\\n\\nWhy might we opt for this extra layer of abstraction? Well, consider what we need to do in the example:\\n\\n1. Create the `toggleMachine`, including states and possible transitions.\\n2. Pass the machine to the `useMachine` hook.\\n3. Expose the most relevant pieces to our component.\\n\\nFrom this hook, we can expose a minimal interface to components. In fact, we don\u2019t even need to export the machine at all. By encapsulating the XState code, we allow components to focus on their core task, rendering UI as a function of data/props. Sweet!\\n\\nOur `useToggleMachine` hook now fully manages a toggle state for any component that uses it. This is now more resuable since a single component can create multiple instances of `useToggleMachine`. Similarly, multiple components can instantiate this hook one or more times to keep track of multiple, separate toggle states.\\n\\nRelated: If you\u2019re wondering about how to create a global machine hook then have a look at this [RFC for a Global Hooks API](https://github.com/statelyai/rfcs/pull/8).\\n\\nLet\u2019s dive deeper into a the details of this `useToggleMachine` hook.\\n\\n#### Hook params\\n\\nIf you recall, we initialized our machine to start out in its \u201cinactive\u201d state by specifying `initial: \'inactive\'` in the machines config object. But we\u2019re also receiving an `initialActive` value as the one and only argument passed into this hook. If that value is false or omitted, since it defaults to false, then the inital value will be in sync with the machine\u2019s default state.\\n\\nBut what if we want to start out with `initialActive` passed in as `true`? We need a way to immediately transiton our machine away from its own initial state to be synchronized with the incoming `initialActive` value.\\n\\nThe original version of this post included an example that used the infamous `useEffect` hook to dynamically establish the initial state, based on the `initialActive` prop passed into the hook.\\n\\n```ts\\n// This example is deprecated\\nuseEffect(() => {\\n  if (initialActive && state.matches(\\"inactive\\")) {\\n    send(\\"TOGGLE\\");\\n  }\\n}, [initialActive]);\\n```\\n\\nSome readers noted in their feedback that they prefer to avoid using the `useEffect` hook altogether for understandable reasons. The `state` really should be included in the dependency array to make the linter happy and using `useEffect` here feels generally awkward.\\n\\nInstead, I\'ve updated the example by wrapping the call to `createMachine` in a function passed to `useMachine`, utilizing a sort of [\\"lazily created machine\\"](https://xstate.js.org/docs/packages/xstate-react/#usemachine-machine-options).\\n\\n```ts\\nconst [state, send] = useMachine(() =>\\n  createMachine({\\n    id: \\"toggle\\",\\n    initial: initialActive ? \\"active\\" : \\"inactive\\",\\n    states: {\\n      inactive: {\\n        on: { TOGGLE: \\"active\\" },\\n      },\\n      active: {\\n        on: { TOGGLE: \\"inactive\\" },\\n      },\\n    },\\n  })\\n);\\n```\\n\\nThis gives our machine config object access to the incoming `initialActive` prop so that we can dynamically assign the machine\'s initial value. It\'s a subtle but significant change.\\n\\n```ts\\ninitial: initialActive ? \\"active\\" : \\"inactive\\",\\n```\\n\\nYou can read about alternative methods and proposals in our [RFC for input](https://github.com/statelyai/rfcs/pull/9).\\n\\n#### Return values\\n\\nWe\u2019ve looked at the input param for `useToggleMachine` so now let\u2019s look at its return values.\\n\\n```ts\\nconst isActive = state.matches(\\"active\\");\\nconst toggle = () => send(\\"TOGGLE\\");\\n\\nreturn [isActive, toggle];\\n```\\n\\nWe have a boolean `isActive` value which is derived from the state of the machine, the raison d\u2019\xeatre of this hook. This is a simple mapping of one of two machine states to a boolean in this example. But you can imagine how states of a more complex machine might be derived from evaluating matches on the current state, possible next events, and even tags. Vist the [docs on state methods](https://xstate.js.org/docs/guides/states.html#state-methods-and-properties) for details.\\n\\nWe also have a `toggle` function which enables us to toggle the state of the machine. It\u2019s an anonymous function wrapping the call to XState\u2019s `send(\'TOGGLE\')`.\\n\\nOur hook returns an array of just these values much like `useState` or `useMachine` would and they should be destructured in the component.\\n\\n### Using the hook in a component\\n\\nWhat does this look like for the `Toggler` component to now use our `useToggleMachine` hook? It looks pretty good!\\n\\n```tsx\\nconst Toggler = () => {\\n  const [isActive, toggle] = useToggleMachine(false); // Or pass true.\\n\\n  return <button onClick={toggle}>Click me ({isActive ? \\"\u2705\\" : \\"\u274c\\"})</button>;\\n};\\n```\\n\\nIn that example, we use the value of `isActive` to specify the button\u2019s text but it could easily be used for other purposes in this component or as a prop to pass down to child components.\\n\\nFor the `Toggler` component\u2019s `onChange` handler, we set its value to be the `toggle` function. Since that is already wrapping XState\u2019s `send(\'TOGGLE\')` call, we don\u2019t even need to use another anonymous function. It all just works as is, in a tidy functional style.\\n\\n### Reusability\\n\\nAs you can see, this pattern separates our normal React component code from our state machine implementation which keeps files neat and focused. Hooks make for more reusable machines across many components and in different situations. A `useToggleMachine` may be used to represent a toggle switch in one component but it might also represent the showing or hiding of UI or something else in another component.\\n\\n```ts\\nconst [isAnimationEnabled, toggleAnimation] = useToggleMachine(false);\\n\\nconst [isDarkMode, toggleLightDarkMode] = useToggleMachine(true);\\n```\\n\\nIn a future blog post we can explore ways to compose machine hooks to build up more sophisticated machines from reusable parts, not unlike how small reusable functions are typically composed to create larger functions.\\n\\n### Team specialization\\n\\nThis separation of code also means that **team members who are more familiar with XState can create and manage machine hooks** with autonomy. Meanwhile, their teammates, who may be less familiar with state machines or with XState, can still rapidly churn out UI components that will, nevertheless, be backed by the power of state machines. This greatly **facilitates incremental adoption**. You can begin using XState in small bits and pieces right away, neither needing to design your entire application as a large statechart nor rewrite everything to fit that way of working.\\n\\n### Caveats\\n\\nIf you only have one component and all you need to do is toggle a boolean flag, then creating a machine and a hook on top of that may feel like unnecessary ceremony. Splitting code into two different files has the usual tradeoffs. Also, understanding how changing the `initialActive` prop works with the state machine\u2019s own internal state can be a bit tricky although we\u2019d still need to transition the machine to a non-initial state, in a similar way, from within a component that calls `useMachine()`.\\n\\n### Summary\\n\\nWe saw a baseline example of how components traditionally employ the `useMachine` hook from `XState/react` with a [complete example](https://codesandbox.io/s/usetogglemachine-example-1-lazy-machine-8zcbvs?file=/src/Toggler.tsx) of how to separate the machine into its own custom `useToggleMachine` hook for comparison. We covered implementation details for this hook, as well as how to wire it up in a React component. I\u2019ve offered several benefits that I believe make this abstraction worthwhile like incremental adoption and future feature scaling.\\n\\n### Next steps\\n\\nAgain, the toggle example is a small yet usable example for creating a machine with XState and wrapping it in a hook. But we can take this even further. What about **combining multiple machines** into a single hook? How about **overriding machine implmentation details** via hooks on a per use basis? I\u2019ll be exploring these patterns and more in some upcoming blog posts so stay tuned!\\n\\nIn the meantime, if you like using XState then keep creating your own machines and try wrapping those in custom hooks to use in your components. Additonally, you can build upon machine/hook examples in these posts for your own purposes and even find machines in the [Discovery section of the Stately Studio](https://stately.ai/registry/discover) and turn those into hooks. Whatever path you take, I hope you **get hooked on using XState** to make your UI more robust and more reusable!"},{"id":"2022-07-06-whats-new-july-2022","metadata":{"permalink":"/statelyai-docs/blog/2022-07-06-whats-new-july-2022","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-07-06-whats-new-july-2022/index.mdx","source":"@site/blog/2022-07-06-whats-new-july-2022/index.mdx","title":"What\u2019s new in July 2022?","description":"Search for machines, pinch to zoom, nest typegen files and more! Find out the latest features in the Stately editor and XState VS Code extension.","date":"2022-07-06T00:00:00.000Z","formattedDate":"July 6, 2022","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"announcement","permalink":"/statelyai-docs/blog/tags/announcement"},{"label":"editor","permalink":"/statelyai-docs/blog/tags/editor"},{"label":"search","permalink":"/statelyai-docs/blog/tags/search"},{"label":"typegen","permalink":"/statelyai-docs/blog/tags/typegen"},{"label":"survey","permalink":"/statelyai-docs/blog/tags/survey"},{"label":"roadmap","permalink":"/statelyai-docs/blog/tags/roadmap"}],"readingTime":2.96,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"What\u2019s new in July 2022?","description":"Search for machines, pinch to zoom, nest typegen files and more! Find out the latest features in the Stately editor and XState VS Code extension.","tags":["stately","xstate","announcement","editor","search","typegen","survey","roadmap"],"authors":["laura"],"image":"/blog/2022-07-06-whats-new-july-2022.png","slug":"2022-07-06-whats-new-july-2022","date":"2022-07-06T00:00:00.000Z"},"prevItem":{"title":"\u201cJust Use Hooks\u201d: XState in React Components","permalink":"/statelyai-docs/blog/2022-07-18-just-use-hooks-xstate-in-react-components"},"nextItem":{"title":"What is XState used for?","permalink":"/statelyai-docs/blog/2022-06-21-what-is-xstate-used-for"}},"content":"On top of our usual minor improvements and bug fixes, we\u2019ve got great new features to share with you in July!\\n\\n\x3c!--truncate--\x3e\\n\\n## Search for machines\\n\\nThanks to Anders\u2019 hard work, the [Discover page](https://stately.ai/registry/discover) now has a fully-featured search where you can find and filter through all the machines our community has made.\\n\\nThe filters can limit your search by source, features and number of states.\\n\\n![The discover page showing 101 search results for the \u201cauth\u201d keyword, each with the word \u201cauth\u201d highlighted in the title. The search is filtered by the Editor source, and also has the option to filter by features entry actions, exit actions, final states, guards, invoke, and parallel states.](2022-07-06-search.png)\\n\\nWe have more planned for search in the future that we can\u2019t wait to share with you.\\n\\n## Pinch to zoom\\n\\nTrackpad fans rejoice; you can now pinch to zoom in and out to navigate the editor\u2019s canvas by touch. This feature was a popular request at a workshop Matt gave, so he implemented it the following day! If you prefer a keyboard or mouse, you can also use the zoom in and out buttons or the **+** and **-** keyboard shortcuts.\\n\\n## Nesting typegen files\\n\\nYou\u2019re missing out if you\u2019re not using [our XState VS Code extension](https://marketplace.visualstudio.com/items?itemName=statelyai.stately-vscode) yet! After a top tip from our friend Erik Rasmussen, Anders added the feature to our VS Code extension. Read [Anders\u2019 blog post on nesting XState typegen files](/blog/nesting-typegen-files) for more details.\\n\\n## Labels on quick action buttons\\n\\nThe quick action buttons for adding states and guarded transitions are now labeled with **+ State** and **+ Guard** to make the buttons\u2019 function clearer. Improvements that make the editor\u2019s interface easier to understand and use are a priority for us, and we appreciate any feedback you have for improvements that would benefit you.\\n\\n![A state with quick action buttons labeled \u201c+ state\u201d and \u201cx\u201d to delete the state. And an event with quick action buttons labeled \u201c+ guard\u201c and \u201cx\u201d to delete the event.](2022-07-06-labeled-buttons.png)\\n\\n## More upcoming features\\n\\nWe\u2019ve got many more features coming up. Watch [our office hours from last week](https://www.youtube.com/watch?v=4v_M3HcZc3U) and [office hours from June 24](https://www.youtube.com/watch?v=qmbeYvcA3Ks) for demos of [smoother transition lines](https://www.youtube.com/watch?v=qmbeYvcA3Ks&t=530s), [fit to content on initial render](https://www.youtube.com/watch?v=4v_M3HcZc3U&t=1214s) and [parity between XState and the Stately editor](https://www.youtube.com/watch?v=4v_M3HcZc3U&t=208s).\\n\\n## Suggest features and help us prioritize our roadmap\\n\\nWe\u2019ve also started using Canny to collect your feedback and help us prioritize planned features in the last month. If there\u2019s anything you want from XState or our Stately tools, please create a post or [upvote and give feedback on proposed features](https://feedback.stately.ai).\\n\\nVisit [our Canny roadmap](https://feedback.stately.ai) to make feature requests, submit feedback, view the roadmap and vote on features.\\n\\n![The Stately roadmap showing options to give feedback on the Editor, XState, Documentation, Workflows, Devtools and Registry, as well as a roadmap showing Planned, In Progress and Complete features](2022-07-06-canny.png)\\n\\n## New videos on our YouTube channel\\n\\nMatt has made five great videos for [our YouTube channel](https://www.youtube.com/statelyai) to help you learn about using XState. Join our 1000+ subscribers and find out more about:\\n\\n- [How XState scales to ANY requirement](https://www.youtube.com/watch?v=AQHpXDo_S1k)\\n- [XState in the backend](https://www.youtube.com/watch?v=qqyQGEjWSAw)\\n- [Complex forms in XState & React](https://www.youtube.com/watch?v=Xa0H-vf2VuQ)\\n- [Is XState good with TypeScript?](https://www.youtube.com/watch?v=EIi6CV4Bc_Q)\\n- [How to decide between useState, useReducer and XState](https://www.youtube.com/watch?v=FrNXCJa5FLs)\\n\\n## Please give us feedback in our yearly survey\\n\\nAnd finally, [the Stately 2022 survey](https://stately.ai/survey) is out, and we would love you to add your response to help us make our tools work for you. All the questions are optional, and it will take just five minutes of your time."},{"id":"2022-06-21-what-is-xstate-used-for","metadata":{"permalink":"/statelyai-docs/blog/2022-06-21-what-is-xstate-used-for","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-06-20-what-is-xstate-used-for/index.mdx","source":"@site/blog/2022-06-20-what-is-xstate-used-for/index.mdx","title":"What is XState used for?","description":"XState can be used wherever JavaScript runs, whether on the backend or frontend. Because the code it creates can be visualized, it\u2019s great at handling complex use cases.","date":"2022-06-21T00:00:00.000Z","formattedDate":"June 21, 2022","tags":[{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"react","permalink":"/statelyai-docs/blog/tags/react"},{"label":"node","permalink":"/statelyai-docs/blog/tags/node"},{"label":"vue","permalink":"/statelyai-docs/blog/tags/vue"},{"label":"redux","permalink":"/statelyai-docs/blog/tags/redux"}],"readingTime":2.99,"hasTruncateMarker":true,"authors":[{"name":"Matt Pocock","title":"Stately Team","url":"https://github.com/mattpocock","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png","key":"matt"}],"frontMatter":{"title":"What is XState used for?","description":"XState can be used wherever JavaScript runs, whether on the backend or frontend. Because the code it creates can be visualized, it\u2019s great at handling complex use cases.","tags":["xstate","react","node","vue","redux"],"authors":["matt"],"image":"/blog/2022-06-21-what-is-xstate-used-for.png","slug":"2022-06-21-what-is-xstate-used-for","date":"2022-06-21T00:00:00.000Z"},"prevItem":{"title":"What\u2019s new in July 2022?","permalink":"/statelyai-docs/blog/2022-07-06-whats-new-july-2022"},"nextItem":{"title":"Nesting XState typegen files","permalink":"/statelyai-docs/blog/nesting-typegen-files"}},"content":"XState can be used wherever JavaScript runs, whether on the backend or frontend. Because the code it creates can be visualized, it\u2019s great at handling complex use cases - being able to see what a complex piece of code does can be extremely useful.\\n\\nLet\u2019s look at each use case one-by-one.\\n\\n\x3c!--truncate--\x3e\\n\\n## On the web\\n\\nXState can be used in any frontend application to manage state. It has first-class integrations for [React](https://reactjs.org/), [Vue](https://vuejs.org/), [Svelte](https://svelte.dev/), as well as an upcoming [Solid](https://www.solidjs.com/) integration. It also works well in [Angular](https://angularjs.org/) without any integrations needed.\\n\\nYou can try it in a Vanilla JS app by running this simple piece of code:\\n\\n```ts\\nimport { createMachine, interpret } from \\"xstate\\";\\n\\nconst machine = createMachine({\\n  initial: \\"waiting\\",\\n  states: {\\n    waiting: {\\n      after: {\\n        2000: \\"alerted\\",\\n      },\\n    },\\n    alerted: {\\n      entry: () => {\\n        alert(\\"Hello from the state machine!\\");\\n      },\\n    },\\n  },\\n});\\n\\ninterpret(machine).start();\\n```\\n\\nIn this example, the machine will wait for 2 seconds, then call `alert()` to let you know it\u2019s alive.\\n\\nThere are plenty of ways XState can be used on the frontend - let\u2019s talk about two of the most common patterns:\\n\\n### Complex components\\n\\nMost frontend apps split their code into components - individual pieces which can be reused across the app. If need to build a complex component, you can use XState to co-ordinate it.\\n\\nA great example of this is the library [Zag.js](https://zagjs.com/components/react/accordion), which is using XState-style syntax and statecharts to build reusable components across frameworks. You can even [see them visualized](https://state-machine-viz.vercel.app/accordion) using Stately\u2019s tools.\\n\\n### Global state\\n\\nYou can also use XState to manage global state in your apps. A common pattern is the [Flux](https://facebook.github.io/flux/docs/in-depth-overview/) architecture, where you dispatch events to a single top-level store. Parts of your app can subscribe to updates from that store, using [selectors](https://redux.js.org/usage/deriving-data-selectors).\\n\\nXState can **replace global state managers like [Redux](https://redux.js.org/) or [Vuex](https://vuex.vuejs.org/)**, with one major benefit - your global state can be visualised and [visually edited](https://stately.ai/editor). XState gives you the ability to create a global store, dispatch events to it, and subscribe to only the pieces that matter. See our specific instructions in [React](https://xstate.js.org/docs/recipes/react.html#global-state-react-context) for more info.\\n\\n## Native/extensions\\n\\nXState is also extremely useful in [React Native](https://reactnative.dev/) or [Electron](https://www.electronjs.org/) apps, Browser extensions and IDE extensions. Since XState doesn\u2019t use any browser API\u2019s, you can use it anywhere JavaScript runs.\\n\\nFor instance, we use XState at Stately to [co-ordinate our VSCode extension](https://github.com/statelyai/xstate-tools/blob/6a91d6a5cdd4cf73c882175a2ad5fbe3b2a9910d/apps/extension/client/src/editorWebviewScript.ts#L90). [Centered](https://www.centered.app/) uses XState extensively in their Electron and React Native apps to co-ordinate timers, control app updates and handle complex user interactions.\\n\\n## Backend\\n\\nYou can use XState in [Node.js](https://nodejs.org/en/) or [Deno](https://deno.land/) to build [serverless functions](https://vercel.com/docs/concepts/functions/serverless-functions) or persistent servers.\\n\\nFor lambda functions, XState exposes a function called [`waitFor`](https://xstate.js.org/docs/guides/interpretation.html#waitfor), which allows you to wait for a state machine to be in a certain state. This allows you to use XState inside `async` functions with ease.\\n\\nTo learn more about XState in the backend, see our [recent video](https://www.youtube.com/watch?v=qqyQGEjWSAw) introducing the topic.\\n\\n## Scripting and CLIs\\n\\nXState can be used when running scripts or CLIs to co-ordinate long-running processes.\\n\\nThe most famous example of this in the wild is the frontend framework [Gatsby](https://www.gatsbyjs.com/). They use XState in their build process and development server to co-ordinate file-system changes and parallelize multiple processes. This means their entire build system is visualisable - an incredibly boon for such a complex process.\\n\\n## Summary\\n\\nXState works anywhere JS runs - and folks are using it in the wild for _all sorts_ of use cases. Any time you\u2019re building something that feels remotely complex, you can use XState to simplify your code and enable powerful visual tooling."},{"id":"nesting-typegen-files","metadata":{"permalink":"/statelyai-docs/blog/nesting-typegen-files","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-06-13-nesting-typegen-files/index.mdx","source":"@site/blog/2022-06-13-nesting-typegen-files/index.mdx","title":"Nesting XState typegen files","description":"What is file nesting in VS Code and how to enable it for XState\'s generated type files.","date":"2022-06-13T00:00:00.000Z","formattedDate":"June 13, 2022","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"extension","permalink":"/statelyai-docs/blog/tags/extension"},{"label":"open source","permalink":"/statelyai-docs/blog/tags/open-source"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"vscode","permalink":"/statelyai-docs/blog/tags/vscode"}],"readingTime":1.52,"hasTruncateMarker":true,"authors":[{"name":"Anders Bech Mellson","title":"Stately Team","url":"https://github.com/mellson","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/anders.png","key":"anders"}],"frontMatter":{"title":"Nesting XState typegen files","description":"What is file nesting in VS Code and how to enable it for XState\'s generated type files.","tags":["stately","extension","open source","xstate","vscode"],"authors":["anders"],"image":"/blog/2022-06-13-nesting-typegen-files.png","slug":"nesting-typegen-files","date":"2022-06-13T00:00:00.000Z"},"prevItem":{"title":"What is XState used for?","permalink":"/statelyai-docs/blog/2022-06-21-what-is-xstate-used-for"},"nextItem":{"title":"What\u2019s new in June 2022?","permalink":"/statelyai-docs/blog/2022-06-07-whats-new-june-2022"}},"content":"Our latest update to the [XState VS Code extension](https://marketplace.visualstudio.com/items?itemName=statelyai.stately-vscode) has made it easy to enable file nesting for typegen files. But what is file nesting?\\n\\n\x3c!--truncate--\x3e\\n\\n## Explorer file nesting\\n\\n[VS Code introduced file nesting](https://code.visualstudio.com/updates/v1_67#_explorer-file-nesting) in version 1.67 back in April of 2022. This feature is elegant as it allows you to group related files in the explorer view of VS Code.\\n\\nOur friend Erik Rasmussen quickly found this feature works well with the generated type files for XState. Thanks to Erik for his great idea!\\n\\n<Tweet id=\\"1522611081528573956\\" />\\n\\n## Show me\\n\\nThe image below shows the explorer in VS Code without file nesting enabled; you have a machine source file alongside a generated type file for that machine.\\n\\n![The source file in the VS Code explorer called coolMachine.ts is listed above the typegen file called coolMachine.typegen.ts.](without-typegen.png)\\n\\nAfter enabling file nesting for typegen files, VS Code explorer allows you to nest and collapse the generated file under the source file.\\n\\n![Pressing the arrow icon toggle alongside the source file toggles the nesting of the generated type file.](with-typegen.gif)\\n\\n### Enable nesting\\n\\nIf you\u2019re using our VS Code extension and haven\u2019t manually enabled file nesting for typegen files, you will see a helper prompt allowing you to enable file nesting with a click.\\nThe prompt will show when you open a file with a machine.\\nIf you miss the prompt, you can enable or disable file nesting as described in the next section.\\n\\n### Disable nesting\\n\\nYou can disable, or enable, the file nesting by using the `Xstate: Nest Typegen Files` toggle in your VS Code settings.\\n![The Extensions settings view in VS Code has XState settings including the option to enable nesting the generated typegen files.](xstate-vscode-settings.png)\\n\\nPS: If you\u2019re unsure what typegen is in XState, [read this post where we introduced TypeScript typegen for XState](/blog/2022-01-27-introducing-typegen/index.mdx)."},{"id":"2022-06-07-whats-new-june-2022","metadata":{"permalink":"/statelyai-docs/blog/2022-06-07-whats-new-june-2022","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-06-07-whats-new-june-2022/index.mdx","source":"@site/blog/2022-06-07-whats-new-june-2022/index.mdx","title":"What\u2019s new in June 2022?","description":"Updates to XState, @xstate/test and the Stately editor in the last month.","date":"2022-06-07T00:00:00.000Z","formattedDate":"June 7, 2022","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"announcement","permalink":"/statelyai-docs/blog/tags/announcement"},{"label":"release","permalink":"/statelyai-docs/blog/tags/release"},{"label":"lightmode","permalink":"/statelyai-docs/blog/tags/lightmode"},{"label":"xstate test","permalink":"/statelyai-docs/blog/tags/xstate-test"}],"readingTime":1.39,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"What\u2019s new in June 2022?","description":"Updates to XState, @xstate/test and the Stately editor in the last month.","tags":["stately","xstate","announcement","release","lightmode","xstate test"],"authors":["laura"],"image":"/blog/2022-06-07-whats-new-june-2022.png","slug":"2022-06-07-whats-new-june-2022","date":"2022-06-07T00:00:00.000Z"},"prevItem":{"title":"Nesting XState typegen files","permalink":"/statelyai-docs/blog/nesting-typegen-files"},"nextItem":{"title":"What\u2019s new in May 2022?","permalink":"/statelyai-docs/blog/2022-05-03-whats-new-may-2022"}},"content":"We\u2019ve had a busy month and have plenty to share with you this June!\\n\\n\x3c!--truncate--\x3e\\n\\n## Another Stately update\\n\\nIn May, we welcomed three new people to the Stately team. Kevin Maes and Anders Mellson join us as engineers, and Nick Perich as our product designer. Watch all three of them introduce themselves in [our office hours live stream from May 20](https://youtu.be/4WwaSZ-ciRI?t=127).\\n\\n## XState Test v1 alpha\\n\\nLast week we released an alpha version of the XState Test package.\\n\\n<Tweet id=\\"1531250605313892352\\" />\\n\\n- Read more in the [model-based testing section in our alpha docs](https://graph-docs.vercel.app/model-based-testing/intro).\\n- Find the [XState test tag release notes on GitHub](https://github.com/statelyai/xstate/releases/tag/%40xstate%2Ftest%401.0.0-alpha.0).\\n- [Watch the video above on Twitter](https://twitter.com/statelyai/status/1531250605313892352).\\n\\n## Light mode in the Stately visual editor\\n\\nNick and Anders got straight to work in their first week at Stately, creating light mode for the visual editor. We will keep improving both light mode and dark mode in the future, but we thought the initial designs were too good not to share with everyone!\\n\\n![A dark mode light mode state machine in the Stately editor show in light mode.](light-mode.png)\\n\\nToggle \u201cSwitch to light mode\u201d in the editor\u2019s menu to view the editor in light mode. Toggle \u201cSwitch to dark mode\u201d to switch back to dark mode.\\n\\n![A dark mode light mode state machine in the Stately editor show in dark mode.](dark-mode.png)\\n\\n## And there\u2019s more to come!\\n\\nWant to know more about what we\u2019ve got planned? [Check out our Roadmap](https://xstate.js.org/docs/roadmap/). Got any feedback or want to suggest features? [Share your thoughts in the XState discussions](https://github.com/statelyai/xstate/discussions).\\n\\nWe\u2019re also looking for your feedback on XState snippets, errors in XState, and more in our [Stately RFCs (Requests for comments)](https://github.com/statelyai/rfcs)."},{"id":"2022-05-03-whats-new-may-2022","metadata":{"permalink":"/statelyai-docs/blog/2022-05-03-whats-new-may-2022","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-05-03-whats-new-may-2022/index.mdx","source":"@site/blog/2022-05-03-whats-new-may-2022/index.mdx","title":"What\u2019s new in May 2022?","description":"Updates to XState, @xstate/react and @xstate/fsm in the last month.","date":"2022-05-03T00:00:00.000Z","formattedDate":"May 3, 2022","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"announcement","permalink":"/statelyai-docs/blog/tags/announcement"},{"label":"release","permalink":"/statelyai-docs/blog/tags/release"}],"readingTime":2.07,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"What\u2019s new in May 2022?","description":"Updates to XState, @xstate/react and @xstate/fsm in the last month.","tags":["stately","xstate","announcement","release"],"authors":["laura"],"image":"/blog/2022-05-03-whats-new-may-2022.png","slug":"2022-05-03-whats-new-may-2022","date":"2022-05-03T00:00:00.000Z"},"prevItem":{"title":"What\u2019s new in June 2022?","permalink":"/statelyai-docs/blog/2022-06-07-whats-new-june-2022"},"nextItem":{"title":"Building a video player with XState and Stately tools","permalink":"/statelyai-docs/blog/2022/04/05/building-a-video-player"}},"content":"What\u2019s new to XState and Stately for May 2022?\\n\\n\x3c!--truncate--\x3e\\n\\n## Updates in XState\\n\\nWith a few updates to @xstate/react and @xstate/fsm last month, our headline release was the `waitFor()` helper function.\\n\\nRead all the release notes and patch notes in the [XState GitHub repository releases](https://github.com/statelyai/xstate/releases).\\n\\n### `waitFor()`\\n\\nThe new `waitFor(...)` helper function asynchronously waits for an actor\u2019s emitted value to satisfy a predicate before a timeout.\\n\\nExample usage:\\n\\n```ts\\nimport { waitFor } from \'xstate/lib/waitFor\';\\n\\n// ...\\nconst loginService = interpret(loginMachine).start();\\n\\nconst loggedInState = await waitFor(loginService, state =>\\n  state.hasTag(\'loggedIn\')\\n);\\n\\nloggedInState.hasTag(\'loggedIn\'); // true\\n```\\n\\n### Updates in the @xstate/react package\\n\\nThe @xstate/react package contains utilities for using XState with React. Find out more in the [@xstate/react package readme](https://github.com/statelyai/xstate/tree/main/packages/xstate-react).\\n\\n#### React 18\\n\\nThe @xstate/react package now accepts React 18 as a peer dependency, and we rewrote the implementation to use the `use-sync-external-store` package. The package uses a shim to keep compatibility with older versions of React, so there is no need to worry if you haven\u2019t upgraded yet.\\n\\n#### Subscribing to stopped interpreters\\n\\nSubscribing to a stopped interpreter will now always immediately emit the interpreter\u2019s state and call a completion callback.\\n\\n### `asEffect` and `asLayoutEffect` removed\\n\\nWe have removed the `asEffect` and `asLayoutEffect` action creators. These action creators didn\u2019t fit the React model well and had the potential to cause issues as their existence suggested that they might be easy to use.\\n\\nIf you want to execute actions at those exact times, you can either make a call directly from those effects or send events to the machine from those effects and execute explicit actions in response to said events.\\n\\n### `useMachine` and `useService` with @xstate/fsm \\n\\nWe changed the signatures of `useMachine` and `useService` integrating with @xstate/fsm to match their signatures with their related hooks integrating with XState. Both now only accept a single generic. `useMachine` accepts `TMachine`, and `useService` accepts `TService`.\\n\\n### Updates in the @xstate/fsm package\\n\\n@xstate/fsm is a minimal, 1kb implementation of XState for finite state machines. Find out more in the [@xstate/fsm package readme](https://github.com/statelyai/xstate/tree/main/packages/xstate-fsm).\\n\\n#### `.start()`\\n\\nWhen you call .start() without any argument, it now always starts from the machine\u2019s initial state, matching the behavior of XState itself.\\n\\n## More coming soon!\\n\\nIf you want to know more about what we\u2019ve got planned, you can [check out our Roadmap](https://xstate.js.org/docs/roadmap/). Got any feedback, or want to suggest features? [Share your thoughts in the XState discussions](https://github.com/statelyai/xstate/discussions).\\n\\nWe\u2019re also looking for your feedback on specific ideas in our [Stately RFCs (Requests for comment)](https://github.com/statelyai/rfcs)."},{"id":"/2022/04/05/building-a-video-player","metadata":{"permalink":"/statelyai-docs/blog/2022/04/05/building-a-video-player","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-04-05-building-a-video-player/index.mdx","source":"@site/blog/2022-04-05-building-a-video-player/index.mdx","title":"Building a video player with XState and Stately tools","description":"A few weeks ago we uploaded a new video to the Stately YouTube channel showing how you can build basic video player functionality using XState and Stately tools.","date":"2022-04-05T00:00:00.000Z","formattedDate":"April 5, 2022","tags":[{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"modeling","permalink":"/statelyai-docs/blog/tags/modeling"},{"label":"tutorial","permalink":"/statelyai-docs/blog/tags/tutorial"}],"readingTime":0.63,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Building a video player with XState and Stately tools","description":"A few weeks ago we uploaded a new video to the Stately YouTube channel showing how you can build basic video player functionality using XState and Stately tools.","tags":["xstate","modeling","tutorial"],"authors":["laura"],"date":"2022-04-05T00:00:00.000Z","slug":"/2022/04/05/building-a-video-player","image":"/blog//2022/04/05/building-a-video-player.png"},"prevItem":{"title":"What\u2019s new in May 2022?","permalink":"/statelyai-docs/blog/2022-05-03-whats-new-may-2022"},"nextItem":{"title":"Introducing the new Stately Roadmap","permalink":"/statelyai-docs/blog/2022-03-29-introducing-the-new-stately-roadmap"}},"content":"A few weeks ago we uploaded a new video to the [Stately YouTube channel](http://youtube.com/c/statelyai) showing how you can build basic video player functionality using XState and Stately tools. You can watch the video below or [use the chapter links](/#video-chapters) to jump to the chapter you want to watch.\\n\\n<YouTube id=\\"3wZBSeLxVEw?\\"/>\\n\\n\x3c!--truncate--\x3e\\n\\n## Video chapters\\n\\n- [0:00](https://www.youtube.com/watch?v=3wZBSeLxVEw&t=0s) What we want to build\\n- [2:52](https://www.youtube.com/watch?v=3wZBSeLxVEw&t=172s) Modeling the video player\\n- [9:43](https://www.youtube.com/watch?v=3wZBSeLxVEw&t=583s) Implementing the state machine\\n- [19:49](https://www.youtube.com/watch?v=3wZBSeLxVEw&t=1189s) Modeling with the visual editor\\n- [22:10](https://www.youtube.com/watch?v=3wZBSeLxVEw&t=1330s) Editing the state machine\\n- [25:05](https://www.youtube.com/watch?v=3wZBSeLxVEw&t=1505s) Editing the state machine in the visual editor\\n\\n## We want your suggestions and feedback\\n\\nPlease let us know what we should demo for you! Share your feedback or suggestions in [our GitHub Discussions](https://github.com/statelyai/xstate/discussions), [our Discord](https://discord.gg/xstate) or [Twitter](https://twitter.com/statelyai)."},{"id":"2022-03-29-introducing-the-new-stately-roadmap","metadata":{"permalink":"/statelyai-docs/blog/2022-03-29-introducing-the-new-stately-roadmap","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-03-29-introducing-the-new-stately-roadmap/index.mdx","source":"@site/blog/2022-03-29-introducing-the-new-stately-roadmap/index.mdx","title":"Introducing the new Stately Roadmap","description":"We\u2019ve added a Roadmap to our Documentation, so you know what we\u2019re currently working on and what features are coming up soon.","date":"2022-03-29T00:00:00.000Z","formattedDate":"March 29, 2022","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"roadmap","permalink":"/statelyai-docs/blog/tags/roadmap"},{"label":"introduction","permalink":"/statelyai-docs/blog/tags/introduction"}],"readingTime":0.805,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Introducing the new Stately Roadmap","description":"We\u2019ve added a Roadmap to our Documentation, so you know what we\u2019re currently working on and what features are coming up soon.","tags":["stately","roadmap","introduction"],"authors":["laura"],"image":"/blog/2022-03-29-introducing-the-new-stately-roadmap.png","slug":"2022-03-29-introducing-the-new-stately-roadmap","date":"2022-03-29T00:00:00.000Z"},"prevItem":{"title":"Building a video player with XState and Stately tools","permalink":"/statelyai-docs/blog/2022/04/05/building-a-video-player"},"nextItem":{"title":"Stately is hiring!","permalink":"/statelyai-docs/blog/2022/03/28/stately-is-hiring"}},"content":"This week we\u2019ve added [our Roadmap](https://xstate.js.org/docs/roadmap) to the XState documentation.\\n\\nMany of you have requested a roadmap to help you determine if it\u2019s the right time to integrate XState and Stately tools into your team\u2019s workflow. We\u2019ve added a simple Roadmap so you know what we\u2019re currently working on and what features are coming up soon.\\n\\n\x3c!--truncate--\x3e\\n\\n## Upcoming features\\n\\nTo give you an idea of what we\u2019re working on, below are the features currently planned for April - June 2022.\\n\\n### XState\\n\\n- XState v5 Alpha\\n\\n### Editor\\n\\n- Billing and Teams\\n- Feature parity with XState\\n- Authentication bug fixes\\n- Welcome emails\\n- Inline editing\\n- Simulation mode\\n- Markdown descriptions\\n- Workflow creation\\n\\n### Documentation\\n\\n- Stately tools visibility\\n- Update and rework\\n\\n## Please give us your feedback and suggestions\\n\\nWe prioritize features based on your feedback. Please let us know if you have feedback or suggestions in [our GitHub Discussions](https://github.com/statelyai/xstate/discussions), [our Discord](https://discord.gg/xstate) or on [Twitter](https://twitter.com/statelyai)."},{"id":"/2022/03/28/stately-is-hiring","metadata":{"permalink":"/statelyai-docs/blog/2022/03/28/stately-is-hiring","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-03-28-stately-is-hiring/index.mdx","source":"@site/blog/2022-03-28-stately-is-hiring/index.mdx","title":"Stately is hiring!","description":"We\u2019re hiring for a frontend engineer, backend engineer, developer advocate and product designer at Stately.","date":"2022-03-28T00:00:00.000Z","formattedDate":"March 28, 2022","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"hiring","permalink":"/statelyai-docs/blog/tags/hiring"}],"readingTime":1.87,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Stately is hiring!","description":"We\u2019re hiring for a frontend engineer, backend engineer, developer advocate and product designer at Stately.","tags":["stately","hiring"],"authors":["laura"],"date":"2022-03-28T00:00:00.000Z","image":"/blog/2022/03/28/stately-is-hiring.png","slug":"/2022/03/28/stately-is-hiring"},"prevItem":{"title":"Introducing the new Stately Roadmap","permalink":"/statelyai-docs/blog/2022-03-29-introducing-the-new-stately-roadmap"},"nextItem":{"title":"Stately Changelog #1 - Snap To Elements","permalink":"/statelyai-docs/blog/2022-03-23-stately-changelog-1"}},"content":"We\u2019re hiring for a frontend engineer, backend engineer, developer advocate and product designer at Stately. You can [check out the Careers at Stately page on Notion](https://statelyai.notion.site/Careers-at-Stately-db3d704abd8f41058e5361e5ab9c1098).\\n\\n\x3c!--truncate--\x3e\\n\\n## About Stately\\n\\nStately is building **the visual future of software development.**\\n\\nAt Stately, we want to make app and business logic accessible to the entire team and eliminate barriers between development, design, and product to make it easier to build and maintain complex applications quickly and robustly.\\n\\nWe enable development teams to collaborate effectively on even the most complex logic and flows with visual tools and insightful services. Helping them speak a common language so that the specifications, designs, and code are always synchronized, up-to-date, and visually clear.\\n\\nWe\u2019re building a team inspired to work on this mission to make software development better for everyone and practice what we preach, both inside Stately and everywhere else.\\n\\n## Questions from our office hours  stream last week\\n\\nDuring [our office hours live stream last week](https://www.youtube.com/watch?v=zYCnVkaUT3w), we answered questions about working with Stately. You can find the questions and links to the timecode with our responses below.\\n\\n### About the job listings\\n\\n- [What are the responsibilities of the product designer role?](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=826s)\\n- [What is the hiring process?](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=943s)\\n- [What is the definition of a senior developer? (And other roles)](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=1627s)\\n- [Is there a trial period?](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=1175s)\\n\\n### About Stately\\n\\n- [When was the company founded, and how are you financially sustainable?](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=1115s)\\n- [What exciting projects would you be working on at Stately?](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=705s)\\n\\n### About the Stately team\\n\\n- [How many people are on the Stately team?](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=1225s)\\n- [Should I apply if I feel underqualified? What would help me get the role in the future?](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=1313s)\\n- [How well can Stately support neurodivergent people?](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=1969s)\\n\\n### About timezones and locations\\n\\n- [Are these jobs remote? Yes!](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=806s)\\n- [Which timezones do Stately currently work within?](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=1753s)\\n- [Where are you folks based?](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=1802s)\\n\\n### About the day-to-day at Stately\\n\\n- [What does team collaboration look like at Stately?](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=1364s)\\n- [What is the work culture like from an insider perspective?](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=1845s)\\n- [Are there a lot of video calls at Stately?](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=1441s)\\n- [What is the balance of sync vs. async collaboration at Stately?](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=1508s)\\n- [What is a good day at Stately vs. a bad day at Stately?](https://www.youtube.com/watch?v=zYCnVkaUT3w&t=2029s)"},{"id":"2022-03-23-stately-changelog-1","metadata":{"permalink":"/statelyai-docs/blog/2022-03-23-stately-changelog-1","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-03-23-stately-changelog-1/index.mdx","source":"@site/blog/2022-03-23-stately-changelog-1/index.mdx","title":"Stately Changelog #1 - Snap To Elements","description":"The Stately Editor changelog is where we discuss new features released to the Stately Editor beta.","date":"2022-03-23T00:00:00.000Z","formattedDate":"March 23, 2022","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"announcement","permalink":"/statelyai-docs/blog/tags/announcement"},{"label":"editor","permalink":"/statelyai-docs/blog/tags/editor"},{"label":"beta","permalink":"/statelyai-docs/blog/tags/beta"},{"label":"changelog","permalink":"/statelyai-docs/blog/tags/changelog"}],"readingTime":1.705,"hasTruncateMarker":true,"authors":[{"name":"Matt Pocock","title":"Stately Team","url":"https://github.com/mattpocock","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png","key":"matt"}],"frontMatter":{"title":"Stately Changelog #1 - Snap To Elements","description":"The Stately Editor changelog is where we discuss new features released to the Stately Editor beta.","tags":["stately","announcement","editor","beta","changelog"],"authors":["matt"],"image":"/blog/2022-03-23-stately-changelog-1.png","slug":"2022-03-23-stately-changelog-1","date":"2022-03-23T00:00:00.000Z"},"prevItem":{"title":"Stately is hiring!","permalink":"/statelyai-docs/blog/2022/03/28/stately-is-hiring"},"nextItem":{"title":"Introducing the new Stately homepage","permalink":"/statelyai-docs/blog/2022-03-16-introducing-the-new-stately-homepage"}},"content":"Happy Wednesday! Time for our first Editor Changelog blog, where we\u2019ll talk about the new updates we\u2019ve shipped in the editor.\\n\\n\x3c!--truncate--\x3e\\n\\n## Snap To Elements\\n\\nWhen you\u2019re placing states and events in the canvas, you\u2019ll now be able to snap them to surrounding elements.\\n\\nSnapping is a hugely requested feature and should help make your charts neater and more legible.\\n\\nSo far, we\u2019ve implemented snapping to the _center_ of elements only. We\u2019re keen to [hear your feedback](https://github.com/statelyai/editor-feedback/issues) if you want more snapping!\\n\\n## Right-click menu\\n\\nYou can now right-click events and states to perform actions including:\\n\\n- Renaming states/events\\n- Making states the \'initial\' state\\n- Adding guards\\n- Turning events into self-transitions\\n\\nAnd many more.\\n\\n## Visual update for events\\n\\nWe\u2019ve streamlined the way our events look to make them more visually distinct from states. This new look keeps the focus on the arrow, the direction of travel, and the flow of the chart.\\n\\n![Statechart depicting the states of a Matt machine. The states are displayed as large rectangles with slightly rounded corners and lighter grey backgrounds. The events are displayed as smaller pill-shaped rounded rectangles with darker grey backgrounds.](changelog-1-events.png)\\n\\n## Improvements to VSCode output\\n\\nWe\u2019ve massively improved the way we handle transition targets in VSCode. Instead of every transition having an ugly `#(machine).state1.state2`, the VSCode extension will now make the most idiomatic choice out of `targetState`, `.targetState`, or `targetState.child`.\\n\\n```ts\\nconst machine = createMachine({\\n  initial: \\"a\\",\\n  states: {\\n    a: {\\n      on: {\\n        EVENT: {\\n          // Before\\n          target: \\"#(machine).b\\",\\n        },\\n      },\\n    },\\n    b: {},\\n  },\\n});\\n\\nconst machine = createMachine({\\n  initial: \\"a\\",\\n  states: {\\n    a: {\\n      on: {\\n        EVENT: {\\n          // After\\n          target: \\"b\\",\\n        },\\n      },\\n    },\\n    b: {},\\n  },\\n});\\n```\\n\\nAs part of this work, we\u2019ve also improved how we handle `internal` - you\u2019ll now get proper warnings inside the visual editor when you use `internal` incorrectly.\\n\\n## Other Improvements\\n\\nWe\u2019ve been hard at work fixing bugs in the VSCode extension and the CLI. You can keep up to date with those changes in our [`xstate-tools`](https://github.com/statelyai/xstate-tools/releases) repo."},{"id":"2022-03-16-introducing-the-new-stately-homepage","metadata":{"permalink":"/statelyai-docs/blog/2022-03-16-introducing-the-new-stately-homepage","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-03-15-introducing-the-new-stately-homepage/index.mdx","source":"@site/blog/2022-03-15-introducing-the-new-stately-homepage/index.mdx","title":"Introducing the new Stately homepage","description":"Last week we launched the new Stately homepage, which we hope will make it easy to understand what Stately and XState are and help you convince your team to use state machines.","date":"2022-03-16T00:00:00.000Z","formattedDate":"March 16, 2022","tags":[{"label":"stately","permalink":"/statelyai-docs/blog/tags/stately"},{"label":"homepage","permalink":"/statelyai-docs/blog/tags/homepage"},{"label":"introduction","permalink":"/statelyai-docs/blog/tags/introduction"}],"readingTime":0.39,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Introducing the new Stately homepage","description":"Last week we launched the new Stately homepage, which we hope will make it easy to understand what Stately and XState are and help you convince your team to use state machines.","tags":["stately","homepage","introduction"],"authors":["laura"],"image":"/blog/2022-03-16-introducing-the-new-stately-homepage.png","slug":"2022-03-16-introducing-the-new-stately-homepage","date":"2022-03-16T00:00:00.000Z"},"prevItem":{"title":"Stately Changelog #1 - Snap To Elements","permalink":"/statelyai-docs/blog/2022-03-23-stately-changelog-1"},"nextItem":{"title":"Open VSX XState VSCode extension now available","permalink":"/statelyai-docs/blog/2022/03/11/xstate-vscode-extension-now-available-on-the-open-vsx-registry"}},"content":"Last week we launched [the new Stately homepage](https://stately.ai), which we hope will make it easy to understand what Stately and XState are and help you convince your team to use state machines.\\n\\nYou can watch us talk about the new design and its implementation during [last week\u2019s office hours](https://youtu.be/WoPCd4D--Gk?t=771). I\u2019m particularly impressed by David\u2019s SVG arrows!\\n\\n\x3c!--truncate--\x3e\\n\\nAnd if you have any feedback about the homepage, please let us know on [our Discord](https://discord.gg/xstate). We always appreciate your thoughts."},{"id":"/2022/03/11/xstate-vscode-extension-now-available-on-the-open-vsx-registry","metadata":{"permalink":"/statelyai-docs/blog/2022/03/11/xstate-vscode-extension-now-available-on-the-open-vsx-registry","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-03-11-xstate-vscode-extension-now-available-on-the-open-vsx-registry/index.mdx","source":"@site/blog/2022-03-11-xstate-vscode-extension-now-available-on-the-open-vsx-registry/index.mdx","title":"Open VSX XState VSCode extension now available","description":"If you use VSCodium, Coder, Gitpod or another editor with VSCode-compatible extensions, you can now install the XState VSCode extension.","date":"2022-03-15T00:00:00.000Z","formattedDate":"March 15, 2022","tags":[{"label":"extension","permalink":"/statelyai-docs/blog/tags/extension"},{"label":"open source","permalink":"/statelyai-docs/blog/tags/open-source"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"vscode","permalink":"/statelyai-docs/blog/tags/vscode"}],"readingTime":1.115,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Open VSX XState VSCode extension now available","description":"If you use VSCodium, Coder, Gitpod or another editor with VSCode-compatible extensions, you can now install the XState VSCode extension.","tags":["extension","open source","xstate","vscode"],"authors":["laura"],"slug":"/2022/03/11/xstate-vscode-extension-now-available-on-the-open-vsx-registry","image":"/blog/2022/03/11/xstate-vscode-extension-now-available-on-the-open-vsx-registry.png","date":"2022-03-15T00:00:00.000Z"},"prevItem":{"title":"Introducing the new Stately homepage","permalink":"/statelyai-docs/blog/2022-03-16-introducing-the-new-stately-homepage"},"nextItem":{"title":"Introducing: The XState CLI","permalink":"/statelyai-docs/blog/2022-03-03-introducing-the-xstate-cli"}},"content":"<head>\\n  <meta property=\\"og:image:alt\\" content=\\"\u2018XState VSCode extension now available on the Open VSX Registry\u2019 by Laura Kalbag on the Stately blog.\\"/>\\n</head>\\n\\nIf you use VSCodium, Coder, Gitpod or another editor with VSCode-compatible extensions, you can now [install the XState VSCode extension from the Open VSX Registry](https://open-vsx.org/extension/statelyai/stately-vscode).\\n\\n\x3c!--truncate--\x3e\\n\\nWe released our [XState VSCode extension](https://marketplace.visualstudio.com/items?itemName=statelyai.stately-vscode) a few weeks ago, which gives you visual editing, autocomplete, typegen and linting for XState. The same extension is now available for VSCodium, Coder and Gitpod, and any other editors with VSCode-compatible extensions through the Open VSX Registry.\\n\\nWe had many requests to distribute the extension on the Open VSX Registry. As a person who uses [VSCodium](https://vscodium.com) myself, it was exciting to install the extension from inside VSCodium.\\n\\n1. Open the command palette in VSCodium with `shift` + `cmd/ctrl` + `p`.\\n2. Search for the **Install Extensions** command and hit enter to open the Extensions search.\\n3. Search for **XState** to find the XState VSCode extension and install the extension using the **Install** button.\\n4. Once you have installed the extension, you can find the extension commands by searching for **XState** in the command palette.\\n\\nYou can also [download the XState VSCode extension directly from the Open VSX Registry](https://open-vsx.org/extension/statelyai/stately-vscode).\\n\\nPlease give us your feedback and let us know if you encounter any issues in [our Discord](https://discord.gg/xstate) or [our xstate-tools repository](https://github.com/statelyai/xstate-tools/issues)."},{"id":"2022-03-03-introducing-the-xstate-cli","metadata":{"permalink":"/statelyai-docs/blog/2022-03-03-introducing-the-xstate-cli","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-03-03-introducing-the-xstate-cli/index.mdx","source":"@site/blog/2022-03-03-introducing-the-xstate-cli/index.mdx","title":"Introducing: The XState CLI","description":"Get ready to run XState\u2019s typegen commands outside of VSCode in our all-new CLI.","date":"2022-03-03T00:00:00.000Z","formattedDate":"March 3, 2022","tags":[{"label":"cli","permalink":"/statelyai-docs/blog/tags/cli"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"announcement","permalink":"/statelyai-docs/blog/tags/announcement"},{"label":"typescript","permalink":"/statelyai-docs/blog/tags/typescript"}],"readingTime":1.12,"hasTruncateMarker":true,"authors":[{"name":"Matt Pocock","title":"Stately Team","url":"https://github.com/mattpocock","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png","key":"matt"}],"frontMatter":{"title":"Introducing: The XState CLI","description":"Get ready to run XState\u2019s typegen commands outside of VSCode in our all-new CLI.","tags":["cli","xstate","announcement","typescript"],"authors":["matt"],"image":"/blog/2022-03-03-introducing-the-xstate-cli.png","slug":"2022-03-03-introducing-the-xstate-cli","date":"2022-03-03T00:00:00.000Z"},"prevItem":{"title":"Open VSX XState VSCode extension now available","permalink":"/statelyai-docs/blog/2022/03/11/xstate-vscode-extension-now-available-on-the-open-vsx-registry"},"nextItem":{"title":"Modelling 101: How to build a statechart from scratch","permalink":"/statelyai-docs/blog/2022-02-15-modelling-101-how-to-build-a-statechart-from-scratch"}},"content":"Around a month ago, we released [TypeScript Typegen](/blog/2022-01-27-introducing-typegen/index.mdx) - an enormous upgrade to the TypeScript experience for XState.\\n\\nWe\u2019ve had a great response to it so far, but it\u2019s only been available for VSCode users.\\n\\nUntil now. With our new XState CLI, **you can get Typegen from the command line**.\\n\\n\x3c!--truncate--\x3e\\n\\n- Read the full documentation on the [`@xstate/cli` docs](https://xstate.js.org/docs/packages/xstate-cli).\\n- Check out [our updated TypeScript Typegen guide](https://xstate.js.org/docs/guides/typescript.html#typegen). \\n- Find the code on the [@xstate/cli GitHub repo](https://github.com/statelyai/xstate-tools/tree/main/apps/cli).\\n\\n## Installation\\n\\n```bash\\nnpm install @xstate/cli\\n```\\n\\nOR\\n\\n```bash\\nyarn add @xstate/cli\\n```\\n\\n## Commands\\n\\n### `xstate typegen <files>`\\n\\n```bash\\nxstate typegen \\"src/**/*.tsx?\\"\\n```\\n\\nRun the typegen against a glob of files. This will scan every targeted file and generate a typegen file accompanying it. It will also import the typegen into your file, as described in [our typegen documentation](https://xstate.js.org/docs/guides/typescript.html#typegen).\\n\\nEnsure you wrap your glob in quotes so that it executes correctly. Otherwise, you\u2019ll get unexpected results.\\n\\n#### Options\\n\\n```bash\\nxstate typegen \\"src/**/*.tsx?\\" --watch\\n```\\n\\nRuns the task on a watch, monitoring for changed files and running the typegen script against them.\\n\\n## The Future\\n\\nWe\u2019re really excited about the CLI, and all the cool things it\u2019ll enable. The typegen really is just the surface. If you\u2019ve got ideas for what we could do with it, don\u2019t hesitate to add a feature request to the [`xstate-tools` repo](https://github.com/statelyai/xstate-tools/issues)."},{"id":"2022-02-15-modelling-101-how-to-build-a-statechart-from-scratch","metadata":{"permalink":"/statelyai-docs/blog/2022-02-15-modelling-101-how-to-build-a-statechart-from-scratch","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-02-14-modelling-101-how-to-build-a-statechart-from-scratch/index.mdx","source":"@site/blog/2022-02-14-modelling-101-how-to-build-a-statechart-from-scratch/index.mdx","title":"Modelling 101: How to build a statechart from scratch","description":"Stately dev Matt Pocock takes you through a step-by-step guide on modelling statecharts","date":"2022-02-17T00:00:00.000Z","formattedDate":"February 17, 2022","tags":[{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"tutorial","permalink":"/statelyai-docs/blog/tags/tutorial"},{"label":"statechart","permalink":"/statelyai-docs/blog/tags/statechart"},{"label":"modelling","permalink":"/statelyai-docs/blog/tags/modelling"}],"readingTime":8.36,"hasTruncateMarker":true,"authors":[{"name":"Matt Pocock","title":"Stately Team","url":"https://github.com/mattpocock","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png","key":"matt"}],"frontMatter":{"title":"Modelling 101: How to build a statechart from scratch","description":"Stately dev Matt Pocock takes you through a step-by-step guide on modelling statecharts","tags":["xstate","tutorial","statechart","modelling"],"authors":["matt"],"image":"/blog/2022-02-15-modelling-101-how-to-build-a-statechart-from-scratch.png","slug":"2022-02-15-modelling-101-how-to-build-a-statechart-from-scratch","date":"2022-02-17T00:00:00.000Z"},"prevItem":{"title":"Introducing: The XState CLI","permalink":"/statelyai-docs/blog/2022-03-03-introducing-the-xstate-cli"},"nextItem":{"title":"Stately Editor public beta","permalink":"/statelyai-docs/blog/2022-02-08-join-the-stately-editor-public-beta"}},"content":"Modelling using statecharts changed my career as a dev. Of all the state management solutions I\u2019ve tried, it feels the most complete, logical and robust. Even if you don\u2019t use them in your app\u2019s code, statecharts let you break down complex features into states, events, services, actions and guards.\\n\\n\x3c!--truncate--\x3e\\n\\nIt took me a long time to get comfortable modelling with statecharts. Even when I\u2019d learned all the terms, it took time to work out a step-by-step process for building statecharts from scratch.\\n\\nToday, I\u2019m going to share **an opinionated, step-by-step guide for building statecharts from scratch**. This process _works for me_, but it might not work for you. Feel free to tweak it as you go.\\n\\n## What you\u2019ll need\\n\\n1. A pen and paper, or a digital notepad of some kind\\n2. A statechart builder, such as [our visual editor](https://stately.ai/editor) or an XState machine in our [XState visualizer](https://stately.ai/viz)\\n3. A clear idea of what you\u2019re building. Maybe something you\u2019ve implemented at work? You could also pick something from [XState Catalogue](https://xstate-catalogue.com).\\n\\nI\u2019ve also built this [process as a statechart](https://stately.ai/registry/editor/d24479eb-ac20-44ae-a7b7-c0910e6247ad) using our visual editor.\\n\\n## 1. List all the possible events\\n\\nThe first step in this process is to work out all the events that can be received by your statechart. You can think of an event as \u2018something that happens\u2019 in your app. There are plenty of examples even on this page:\\n\\n1. Press the escape key\\n2. Press the space bar\\n3. Select some text\\n4. Click on an image\\n\\nYou don\u2019t need to list _all_ possible events that the user can perform. You only need to **list the events that your statechart cares about**. Here are some examples:\\n\\nFor a submit form:\\n\\n- User changes the value of an input\\n- User submits form\\n\\nFor a spreadsheet:\\n\\n- User clicks a cell on the spreadsheet\\n- User holds down the `shift`/`ctrl` key\\n- User presses `escape`\\n- User scrolls up or down\\n\\nSeeing all the events in a big list may start giving you an idea of what is possible in your statechart. You might start thinking in terms of _sequences of events_ \u2014 i.e. `User changes input` -> `User submits form`. Write down any sequences that pop into your head, they\u2019ll be useful later.\\n\\n## 2. List all the possible tasks\\n\\nNext, it\u2019s important to consider the _tasks_ your app needs to perform. These tasks could be called \u2018side effects\u2019 \u2014 things that happen as a result of your statechart running. These could be as diverse as:\\n\\n1. **Adding an item to a todo list (in local state)**\\n2. **Sending a request to the API to load some data**\\n3. **Focusing an input**\\n4. **Waiting for a video to load**\\n5. **Subscribing to something for updates** (perhaps via `window.addEventListener()`)\\n\\n_NOTE: I\u2019m using \u2018tasks\u2019 loosely. This isn\u2019t an official term in the XState docs \u2014 but \u2018services\u2019 and \u2018actions\u2019 are._\\n\\nOnce you have a list of tasks, you need to divide them into two groups.\\n\\n### 2a. Services\\n\\nThe first group is for services, tasks where you need to _do something when they finish_. I wrote a [longer guide about the distinction between actions and services here](/blog/2021-04-30-should-this-be-an-action-or-a-service/index.mdx).\\n\\nFrom our list above, these are services:\\n\\n2. **Sending a request to the API to load some data**\\n\\nWe need to get something from the API, meaning that we need to wait until we receive the data. This task can also fail \u2014 if we\u2019re having network trouble or the API method fails. That means we care whether it succeeds or fails.\\n\\n4. **Waiting for a video to load**\\n\\nSame as above \u2014 we need to wait for the video to be loaded, and we care if it fails to load.\\n\\n5. **Subscribing to something for updates**\\n\\nHere, it\u2019s a little different \u2014 when you subscribe to something, you need to clean up the listener to prevent a memory leak. For instance:\\n\\n```ts\\nconst listener = () => {\\n  console.log(\\"Hello!\\");\\n};\\n\\n// Subscribe\\nwindow.addEventListener(\\"focus\\", listener);\\n\\n// Unsubscribe\\nwindow.removeEventListener(\\"focus\\", listener);\\n```\\n\\nHere, we care about the outcome because we need to _run something at the end of the process_ \u2014 i.e. unsubscribe from the listener.\\n\\n#### Adding onDone/onError events\\n\\nService completions/errors are handled _as events_ in your statechart, meaning they\u2019re on the same level as your user clicking buttons.\\n\\nWhen you\u2019ve got your list of services, note down two things:\\n\\nFor each service that we need to wait for it to complete, add a `serviceName.onDone` event to your list.\\n\\nFor each service that might reasonably be expected to error, add a `serviceName.onError` event to your list.\\n\\n### 2b. Actions\\n\\nThe second group is for actions, tasks that you can \u2018fire and forget\u2019. Unlike services, the statechart forgets about actions as soon as they\u2019re fired.\\n\\nFrom our list above, these are actions:\\n\\n1. **Adding an item to a todo list (in local state)**\\n\\nChanges to local state are pretty much always fire-and-forget. The reason is that, since we manage the local state ourselves, updating it is instant. [XState\u2019s assign action](https://xstate.js.org/docs/guides/context.html#assign-action) is a good example.\\n\\n2. **Focusing an input**\\n\\nFocusing an input, in the same vein, is fire-and-forget. We don\u2019t care about the outcome, and it\u2019s unlikely to fail.\\n\\n## 3. Work out the very first state\\n\\nNow that you know _what can happen_ (events) and _what can be done_ (actions & services) in your statechart, it\u2019s time to start adding some states.\\n\\n### 3a. Know your statechart\u2019s lifecycle\\n\\nIt\u2019s always easiest to start at the beginning. Before you add your first state, consider the moment that your statechart gets initiated. What causes your statechart to run? Some examples:\\n\\nAn **authentication** statechart, which manages the state for whether the user is logged in to a website or not. This would be started the _first moment_ the user clicks on to any page of your app, and finished when they close your app.\\n\\nA **sign up form** statechart, which handles a user signing up to your app. This might be started when the user visits the `/sign-up` route, and stopped when they exit it.\\n\\n### 3b. Write down your first state\\n\\nNow that you know what your app looks like when your statechart gets initiated, it\u2019s time to name its initial state. Consider what the statechart is doing at that time. It could be `Loading data`, or `Waiting for user to submit form`, or even just `Idle`, waiting for something to happen.\\n\\n#### Dynamic initial states\\n\\nEvery statechart _must_ have an initial state, and it can\u2019t be dynamic \u2014 it must be the same every time your statechart runs.\\n\\nIf you feel your statechart _does_ have more than one initial state (for instance it could start in two different modes) consider using a \u2018checking\u2019 state via an [eventless transition](https://xstate.js.org/docs/guides/transitions.html#eventless-always-transitions).\\n\\n## 4. Build out the states\\n\\nNow that you have your first state, you can start the process of building out the states. Every state represents a length of time, so consider _what is happening_ during that state.\\n\\n### 4a. Work out if any tasks are running\\n\\nDo you have any services running? If so, _invoke_ those services using [XState\u2019s invoke property](https://xstate.js.org/docs/guides/communication.html#invoking-services).\\n\\nDoes an action need to happen when you enter or exit the state? If so, add it as an [entry or exit action](https://xstate.js.org/docs/guides/actions.html#actions).\\n\\nRemember, the _statechart itself_ is also a state. We often call it the \u2018root state\u2019. This means that you can run services or listen to events for the _entire duration of your statechart_. You can also run entry actions when your statechart starts, and exit actions when it stops.\\n\\n### 4b. Work out which events can happen in that state\\n\\nConsider the period of time your state represents. Which events should _do_ something, and what should they do?\\n\\n#### Events that change state\\n\\nIf an event results in:\\n\\n1. A new service running\\n2. Something new appearing on screen\\n3. Other types of events becoming possible\\n4. A current service stopping\\n\\nThen it might need to move to a new state. A great example is a **data fetcher**. Your app is in two distinct states:\\n\\n- **Fetching data**: it doesn\u2019t yet have the data, and the \u2018fetch data\u2019 service is running.\\n- **Showing data**: it has the data, and is showing it on screen. The \u2018fetch data\u2019 service has stopped.\\n\\nIf you have an event like this, draw out the new event and either create a new state, or make it target an existing one if needed.\\n\\n#### Events that don\u2019t change state\\n\\nSometimes, [events can be used to fire an action](https://xstate.js.org/docs/guides/actions.html#api) instead of changing state. A good example of this is when a form input changes, and you need to save the new value to local state.\\n\\nThis is called a [self-transition](https://xstate.js.org/docs/guides/transitions.html#self-transitions), where the event doesn\u2019t change the state \u2014 the state transitions to itself.\\n\\n#### Events that do nothing\\n\\nIt\u2019s important to bear in mind that when your statechart is in a certain state, _only the events that you specify_ will be handled. In other words, any event you don\u2019t specify will do _nothing_ when it\u2019s sent to the statechart.\\n\\nA classic example of this is a form. When you submit the form, you go to the \u2018submitting\u2019 state. It\u2019s important that you don\u2019t allow the \u2018submit\u2019 event to be received while in the \u2018submitting\u2019 state \u2014 otherwise the form might get sent twice!\\n\\n## 5. Keep going!\\n\\nOnce you\u2019ve figured out which actions/services are running in which states, and what all the events do, you\u2019ve modelled your first state! You\u2019ll likely have states which branch off your initial state \u2014 so go through those one-by-one and build them out.\\n\\nYou can also leave parts of your statechart unimplemented, and dive into building the frontend/actions/services before returning to modelling again.\\n\\nI\u2019ve found this approach really useful when getting to grips with what my app does. You can even use a statechart as an early validation tool to confirm that what you\u2019re building is correct.\\n\\nIf you\u2019ve got any more questions, do [join our Discord](https://discord.gg/invite/xstate) and ask in the \u2018modelling-help\u2019 channel."},{"id":"2022-02-08-join-the-stately-editor-public-beta","metadata":{"permalink":"/statelyai-docs/blog/2022-02-08-join-the-stately-editor-public-beta","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-2-6-stately-editor-public-beta/index.mdx","source":"@site/blog/2022-2-6-stately-editor-public-beta/index.mdx","title":"Stately Editor public beta","description":"We\u2019re excited to announce the public beta of the Stately Editor! The Stately Editor is a tool for creating and editing state diagrams. We\u2019ve received a lot of great feedback from the private beta testers, and now we\u2019re delighted to share it with everyone.","date":"2022-02-08T00:00:00.000Z","formattedDate":"February 8, 2022","tags":[{"label":"editor","permalink":"/statelyai-docs/blog/tags/editor"},{"label":"announcement","permalink":"/statelyai-docs/blog/tags/announcement"},{"label":"beta","permalink":"/statelyai-docs/blog/tags/beta"}],"readingTime":2.835,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"Stately Editor public beta","description":"We\u2019re excited to announce the public beta of the Stately Editor! The Stately Editor is a tool for creating and editing state diagrams. We\u2019ve received a lot of great feedback from the private beta testers, and now we\u2019re delighted to share it with everyone.","tags":["editor","announcement","beta"],"authors":["david"],"image":"/blog/2022-02-08-join-the-stately-editor-public-beta.png","slug":"2022-02-08-join-the-stately-editor-public-beta","date":"2022-02-08T00:00:00.000Z"},"prevItem":{"title":"Modelling 101: How to build a statechart from scratch","permalink":"/statelyai-docs/blog/2022-02-15-modelling-101-how-to-build-a-statechart-from-scratch"},"nextItem":{"title":"Introducing: TypeScript typegen for XState","permalink":"/statelyai-docs/blog/2022-01-27-introducing-typegen"}},"content":"We\u2019re excited to announce the public beta of the Stately Editor! The Stately Editor is a tool for creating and editing state diagrams. We\u2019ve received a lot of great feedback from the private beta testers, and now we\u2019re delighted to share it with everyone.\\n\\n**[Try the Stately Editor beta now](https://stately.ai/editor?source=blog)**\\n\\n\x3c!--truncate--\x3e\\n\\n![Visualize your application logic with the Stately Editor](stately-editor-public-beta.png)\\n\\nThe software development lifecycle today is a bit fragmented. It\u2019s very difficult for user stories, designs, code, tests, and documentation to stay in sync, leading to parts going out-of-date or even missing entirely. Bugs increase, and adding or modifying features becomes increasingly complex. And even understanding all the features and use-cases of an app becomes a daunting task.\\n\\nOur mission is to **make app logic accessible to the entire team**, including developers, designers, and stakeholders. Using state machines and statecharts as a common visual language, the software development cycle becomes more collaborative, eliminating handoff and tightening the feedback loop.\\n\\nThe Stately Editor aims to be that collaborative visual app logic tool. Before, developers could build state machines and statecharts in code using [XState](https://github.com/statelyai/xstate). Now, you can create those same state diagrams visually.\\n\\nAnd yes, it goes both ways: edit the code and see the updated state diagram. Edit the state diagram and see the updated code in real-time. All this is possible with the [XState VS Code extension](https://marketplace.visualstudio.com/items?itemName=statelyai.stately-vscode).\\n\\n## Features\\n\\nThe editor supports everything you need to build state machines and statecharts:\\n\\n- Atomic, compound, parallel, history, and final states\\n- Normal, guarded, and delayed events/transitions\\n- Entry, exit, and transition actions\\n- Invocations\\n- Done and error transitions for states and invocations\\n- State and event descriptions\\n\\nThere are currently two modes:\\n\\n- **Editor mode**: add, modify, and delete states, events, and transitions, as well as data like actions, descriptions, and invocations.\\n- **Simulation mode**: run the statechart, trigger events, and see the active state nodes.\\n\\nYou can also **export machines to JSON**, ready to be used in your codebase with XState.\\n\\n## Roadmap\\n\\nWe have a long list of features planned for the editor, including:\\n\\n- Parameterized actions, guards, and invocations\\n- Built-in actions, such as `assign` and `raise`\\n- Schema editing for `context` and `events`\\n- More granular simulation control, such as specifying event payload and simulating delays\\n- Visualizing systems of actors, including spawned and invoked machines\\n- Warnings and errors for invalid machine definitions\\n- Customizable state node, event, and transition colors\\n- Rich text editing and content for state descriptions\\n- Markdown generation\\n- Event recording and playback\\n- Machine versioning and diffing\\n- Autolayout and smart layout controls\\n- Teams and private machines/systems\\n- _And so much more._\\n\\n## Join the public beta\\n\\nExcited to see what the Stately Editor can do? [Join the public beta by registering for free](https://stately.ai/registry?source=blog) and [create your first machine](https://stately.ai/editor?source=blog), or [discover other people\u2019s machines](https://stately.ai/registry/discover?source=blog) and get inspired.\\n\\nPlease [let us know](https://github.com/statelyai/editor-feedback/issues/new) if you have any feedback, feature requests or bug reports.\\n\\n<Announcement cta=\\"Try the beta\\" href=\\"https://stately.ai/editor?source=blog\\">\\n  Try the Stately Editor beta and start modeling your app logic visually.\\n</Announcement>\\n\\n## Next steps\\n\\nThe editor is the initial state towards making the ultimate collaborative tool for visually editing even the most complex app logic. We\u2019re excited to share the Stately Editor with the world, and we\u2019re looking forward to hearing your reactions.\\n\\n[Join our Discord community](https://discord.gg/xstate) to get help, ask questions, and give us your feedback."},{"id":"2022-01-27-introducing-typegen","metadata":{"permalink":"/statelyai-docs/blog/2022-01-27-introducing-typegen","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2022-01-27-introducing-typegen/index.mdx","source":"@site/blog/2022-01-27-introducing-typegen/index.mdx","title":"Introducing: TypeScript typegen for XState","description":"XState\u2019s TypeScript experience just got an enormous upgrade - Typescript typegen, integrated with VS Code.","date":"2022-01-27T00:00:00.000Z","formattedDate":"January 27, 2022","tags":[{"label":"announcement","permalink":"/statelyai-docs/blog/tags/announcement"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"community","permalink":"/statelyai-docs/blog/tags/community"},{"label":"typescript","permalink":"/statelyai-docs/blog/tags/typescript"},{"label":"tutorial","permalink":"/statelyai-docs/blog/tags/tutorial"},{"label":"vscode","permalink":"/statelyai-docs/blog/tags/vscode"}],"readingTime":4.98,"hasTruncateMarker":true,"authors":[{"name":"Matt Pocock","title":"Stately Team","url":"https://github.com/mattpocock","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png","key":"matt"}],"frontMatter":{"title":"Introducing: TypeScript typegen for XState","description":"XState\u2019s TypeScript experience just got an enormous upgrade - Typescript typegen, integrated with VS Code.","tags":["announcement","xstate","community","typescript","tutorial","vscode"],"authors":["matt"],"image":"/blog/2022-01-27-introducing-typegen.png","slug":"2022-01-27-introducing-typegen","date":"2022-01-27T00:00:00.000Z"},"prevItem":{"title":"Stately Editor public beta","permalink":"/statelyai-docs/blog/2022-02-08-join-the-stately-editor-public-beta"},"nextItem":{"title":"What are the biggest benefits of state machines?","permalink":"/statelyai-docs/blog/2021-12-14-what-are-the-biggest-benefits-youve-had-from-using-state-machines"}},"content":"<div\\n  style={{\\n    position: \\"relative\\",\\n    height: \\"0px\\",\\n    paddingBottom: \\"56.25%\\",\\n  }}\\n>\\n  <iframe\\n    src=\\"https://www.loom.com/embed/1f90a1a454c7495ea755f044c394c54d\\"\\n    frameBorder=\\"0\\"\\n    allowFullScreen\\n    style={{\\n      position: \\"absolute\\",\\n      top: 0,\\n      left: 0,\\n      width: \\"100%\\",\\n      height: \\"100%\\",\\n    }}\\n  ></iframe>\\n</div>\\n\\n**XState and TypeScript are a match made in heaven**. TypeScript gives you type safety, and XState gives you logical safety. Together, they give you confidence that your code will do what you expect.\\n\\nHowever, we\u2019ve been hearing from the community for some time that the _experience_ of using TypeScript with XState needed improving.\\n\\nToday\'s your lucky day. **XState\u2019s TypeScript experience just got an _enormous_ upgrade**.\\n\\n\x3c!--truncate--\x3e\\n\\nWe have brought type generation into XState v4.29.0, and we\u2019re aiming for **perfect types on all parts of XState\u2019s API**.\\n\\nWe\u2019re releasing typegen today as an opt-in beta. Be sure to check out the [known limitations](https://xstate.js.org/docs/guides/typescript.html#known-limitations) section of the docs.\\n\\n## Getting Started\\n\\nYou can visit the [official docs](https://xstate.js.org/docs/guides/typescript.html#typegen) for the full guide, or follow the instructions:\\n\\n1. Download and install the [VS Code extension](https://marketplace.visualstudio.com/items?itemName=statelyai.stately-vscode).\\n\\n2. Open a new file and create a new machine, passing the schema attributes:\\n\\n```ts\\nimport { createMachine } from \\"xstate\\";\\n\\nconst machine = createMachine({\\n  schema: {\\n    context: {} as { value: string },\\n    events: {} as { type: \\"FOO\\"; value: string } | { type: \\"BAR\\" },\\n  },\\n  initial: \\"a\\",\\n  states: {\\n    a: {\\n      on: {\\n        FOO: {\\n          actions: \\"consoleLogValue\\",\\n          target: \\"b\\",\\n        },\\n      },\\n    },\\n    b: {\\n      entry: \\"consoleLogValueAgain\\",\\n    },\\n  },\\n});\\n```\\n\\n3. Add `tsTypes: {}` to the machine and save the file:\\n\\n```diff\\nconst machine = createMachine({\\n+ tsTypes: {},\\n  schema: {\\n    context: {} as { value: string },\\n    events: {} as { type: \\"FOO\\"; value: string } | { type: \\"BAR\\" },\\n  },\\n  initial: \\"a\\",\\n  states: {\\n    /* ... */\\n  },\\n});\\n```\\n\\n4. The extension should automatically add a generic to the machine:\\n\\n```ts\\nconst machine = createMachine({\\n  // This generic just got added!\\n  tsTypes: {} as import(\\"./filename.typegen\\").Typegen0,\\n  /* ... */\\n});\\n```\\n\\n5. Add a second parameter into the `createMachine` call - this is where you implement the actions, services, guards and delays for the machine.\\n\\n```ts\\nconst machine = createMachine(\\n  {\\n    /* ... */\\n  },\\n  {\\n    actions: {\\n      consoleLogValue: (context, event) => {\\n        // Wow! event is typed to { type: \'FOO\' }\\n        console.log(event.value);\\n      },\\n      consoleLogValueAgain: (context, event) => {\\n        // Wow! event is typed to { type: \'FOO\' }\\n        console.log(event.value);\\n      },\\n    },\\n  }\\n);\\n```\\n\\n## Typing improvements\\n\\nLet\u2019s get into the nitty-gritty and show you exactly what\u2019s improved.\\n\\n### Events in machine options\\n\\nOne of the most common pain points we heard from our community was using named actions, services and guards with TypeScript. The main reason is that you needed to write code like this:\\n\\n```ts\\ncreateMachine(\\n  {\\n    schema: {\\n      events: {} as { type: \\"FOO\\"; value: string } | { type: \\"BAR\\" },\\n    },\\n    on: {\\n      FOO: {\\n        actions: \\"myAction\\",\\n      },\\n    },\\n  },\\n  {\\n    actions: {\\n      myAction: (context, event) => {\\n        /**\\n         * TS don\'t know if the event is FOO or BAR,\\n         * so we have to defensively check here\\n         */\\n        if (event.type === \\"FOO\\") {\\n          /**\\n           * Now we know that event.value\\n           * is present on FOO, because\\n           * we checked\\n           */\\n          console.log(event.value);\\n        }\\n      },\\n    },\\n  }\\n);\\n```\\n\\nThe VS Code extension **statically analyzes your machine**, and knows which events lead to which actions.\\n\\n```ts\\ncreateMachine(\\n  {\\n    /* config */\\n  },\\n  {\\n    actions: {\\n      myAction: (context, event) => {\\n        /**\\n         * No more defensive check needed! event\\n         * is typed to only the events that cause\\n         * the action\\n         */\\n        console.log(event.value);\\n      },\\n    },\\n  }\\n);\\n```\\n\\nThis works for actions, services, guards and delays. It even works for **entry actions**, another big pain point from the community.\\n\\nWe\u2019re hoping this lets you cut hundreds of lines of useless defensive code.\\n\\n### Autocomplete on machine options\\n\\nAnother thing we\u2019ve been hearing from the community is that it\u2019s easy to make typos on machine options.\\n\\nNow, with typegen, you get **autocomplete on all machine options**. The following code will error:\\n\\n```ts\\ncreateMachine(\\n  {\\n    entry: [\\"sayHello\\"],\\n  },\\n  {\\n    actions: {\\n      /*\\n       * This will error, because sayhello does not\\n       * exist in the machine declaration above\\n       */\\n      sayhello: () => {},\\n    },\\n  }\\n);\\n```\\n\\nWe\u2019ve also made it so any _missing_ machine options will error when\\nyou implement them later. So, in a React component:\\n\\n```tsx\\nconst machine = createMachine({\\n  entry: [\\"sayHello\\"],\\n});\\n\\nconst App = () => {\\n  /**\\n   * This will error, because you haven\'t implemented\\n   * sayHello in your actions object\\n   */\\n  const [state, send] = useMachine(machine);\\n};\\n```\\n\\nThat gives you 100% confidence that your machine has all the things it needs to work.\\n\\n### Typing of promise-services\\n\\nUsing promise-based services might be the single biggest pain point with XState and TypeScript. We used to have an entire troubleshooting section in our docs dedicated to them.\\n\\nNow, you can **strongly type the results of promise-based services**. Here\u2019s how:\\n\\n```ts\\ncreateMachine(\\n  {\\n    schema: {\\n      /**\\n       * Pass the \'services\' attribute to schema,\\n       * with all the names of your services and\\n       * the data they return\\n       */\\n      services: {} as {\\n        myService: {\\n          // The data that gets returned from the service\\n          data: { id: string };\\n        };\\n      },\\n    },\\n    invoke: {\\n      src: \\"myService\\",\\n      onDone: {\\n        actions: \\"consoleLogId\\",\\n      },\\n    },\\n  },\\n  {\\n    services: {\\n      /**\\n       * This service will now type error if it\\n       * returns anything other than { id: string }\\n       */\\n      myService: async () => {\\n        return {\\n          id: \\"1\\",\\n        };\\n      },\\n    },\\n    actions: {\\n      consoleLogId: (context, event) => {\\n        /**\\n         * This event now knows that it will\\n         * receive a data attribute with { id: string }\\n         */\\n        console.log(event.data.id);\\n      },\\n    },\\n  }\\n);\\n```\\n\\nThis makes handling data return types in XState intuitive, easy and type-safe.\\n\\n## Acknowledgements\\n\\nI want to thank my Stately colleague [Andarist](https://twitter.com/AndaristRake). His TypeScript wizardry, incredible attention to detail and deep love of open source helped make this possible. We\u2019ve literally been talking about this for 18 months - and it\u2019s finally here."},{"id":"2021-12-14-what-are-the-biggest-benefits-youve-had-from-using-state-machines","metadata":{"permalink":"/statelyai-docs/blog/2021-12-14-what-are-the-biggest-benefits-youve-had-from-using-state-machines","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2021-12-14-what-are-the-biggest-benefits-youve-had-from-using-state-machines/index.mdx","source":"@site/blog/2021-12-14-what-are-the-biggest-benefits-youve-had-from-using-state-machines/index.mdx","title":"What are the biggest benefits of state machines?","description":"At Stately we\u2019re fans of state machines, but we wanted to ask our community\u2026 what are the benefits you\u2019ve experienced from using state machines?","date":"2021-12-14T00:00:00.000Z","formattedDate":"December 14, 2021","tags":[{"label":"weekly question","permalink":"/statelyai-docs/blog/tags/weekly-question"},{"label":"community","permalink":"/statelyai-docs/blog/tags/community"},{"label":"state machine","permalink":"/statelyai-docs/blog/tags/state-machine"}],"readingTime":3.855,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"What are the biggest benefits of state machines?","description":"At Stately we\u2019re fans of state machines, but we wanted to ask our community\u2026 what are the benefits you\u2019ve experienced from using state machines?","tags":["weekly question","community","state machine"],"authors":["laura"],"image":"/blog/2021-12-14-what-are-the-biggest-benefits-youve-had-from-using-state-machines.png","slug":"2021-12-14-what-are-the-biggest-benefits-youve-had-from-using-state-machines","date":"2021-12-14T00:00:00.000Z"},"prevItem":{"title":"Introducing: TypeScript typegen for XState","permalink":"/statelyai-docs/blog/2022-01-27-introducing-typegen"},"nextItem":{"title":"How do you convince your teammates to use XState?","permalink":"/statelyai-docs/blog/2021-10-11-convince-teammates"}},"content":"Last week we asked our community, \u201cWhat are the biggest benefits you\u2019ve had from using state machines?\u201d\\n\\nAt Stately, we\u2019re obviously fans of state machines. Still, we wanted to ask our community the benefits they\u2019ve experienced, whether they were working on a specific project or incorporating state machines into their everyday workflow.\\n\\n\x3c!--truncate--\x3e\\n\\n## Reusability\\n\\nNowadays, so much of tech is component-oriented, so it was fascinating to hear from Martin that he reused the same state machines across different frameworks.\\n\\n<Tweet id=\\"1469042301783654417\\" />\\n\\n> I think that **the biggest benefit comes from being able to use the same state machine across different frameworks**. With XState, even if you just use React on your projects, you can share your state machine with your [insert framework name here] friends.\\n\\n## Maintaining complex app logic\\n\\n<Tweet id=\\"1468992722686017540\\" />\\n\\nPat\u2019s blog post goes into fascinating depth on his work with Crucible. The section on XState starts with Pat\u2019s realization that he needed a state machine and ends with him moving much of their application logic into statecharts.\\n\\n> **We didn\'t start Crucible using XState but by the end of the project it was one of our most valuable tools\u2026**\\n>\\n> \u2026\\n>\\n> I was still new to statecharts and sort of overwhelmed by the whole idea so I needed to find a small feature I could prototype XState with where it would make sense and add recognizable value to a flow/process that could use more structure to it\u2026\\n>\\n> \u2026\\n>\\n> I built out the flow based on the services\u2019 state and UI state, I defined all the valid transitions and where they\u2019d go, I wired up the inputs/outputs to it, and then I turned it loose on matchmaking in an actual client and it worked beautifully.\\n>\\n> **I could look at the statechart and see the entire flow through the states**, I could see every valid transition that the statechart could take and where it would go, I could paste it into the XState visualizer and actually see a DIAGRAM OF ALL THE STATES AND WALK THROUGH THEM INTERACTIVELY.\\n\\n[Read all of Pat\u2019s post on his blog](https://tivac.com/2020/10/19/crucible-rip/).\\n\\n## Maintainability\\n\\nMaintainability is a popular feature of state machines, and Joshua is a fan.\\n\\n<Tweet id=\\"1468958231028326419\\" />\\n\\nMatt\u2019s article on \u2018[useState vs useReducer vs XState - Part 1: Modals](/blog/2021-07-28-usestate-vs-usereducer-vs-xstate-part-1-modals/index.mdx)\u2019 shares examples of these different approaches and their maintainability. And he followed it up with his [React Finland talk, \u2018Make legacy code delightful with statecharts\u2019](https://www.youtube.com/watch?v=zll9uDQOOq0).\\n\\n## Getting to the core of your logic\\n\\nThe [discussion on our Discord](https://discord.com/channels/795785288994652170/795785288994652174/918546073268670534) focused on mindset and how state machines can help us better understand our app logic. Jan got the conversation started.\\n\\n> Certainly for me it must be that **it allows me to very quickly get to the essence and core behaviour of what I\'m building**. Playing with boxes and arrows allow me to not get caught up in implementation details while figuring out how I want stuff to work.\\n>\\n> Afterwards, implementing actions and services just feels like filling in the blanks. Likewise hooking the machine up with my component is equally trivial: throw some `state.hasTag`, `state.context` and `send` in there, and you\u2019ve got a stew going\\n\\nAnd Steve continued.\\n\\n> State machines make complex behaviors tractable; they help you think about the problem.\\n>\\n> State machines reveal complexities in ostensibly simple behaviors; they make you think about the problem.\\n>\\n> Yin and yang. Good cop, bad cop. **Thinking about your application behavior as a set of state machines focuses your mind on what\'s really going on inside that tangled mass of behaviors**.\\n\\n## Robustness\\n\\nHoracio also explained how the robustness of apps built with state machines could give us more faith in our work.\\n\\n> Programming is all about confidence, and for me, **working with state machines gives me the same confidence on my code as writing tests**, with the addition to have a visual representation of my system that I can discuss, show and modify with all my teammates.\\n>\\n> Also having the confidence of refactoring code without the fear of breaking other parts of my app!!\\n>\\n> Definitely XState is one of my top additions of 2021 to my dev toolbelt! \ud83d\udcaa\\n\\nThat\u2019s just what we like to hear!\\n\\nThank you, everyone, for your responses. We love to hear about how you\u2019re using state machines in your projects. If you\u2019ve got any feedback you want to share with the Stately team, you can [find us on Twitter](https://twitter.com/statelyai) and join the community on [our Discord server](https://discord.gg).\\n\\n_Note: quotes have been minimally edited to add emphasis and clarity._"},{"id":"2021-10-11-convince-teammates","metadata":{"permalink":"/statelyai-docs/blog/2021-10-11-convince-teammates","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2021-10-11-convince-teammates/index.mdx","source":"@site/blog/2021-10-11-convince-teammates/index.mdx","title":"How do you convince your teammates to use XState?","description":"Last week our question of the week was how do you convince your teammates to use XState? Here are some suggestions","date":"2021-10-11T00:00:00.000Z","formattedDate":"October 11, 2021","tags":[{"label":"blog","permalink":"/statelyai-docs/blog/tags/blog"},{"label":"team","permalink":"/statelyai-docs/blog/tags/team"}],"readingTime":4.42,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"How do you convince your teammates to use XState?","description":"Last week our question of the week was how do you convince your teammates to use XState? Here are some suggestions","tags":["blog","team"],"authors":["laura"],"category":"entry","image":"/blog/2021-10-11-convince-teammates.png","slug":"2021-10-11-convince-teammates","date":"2021-10-11T00:00:00.000Z"},"prevItem":{"title":"What are the biggest benefits of state machines?","permalink":"/statelyai-docs/blog/2021-12-14-what-are-the-biggest-benefits-youve-had-from-using-state-machines"},"nextItem":{"title":"Introduction to state machines and statecharts","permalink":"/statelyai-docs/blog/2021-10-02-intro-fsm-sc"}},"content":"Last week our question of the week was \u201c_how do you convince your teammates to use XState?_\u201d\\n\\nOne of our most frequent requests for the documentation is more advice on how to convince others to use XState. Many people [read an article](https://dev.to/mpocock1/how-to-manage-global-state-with-xstate-and-react-3if5), [watch a talk](https://www.youtube.com/watch?v=9k1ZHHJWt7k) or [participate in a workshop](https://frontendmasters.com/courses/xstate/) about XState and are sold on using XState themselves. But when it comes to getting their team on board, they often need more.\\n\\n\x3c!--truncate--\x3e\\n\\nThanks to all the wonderful folks who answered our question [posted to Twitter](https://twitter.com/statelyai/status/1446035499777462274) and in our #office-hours [Discord](https://discord.gg/xstate) channel, we\u2019ve got some fantastic suggestions.\\n\\n## Present using the Visualizer\\n\\nMany people immediately understand the benefits of statecharts as they\u2019re familiar with diagrams using \u201cboxes and arrows.\u201d The Visualizer gives you an instant, recognisable overview of your application logic, which is often enough to get them on board.\\n\\n<Tweet id=\\"1446237663535714304\\" />\\n\\n<Tweet id=\\"1446087845073113092\\" />\\n\\n## Give examples using their own work\\n\\nNick Hehr takes it step-by-step, utilizing the Visualizer.\\n\\n<Tweet id=\\"1446092594338017280\\" />\\n\\n<Tweet id=\\"1446062078264020994\\" />\\n\\nAnd Farzad successfully convinced his team. We discussed his success in [our office hours last week](https://www.youtube.com/watch?v=GCWZ-froHKo).\\n\\n## Give them side-by-side examples\\n\\nAmy Pellegrini recommended many complementary approaches, starting with comparing XState to other types of state management.\\n\\n<Tweet id=\\"1446419479483793411\\" />\\n\\nThis might be an intensive approach, but it\u2019s the ultimate way to show the benefits of XState.\\n\\n## Show existing projects that are using XState\\n\\nWe\u2019re all more convinced by a technology when we know it\u2019s already being used by projects or organisations whose work we admire. Amy Pellegrini suggests taking advantage of that:\\n\\n<Tweet id=\\"1446420841219215372\\" />\\n\\n## Dictate the use as team lead\\n\\nA few people are fortunate enough to be leading their teams, and of course adoption is much easier when you can just tell your team to use XState from the top.\\n\\n[C\xe9dric](https://discord.com/channels/795785288994652170/895591583586598943/895730595378913390):\\n\\n> I have said: \\"We will use XState\\" \ud83d\ude02\\n\\n<Tweet id=\\"1446084841259274240\\" />\\n\\n## Become the expert so you can answer their questions and help them progress\\n\\nBut not everyone can be the boss. Amy Pellegrini recommends becoming the XState subject matter expert, so you\u2019re better prepared to support the rest of your team.\\n\\n<Tweet id=\\"1446421516334387203\\" />\\n\\nAnd Josh Ferrell suggests collaborating with your product team, showing them how to model with the Visualizer, enabling them to do the modeling themselves in the future.\\n\\n<Tweet id=\\"1446152427187572738\\" />\\n\\n## Tell them that the Stately team is fast and responsive\\n\\nKnowing a technology is under frequent development, and the developers are likely to respond to your feedback, is important to most of us when we\u2019re embedding a new tool into a key part of our workflow. [C\xe9dric on our Discord](https://discord.com/channels/795785288994652170/895591583586598943/895738949635551273) uses this as a way to convince his team to work with XState.\\n\\n> Xstate team improve the project really quickly, office hours give a good idea of the roadmap and features, when something is propose there are a real discussion and project improvement from only \u201can idea\u201d on discord\\n\\nThanks C\xe9dric!\\n\\n## Promoting the collaboration benefits\\n\\nAt Stately, we\u2019re excited about the potential for collaboration with our Visualizer and Editor. We want to shrink the space between planning, design and development, helping the whole team work together on their application logic. [C\xe9dric agrees with those benefits](https://discord.com/channels/795785288994652170/895591583586598943/895738949635551273).\\n\\n> The Viz is a real support to share business logic between product and tech team, this could be add[ed] into a specifications and of course with the futur[e] way to create machine by a simple drag and drop this offer[s] the possibility for the product team to create themselves a real machine useful [for] the tech team\\n\\n## Timing it right with a good use case for the team\\n\\nOn our Discord, [Jan has a carefully planned approach](https://discord.com/channels/795785288994652170/895591583586598943/895754626689814578):\\n\\n> I received the task to build some pretty complicated UI components, and I opted to build them with simple state machines, implemented as good ol\' `switch`-based reducers. Since we\'re using Redux, this approach didn\'t alienate my team entirely, and so the seed had been planted.\\n>\\n> Fast-forward a bit, and we\'re currently rewriting some of the core of our application as a state machine (or something of a Frankenstein statechart), after receiving new requirements would make it completely unmaintainable if we had continued in the same tracks. We\'re still doing it with `switch` (with nested states, even!), which isn\'t optimal, but it\'s way better than where we came from.\\n>\\n> For now it does the job, but my plan is to note any pains which could easily be solved with XState, and propose a rewrite if/when the time is right. I figure it will be a much easier sell if my team is already somewhat familiar with the concepts of state machines, and we have a really good use-case on our hands.\\n\\nFinding the right timing for your team is key for introducing any new technology.\\n\\n## Make them less intimidated by the terminology\\n\\nAnd sometimes a team is rightfully cautious of trying a technology that comes across as new. It\u2019s all about how you frame it\u2026\\n\\n<Tweet id=\\"1446153971219853314\\" />\\n\\n\ud83d\ude02\\n\\nIn the future we hope to provide more documentation and advice to help you convince your team to use XState. If you have any suggestions or requests, please [let us know on our Discord](https://discord.gg/xstate). We want to make our tools work for you."},{"id":"2021-10-02-intro-fsm-sc","metadata":{"permalink":"/statelyai-docs/blog/2021-10-02-intro-fsm-sc","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2021-10-02-intro-fsm-sc/index.mdx","source":"@site/blog/2021-10-02-intro-fsm-sc/index.mdx","title":"Introduction to state machines and statecharts","description":"Introduction to state machines and statecharts","date":"2021-10-02T00:00:00.000Z","formattedDate":"October 2, 2021","tags":[{"label":"introduction","permalink":"/statelyai-docs/blog/tags/introduction"},{"label":"state machine","permalink":"/statelyai-docs/blog/tags/state-machine"},{"label":"statechart","permalink":"/statelyai-docs/blog/tags/statechart"},{"label":"state","permalink":"/statelyai-docs/blog/tags/state"}],"readingTime":7.79,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Introduction to state machines and statecharts","description":"Introduction to state machines and statecharts","tags":["introduction","state machine","statechart","state"],"authors":["laura"],"category":"entry","image":"/blog/2021-10-02-intro-fsm-sc.png","slug":"2021-10-02-intro-fsm-sc","date":"2021-10-02T00:00:00.000Z"},"prevItem":{"title":"How do you convince your teammates to use XState?","permalink":"/statelyai-docs/blog/2021-10-11-convince-teammates"},"nextItem":{"title":"useState vs useReducer vs XState - Part 1: Modals","permalink":"/statelyai-docs/blog/2021-07-28-usestate-vs-usereducer-vs-xstate-part-1-modals"}},"content":"<head>\\n  <link rel=\\"canonical\\" href=\\"https://xstate.js.org/docs/guides/introduction-to-state-machines-and-statecharts/\\" />\\n</head>\\n\\nStatecharts are a visual language used to describe the states in a process.\\n\\nYou may have used similar diagrams in the past to design user flows, plan databases or map app architecture. Statecharts are another way of using boxes and arrows to represent flows, but with XState these flows are also executable code that can be used to control the logic in your applications.\\n\\n\x3c!--truncate--\x3e\\n\\nThis guide covers the basics of statecharts in a beginner-friendly way, including:\\n\\n- [states](#states)\\n- [transitions and events](#transitions-and-events)\\n- [initial states](#initial-state)\\n- [final states](#final-state)\\n- [compound states](#compound-states)\\n- [parallel states](#parallel-states)\\n- [self-transitions](#self-transition)\\n- [planning statecharts](#planning-statecharts)\\n- [delayed transitions](#delayed-transitions)\\n- [actions](#actions)\\n\\n## States\\n\\nThe _states_ are represented by rounded rectangle boxes. To draw a statechart for the process of a dog, there are two states that would first come to mind:\\n\\n\x3c!-- no alt because the image is already described in the surrounding text --\x3e\\n\\n![](https://raw.githubusercontent.com/statelyai/xstate/d98d948a534b028f4af8b271eb431a8625ab5cb3/docs/guides/introduction-to-state-machines-and-statecharts/asleep-awake.svg)\\n\\nA dog is always **asleep** or **awake**. The dog can\u2019t be asleep and awake at the same time, and it\u2019s impossible for the dog to be neither asleep nor awake. There\u2019s only these two states, a precisely limited, _finite_ number of states.\\n\\n## Transitions and events\\n\\nHow the dog goes between **asleep** and **awake** is through _transitions_, which are symbolised by an arrow pointing from one state to the next state in the process\u2019s sequence.\\n\\n\x3c!-- no alt because the image is already described in the surrounding text --\x3e\\n\\n![](https://raw.githubusercontent.com/statelyai/xstate/d98d948a534b028f4af8b271eb431a8625ab5cb3/docs/guides/introduction-to-state-machines-and-statecharts/transitions-events.svg)\\n\\nA transition is caused by an _event_ that results in the change of state. Transitions are labelled with their events.\\n\\nTransitions and events are _deterministic_. Deterministic means that each transition and event always points to the same next state, and always produces the same result from their given starting condition, every time the process is run. Dogs never **wake up** to become **asleep** or **fall asleep** to become **awake**.\\n\\nThis tiny dog process, with its two finite states and two transitions is a _Finite State Machine._ A state machine is used to describe the behavior of something. The machine describes the thing\u2019s states and the transitions between those states. It\u2019s a Finite State Machine because it has a finite number of states. (Sometimes abbreviated to FSM by folks who love jargon).\\n\\n## Initial state\\n\\nAny process that has states will have an _initial state_, the default state the process exists in until an event happens to change the process\u2019s state.\\n\\nThe initial state is represented by a filled circle with an arrow pointing from the circle to the initial state.\\n\\n\x3c!-- no alt because the image is already described in the surrounding text --\x3e\\n\\n![](https://raw.githubusercontent.com/statelyai/xstate/d98d948a534b028f4af8b271eb431a8625ab5cb3/docs/guides/introduction-to-state-machines-and-statecharts/initial-state.svg)\\n\\nUsing a statechart to describe the process of walking the dog, the initial state would be **waiting** to walk.\\n\\n## Final state\\n\\nMost processes with states will have a _final state_, the last state when the process is finished. The final state is represented by a double border on the state\u2019s rounded rectangle box.\\n\\nIn the dog walking statechart, the final state would be **walk complete**.\\n\\n![Dog walking statechart showing waiting state transitioning through the leave home event to the on a walk state, then transitioning through the arrive home event to the final state of walk complete.](https://raw.githubusercontent.com/statelyai/xstate/d98d948a534b028f4af8b271eb431a8625ab5cb3/docs/guides/introduction-to-state-machines-and-statecharts/final-state.svg)\\n\\n## Compound states\\n\\nA compound state is a state that can contain more states, also known as child states. These child states can only happen when the parent compound state is happening. Inside the **on a walk** state, there could be the child states of **walking**, **running** and **stopping to sniff good smells**.\\n\\nA compound state is symbolised by a labelled rounded rectangle box that acts as a container for its child states.\\n\\n\x3c!-- no alt because the image is already described in the surrounding text --\x3e\\n\\n![](https://raw.githubusercontent.com/statelyai/xstate/d98d948a534b028f4af8b271eb431a8625ab5cb3/docs/guides/introduction-to-state-machines-and-statecharts/compound-state.svg)\\n\\nA compound state should also specify which child state is the initial state. In the **on a walk** compound state, the initial state is **walking**.\\n\\nCompound states are what makes statecharts capable of handling more complexity than an everyday state machine.\\n\\n### Atomic states\\n\\nAn atomic state is a state that doesn\u2019t have any child states. **Waiting**, **walk complete**, **walking**, **running** and **stopping to sniff good smells** are all atomic states.\\n\\n### Parallel states\\n\\nA parallel state is a compound state where all of its child states, also known as regions, are active simultaneously. The regions are separated inside the compound state container by a dashed line.\\n\\nInside the **on a walk** compound state, there could be two regions. One region contains the dog\u2019s activity child states of **walking**, **running** and **stopping to sniff good smells**, and the other region containing the dog\u2019s tail states of **wagging** and **not wagging**. The dog can walk and wag its tail, run and wag its tail or stop and sniff while wagging its tail, it can also do any of these activities without wagging its tail.\\n\\n\x3c!-- no alt because the image is already described in the surrounding text --\x3e\\n\\n![](https://raw.githubusercontent.com/statelyai/xstate/d98d948a534b028f4af8b271eb431a8625ab5cb3/docs/guides/introduction-to-state-machines-and-statecharts/parallel-states.svg)\\n\\nBoth regions should also specify which child state is the initial state. In our **tail** region, the initial state is **not wagging**.\\n\\n### Self-transition\\n\\nA self-transition is when an event happens, but the transition returns to the same state. The transition arrow exits and re-enters the same state.\\n\\nA helpful way to describe a self-transition is \u201cdoing something, not going somewhere\u201d in the process.\\n\\nIn a **dog begging** process, there would be a **begging** state with a **gets treat** event. And for the dogs who love their food, no matter how many times you go through the **gets treat** event, the dog returns to its **begging** state.\\n\\n\x3c!-- no alt because the image is already described in the surrounding text --\x3e\\n\\n![](https://raw.githubusercontent.com/statelyai/xstate/d98d948a534b028f4af8b271eb431a8625ab5cb3/docs/guides/introduction-to-state-machines-and-statecharts/self-transition.svg)\\n\\n## Planning statecharts\\n\\nOne of the benefits of statecharts is that, in the process of putting a statechart together, you explore all the possible states in your process. This exploration will help you avoid bugs and errors in your code as you\u2019re more likely to cover all the eventualities.\\n\\nAnd because statecharts are executable, they can behave as both the diagram and the code, making it less likely that you\u2019ll introduce differences or bugs interpreting between the diagramming and coding environments.\\n\\n### Planning a statechart for a login machine\\n\\nTo draw a statechart for a login machine, start by listing the basic _events_ in the process. Think about what your login process will _do_:\\n\\n- log in\\n- log out\\n\\nThen list the _states_ that exist as a result of those events:\\n\\n- logged in\\n- logged out\\n\\nOnce there\u2019s some events and states, there\u2019s the beginnings of a statechart.\\n\\n![Login statechart showing an initial logged out state transitioning through a log in event to a logged in state, then transitioning through a log out event back to the logged out state.](https://raw.githubusercontent.com/statelyai/xstate/d98d948a534b028f4af8b271eb431a8625ab5cb3/docs/guides/introduction-to-state-machines-and-statecharts/basic-login.svg)\\n\\nDon\u2019t forget the _initial state_. In this case, the **logged out** state is the initial state, as any new user would come to the process logged out.\\n\\n## Delayed transitions\\n\\nSome login and logout processes will log out an inactive user after a fixed length of time as a security measure.\\n\\nThe **active** and **idle** states only happen when the user is logged in, so these become child states inside the **logged in** compound state.\\n\\n\x3c!-- no alt because the image is already described in the surrounding text --\x3e\\n\\n![](https://raw.githubusercontent.com/statelyai/xstate/d98d948a534b028f4af8b271eb431a8625ab5cb3/docs/guides/introduction-to-state-machines-and-statecharts/login-compound-state.svg)\\n\\nThe initial state inside the **logged in** compound state is **active**, as it happens as a direct result of the **log in** event, and logging in is a sign of user activity.\\n\\nA _delayed transition_ is a type of transition which happens after being in a state for a specified length of time. The delayed transition is labelled with \u201cafter\u201d and a fixed duration to indicate how much time should pass before transitioning to the next indicated state.\\n\\nIn the login statechart, a delayed transition of **60000** milliseconds, or 1 minute, follows the **active** state to determine whether the user is **idle**. If there is an **activity** event before the transition reaches one minute, the process returns to the **active** state.\\n\\n\x3c!-- no alt because the image is already described in the surrounding text --\x3e\\n\\n![](https://raw.githubusercontent.com/statelyai/xstate/d98d948a534b028f4af8b271eb431a8625ab5cb3/docs/guides/introduction-to-state-machines-and-statecharts/delayed-transition.svg)\\n\\nA delayed transition of **180000** milliseconds, or 3 minutes, follows the **idle** state to transition to the **auto logged out** state if the user remains idle.\\n\\n## Actions\\n\\nA statechart is used to set off _actions_ in the system outside of the statechart. Actions are also commonly known as _effects_ or _side-effects_. \u201cSide effects\u201d sounds like a negative or unimportant term, but setting off actions is the primary purpose in using statecharts.\\n\\nActions are events that have no impact or consequences for the rest of the sequence, the event is just triggered and the sequence moves on to the next step in the process. For example, the login statechart might execute actions that change the user interface.\\n\\nAn _action_ can be fired upon entering or exiting a state, or on a transition. An action on a state is included inside the state\u2019s container with an \u201centry /\u201d or \u201cexit /\u201d label depending on whether the action should be fired on entry or exit from the state.\\n\\nIn the login statechart, there\u2019s an _entry_ action on the **idle** state to warn the user that they may be logged out.\\n\\n\x3c!-- no alt because the image is already described in the surrounding text --\x3e\\n\\n![](https://raw.githubusercontent.com/statelyai/xstate/d98d948a534b028f4af8b271eb431a8625ab5cb3/docs/guides/introduction-to-state-machines-and-statecharts/entry-action.svg)"},{"id":"2021-07-28-usestate-vs-usereducer-vs-xstate-part-1-modals","metadata":{"permalink":"/statelyai-docs/blog/2021-07-28-usestate-vs-usereducer-vs-xstate-part-1-modals","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2021-07-28-usestate-vs-usereducer-vs-xstate-part-1-modals/index.mdx","source":"@site/blog/2021-07-28-usestate-vs-usereducer-vs-xstate-part-1-modals/index.mdx","title":"useState vs useReducer vs XState - Part 1: Modals","description":"Managing state at different levels of complexity is hard. This series of articles should help you make the right choices off the bat. Today we\u2019re starting with modals.","date":"2021-07-28T00:00:00.000Z","formattedDate":"July 28, 2021","tags":[{"label":"modal","permalink":"/statelyai-docs/blog/tags/modal"},{"label":"react","permalink":"/statelyai-docs/blog/tags/react"},{"label":"useState","permalink":"/statelyai-docs/blog/tags/use-state"},{"label":"useReducer","permalink":"/statelyai-docs/blog/tags/use-reducer"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"}],"readingTime":7.245,"hasTruncateMarker":true,"authors":[{"name":"Matt Pocock","title":"Stately Team","url":"https://github.com/mattpocock","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png","key":"matt"}],"frontMatter":{"title":"useState vs useReducer vs XState - Part 1: Modals","description":"Managing state at different levels of complexity is hard. This series of articles should help you make the right choices off the bat. Today we\u2019re starting with modals.","tags":["modal","react","useState","useReducer","xstate"],"authors":["matt"],"image":"/blog/2021-07-28-usestate-vs-usereducer-vs-xstate-part-1-modals.png","slug":"2021-07-28-usestate-vs-usereducer-vs-xstate-part-1-modals","date":"2021-07-28T00:00:00.000Z"},"prevItem":{"title":"Introduction to state machines and statecharts","permalink":"/statelyai-docs/blog/2021-10-02-intro-fsm-sc"},"nextItem":{"title":"How to manage global state with XState and React","permalink":"/statelyai-docs/blog/2021-05-27-global-state-xstate-react"}},"content":"Managing state at different levels of complexity is hard. Different tools make different trade-offs between readability, complexity and speed of development. The worst part is that as apps get more complex, it\u2019s easy to regret choices that were made early on.\\n\\nThis series of articles should help you make the right choice off the bat. The plan is to cover a bunch of state use cases, starting with the simple and graduating to more complexity as we go. We\u2019ll see how easy they are to write, and also how they survive changing requirements.\\n\\nToday, we\u2019re starting with [modals](https://material-ui.com/components/modal/).\\n\\n\x3c!--truncate--\x3e\\n\\n## useState\\n\\nFor modals, the key piece of state is whether or not the modal is open. `useState` lets us capture that single piece of state pretty succinctly.\\n\\n```ts\\nconst [isOpen, setIsOpen] = useState(false);\\n\\nconst open = () => {\\n  setIsOpen(true);\\n};\\n\\nconst close = () => {\\n  setIsOpen(false);\\n};\\n\\nconst toggle = () => {\\n  setIsOpen(!isOpen);\\n};\\n```\\n\\nHighly readable, simple enough, fast to write, bug-proof. For a simple toggle like this, `useState` is great.\\n\\n## useReducer\\n\\n```ts\\nconst reducer = (state = { isOpen: false }, action) => {\\n  switch (action.type) {\\n    case \\"OPEN\\":\\n      return {\\n        isOpen: true,\\n      };\\n    case \\"CLOSE\\":\\n      return {\\n        isOpen: false,\\n      };\\n    case \\"TOGGLE\\":\\n      return {\\n        isOpen: !state.isOpen,\\n      };\\n    default:\\n      return state;\\n  }\\n};\\n\\nconst [state, dispatch] = useReducer(reducer, { isOpen: false });\\n\\nconst open = () => {\\n  dispatch({ type: \\"OPEN\\" });\\n};\\n\\nconst close = () => {\\n  dispatch({ type: \\"CLOSE\\" });\\n};\\n\\nconst toggle = () => {\\n  dispatch({ type: \\"TOGGLE\\" });\\n};\\n```\\n\\n`useReducer` gives us a reducer, a powerful centralized spot in our code where we can visualise the changes happening. However, it took us quite a few more lines of code to reach the same result as `useState`. For now, I\u2019d say `useState` has the edge.\\n\\n## useMachine\\n\\n`useMachine` is a hook from XState, which allows us to use the power of state machines in our code. Let\u2019s see how it looks.\\n\\n```ts\\nconst machine = Machine({\\n  id: \\"modalMachine\\",\\n  initial: \\"closed\\",\\n  states: {\\n    closed: {\\n      on: {\\n        OPEN: {\\n          target: \\"open\\",\\n        },\\n        TOGGLE: \\"open\\",\\n      },\\n    },\\n    open: {\\n      on: {\\n        TOGGLE: \\"closed\\",\\n        CLOSE: \\"closed\\",\\n      },\\n    },\\n  },\\n});\\n\\nconst [state, send] = useMachine(machine);\\n\\nconst open = () => {\\n  send({ type: \\"OPEN\\" });\\n};\\n\\nconst close = () => {\\n  send({ type: \\"CLOSE\\" });\\n};\\n\\nconst toggle = () => {\\n  send({ type: \\"TOGGLE\\" });\\n};\\n```\\n\\n_You can see the state machine on the [XState visualiser here](https://xstate.js.org/viz/?gist=cf1578f5baa04cf9408ef6e48695f04c)._\\n\\nIt\u2019s remarkably similar in structure to the reducer above. Similar amount of lines, nearly the same event handlers. The state machine takes the edge over the reducer because of being able to easily visualise its logic - that\u2019s something the reducer can\u2019t match.\\n\\nHowever, the `useState` implementation still has the edge for me. The simplicity of execution, the elegance. It\u2019s hard to see how it could be beaten...\\n\\n## Alert: requirements changing\\n\\nOh no. Requirements have changed. Now, instead of immediately closing, the modal needs to animate out. This means we need to insert a third state, `closing`, which we automatically leave after 500ms. Let\u2019s see how our implementations hold up.\\n\\n### useState\\n\\n**Refactor 1**: Our initial `isOpen` boolean won\'t handle all the states we need it to any more. Let\u2019s change it to an enum: `closed`, `closing` and `open`.\\n\\n**Refactor 2**: `isOpen` is no longer a descriptive variable name, so we need to rename it to `modalState` and `setModalState`.\\n\\n**Refactor 3**: `useState` doesn\u2019t handle async changes by itself, so we need to bring in `useEffect` to run a timeout when the state is in the `closing` state. We also need to clear the timeout if the state is no longer `closing`.\\n\\n**Refactor 4**: We need to change the toggle event handler to add logic to ensure it only triggers on the `closed` and `open` states. Toggles work great for booleans, but become much harder to manage with enums.\\n\\n```ts\\n// Refactor 1, 2\\nconst [modalState, setModalState] = useState(\\"closed\\");\\n\\n// Refactor 3\\nuseEffect(() => {\\n  if (modalState === \\"closing\\") {\\n    const timeout = setTimeout(() => {\\n      setModalState(\\"closed\\");\\n    }, 500);\\n    return () => {\\n      clearTimeout(timeout);\\n    };\\n  }\\n}, [modalState]);\\n\\n// Refactor 1, 2\\nconst open = () => {\\n  setModalState(\\"open\\");\\n};\\n\\n// Refactor 1, 2\\nconst close = () => {\\n  setModalState(\\"closing\\");\\n};\\n\\n// Refactor 1, 2, 4\\nconst toggle = () => {\\n  if (modalState === \\"closed\\") {\\n    setModalState(\\"open\\");\\n  } else if (modalState === \\"open\\") {\\n    setModalState(\\"closing\\");\\n  }\\n};\\n```\\n\\nYuck. That was an enormous amount of refactoring to do just to add a simple, single requirement. On code that might be subject to changing requirements, think twice before using `useState`.\\n\\n### useReducer\\n\\n**Refactor 1**: Same as above - we turn the `isOpen` boolean to the same enum.\\n\\n**Refactor 2**: Same as above, `isOpen` is now improperly named, so we need to change it to `status`. This is changed in fewer places than `useState`, but there are still some changes to make.\\n\\n**Refactor 3**: The same as above, we use `useEffect` to manage the timeout. An additional wrinkle is that we need a new action type in the reducer, `REPORT_ANIMATION_FINISHED`, to cover this.\\n\\n**Refactor 4**: The same as above, but instead of the logic being in the event handler, we can actually change the logic inside the reducer. This is a cleaner change, but is still similar in the amount of lines it produces.\\n\\n```ts\\n// Refactor 1, 2\\nconst reducer = (state = { status: \\"closed\\" }, action) => {\\n  switch (action.type) {\\n    // Refactor 2\\n    case \\"OPEN\\":\\n      return {\\n        status: \\"open\\",\\n      };\\n    // Refactor 2\\n    case \\"CLOSE\\":\\n      return {\\n        status: \\"closing\\",\\n      };\\n    // Refactor 3\\n    case \\"REPORT_ANIMATION_FINISHED\\":\\n      return {\\n        status: \\"closed\\",\\n      };\\n    // Refactor 4\\n    case \\"TOGGLE\\":\\n      switch (state.status) {\\n        case \\"closed\\":\\n          return {\\n            status: \\"open\\",\\n          };\\n        case \\"open\\":\\n          return {\\n            status: \\"closing\\",\\n          };\\n      }\\n      break;\\n    default:\\n      return state;\\n  }\\n};\\n\\n// Refactor 1\\nconst [state, dispatch] = useReducer(reducer, { status: \\"closed\\" });\\n\\n// Refactor 3\\nuseEffect(() => {\\n  if (state.status === \\"closing\\") {\\n    const timeout = setTimeout(() => {\\n      dispatch({ type: \\"REPORT_ANIMATION_FINISHED\\" });\\n    }, 500);\\n    return () => {\\n      clearTimeout(timeout);\\n    };\\n  }\\n}, [state.status]);\\n\\nconst open = () => {\\n  dispatch({ type: \\"OPEN\\" });\\n};\\n\\nconst close = () => {\\n  dispatch({ type: \\"CLOSE\\" });\\n};\\n\\nconst toggle = () => {\\n  dispatch({ type: \\"TOGGLE\\" });\\n};\\n```\\n\\nThis file required the same number of refactors as the `useState` implementation. One crucial advantage is that these refactors were mostly located together: most changes occurred inside the reducer, and the event handlers went largely untouched. For me, this gives `useReducer` the edge over `useState`.\\n\\n### useMachine\\n\\n**Refactor 1**: Add a new closing state, which after 500 milliseconds goes to the closed state.\\n\\n**Refactor 2**: Changed the targets of the `TOGGLE` and `CLOSE` actions to point at `closing` instead of `closed`.\\n\\n```ts\\nexport const machine = Machine({\\n  id: \\"modalMachine\\",\\n  initial: \\"closed\\",\\n  states: {\\n    closed: {\\n      on: {\\n        OPEN: {\\n          target: \\"open\\",\\n        },\\n        TOGGLE: \\"open\\",\\n      },\\n    },\\n    // Refactor 1\\n    closing: {\\n      after: {\\n        500: \\"closed\\",\\n      },\\n    },\\n    open: {\\n      on: {\\n        // Refactor 2\\n        TOGGLE: \\"closing\\",\\n        CLOSE: \\"closing\\",\\n      },\\n    },\\n  },\\n});\\n\\nconst [state, send] = useMachine(machine);\\n\\nconst open = () => {\\n  send({ type: \\"OPEN\\" });\\n};\\n\\nconst close = () => {\\n  send({ type: \\"CLOSE\\" });\\n};\\n\\nconst toggle = () => {\\n  send({ type: \\"TOGGLE\\" });\\n};\\n```\\n\\n> [See the changed machine here](https://xstate.js.org/viz/?gist=61bbac74d69894c9472571e44c98f765).\\n\\nThe difference here is stark. A minimal number of refactors, all within the state machine itself. The amount of lines has hardly changed. None of the event handlers changed. AND we have a working visualisation of the new implementation.\\n\\n## Conclusion\\n\\nBefore the requirements changed, `useState` was the champion. It\u2019s faster, easier to implement, and fairly clear. `useReducer` and `useMachine` were too verbose, but `useMachine` took the edge by being easier to visualise.\\n\\nBut after the requirements changed, `useState` hit the floor. It quickly became the _worst_ implementation. It was the hardest to refactor, and its refactors were in the most diverse places. `useReducer` was equally hard to refactor, with the same set of changes. `useMachine` emerged as the champion, with a minimal diff required to build in new, complex functionality.\\n\\nSo if you\u2019re looking to build a modal fast, use `useState`. If you want to build it right, use `useMachine`.\\n\\nI\u2019m excited to work on this set of articles - I\u2019m looking forward to tackling the toughest state models out there. What would you like to see covered in the next one? Some ideas:\\n\\n- Data fetching\\n- Form state\\n- Multi-step sequences (checkout flows, signup flows)\\n\\nLet me know in the comments below, and follow me for the next article!"},{"id":"2021-05-27-global-state-xstate-react","metadata":{"permalink":"/statelyai-docs/blog/2021-05-27-global-state-xstate-react","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2021-05-27-global-state-xstate-react/index.mdx","source":"@site/blog/2021-05-27-global-state-xstate-react/index.mdx","title":"How to manage global state with XState and React","description":"Everything you need to know to manage global state with XState and React.","date":"2021-05-27T00:00:00.000Z","formattedDate":"May 27, 2021","tags":[{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"react","permalink":"/statelyai-docs/blog/tags/react"},{"label":"redux","permalink":"/statelyai-docs/blog/tags/redux"},{"label":"webdev","permalink":"/statelyai-docs/blog/tags/webdev"}],"readingTime":4.025,"hasTruncateMarker":true,"authors":[{"name":"Matt Pocock","title":"Stately Team","url":"https://github.com/mattpocock","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png","key":"matt"}],"frontMatter":{"title":"How to manage global state with XState and React","description":"Everything you need to know to manage global state with XState and React.","authors":["matt"],"date":"2021-05-27T00:00:00.000Z","tags":["xstate","react","redux","webdev"],"category":"entry","image":"/blog/2021-05-27-global-state-xstate-react.png","slug":"2021-05-27-global-state-xstate-react"},"prevItem":{"title":"useState vs useReducer vs XState - Part 1: Modals","permalink":"/statelyai-docs/blog/2021-07-28-usestate-vs-usereducer-vs-xstate-part-1-modals"},"nextItem":{"title":"Why I love invoked callbacks","permalink":"/statelyai-docs/blog/2021-05-13-why-i-love-invoked-callbacks"}},"content":"Many React applications follow the Flux architecture popularised by [Redux](https://redux.js.org/). This setup can be characterised by a few key ideas:\\n\\n1. It uses a single object at the top of your app which stores all application state, often called the **store**.\\n2. It provides a single `dispatch` function which can be used to send messages up to the store. Redux calls these `action`s, but I\'ll be calling them `events` - as they\'re known in XState.\\n3. How the store responds to these messages from the app are expressed in pure functions - most often in **reducers**.\\n\\nThis article won\'t go into depth on whether the Flux architecture is a good idea. David Khourshid\'s article [Redux is half a pattern](https://dev.to/davidkpiano/redux-is-half-of-a-pattern-1-2-1hd7) goes into great detail here. For the purposes of this article, we\'re going to assume that you like having a global store, and you want to replicate it in XState.\\n\\n\x3c!--truncate--\x3e\\n\\nThere are many reasons for wanting to do so. XState is second-to-none when it comes to managing complex asynchronous behaviour and modelling difficult problems. Managing this in Redux apps usually involves middleware: either [redux-thunk](https://github.com/reduxjs/redux-thunk), [redux-loop](https://github.com/redux-loop/redux-loop) or [redux-saga](https://github.com/redux-saga/redux-saga). Choosing XState gives you a first-class way to manage complexity.\\n\\n## A globally available store\\n\\nTo mimic Redux\'s globally-available store, we\'re going to use React context. React context can be a tricky tool to work with - if you pass in values which change too often, in can result in re-renders all the way down the tree. That means we need to pass in values which change as little as possible.\\n\\nLuckily, XState gives us a first-class way to do that.\\n\\n```ts\\nimport React, { createContext } from \\"react\\";\\nimport { useInterpret } from \\"@xstate/react\\";\\nimport { authMachine } from \\"./authMachine\\";\\nimport { ActorRefFrom } from \\"xstate\\";\\n\\ninterface GlobalStateContextType {\\n  authService: ActorRefFrom<typeof authMachine>;\\n}\\n\\nexport const GlobalStateContext = createContext(\\n  // Typed this way to avoid TS errors,\\n  // looks odd I know\\n  {} as GlobalStateContextType\\n);\\n\\nexport const GlobalStateProvider = (props) => {\\n  const authService = useInterpret(authMachine);\\n\\n  return (\\n    <GlobalStateContext.Provider value={{ authService }}>\\n      {props.children}\\n    </GlobalStateContext.Provider>\\n  );\\n};\\n```\\n\\nUsing `useInterpret` returns a `service`, which is a static reference to the running machine which can be subscribed to. This value never changes, so we don\'t need to worry about wasted re-renders.\\n\\n## Utilising context\\n\\nFurther down the tree, you can subscribe to the service like this:\\n\\n```ts\\nimport React, { useContext } from \\"react\\";\\nimport { GlobalStateContext } from \\"./globalState\\";\\nimport { useActor } from \\"@xstate/react\\";\\n\\nexport const SomeComponent = (props) => {\\n  const globalServices = useContext(GlobalStateContext);\\n  const [state] = useActor(globalServices.authService);\\n\\n  return state.matches(\\"loggedIn\\") ? \\"Logged In\\" : \\"Logged Out\\";\\n};\\n```\\n\\nThe `useActor` hook listens for whenever the service changes, and updates the `state` value.\\n\\n## Improving Performance\\n\\nThere\'s an issue with the implementation above - this will update the component for any change to the service. Redux offers tools for deriving state using selectors - functions which restrict which parts of the state can result in components re-rendering.\\n\\nLuckily, XState provides that too.\\n\\n```ts\\nimport React, { useContext } from \\"react\\";\\nimport { GlobalStateContext } from \\"./globalState\\";\\nimport { useSelector } from \\"@xstate/react\\";\\n\\nconst selector = (state) => {\\n  return state.matches(\\"loggedIn\\");\\n};\\n\\nexport const SomeComponent = (props) => {\\n  const globalServices = useContext(GlobalStateContext);\\n  const isLoggedIn = useSelector(globalServices.authService, selector);\\n\\n  return isLoggedIn ? \\"Logged In\\" : \\"Logged Out\\";\\n};\\n```\\n\\nNow, this component will only re-render when `state.matches(\'loggedIn\')` returns a different value. This is my recommended approach over `useActor` for when you want to optimise performance.\\nDispatching events\\n\\nFor dispatching events to the global store, you can call a service\'s send function directly.\\n\\n```ts\\nimport React, { useContext } from \\"react\\";\\nimport { GlobalStateContext } from \\"./globalState\\";\\n\\nexport const SomeComponent = (props) => {\\n  const globalServices = useContext(GlobalStateContext);\\n\\n  return (\\n    <button onClick={() => globalServices.authService.send(\\"LOG_OUT\\")}>\\n      Log Out\\n    </button>\\n  );\\n};\\n```\\n\\nNote that you don\'t need to call useActor for this, it\'s available right on the context.\\n\\n## Deviations from Flux\\n\\nKeen-eyed readers may spot that this implementation is slightly different from Flux. For instance - instead of a single global store, one might have several running machines at once: `authService`, `dataCacheService`, and `globalTimeoutService`. Each of them have their own `send` attributes, too - so you\'re not calling a global dispatch.\\n\\nThese changes can be worked around. One could create a synthetic send inside the global store which called all the services\' `send` function manually. But personally, I prefer knowing exactly which services my messages are being passed to, and it avoids having to keep events globally namespaced.\\n\\n## Summary\\n\\nXState can work beautifully as a global store for a React application. It keeps application logic co-located, treats side effects as first-class citizens, and offers good performance with `useSelector`. You should choose this approach if you\'re keen on the Flux architecture but feel your app\'s logic is getting out of hand."},{"id":"2021-05-13-why-i-love-invoked-callbacks","metadata":{"permalink":"/statelyai-docs/blog/2021-05-13-why-i-love-invoked-callbacks","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2021-05-13-why-i-love-invoked-callbacks/index.mdx","source":"@site/blog/2021-05-13-why-i-love-invoked-callbacks/index.mdx","title":"Why I love invoked callbacks","description":"I\u2019ve written a bit about services, but today I wanted to talk about my favourite way of expressing services: the Invoked Callback.","date":"2021-05-13T00:00:00.000Z","formattedDate":"May 13, 2021","tags":[{"label":"services","permalink":"/statelyai-docs/blog/tags/services"},{"label":"invoked callback","permalink":"/statelyai-docs/blog/tags/invoked-callback"},{"label":"state machine","permalink":"/statelyai-docs/blog/tags/state-machine"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"}],"readingTime":3.32,"hasTruncateMarker":true,"authors":[{"name":"Matt Pocock","title":"Stately Team","url":"https://github.com/mattpocock","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png","key":"matt"}],"frontMatter":{"title":"Why I love invoked callbacks","description":"I\u2019ve written a bit about services, but today I wanted to talk about my favourite way of expressing services: the Invoked Callback.","tags":["services","invoked callback","state machine","xstate"],"authors":["matt"],"image":"/blog/2021-05-13-why-i-love-invoked-callbacks.png","slug":"2021-05-13-why-i-love-invoked-callbacks","date":"2021-05-13T00:00:00.000Z"},"prevItem":{"title":"How to manage global state with XState and React","permalink":"/statelyai-docs/blog/2021-05-27-global-state-xstate-react"},"nextItem":{"title":"Should this be an action, or a service?","permalink":"/statelyai-docs/blog/2021-04-30-should-this-be-an-action-or-a-service"}},"content":"XState offers several primitives for representing long-running application processes. These are usually expressed as [services](https://xstate.js.org/docs/guides/communication.html). I\u2019ve written a bit about services [here](https://dev.to/mpocock1/xstate-should-this-be-an-action-or-a-service-2cp0) - but today I wanted to talk about my favourite way of expressing services: the Invoked Callback.\\n\\n\x3c!--truncate--\x3e\\n\\nThe [Invoked Callback](https://xstate.js.org/docs/guides/communication.html#invoking-callbacks) combines immense flexibility with good readability and a solid Typescript experience. They look like this:\\n\\n```ts\\ncreateMachine({\\n  invoke: {\\n    src: (context, event) => (send, onReceive) => {\\n      // Run any code you like inside here\\n\\n      return () => {\\n        // Any code inside here will be called when\\n        // you leave this state, or the machine is stopped\\n      };\\n    },\\n  },\\n});\\n```\\n\\nLet\u2019s break this down. You get access to `context` and `event`, just like promise-based services. But `send` is where things really get interesting. Let\u2019s break down what makes `send` useful with an example.\\n\\n## File Uploads\\n\\nImagine you need to build a file uploader, and you have a handy function called `startUpload` that uploads some data, and exposes an `onProgressUpdate` parameter to update the progress.\\n\\n```ts\\ncreateMachine({\\n  context: {\\n    progress: 0,\\n  },\\n  initial: \\"idle\\",\\n  states: {\\n    idle: {\\n      on: {\\n        START: \\"pending\\",\\n      },\\n    },\\n    pending: {\\n      on: {\\n        PROGRESS_UPDATED: {\\n          assign: assign({\\n            progress: (context, event) => event.progress,\\n          }),\\n        },\\n        CANCEL: {\\n          target: \\"idle\\",\\n        },\\n      },\\n      invoke: {\\n        src: (context) => (send) => {\\n          const uploader = startUpload({\\n            onProgressUpdate: (progress) => {\\n              send({\\n                type: \\"PROGRESS_UPDATED\\",\\n                progress,\\n              });\\n            },\\n          });\\n\\n          return () => {\\n            uploader.cancel();\\n          };\\n        },\\n      },\\n    },\\n  },\\n});\\n```\\n\\nThis machine starts in the `idle` state, but on the `START` event begins its invoked service, which uploads the file. It then listens for `PROGRESS_UPDATED` events, and updates the context based on its updates.\\n\\nThe `CANCEL` event will trigger the `uploader.cancel()` function, which gets called when the state is left. React users may recognise this syntax - it\u2019s the same as the cleanup function in the [useEffect hook](https://reactjs.org/docs/hooks-reference.html#cleaning-up-an-effect).\\n\\nNote how simple and idiomatic it is to cancel the uploader - just exit the state, and the service gets cleaned up.\\n\\n## Event Listeners\\n\\nThe invoked callback\u2019s cleanup function makes it very useful for event listeners, for instance `window.addEventListener()`. XState Catalogue\u2019s [Tab Focus Machine](https://xstate-catalogue.com/machines/tab-focus) is a perfect example of this - copied here for ease:\\n\\n```ts\\ncreateMachine(\\n  {\\n    initial: \\"userIsOnTab\\",\\n    states: {\\n      userIsOnTab: {\\n        invoke: {\\n          src: \\"checkForDocumentBlur\\",\\n        },\\n        on: {\\n          REPORT_TAB_BLUR: \\"userIsNotOnTab\\",\\n        },\\n      },\\n      userIsNotOnTab: {\\n        invoke: {\\n          src: \\"checkForDocumentFocus\\",\\n        },\\n        on: {\\n          REPORT_TAB_FOCUS: \\"userIsOnTab\\",\\n        },\\n      },\\n    },\\n  },\\n  {\\n    services: {\\n      checkForDocumentBlur: () => (send) => {\\n        const listener = () => {\\n          send(\\"REPORT_TAB_BLUR\\");\\n        };\\n\\n        window.addEventListener(\\"blur\\", listener);\\n\\n        return () => {\\n          window.removeEventListener(\\"blur\\", listener);\\n        };\\n      },\\n      checkForDocumentFocus: () => (send) => {\\n        const listener = () => {\\n          send(\\"REPORT_TAB_FOCUS\\");\\n        };\\n\\n        window.addEventListener(\\"focus\\", listener);\\n\\n        return () => {\\n          window.removeEventListener(\\"focus\\", listener);\\n        };\\n      },\\n    },\\n  }\\n);\\n```\\n\\nWhen in the `userIsOnTab` state, we listen for the window\u2019s `blur` event. When that happens, and `REPORT_TAB_BLUR` is fired, we clean up the event listener and head right on over to `userIsNotOnTab`, where we fire up the other service.\\n\\n## Websockets\\n\\nInvoked callbacks can also receive events via the `onReceive` function. This is perfect when you need to communicate to your service, such as sending events to websockets.\\n\\n```ts\\nimport { createMachine, forwardTo } from \\"xstate\\";\\n\\ncreateMachine({\\n  on: {\\n    SEND: {\\n      actions: forwardTo(\\"websocket\\"),\\n    },\\n  },\\n  invoke: {\\n    id: \\"websocket\\",\\n    src: () => (send, onReceive) => {\\n      const websocket = connectWebsocket();\\n\\n      onReceive((event) => {\\n        if (event.type === \\"SEND\\") {\\n          websocket.send(event.message);\\n        }\\n      });\\n\\n      return () => {\\n        websocket.disconnect();\\n      };\\n    },\\n  },\\n});\\n```\\n\\nIn order to receive events, services need an `id`. Not all events are forwarded to the invoked service, only those which we select via the `forwardTo` action.\\n\\nHere, we can connect to the websocket, establish two-way communication, and clean it up all in a few lines of code.\\n\\n## My Love Letter\\n\\nInvoked callbacks are a concise, flexible method of invoking services in XState. There isn\u2019t a case they can\u2019t cover - and they\u2019re one of my favourite parts of the XState API."},{"id":"2021-04-30-should-this-be-an-action-or-a-service","metadata":{"permalink":"/statelyai-docs/blog/2021-04-30-should-this-be-an-action-or-a-service","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2021-04-30-should-this-be-an-action-or-a-service/index.mdx","source":"@site/blog/2021-04-30-should-this-be-an-action-or-a-service/index.mdx","title":"Should this be an action, or a service?","description":"Whether to use an action or a service in XState.","date":"2021-04-30T00:00:00.000Z","formattedDate":"April 30, 2021","tags":[{"label":"action","permalink":"/statelyai-docs/blog/tags/action"},{"label":"state machine","permalink":"/statelyai-docs/blog/tags/state-machine"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"service","permalink":"/statelyai-docs/blog/tags/service"}],"readingTime":4.885,"hasTruncateMarker":true,"authors":[{"name":"Matt Pocock","title":"Stately Team","url":"https://github.com/mattpocock","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png","key":"matt"}],"frontMatter":{"title":"Should this be an action, or a service?","description":"Whether to use an action or a service in XState.","tags":["action","state machine","xstate","service"],"authors":["matt"],"image":"/blog/2021-04-30-should-this-be-an-action-or-a-service.png","slug":"2021-04-30-should-this-be-an-action-or-a-service","date":"2021-04-30T00:00:00.000Z"},"prevItem":{"title":"Why I love invoked callbacks","permalink":"/statelyai-docs/blog/2021-05-13-why-i-love-invoked-callbacks"},"nextItem":{"title":"Should this be a state, or in context?","permalink":"/statelyai-docs/blog/2021-04-29-should-this-be-a-state-or-in-context"}},"content":"XState offers several ways of orchestrating side effects. Since it\u2019s a statechart tool, [with significantly more power than a reducer](https://dev.to/mpocock1/usestate-vs-usereducer-vs-xstate-part-1-modals-569e), side effects are treated as a first-class concept.\\n\\n\x3c!--truncate--\x3e\\n\\n\u2018Side effects\u2019 as a concept spring from the idea of \u2018pure\u2019 functions. I.e. a function is at its best when it takes an input and returns an output. Pure functions don\u2019t tend to involve:\\n\\n- Waiting a set amount of time\\n- Making an API call to an external service\\n- Logging things to an external service\\n\\nSo we can think of all of the above as \u2018side effects\u2019 of our programme running. The name gives them a negative, medical, connotation - but really, they\u2019re the meat of your app. Apps that don\u2019t have side effects don\u2019t talk to anything external, don\u2019t worry about time, and don\u2019t react to unexpected errors.\\n\\n## Actions\\n\\n> \u201cThank u, next.\u201d - Ariana Grande\\n\\nSide effects can be expressed in two ways in XState. First, as a fire-and-forget `action`. Let\u2019s imagine that when the user opens this modal, we want to report to a logging service that this happened.\\n\\n```ts\\nconst modalMachine = createMachine(\\n  {\\n    initial: \\"closed\\",\\n    states: {\\n      closed: {\\n        on: {\\n          OPEN: \\"open\\",\\n        },\\n      },\\n      open: {\\n        entry: [\\"reportThatUserOpenedTheModal\\"],\\n        on: {\\n          CLOSE: \\"closed\\",\\n        },\\n      },\\n    },\\n  },\\n  {\\n    actions: {\\n      // Note that I\'m declaring the action name above, but implementing\\n      // it here. This keeps the logic and implementation separate,\\n      // which I like\\n      reportThatUserOpenedTheModal: async () => {\\n        await fetch(\\"/external-service/user-opened-modal\\");\\n      },\\n    },\\n  }\\n);\\n```\\n\\nActions are fire-and-forget, which means you can fire them off without worrying about consequences. If the action I declared above errors, my state machine won\u2019t react - it\u2019s already forgotten about it.\\n\\nActions represent a single point in time, like a dot on a graph. This means that you can place them very flexibly. Above, I\u2019ve placed them on the `entry` attribute of the state, meaning that action will be fired when we enter the state. I could also place them on the transition:\\n\\n```ts\\nconst modalMachine = createMachine(\\n  {\\n    initial: \\"closed\\",\\n    states: {\\n      closed: {\\n        on: {\\n          OPEN: {\\n            actions: \\"reportThatUserOpenedTheModal\\",\\n            target: \\"open\\",\\n          },\\n        },\\n      },\\n      open: {\\n        on: {\\n          CLOSE: \\"closed\\",\\n        },\\n      },\\n    },\\n  },\\n  {\\n    actions: {\\n      reportThatUserOpenedTheModal: async () => {\\n        // implementation\\n      },\\n    },\\n  }\\n);\\n```\\n\\nThis means that whenever `OPEN` is called from the `closed` state, that action will be fired. In this modal, we could also fire the action whenever the user leaves the `closed` state, since we know they\u2019ll be going to the `open` state.\\n\\n```ts\\nconst modalMachine = createMachine(\\n  {\\n    initial: \\"closed\\",\\n    states: {\\n      closed: {\\n        on: {\\n          OPEN: \\"open\\",\\n        },\\n        exit: [\\"reportThatUserOpenedTheModal\\"],\\n      },\\n      open: {\\n        on: {\\n          CLOSE: \\"closed\\",\\n        },\\n      },\\n    },\\n  },\\n  {\\n    actions: {\\n      reportThatUserOpenedTheModal: async () => {\\n        // implementation\\n      },\\n    },\\n  }\\n);\\n```\\n\\nActions are flexible precisely because we don\u2019t care about their outcome. We can hang them on the hooks our state machine gives us: transitions between states, exiting states and entering states.\\n\\n## Services\\n\\n> \u201cAnd I plan to be forgotten when I\u2019m gone\u2026\u201d - The Tallest Man on Earth\\n\\nBut actions have a specific limitation - they are designed to be forgotten. Let\u2019s imagine that you wanted to track whether the analytics call you made was successful, and only open the modal if it was. We\u2019ll add an `opening` state which handles that check.\\n\\n```ts\\nconst modalMachine = createMachine({\\n  initial: \\"closed\\",\\n  states: {\\n    closed: {\\n      on: {\\n        OPEN: \\"opening\\",\\n      },\\n    },\\n    opening: {\\n      entry: [\\n        async () => {\\n          await fetch(\\"/external-service/user-opened-modal\\");\\n\\n          // OK, this was successful - how do I get to the open state?!\\n        },\\n      ],\\n    },\\n    open: {\\n      on: {\\n        CLOSE: \\"closed\\",\\n      },\\n    },\\n  },\\n});\\n```\\n\\nThis isn\u2019t possible in an action. We can\u2019t fire back an event to the machine, because it\u2019s already forgotten about us.\\n\\nWhen you care about the result of an action, put it in a service. This is how this would be expressed as a service:\\n\\n```ts\\nconst modalMachine = createMachine({\\n  initial: \\"closed\\",\\n  states: {\\n    closed: {\\n      on: {\\n        OPEN: \\"opening\\",\\n      },\\n    },\\n    opening: {\\n      invoke: {\\n        // This uses the invoked callback syntax - my favourite\\n        // syntax for expressing services\\n        src: () => async (send) => {\\n          await fetch(\\"/external-service/user-opened-modal\\");\\n\\n          send(\\"OPENED_SUCCESSFULLY\\");\\n        },\\n        onError: {\\n          target: \\"closed\\",\\n        },\\n      },\\n      on: {\\n        OPENED_SUCCESSFULLY: {\\n          target: \\"open\\",\\n        },\\n      },\\n    },\\n    open: {\\n      on: {\\n        CLOSE: \\"closed\\",\\n      },\\n    },\\n  },\\n});\\n```\\n\\nIf actions are a dot on the graph, services represent a line - a continuous process which takes some amount of time. If the service errors, it\u2019ll trigger an event called `error.platform.serviceName`, which you can listen for with the `onError` attribute, as above.\\n\\nCrucially, they can also send events back to the machine, using the `send` function above. Notice that we\u2019re both sending back the `OPENED_SUCCESSFULLY` event _and_ listening to it in the `on: {}` attribute of the `opening` state.\\n\\nServices are less flexible than actions, because they demand more from you. You can\u2019t hang them on every hook your machine offers. They must be contained within one state, and they\u2019re cancelled when you leave that state. (Note: they can also be at the root of the machine definition, meaning they run for the lifetime of the machine.)\\n\\n## Guidelines\\n\\nActions are the \u2018thank u, next\u2019 of the XState world. They represent points in time. Use them for fire-and-forget actions. Actions are great for:\\n\\n- `console.log`\\n- Showing ephemeral error or success messages (toasts)\\n- Navigating between pages\\n- Firing off events to external services or parents of your machine\\n\\nServices are like a \u2018phase\u2019 your machine goes through. They represent a length of time. Use them for processes where you care about the outcome, or you want the process to run for a long time. Services are great for:\\n\\n- API calls\\n- Event listeners (`window.addEventListener`)"},{"id":"2021-04-29-should-this-be-a-state-or-in-context","metadata":{"permalink":"/statelyai-docs/blog/2021-04-29-should-this-be-a-state-or-in-context","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2021-04-29-should-this-be-a-state-or-in-context/index.mdx","source":"@site/blog/2021-04-29-should-this-be-a-state-or-in-context/index.mdx","title":"Should this be a state, or in context?","description":"How to decide when to use state or context.","date":"2021-04-29T00:00:00.000Z","formattedDate":"April 29, 2021","tags":[{"label":"context","permalink":"/statelyai-docs/blog/tags/context"},{"label":"state machine","permalink":"/statelyai-docs/blog/tags/state-machine"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"state","permalink":"/statelyai-docs/blog/tags/state"}],"readingTime":3.48,"hasTruncateMarker":true,"authors":[{"name":"Matt Pocock","title":"Stately Team","url":"https://github.com/mattpocock","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png","key":"matt"}],"frontMatter":{"title":"Should this be a state, or in context?","description":"How to decide when to use state or context.","tags":["context","state machine","xstate","state"],"authors":["matt"],"image":"/blog/2021-04-29-should-this-be-a-state-or-in-context.png","slug":"2021-04-29-should-this-be-a-state-or-in-context","date":"2021-04-29T00:00:00.000Z"},"prevItem":{"title":"Should this be an action, or a service?","permalink":"/statelyai-docs/blog/2021-04-30-should-this-be-an-action-or-a-service"},"nextItem":{"title":"What\u2019s the difference between Machine and createMachine?","permalink":"/statelyai-docs/blog/2021-04-28-whats-the-difference-between-machine-and-createmachine"}},"content":"State machines offer several API\u2019s for expressing state. Like other tools, you can keep arbitrary values in a store (usually expressed as an object) called `context`.\\n\\n\x3c!--truncate--\x3e\\n\\nThis is handy for values which change over time and you need to keep updated, like the value of a form input:\\n\\n```ts\\nimport { createMachine, assign } from \\"xstate\\";\\n\\nconst machine = createMachine({\\n  context: {\\n    name: \\"\\",\\n  },\\n  on: {\\n    CHANGE_NAME: {\\n      actions: assign((context, event) => {\\n        return {\\n          name: event.value,\\n        };\\n      }),\\n    },\\n  },\\n});\\n```\\n\\nEvery time the `CHANGE_NAME` event is sent to the machine, we\'ll update the value in `context`. We can then use that value to display the value in our UI or send it to an API.\\n\\nXState also gives you another way of expressing state - through finite states. Let\'s imagine a modal:\\n\\n```ts\\nconst machine = createMachine({\\n  initial: \\"closed\\",\\n  states: {\\n    closed: {\\n      on: {\\n        OPEN: \\"open\\",\\n      },\\n    },\\n    open: {\\n      on: {\\n        CLOSE: \\"close\\",\\n      },\\n    },\\n  },\\n});\\n```\\n\\nHere, the modal\'s state is expressed through the `states: {}` attribute, which also defines which events can be received during each state. You can only `CLOSE` the modal when it\'s `open`, and vice versa.\\n\\n## Which should I choose?\\n\\nThe choice between using `context` and `states` isn\'t always clear. For instance, the modal machine above could be expressed using `context`:\\n\\n```ts\\nconst machine = createMachine({\\n  context: {\\n    isOpen: false,\\n  },\\n  on: {\\n    OPEN: {\\n      actions: assign({ isOpen: true }),\\n    },\\n    CLOSE: {\\n      actions: assign({ isOpen: false }),\\n    },\\n  },\\n});\\n```\\n\\nThis gives you exactly the same functionality as the states-based one above - you can track when the modal is open and closed, and send the same events.\\n\\nThe reason this can be expressed using both `states` and `context` is because _all of the events do the same thing no matter what state you\u2019re in_. There are no events you need to declare as impossible in certain states.\\n\\nTo show you what I mean, let\u2019s imagine a form input inside a modal. We only want to allow changes to the form input while the modal is open.\\n\\n```ts\\nconst machine = createMachine({\\n  initial: \\"closed\\",\\n  context: {\\n    name: \\"\\",\\n  },\\n  states: {\\n    closed: {\\n      on: {\\n        OPEN: \\"open\\",\\n      },\\n    },\\n    open: {\\n      on: {\\n        CLOSE: \\"close\\",\\n        CHANGE_NAME: {\\n          actions: assign((context, event) => {\\n            return {\\n              name: event.value,\\n            };\\n          }),\\n        },\\n      },\\n    },\\n  },\\n});\\n```\\n\\nWhen the modal is in the `closed` state, the `CHANGE_NAME` event will not change the value in `context`. State machines are great at this - only allowing the things you want to happen to happen. Some other examples might be:\\n\\n- Not allowing users to submit a form while the previous API call is loading\\n- Only allowing users to log in if they\u2019re not already logged in\\n\\n## Putting things in context\\n\\nYou might be wondering - but, I _can_ express the above in `context`!\\n\\n```ts\\nconst machine = createMachine({\\n  context: {\\n    name: \\"\\",\\n    isOpen: false,\\n  },\\n  on: {\\n    OPEN: { actions: assign({ isOpen: true }) },\\n    CLOSE: { actions: assign({ isOpen: false }) },\\n    CHANGE_NAME: {\\n      actions: assign((context, event) => {\\n        // This acts as the guard to prevent editing\\n        // the name while it\'s open\\n        if (!context.isOpen) return {};\\n        return {\\n          name: event.value,\\n        };\\n      }),\\n    },\\n  },\\n});\\n```\\n\\nI think this is incorrect for two reasons. First, as requirements grow, so will the complexity of your logic. Let\u2019s imagine that the modal can now be either `closing` (i.e. animating out) or `closed`. We\u2019ll soon see an explosion of booleans, as I discussed in [this article on useState/useReducer](https://dev.to/mpocock1/usestate-vs-usereducer-vs-xstate-part-1-modals-569e).\\n\\nSecond, XState is auto-documenting via the [XState visualiser](https://xstate.js.org/viz/). The more your logic is expressed in `states`, the easier it\u2019s going to be to visualise. The machine above is basically a single state with its logic expressed in ways that XState can\u2019t visualise.\\n\\n## Rules to live by\\n\\nYou should be keeping most of your state in context. That includes form values, API data - anything which cannot be expressed finitely.\\n\\nBut state machines are powerful _because_ of their states. Use states when you want to express your logic visually, or gate events to certain states."},{"id":"2021-04-28-whats-the-difference-between-machine-and-createmachine","metadata":{"permalink":"/statelyai-docs/blog/2021-04-28-whats-the-difference-between-machine-and-createmachine","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2021-04-28-whats-the-difference-between-machine-and-createmachine/index.mdx","source":"@site/blog/2021-04-28-whats-the-difference-between-machine-and-createmachine/index.mdx","title":"What\u2019s the difference between Machine and createMachine?","description":"XState offers two options for declaring machine definitions. This can be confusing for beginners. Why are there two very similar-looking methods? What\u2019s the difference?","date":"2021-04-28T00:00:00.000Z","formattedDate":"April 28, 2021","tags":[{"label":"typescript","permalink":"/statelyai-docs/blog/tags/typescript"},{"label":"state machine","permalink":"/statelyai-docs/blog/tags/state-machine"}],"readingTime":1.255,"hasTruncateMarker":true,"authors":[{"name":"Matt Pocock","title":"Stately Team","url":"https://github.com/mattpocock","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png","key":"matt"}],"frontMatter":{"title":"What\u2019s the difference between Machine and createMachine?","description":"XState offers two options for declaring machine definitions. This can be confusing for beginners. Why are there two very similar-looking methods? What\u2019s the difference?","tags":["typescript","state machine"],"authors":["matt"],"image":"/blog/2021-04-28-whats-the-difference-between-machine-and-createmachine.png","slug":"2021-04-28-whats-the-difference-between-machine-and-createmachine","date":"2021-04-28T00:00:00.000Z"},"prevItem":{"title":"Should this be a state, or in context?","permalink":"/statelyai-docs/blog/2021-04-29-should-this-be-a-state-or-in-context"},"nextItem":{"title":"You don\u2019t need a library for state machines","permalink":"/statelyai-docs/blog/2021-01-20-you-dont-need-a-library-for-state-machines"}},"content":"<head>\\n  <link rel=\\"canonical\\" href=\\"https://dev.to/mpocock1/xstate-what-s-the-difference-between-machine-and-createmachine-15h1\\" />\\n</head>\\n\\nXState offers two options for declaring machine definitions:\\n\\n```ts\\nimport { Machine } from \\"xstate\\";\\n\\nconst machine = Machine({ ...config });\\n```\\n\\n\u2026or\u2026\\n\\n```ts\\nimport { createMachine } from \\"xstate\\";\\n\\nconst machine = createMachine({ ...config });\\n```\\n\\nThis can be confusing for beginners. Why are there two very similar-looking methods? What\u2019s the difference?\\n\\n\x3c!--truncate--\x3e\\n\\n## The Difference\\n\\nIn Javascript, there is no difference between the two. You can use them completely interchangeably.\\n\\nIn Typescript, there is only a small difference between them - it\u2019s to do with the ordering of the generics you can pass to the machine. `Machine` allows you to pass a generic called [\'Typestates\'](https://xstate.js.org/docs/guides/typescript.html#typestates) in the middle of the `Context` and `Event` generics.\\n\\n```ts\\nimport { Machine } from \\"xstate\\";\\n\\ninterface Context {}\\n\\ntype Event = { type: \\"EVENT_NAME\\" };\\n\\ntype States = {};\\n\\nconst machine = Machine<Context, States, Event>({ ...config });\\n```\\n\\nWhereas `createMachine` asks you to insert it at the end:\\n\\n```ts\\nimport { createMachine } from \\"xstate\\";\\n\\ninterface Context {}\\n\\ntype Event = { type: \\"EVENT_NAME\\" };\\n\\ntype States = {};\\n\\nconst machine = createMachine<Context, Event, States>({ ...config });\\n```\\n\\nWhichever you choose, there is _no functional difference in the created machine_. The two functions reference the same code, and create the machine in the same way.\\n\\n## What should I choose?\\n\\nGoing forward, you should use `createMachine`. That\u2019s the syntax that will be preferred when v5 releases. But if you\'re happy with Machine, you can keep using it."},{"id":"2021-01-20-you-dont-need-a-library-for-state-machines","metadata":{"permalink":"/statelyai-docs/blog/2021-01-20-you-dont-need-a-library-for-state-machines","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2021-01-20-you-dont-need-a-library-for-state-machines/index.mdx","source":"@site/blog/2021-01-20-you-dont-need-a-library-for-state-machines/index.mdx","title":"You don\u2019t need a library for state machines","description":"Do you need a library to create and interpret state machines in your programs? No. But there are more things to consider.","date":"2021-01-20T00:00:00.000Z","formattedDate":"January 20, 2021","tags":[{"label":"finite state machine","permalink":"/statelyai-docs/blog/tags/finite-state-machine"},{"label":"statechart","permalink":"/statelyai-docs/blog/tags/statechart"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"state machine","permalink":"/statelyai-docs/blog/tags/state-machine"}],"readingTime":12.765,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"You don\u2019t need a library for state machines","description":"Do you need a library to create and interpret state machines in your programs? No. But there are more things to consider.","tags":["finite state machine","statechart","xstate","state machine"],"authors":["david"],"image":"/blog/2021-01-20-you-dont-need-a-library-for-state-machines.png","slug":"2021-01-20-you-dont-need-a-library-for-state-machines","date":"2021-01-20T00:00:00.000Z"},"prevItem":{"title":"What\u2019s the difference between Machine and createMachine?","permalink":"/statelyai-docs/blog/2021-04-28-whats-the-difference-between-machine-and-createmachine"},"nextItem":{"title":"\u201cJust use props\u201d: An opinionated guide to React and XState","permalink":"/statelyai-docs/blog/2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate"}},"content":"<head>\\n  <link rel=\\"canonical\\" href=\\"https://dev.to/davidkpiano/you-don-t-need-a-library-for-state-machines-k7h\\" />\\n</head>\\n\\nThe finite state machine is one of the oldest models of computation in computer science. It\u2019s older than the web, older than any programming language you can think of, and probably older than you. Just ask [Mealy (1955)](https://en.wikipedia.org/wiki/Mealy_machine) or [Moore (1956)](https://en.wikipedia.org/wiki/Moore_machine). Finite state machines (FSMs) can be implemented in any modern language using control-flow statements, yet there\u2019s most likely a state machine library (if not many) in all of those languages.\\n\\n\x3c!--truncate--\x3e\\n\\nSo do you need a library to create and interpret state machines in your programs?\\n\\n**No.** But there are more things to consider.\\n\\n## You probably need state machines\\n\\nIf you\u2019re unfamiliar with [finite state machines (FSMs)](https://en.wikipedia.org/wiki/Finite-state_machine), they are a visual and mathematical way of modeling stateful logic using 3 main building blocks:\\n\\n- **Finite states**, which represent different _behaviors_\\n- **Events**, which represent something that happened that can change state\\n- **Transitions**, which represent how the state can change and what actions are executed when an event is received\\n\\n![States, events, and transitions](https://res.cloudinary.com/practicaldev/image/fetch/s--NRBTk8Po--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7ri5sbbrufj26cq3u026.png)\\n\\nAnything that can be described as changes in state over time due to events, from component-specific logic to application flows and even the orchestration of multiple services can be described with state machines, to some extent.\\n\\nA state machine might be a different, unfamiliar way of thinking about your application logic, but they\u2019re extremely useful. Instead of approaching logic from a \\"bottom-up\\" perspective (imperatively doing things based on events), they take a \\"top-down\\" approach and primarily consider _behaviors_, which describe how the logic will react to events in a given finite state (such as `loading`, `editing`, `disabled`, etc.).\\n\\nBecause of their explicit, declarative nature, state machines force you to think about the entire flow of your logic (including all the edge-cases), and make it virtually impossible to end up in an \u201dimpossible state\u201d, as long as your model doesn\u2019t allow it. Only defined transitions can happen; and if an unexpected transition happens, it means there is an implicit state machine where that transition _does_ exist. The goal of state machines is to eliminate the implicit transitions so that we can know exactly what can happen in any state for any potential event.\\n\\nState machines are **not a solution for everything** - just like anything else, they make sense for some use-cases (workflows, processes, modes, statuses, etc.) but not all use-cases. You shouldn\u2019t use state machines everywhere, or even implement them explicitly all of the time (that\u2019s what abstractions are for). They make a good refactor target, and they\u2019re great for visually modeling your logic with pencil and paper, even if you ultimately decide not to use them in your code. But when working with logic that deals with explicit states, events, and transitions (which, surprise, tends to be the majority of app logic), state machines are a brilliant, natural solution.\\n\\nThere are so many other benefits to thinking in terms of states, events, and transitions, but that\u2019s not the point of this post (but it is the point of [another post I wrote](https://dev.to/davidkpiano/no-disabling-a-button-is-not-app-logic-598i)). Let\u2019s say you\u2019re already convinced in using state machines in parts of your app. Should you reach for a library?\\n\\n## You don\u2019t need a library for state machines\\n\\nSince state machines are not a new concept and can be implemented in any modern language using built-in language features, it follows that state machine libraries are not necessary. Again, all you need are the 3 building blocks:\\n\\n- **Finite states**\\n- **Events**\\n- **Transitions**\\n\\nThe transitions are what tie everything together. Transitions are represented by a [state-transition function](https://en.wikipedia.org/wiki/Finite-state_machine#Mathematical_model) that looks like this, mathematically:\\n\\n> \ud835\udec5 : \ud835\udc46 \ud835\uddd1 \ud835\udef4 \u2192 \ud835\udc46\\n\\n\u2026which might not make sense (even if you do speak Greek). This might be more understandable:\\n\\n> transition : (state, event) => nextState\\n\\nIn JavaScript, we can represent this as a _reducer_, which is a function that reduces values (events) to a single accumulated value (state):\\n\\n```js\\nfunction transition(state, event) {\\n  // state machine goes here, which\\n  // determines the next state based on the\\n  // current state + received event\\n  // ...\\n\\n  return nextState;\\n}\\n```\\n\\nNow, let\u2019s draw the rest of the owl implement the rest of the state machine!\\n\\n### Using `switch` statements\\n\\nTypically, when we\u2019re determining _behavior_ (\\"what happens next\\"), we tend to decide what should happen next based on the _event_. The finite state is an after-thought, if it\u2019s even a consideration at all. This leads to fragile logic, with `if`\\\\-statements strewn all over the place:\\n\\n```js\\n    // \u274c Event-first approach\\n    switch (event.type) {\\n      case \'DATA_RECEIVED\':\\n        // defensive programming\\n        if (state.isLoading) {\\n          // do something\\n        } else {\\n          // ...\\n        }\\n      }\\n      // ...\\n    }\\n```\\n\\nIn contrast, state machines group behavior by **finite state** and narrow down what happens next based on the event received:\\n\\n```js\\n// \u2705 Finite-state-first approach\\nswitch (state.status) {\\n  case \\"loading\\":\\n    // narrow based on event\\n    switch (event.type) {\\n      case \\"DATA_RECEIVED\\":\\n      // do something, and possibly\\n      // change the finite state\\n      // ...\\n    }\\n  // ...\\n}\\n```\\n\\nAs the author of the code, the event-first (bottom-up) approach might seem fine to you; after all, if it works, it works. One of the main advantages of taking a \u201dfinite-state-first\u201d (top-down) approach and using state machines is that the logic is not only more clear (since it\u2019s grouped by finite state), it\u2019s more robust: you can ensure that an event won\u2019t be improperly handled in a state that it shouldn\u2019t be handled in. In other words, you prevent _impossible states_ and _impossible transitions_ without having to litter your code with `if`\\\\-statements and excessive defensive programming.\\n\\nI also like to think of state machines as a formal way of communicating logic. If you were describing the above logic, here\u2019s how it would sound with an event-first approach:\\n\\n> When data is received, do something, but only if the \\"loading\\" flag is true.\\n\\nAnd with a finite-state-first approach:\\n\\n> In the \u201dloading\u201d state, when data is received, do something.\\n\\nWhich one sounds more natural and easy to understand? To me, there is less cognitive load with the 2nd statement. Reactions to events are grouped by _behavior_ (finite state) rather than being ungrouped.\\n\\n### Using `switch` statements with functions\\n\\nSince finite states can be considered a way to group behavior, another way you can organize your `switch` statements is by \u201cgrouping\u201d each finite state\u2019s behavior into a function:\\n\\n```js\\n    // \'loading\' behavior\\n    function loadingState(state, event) {\\n      // switch only on the event\\n      switch (event.type) {\\n        case \'DATA_RECEIVED\':\\n          return {\\n            ...state,\\n            status: \'success\'\\n          }\\n        }\\n        // ...\\n      }\\n    }\\n\\n    function dataMachine(state, event) {\\n      switch (state.status) {\\n        case \'loading\':\\n          // handle the event with \'loading\' behavior\\n          return loadingState(state, event);\\n        }\\n        // ...\\n      }\\n    }\\n```\\n\\nThis approach is outlined in the [Redux style guide recommendation: Treat Reducers as State Machines](https://redux.js.org/style-guide/style-guide/#treat-reducers-as-state-machines). It\u2019s a very organized approach, and each \u201cbehavior function\u201d can be individually tested, since they are isolated, pure reducers.\\n\\n### Using objects\\n\\nUsing nested `switch` statements may feel verbose, and while using functions to organize these `switch` statements may look cleaner, it\u2019s more tedious. After all, a state transition can be considered a configuration of (at least) 2 things based on the event received:\\n\\n- The next **finite state**, if it changes\\n- Any **action(s)** executed, if any\\n\\nA simple, built-in way to represent such a configuration is an object. We can create an object structure where each \u201dstate node\u201d represents a finite state with transitions for each event accepted by the state:\\n\\n```js\\nconst machine = {\\n  initial: \\"loading\\",\\n  states: {\\n    // A finite \\"state node\\"\\n    loading: {\\n      on: {\\n        // event types\\n        DATA_RECEIVED: {\\n          target: \\"success\\",\\n          // actions: [...]\\n        },\\n      },\\n    },\\n    // ...\\n  },\\n};\\n// ...\\n```\\n\\nThis is much more succinct than the nested `switch` statements! From here, determining the next state based on the current finite state and received event is two key lookups (the finite state and the event type):\\n\\n```js\\n// ...\\nfunction transition(state, event) {\\n  const nextStateNode = // lookup next finite state based on event type\\n    // lookup configuration for current finite state\\n    machine.states[state.status].on?.[event.type] ?? { target: state.status }; // if not handled, stay on current state\\n\\n  return {\\n    ...state,\\n    status: nextStateNode.target,\\n  };\\n}\\n\\ntransition({ status: \\"loading\\" }, { type: \\"DATA_RECEIVED\\" });\\n// => { status: \'success\', ... }\\n```\\n\\nYou might be wondering why I didn\u2019t use an even simpler object here, which you definitely can do:\\n\\n```js\\nconst transitions = {\\n  loading: {\\n    DATA_RECEIVED: \\"success\\",\\n  },\\n  success: {\\n    /* ... */\\n  },\\n};\\n\\nfunction transition(state, event) {\\n  const nextStateTarget = transitions[state.status][event.type] ?? state.status;\\n\\n  return {\\n    ...state,\\n    status: nextStateTarget,\\n  };\\n}\\n```\\n\\nIn fact, I would encourage the above implementation as sort of a \u201ctransition table lookup\u201d; it works, and it\u2019s simple enough. However, state machines deal with more than just the next finite state; if we want to encode **actions** (state machine terminology for effects), we need a place to put them, so a little bit more structure is necessary.\\n\\nFor instance, if our `DATA_RECEIVED` event returns data that we want to save in our overall state, it might be convenient to place that \u201cassign to state\u201d action directly in the machine:\\n\\n```js\\nconst machine = {\\n  initial: \\"loading\\",\\n  states: {\\n    loading: {\\n      on: {\\n        // event types\\n        DATA_RECEIVED: {\\n          target: \\"success\\",\\n          // represents what \\"effects\\" should happen\\n          // as a result of taking this transition\\n          actions: [{ type: \\"saveData\\" }],\\n        },\\n      },\\n    },\\n    // ...\\n  },\\n};\\n\\nfunction transition(state, event) {\\n  const nextStateNode = machine.states[state.status].on?.[event.type] ?? {\\n    target: state.status,\\n  };\\n\\n  const nextState = {\\n    ...state,\\n    status: nextStateNode.target,\\n  };\\n\\n  // go through the actions to determine\\n  // what should be done\\n  nextStateNode.actions?.forEach((action) => {\\n    if (action.type === \\"saveData\\") {\\n      nextState.data = event.data;\\n    }\\n  });\\n\\n  return nextState;\\n}\\n```\\n\\nThe implementation above is very small, accomplishes everything we want from a state machine (for this use-case, at least), and as a bonus, you can copy-paste the `machine` object code directly into the [XState Visualizer](https://xstate.js.org/viz), even though it\'s not using XState, or any libraries, at all! (Tip: wrap the object in `Machine({ ... })` to get it working).\\n\\nKent C. Dodds made a similar implementation is his post [Implementing a Simple State Machine Library in JavaScript](https://kentcdodds.com/blog/implementing-a-simple-state-machine-library-in-javascript). It also takes advantage of using objects for describing the state machine structure.\\n\\n## State machines aren\'t enough\\n\\nSo if we can get our basic state management needs met with a small, declarative, library-free state machine implementation (either using `switch` statements or objects), why do we need libraries such as [XState](https://github.com/davidkpiano/xstate)?\\n\\nThis might be a bit of a shock coming from me, but I\u2019ll say it: _state machines are not sufficient_ for managing and orchestrating state at scale. State machines suffer from a fundamental problem called [state explosion](https://statecharts.github.io/state-machine-state-explosion.html): when the number of states in a state machine grow, the transitions between states also tend to grow, _exponentially_.\\n\\nThankfully, an extension to the traditional formalism of state machines, known as **statecharts**, was invented by Prof. David Harel and published in his paper [Statecharts: A Visual Formalism for Complex Systems](https://www.sciencedirect.com/science/article/pii/0167642387900359/pdf). The paper is full of diagrams and is quite readable; I strongly encourage you to read it.\\n\\nYou can think of statecharts as essentially being state machines (statecharts can be decomposed into FSMs) with some essential features for better state organization and real-world use-cases:\\n\\n- **Hierarchy** (nested states)\\n- **Orthogonality** (parallel states)\\n- **History** (remembered states)\\n- **State actions** (entry, exit)\\n- **Guarded transitions**\\n- **Extended state** (contextual data)\\n\\nNotably, the first two features (hierarchy and orthogonality) mitigate the state explosion problem by allowing state nodes to be grouped in a way that reduces the number of transitions necessary to fully express all possible transitions.\\n\\nFor example, if you were creating a state machine to represent editing and asynchronously saving some data, and you wanted to have shared behavior between some \u201didle\u201d (before saving) and \u201cerror\u201d (failure after saving) state (e.g., `SUBMIT` to try/retry), then instead of having a flat state machine:\\n\\n```js\\n    {\\n      idleNormal: {\\n        on: {\\n          SAVE: {\\n            target: \'saving\',\\n            actions: [{ type: \'saveAsync\' }]\\n          }\\n        }\\n      },\\n      saving: {/* ... */},\\n      idleError: {\\n        on: {\\n          SAVE: {\\n            target: \'saving\',\\n            actions: [{ type: \'saveAsync\' }]\\n          }\\n        }\\n      },\\n      // ...\\n    }\\n\\n```\\n\\nYou can represent the shared behavior under the same parent state:\\n\\n```js\\n    {\\n      idle: {\\n        // if child states don\'t handle these events,\\n        // handle it here, in the parent state\\n        on: {\\n          SAVE: {\\n            target: \'saving\',\\n            actions: [{ type: \'saveAsync\' }]\\n          }\\n        },\\n        initial: \'normal\',\\n        states: {\\n          normal: {/* ... */},\\n          error: {/* ... */}\\n        }\\n      },\\n      saving: {/* ... */},\\n      // ...\\n    }\\n```\\n\\nOverall, the features of statecharts are very useful in many different situations:\\n\\n- **Nested states** are useful for grouping and refining behavior. Different \u201dfinite states\u201d can all share behavior, while all having their own specific behavior.\\n- **Parallel states** are useful for representing behaviors that can occur simultaneously, without directly affecting each other.\\n- **History states** are useful for recalling which nested state the machine was previously in without having to specify all the possible \u201dremembering\u201d transitions.\\n- **State actions** are useful for specifying actions that should always be executed on any transition that enters/exits a state without having to specify those actions in all incoming/outgoing transitions.\\n- **Guarded transitions** are very important for conditionally taking transitions based on more than just the state and event type. They can take other data (extended state) and/or event data into consideration, as well.\\n- **Extended state** is absolutely necessary. Not all state is finite; \u201dinfinite\u201d state also needs to be quantified. Statecharts allow you to distinguish between finite and extended state.\\n\\nThere\'s even more features of classic statecharts, such as \u201dactivities\u201d (actions that occur _throughout_ a state), delays, eventless transitions, wildcard transitions, and more. And the more you work with statecharts, the more you realize just how essential most of these features actually are.\\n\\nSounds like it would be fun to implement these features on top of our state machines, right?\\n\\n## Implementing statecharts\\n\\nI hope you have a _lot_ of free time.\\n\\nSince statecharts are more powerful than state machines, they\u2019re also harder to implement. If you\u2019re really curious and/or eager to implement them yourself, I strongly recommend following the [W3 SCXML (Statechart XML) spec](https://www.w3.org/TR/scxml). They even include [an algorithm in pseudocode](https://www.w3.org/TR/scxml/#AlgorithmforSCXMLInterpretation) for proper SCXML interpretation.\\n\\nEven implementing something as seemingly straightforward as nested states is a daunting task. There are many rules about selecting transitions, resolving conflicting transitions, traversing the state node tree to determine which nodes are being exited/entered, selecting transitions in compound states if leaf nodes don\'t handle the event, determining action order, etc. etc.\\n\\nIt\u2019s not easy, and just like you would use a date library to deal with timezones, you definitely want to use a statechart library to deal with all the excellent features that statecharts support.\\n\\n## So do you need a library for statecharts?\\n\\nYes.\\n\\n## Closing thoughts\\n\\nIf you\u2019re satisfied manipulating state at any time and sprinkling `if`\\\\-statements to patch up edge-cases, you probably don\u2019t need explicit state machines.\\n\\nIf you want to use simple state machines to help organize app behavior and logic, you don\u2019t need a library.\\n\\nIf you have complex logic and want to take advantage of more powerful state machine features to better manage this logic, you need statecharts.\\n\\nAnd you _definitely_ need a library for statecharts. \ud83d\ude09"},{"id":"2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate","metadata":{"permalink":"/statelyai-docs/blog/2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate/index.mdx","source":"@site/blog/2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate/index.mdx","title":"\u201cJust use props\u201d: An opinionated guide to React and XState","description":"XState is the most powerful tool available for managing complex state. The challenge comes when integrating XState with React\u2026","date":"2021-01-11T00:00:00.000Z","formattedDate":"January 11, 2021","tags":[{"label":"prop","permalink":"/statelyai-docs/blog/tags/prop"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"state machine","permalink":"/statelyai-docs/blog/tags/state-machine"},{"label":"react","permalink":"/statelyai-docs/blog/tags/react"}],"readingTime":5.685,"hasTruncateMarker":true,"authors":[{"name":"Matt Pocock","title":"Stately Team","url":"https://github.com/mattpocock","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png","key":"matt"}],"frontMatter":{"title":"\u201cJust use props\u201d: An opinionated guide to React and XState","description":"XState is the most powerful tool available for managing complex state. The challenge comes when integrating XState with React\u2026","tags":["prop","xstate","state machine","react"],"authors":["matt"],"image":"/blog/2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate.png","slug":"2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate","date":"2021-01-11T00:00:00.000Z"},"prevItem":{"title":"You don\u2019t need a library for state machines","permalink":"/statelyai-docs/blog/2021-01-20-you-dont-need-a-library-for-state-machines"},"nextItem":{"title":"State machines: How to stop making Horcruxes in your code","permalink":"/statelyai-docs/blog/2020-07-27-state-machines-how-to-stop-making-horcruxes-in-your-code"}},"content":"XState can feel overwhelming. Once you\u2019ve gone through [Kyle](https://egghead.io/courses/introduction-to-state-machines-using-xstate) or [David\u2019s](https://frontendmasters.com/courses/xstate/) courses and read through the [docs](https://xstate.js.org/docs), you\u2019ll get a thorough understanding of the API. You\u2019ll see that XState is the most powerful tool available for managing complex state.\\n\\nThe challenge comes when integrating XState with React. Where should state machines live in my React tree? How should I manage parent and child machines?\\n\\n\x3c!--truncate--\x3e\\n\\n<Tweet id=\\"1345085887026106368\\" />\\n\\n## Just Use Props\\n\\nI\u2019d like to propose an architecture for XState and React which prioritises simplicity, readability and type-safety. It\u2019s incrementally adoptable, and gives you a base for exploring more complex solutions. We\u2019ve used it at [Yozobi](https://www.yozobi.com/) in production, and we\u2019re planning to use it for every project moving forward.\\n\\nIt\u2019s called **just use props**. It\u2019s got a few simple rules:\\n\\n1. Create machines. Not too many. Mostly useMachine\\n2. Let React handle the tree\\n3. Keep state as local as possible\\n\\n### Create machines. Not too many. Mostly useMachine\\n\\nThe simplest way to integrate a state machine in your app is with `useMachine`.\\n\\n```ts\\nimport { createMachine, interpret } from \\"xstate\\";\\nimport { useMachine } from \\"@xstate/react\\";\\n\\nconst machine = createMachine({\\n  initial: \\"open\\",\\n  states: {\\n    open: {},\\n    closed: {},\\n  },\\n});\\n\\nconst Component = () => {\\n  const [state, send] = useMachine(machine);\\n\\n  return state.matches(\\"open\\") ? \\"Open\\" : \\"Closed\\";\\n};\\n```\\n\\nNote that this puts React in charge of the machine. The machine is tied to the component, and it obeys all the normal React rules of the [data flowing down](https://reactjs.org/docs/state-and-lifecycle.html#the-data-flows-down). In other words, you can think of it just like `useState` or `useReducer`, but a [vastly improved version](https://dev.to/mpocock1/usestate-vs-usereducer-vs-xstate-part-1-modals-569e).\\n\\n### Let React handle the tree\\n\\nLet\u2019s say you have a parent component and a child component. The parent has some state which it needs to pass to the child. There are several ways to do this.\\n\\n#### Passing services through props\\n\\nThe first is to pass a running service to the child which the child can subscribe to:\\n\\n```ts\\nimport { useMachine, useService } from \\"@xstate/react\\";\\nimport { createMachine, Interpreter } from \\"xstate\\";\\n\\n/**\\n * Types for the machine declaration\\n */\\ntype MachineContext = {};\\ntype MachineEvent = { type: \\"TOGGLE\\" };\\n\\nconst machine = createMachine<MachineContext, MachineEvent>({});\\n\\nconst ParentComponent = () => {\\n  /**\\n   * We instantiate the service here...\\n   */\\n  const [state, send, service] = useMachine(machine);\\n\\n  return <ChildComponent service={service} />;\\n};\\n\\ninterface ChildComponentProps {\\n  service: Interpreter<MachineContext, any, MachineEvent>;\\n}\\n\\nconst ChildComponent = (props: ChildComponentProps) => {\\n  /**\\n   * ...and receive it here\\n   */\\n  const [state, send] = useService(props.service);\\n\\n  return (\\n    <button onClick={() => send(\\"TOGGLE\\")}>\\n      {state.matches(\\"open\\") ? \\"Open\\" : \\"Closed\\"}\\n    </button>\\n  );\\n};\\n```\\n\\nI don\u2019t like this pattern. For someone not used to XState, it\u2019s unclear what a \u2018service\u2019 is. We don\u2019t get clarity from reading the types, which is a particularly ugly `Interpreter` with multiple generics.\\n\\nThe machine appears to bleed across multiple components. Its service seems to have a life of its own, outside of React\'s tree. To a newbie, this feels like misdirection.\\n\\n#### Just pass props\\n\\nThis can be expressed much more cleanly using props:\\n\\n```ts\\nimport { useMachine } from \\"@xstate/react\\";\\nimport { createMachine } from \\"xstate\\";\\n\\n/**\\n * Types for the machine declaration\\n */\\ntype MachineContext = {};\\ntype MachineEvent = { type: \\"TOGGLE\\" };\\n\\nconst machine = createMachine<MachineContext, MachineEvent>({});\\n\\nconst ParentComponent = () => {\\n  const [state, send] = useMachine(machine);\\n\\n  return (\\n    <ChildComponent\\n      isOpen={state.matches(\\"open\\")}\\n      toggle={() => send(\\"TOGGLE\\")}\\n    />\\n  );\\n};\\n\\n/**\\n * Note that the props declarations are\\n * much more specific\\n */\\ninterface ChildComponentProps {\\n  isOpen: boolean;\\n  toggle: () => void;\\n}\\n\\nconst ChildComponent = (props: ChildComponentProps) => {\\n  return (\\n    <button onClick={() => props.toggle()}>\\n      {props.isOpen ? \\"Open\\" : \\"Closed\\"}\\n    </button>\\n  );\\n};\\n```\\n\\nMuch better. We get several improvements in clarity in the `ChildComponent` - the types are much easier to read. We get to ditch the use of `Interpreter` and `useService` entirely.\\n\\nThe best improvement, though, is in the `ParentComponent`. In the previous example, the machine crossed multiple components by passing its service around. In this example, it\u2019s scoped to the component, and props are derived from its state. This is far easier to grok for someone unused to XState.\\n\\n### Keep state as local as possible\\n\\nUnlike tools which require a global store, XState has no opinion on where you keep your state. If you have a piece of state which belongs near the root of your app, you can use React Context to make it globally available:\\n\\n```ts\\nimport React, { createContext } from \\"react\\";\\nimport { useMachine } from \\"@xstate/react\\";\\nimport { createMachine } from \\"xstate\\";\\n\\nconst globalMachine = createMachine({});\\n\\ninterface GlobalContextType {\\n  isOpen: boolean;\\n  toggle: () => void;\\n}\\n\\nexport const GlobalContext = createContext<GlobalContextType>();\\n\\nconst Provider: React.FC = ({ children }) => {\\n  const [state, send] = useMachine(globalMachine);\\n\\n  return (\\n    <GlobalContext.Provider\\n      value={{ isOpen: state.matches(\\"open\\"), toggle: () => send(\\"TOGGLE\\") }}\\n    >\\n      {children}\\n    </GlobalContext.Provider>\\n  );\\n};\\n```\\n\\n_Just as above, we\u2019re not passing a service, but props, into context._\\n\\nIf you have a piece of state which needs to belong lower in your tree, then obey the usual rules by [lifting state up](https://reactjs.org/docs/lifting-state-up.html) to where it\u2019s needed.\\n\\nIf that feels familiar, you\u2019re right. You\u2019re making the same decisions you\u2019re used to: where to store state and how to pass it around.\\n\\n## Examples and challenges\\n\\n### Syncing parents and children\\n\\nSometimes, you need to use a parent machine _and_ a child machine. Let\u2019s say that you need the child to pay attention to when a prop changes from the parent - for instance to sync some data. Here\u2019s how you can do it:\\n\\n```ts\\nconst machine = createMachine({\\n  initial: \\"open\\",\\n  context: {\\n    numberToStore: 0,\\n  },\\n  on: {\\n    /**\\n     * When REPORT_NEW_NUMBER occurs, sync\\n     * the new number to context\\n     */\\n    REPORT_NEW_NUMBER: {\\n      actions: [\\n        assign((context, event) => {\\n          return {\\n            numberToStore: event.newNumber,\\n          };\\n        }),\\n      ],\\n    },\\n  },\\n});\\n\\ninterface ChildComponentProps {\\n  someNumber: number;\\n}\\n\\nconst ChildComponent = (props: ChildComponentProps) => {\\n  const [state, send] = useMachine(machine);\\n\\n  useEffect(() => {\\n    send({\\n      type: \\"REPORT_NEW_NUMBER\\",\\n      newNumber: props.someNumber,\\n    });\\n  }, [props.someNumber]);\\n};\\n```\\n\\nThis can also be used to sync data from other sources, such as query hooks:\\n\\n```ts\\nconst ChildComponent = () => {\\n  const [result] = useSomeDataHook(() => fetchNumber());\\n\\n  const [state, send] = useMachine(machine);\\n\\n  useEffect(() => {\\n    send({\\n      type: \\"REPORT_NEW_NUMBER\\",\\n      newNumber: result.data.someNumber,\\n    });\\n  }, [result.data.someNumber]);\\n};\\n```\\n\\n## Summary\\n\\nIn the \u201cjust use props\u201d approach, XState lets React take charge. We stick to idiomatic React by passing props, not services. We keep machines scoped to components. And we put state at the level it\u2019s needed, just like you\u2019re used to.\\n\\nThis article isn\u2019t finished. I\u2019m sure there will be many more questions about integrating XState with React. My plan is to come back to this article again with more examples and clarifications. Thanks for your time, and I\u2019m looking forward to seeing what you build with XState."},{"id":"2020-07-27-state-machines-how-to-stop-making-horcruxes-in-your-code","metadata":{"permalink":"/statelyai-docs/blog/2020-07-27-state-machines-how-to-stop-making-horcruxes-in-your-code","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2020-07-27-state-machines-how-to-stop-making-horcruxes-in-your-code/index.mdx","source":"@site/blog/2020-07-27-state-machines-how-to-stop-making-horcruxes-in-your-code/index.mdx","title":"State machines: How to stop making Horcruxes in your code","description":"There are several ways of mitigating horcruxes. But visualisations can prevent bugs, so why not go further?","date":"2020-07-27T00:00:00.000Z","formattedDate":"July 27, 2020","tags":[{"label":"business logic","permalink":"/statelyai-docs/blog/tags/business-logic"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"statechart","permalink":"/statelyai-docs/blog/tags/statechart"},{"label":"useReducer","permalink":"/statelyai-docs/blog/tags/use-reducer"}],"readingTime":4.25,"hasTruncateMarker":true,"authors":[{"name":"Matt Pocock","title":"Stately Team","url":"https://github.com/mattpocock","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png","key":"matt"}],"frontMatter":{"title":"State machines: How to stop making Horcruxes in your code","description":"There are several ways of mitigating horcruxes. But visualisations can prevent bugs, so why not go further?","tags":["business logic","xstate","statechart","useReducer"],"authors":["matt"],"image":"/blog/2020-07-27-state-machines-how-to-stop-making-horcruxes-in-your-code.png","slug":"2020-07-27-state-machines-how-to-stop-making-horcruxes-in-your-code","date":"2020-07-27T00:00:00.000Z"},"prevItem":{"title":"\u201cJust use props\u201d: An opinionated guide to React and XState","permalink":"/statelyai-docs/blog/2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate"},"nextItem":{"title":"How to tell a bad boolean from a good boolean","permalink":"/statelyai-docs/blog/2020-05-27-state-management-bad-bolean-good-boolean"}},"content":"<head>\\n  <link rel=\\"canonical\\" href=\\"https://dev.to/mpocock1/state-machines-how-to-stop-making-horcruxes-in-your-code-gl5\\" />\\n</head>\\n\\nMy code contains [Horcruxes](https://harrypotter.fandom.com/wiki/Horcrux). I\u2019m not proud to admit it, since to make a Horcrux you need to commit a murder. The murders seemed intuitive at the time, and were usually for expedience. But nonetheless, I am a murderer.\\n\\nLet\u2019s talk about how I got here.\\n\\n\x3c!--truncate--\x3e\\n\\n## The Soul of your app\u2019s logic\\n\\nFor an app to remain maintainable, its soul must remain intact. For many apps, logic is usually expressed in changes to state and behaviour.\\n\\nFor instance, some logic for a modal might be expressed like this:\\n\\n```ts\\nconst modalReducer = (state = { isOpen: false }, action) => {\\n  switch (action.type) {\\n    case \\"CLOSE\\":\\n      return {\\n        isOpen: false,\\n      };\\n    case \\"OPEN\\":\\n      return {\\n        isOpen: true,\\n      };\\n    default:\\n      return state;\\n  }\\n};\\n```\\n\\nThis is the reducer pattern, popularised by libraries like [Redux](https://redux.js.org/introduction/getting-started). In [React](https://reactjs.org/), we\'d use this reducer in a `useReducer` hook:\\n\\n```ts\\nconst [state, dispatch] = useReducer(modalReducer);\\n\\n<button onClick={() => dispatch({ type: \\"OPEN\\" })}>Open Modal</button>;\\n```\\n\\nIf you want to know what happens when you dispatch the `OPEN` action, you only need look in one place: the `modalReducer`. This part of your app is easy to keep bug-free, because all the logic for how it works is contained in one place.\\n\\nBut let\u2019s say that requirements change. Now, before you open the modal you\u2019ll need to fetch something from the API to check if you can open it. This seems intuitive enough:\\n\\n```ts\\n    const [state, dispatch] = useReducer(modalReducer);\\n\\n    <button onClick={async () => {\\n      const canOpenTheModal = await checkIfUserCanOpenIt();\\n      if (canOpenTheModal) {\\n        dispatch({ type: \'OPEN\' });\\n      }\\n    }>\\n      Open Modal\\n    </button>\\n```\\n\\nThe `onClick` handler is now making the API check to see if it should open the modal. If there\u2019s a bug with the way the modal opens, there are now two places you need to check, the reducer and the event handler.\\n\\nThe soul of your business logic has been split. Just like that, you made a Horcrux.\\n\\n## Going beyond usual evil\\n\\nThe first Horcrux is never really the issue. You can survive one or two splits in your business logic. The trouble comes when you reach six or seven, split out over several 800-line files. I have wept over classes with dozens of methods, sequences with dozens of asynchronous steps.\\n\\nLogic split into more than one place cannot be visualised. If it can\u2019t be visualised, it can\u2019t be modified, deleted or extended safely.\\n\\nLet me make this plain: **Any code that cannot be concretely visualised will, at some point, result in a bug.**\\n\\nThere are several ways of mitigating horcruxes. You can push to make your code more readable, writing clean event handlers which don\u2019t contain any logic. You can try to colocate as much as your logic as possible, for instance using [ducks](https://github.com/erikras/ducks-modular-redux) patterns.\\n\\nBut now we know that visualisation can prevent bugs, why not go further?\\n\\n## Statecharts\\n\\nI recently embarked on the most complex task I\u2019d ever attempted as a developer - building a video chat app with multiple third-party integrations. Most of the business logic would take place on a single page - the chat portal. I needed to handle multiple user types, chat, notifications, input changes... And many more things.\\n\\nI\u2019d been using [XState](https://github.com/davidkpiano/xstate), and read that it could be used for visualising complex behaviours, such as Ryan Florence\u2019s checkout:\\n\\n<Tweet id=\\"1084248892072329216\\" />\\n\\nIt produces clickable visualisations which you can share and walk through. For instance, the modal reducer above could be expressed in [this statechart](https://xstate.js.org/viz/?gist=56c56d2be397c4d5bea934c6d89e788d).\\n\\n![A statechart describing a modal which opens and closes](https://res.cloudinary.com/practicaldev/image/fetch/s--XmLhsdr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2lb0ctiu7s207t9w44mg.png)\\n\\nI knew that if I wasn\u2019t careful, I\u2019d end up with 25-30 horcruxes under my belt, logic carried in dozens of event handlers. So I wrote the machine in XState. I even wrote a VSCode extension so I could have the visualiser inline as I went along. Here\u2019s what I ended up with:\\n\\n![An XState diagram of my video chat app](https://res.cloudinary.com/practicaldev/image/fetch/s--oY3xYHhl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/33vxe2bcsxn8uvfzlgva.png)\\n\\nEvery part of this crazy complex app can now be visualised. I can see which conditions lead to which states. I can which actions are called on which events.\\n\\nAt an early stage of the process, I was even able to ask the client about complex interactions in the logic, just by walking them through the statechart. Weeks later, when it needed extending, I was able to insert a new piece of state without breaking anything else.\\n\\nAny time someone needs to see how the viewing page works, they can fire up the visualiser. Their usual first reaction is one of terror. State machines don\'t create complexity, they reveal it. But by clicking through the machine, they can concretely see how the app works, and feel comfortable making changes.\\n\\n## Make a bet on XState\\n\\n---\\n\\nIf you\u2019re having trouble deciphering the logic of a legacy app, try visualising it in XState. Try working through a problem with a fellow dev. At [Yozobi](http://yozobi.com/), we\u2019re making a bet that state machines are going to change web development. If you want to learn more about them, follow me and we can try to heal our Horcruxes together."},{"id":"2020-05-27-state-management-bad-bolean-good-boolean","metadata":{"permalink":"/statelyai-docs/blog/2020-05-27-state-management-bad-bolean-good-boolean","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2020-05-27-state-management-bad-bolean-good-boolean/index.mdx","source":"@site/blog/2020-05-27-state-management-bad-bolean-good-boolean/index.mdx","title":"How to tell a bad boolean from a good boolean","description":"TL;DR: Bad booleans represent state. Good booleans are derived from state","date":"2020-05-27T00:00:00.000Z","formattedDate":"May 27, 2020","tags":[{"label":"tutorial","permalink":"/statelyai-docs/blog/tags/tutorial"}],"readingTime":3.015,"hasTruncateMarker":true,"authors":[{"name":"Matt Pocock","title":"Stately Team","url":"https://github.com/mattpocock","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png","key":"matt"}],"frontMatter":{"title":"How to tell a bad boolean from a good boolean","description":"TL;DR: Bad booleans represent state. Good booleans are derived from state","tags":["tutorial"],"authors":["matt"],"category":"entry","image":"/blog/2020-05-27-state-management-bad-bolean-good-boolean.png","slug":"2020-05-27-state-management-bad-bolean-good-boolean","date":"2020-05-27T00:00:00.000Z"},"prevItem":{"title":"State machines: How to stop making Horcruxes in your code","permalink":"/statelyai-docs/blog/2020-07-27-state-machines-how-to-stop-making-horcruxes-in-your-code"},"nextItem":{"title":"Redux is half of a pattern (2/2)","permalink":"/statelyai-docs/blog/2020-05-22-redux-is-half-a-pattern-2-2"}},"content":"**TL;DR**: Bad booleans represent state. Good booleans are derived from state.\\n\\n\x3c!--truncate--\x3e\\n\\nWhen you\u2019re managing state in your app, it\u2019s easy to fall prey to bad booleans. Bad booleans look like this:\\n\\n```js\\nlet isLoading = true;\\nlet isComplete = false;\\nlet hasErrored = false;\\n```\\n\\nOn the surface, this looks like good code. It appears as though you\u2019ve represented three separate states with proper boolean names. In the \u2018model\u2019 you\u2019ve pictured for your state, only one of these states can be true at any one time.\\n\\nIn a fetch request, you might model the state like this:\\n\\n```js\\nconst makeFetch = async () => {\\n  isLoading = true;\\n  try {\\n    await fetch(\\"/users\\");\\n\\n    isComplete = true;\\n  } catch (e) {\\n    hasErrored = true;\\n  }\\n  isLoading = false;\\n};\\n```\\n\\nAgain, this looks nice. We\u2019re orchestrating our booleans as we move through the async request.\\n\\nBut there\u2019s a bug here. What happens if we make the fetch, it succeeds, and we make the fetch again? We\u2019ll end up with:\\n\\n```js\\nlet isLoading = true;\\nlet isComplete = true;\\nlet hasErrored = false;\\n```\\n\\n## Implicit states\\n\\nYou probably hadn\u2019t considered this when you made your initial model. You may have frontend components which are checking for `isComplete === ` true or `isLoading === true`. You might end up with a loading spinner and the previous data showing at the same time.\\n\\nHow is this possible? Well, you\u2019ve created some implicit states. Let\u2019s imagine you considered 3 states as ones you actually wanted to handle:\\n\\n1. `loading`: Loading the data\\n2. `complete`: Showing the data\\n3. `errored`: Erroring if the data doesn\'t turn up\\n\\nWell, you\u2019ve actually allowed 8 states! That\u2019s 2 for the first boolean, times 2 for the second, times 2 for the third.\\n\\nThis is what\'s known as boolean explosion - I learned about this from [Kyle Shevlin\'s egghead course](https://egghead.io/lessons/javascript-eliminate-boolean-explosion-by-enumerating-states).\\n\\n## Making states explicit\\n\\nHow do you get around this? Instead of a system with 8 possible values, we need a system with three possible values. We can do this in Typescript with an enum.\\n\\n```ts\\ntype Status = \\"loading\\" | \\"complete\\" | \\"errored\\";\\n\\nlet status: Status = \\"loading\\";\\n```\\n\\nWe\u2019d implement this in a fetch like this:\\n\\n```ts\\nconst makeFetch = async () => {\\n  status = \\"loading\\";\\n  try {\\n    await fetch(\\"/users\\");\\n\\n    status = \\"complete\\";\\n  } catch (e) {\\n    status = \\"errored\\";\\n  }\\n};\\n```\\n\\nIt\u2019s now impossible to be in the \'loading\' and \'complete\' state at once - we\u2019ve fixed our bug. We\u2019ve turned our bad booleans into a good enum.\\n\\n## Making good booleans\\n\\nBut not all booleans are bad. Many popular libraries, such as _react-query_, _apollo_ and _urql_ use booleans in their state. An example implementation:\\n\\n```js\\nconst [result] = useQuery();\\n\\nif (result.isLoading) {\\n  return <div>Loading...</div>;\\n}\\n```\\n\\nThe reason these are good booleans is that their underlying mechanism is based on an enum. Bad booleans represent state. Good booleans are derived from state:\\n\\n```js\\nlet status: Status = \\"loading\\";\\n\\n// Derived from the status above\\nlet isLoading = status === \\"loading\\";\\n```\\n\\nYou can safely use this `isLoading` to display your loading spinner, happy in the knowledge that you\'ve removed all impossible states.\\n\\n## Addendum: Enums in Javascript\\n\\nWe can represent a state enum in Javascript as well. While the above code will work without typings, you can represent enums as an object type.\\n\\n```ts\\nconst statusEnum = {\\n  loading: \\"loading\\",\\n  complete: \\"complete\\",\\n  errored: \\"errored\\",\\n};\\n\\nlet status = statusEnum.loading;\\n\\nconst makeFetch = async () => {\\n  status = statusEnum.loading;\\n  try {\\n    await fetch(\\"/users\\");\\n\\n    status = statusEnum.complete;\\n  } catch (e) {\\n    status = statusEnum.errored;\\n  }\\n};\\n```"},{"id":"2020-05-22-redux-is-half-a-pattern-2-2","metadata":{"permalink":"/statelyai-docs/blog/2020-05-22-redux-is-half-a-pattern-2-2","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2020-05-22-redux-is-half-a-pattern-2-2/index.mdx","source":"@site/blog/2020-05-22-redux-is-half-a-pattern-2-2/index.mdx","title":"Redux is half of a pattern (2/2)","description":"Learn how Redux, and all other state management libraries, have one thing in common - they are all partial implementations of state machines - and how we can improve the way we model app state and logic.","date":"2020-05-22T00:00:00.000Z","formattedDate":"May 22, 2020","tags":[{"label":"redux","permalink":"/statelyai-docs/blog/tags/redux"},{"label":"actor","permalink":"/statelyai-docs/blog/tags/actor"},{"label":"react","permalink":"/statelyai-docs/blog/tags/react"},{"label":"state","permalink":"/statelyai-docs/blog/tags/state"}],"readingTime":10.92,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"Redux is half of a pattern (2/2)","description":"Learn how Redux, and all other state management libraries, have one thing in common - they are all partial implementations of state machines - and how we can improve the way we model app state and logic.","tags":["redux","actor","react","state"],"date":"2020-05-22T00:00:00.000Z","authors":["david"],"image":"/blog/2020-05-22-redux-is-half-a-pattern-2-2.png","slug":"2020-05-22-redux-is-half-a-pattern-2-2"},"prevItem":{"title":"How to tell a bad boolean from a good boolean","permalink":"/statelyai-docs/blog/2020-05-27-state-management-bad-bolean-good-boolean"},"nextItem":{"title":"Redux is half of a pattern (1/2)","permalink":"/statelyai-docs/blog/2020-01-20-redux-is-half-a-pattern-1-2"}},"content":"<head>\\n  <link rel=\\"canonical\\" href=\\"https://dev.to/davidkpiano/redux-is-half-of-a-pattern-2-2-4jo3\\" />\\n</head>\\n\\nI wrote a form library once.\\n\\n_Once._\\n\\nIt was called [React Redux Form](https://github.com/davidkpiano/react-redux-form), and using Redux for forms was a good idea, at the time (don\'t use it). In fact, my library was written as a response to [Redux Form](https://github.com/redux-form/redux-form), and both libraries soon discovered that the idea of using a _single global store_ to store all of your application state is a really, really bad idea.\\n\\nWhen all of your forms live in one single store, state is easy to manage at first. And then, every single keypress starts to lag. It\'s a terrible user experience.\\n\\n\x3c!--truncate--\x3e\\n\\nSo what do you do?\\n\\n- Blur inputs\\n- Add debounced updates\\n- Memoize _everything_\\n- Optimize selectors everywhere\\n- Make controlled components uncontrolled\\n- Use `React.memo()` on components\\n- Use `PureComponent` for good measure\\n- Use Suspense (??)\\n- etc. etc.\\n\\nIn short, you go into panic mode and try to contain the spread of the global updates affecting every single connected component, even if those components don\'t need to rerender.\\n\\nSome of you have gotten really good at solving this, and have become expert \\"selector, caching, and memoization\\" developers. That\'s fantastic.\\n\\nBut let\'s examine if those tactics should even be necessary. What if all state _wasn\'t_ global?\\n\\n<Tweet id=\\"1241756566048694272\\" />\\n\\n## Local vs. global state\\n\\nThe first of [Redux\'s three principles](https://redux.js.org/introduction/three-principles) is that there is essentially a _single source of truth_ for your whole application state:\\n\\n> The state of your whole application is stored in an object tree within a single store.\\n>\\n> _Source: [Redux\'s three principles: single source of truth](https://redux.js.org/introduction/three-principles#single-source-of-truth)_\\n\\nThe primary reason for this is that it makes many things _easier_, such as sharing data, rehydrating state, \\"time-travel debugging\\", etc. But it suffers from a fundamental disconnect: _there is no such thing as a single source of truth_ in any non-trivial application. All applications, even front-end apps, are distributed at some level:\\n\\n<Tweet id=\\"1116019772238454784\\" />\\n\\nAnd, in a contradictory way, even the Redux Style Guide advises against putting the entire state of your application in a single store:\\n\\n> [...] Instead, there should be a single place to find all values that you consider to be global and app-wide. Values that are \\"local\\" should generally be kept in the nearest UI component instead.\\n>\\n> _Source: [Redux Style Guide](https://redux.js.org/style-guide/style-guide/#evaluate-where-each-piece-of-state-should-live)_\\n\\nWhenever something is done for the sole purpose of making something easy, it almost always makes some other use-case more difficult. Redux and its single-source-of-truth is no exception, as there are many problems that arise from fighting against the nature of front-end apps being \\"distributed\\" instead of an idealistic atomic, global unit:\\n\\n- Multiple orthogonal concerns that need to be represented in the state somehow.\\n\\nThis is \\"solved\\" by using [`combineReducers`](https://redux.js.org/recipes/structuring-reducers/using-combinereducers).\\n\\n- Multiple separate concerns that need to share data, communicate with each other, or are otherwise tangentially related.\\n\\nThis is \\"solved\\" by [more complex, custom reducers](https://redux.js.org/recipes/structuring-reducers/beyond-combinereducers) that orchestrate events through these otherwise separate reducers.\\n\\n- Irrelevant state updates: when separate concerns are combined (using `combineReducers` or similar) into a single store, whenever any part of the state updates, the _entire_ state is updated, and every \\"connected\\" component (every subscriber to the Redux store) is notified.\\n\\nThis is \\"solved\\" by using [selectors](https://redux.js.org/introduction/learning-resources#selectors), and perhaps by using another library like [`reselect`](https://blog.isquaredsoftware.com/2017/12/idiomatic-redux-using-reselect-selectors/) for memoized selectors.\\n\\nI put \\"solved\\" in quotes because these are all solutions that are all but necessary due to problems that are caused solely by using a global, atomic store. In short, having a single global store is unrealistic, even for apps that are already using global stores. Whenever you use a 3rd-party component, or local state, or local storage, or query parameters, or a router, etc., you have already shattered the illusion of a single global store. App data is always distributed at some level, so the natural solution should be to embrace the distribution (by using local state) rather than fighting against it just for the sake of making some use-cases easier to develop in the short run.\\n\\n## Acting differently\\n\\nSo how can we address this global state problem? To answer that, we need to go back in time a little bit and take some inspiration from another old, well-established model: [the actor model](https://en.wikipedia.org/wiki/Actor_model).\\n\\nThe actor model is a surprisingly simple model that can be extended slightly beyond its original purpose (concurrent computation). In short, an actor is an entity that can do three things:\\n\\n- It can receive messages (events)\\n- It can change its state/behavior as a reaction to a received message, including spawning other actors\\n- It can send messages to other actors\\n\\nIf you thought \\"hmm... so a Redux store is sort of an actor\\", congratulations, you already have a basic grasp of the model! A Redux store, which is based on some single combined-reducer thing:\\n\\n- \u2705 Can receive events\\n- \u2705 Changes its state (and thus its behavior, [if you\'re doing it right](https://dev.to/davidkpiano/redux-is-half-of-a-pattern-1-2-1hd7)) as a reaction to those events\\n- \u274c Can\'t send messages to other stores (there\'s only one store) or between reducers (dispatching only happens outside-in).\\n\\nIt also can\'t really spawn other \\"actors\\", which makes the [Reddit example in the official Redux advanced tutorial](https://redux.js.org/advanced/async-actions) more awkward than it needs to be:\\n\\n```js\\nfunction postsBySubreddit(state = {}, action) {\\n  switch (action.type) {\\n    case INVALIDATE_SUBREDDIT:\\n    case RECEIVE_POSTS:\\n    case REQUEST_POSTS:\\n      return Object.assign({}, state, {\\n        [action.subreddit]: posts(state[action.subreddit], action),\\n      });\\n    default:\\n      return state;\\n  }\\n}\\n```\\n\\n_Source: https://redux.js.org/advanced/async-actions#reducersjs_\\n\\nLet\'s dissect what is happening here:\\n\\n1. We\'re taking only the relevant slice of state we need (`state[action.subreddit]`), which should ideally be its own entity\\n2. We are determining what the next state of only this slice should be, via `posts(state[action.subreddit], action)`\\n3. We are surgically replacing that slice with the updated slice, via `Object.assign(...)`.\\n\\nIn other words, there is no way we can dispatch or forward an event directly to a specific \\"entity\\" (or _actor_); we only have a single actor and have to manually update only the relevant part of it. Also, every other reducer in `combineReducers(...)` will get the entity-specific event, and even if they don\'t update, every single one of them will still be called for every single event. There\'s no easy way to optimize that. A function that isn\'t called is still much more optimal than a function that is called and ultimately does nothing (i.e., returns the same state), which happens most of the time in Redux.\\n\\n## Reducers and actors\\n\\nSo how do reducers and actors fit together? Simply put, a reducer describes the behavior of an individual actor:\\n\\n- Events are sent to a reducer\\n- A reducer\'s state/behavior can change due to a received event\\n- A reducer can spawn actors and/or send messages to other actors (via executed declarative actions)\\n\\nThis isn\'t a cutting-edge, groundbreaking model; in fact, you\'ve probably been using the actor model (to some extent) without even knowing it! Consider a simple input component:\\n\\n```jsx\\nconst MyInput = ({ onChange, disabled }) => {\\n  const [value, setValue] = useState(\\"\\");\\n\\n  return (\\n    <input\\n      disabled={disabled}\\n      value={value}\\n      onChange={(e) => setValue(e.target.value)}\\n      onBlur={() => onChange(value)}\\n    />\\n  );\\n};\\n```\\n\\nThis component, in an implicit way, is sort of like an actor!\\n\\n- It \\"receives events\\" using React\'s slightly awkward parent-to-child communication mechanism - prop updates\\n- It changes state/behavior when an event is \\"received\\", such as when the `disabled` prop changes to `true` (which you can interpret as some event)\\n- It can send events to other \\"actors\\", such as sending a \\"change\\" event to the parent by calling the `onChange` callback (again, using React\'s slightly awkward child-to-parent communication mechanism)\\n- In theory, it can \\"spawn\\" other \\"actors\\" by rendering different components, each with their own local state.\\n\\nReducers make the behavior and business logic more explicit, especially when \\"implicit events\\" become concrete, dispatched events:\\n\\n```jsx\\nconst inputReducer = (state, event) => {\\n  /* ... */\\n};\\n\\nconst MyInput = ({ onChange, disabled }) => {\\n  const [state, dispatch] = useReducer(inputReducer, {\\n    value: \\"\\",\\n    effects: [],\\n  });\\n\\n  // Transform prop changes into events\\n  useEffect(() => {\\n    dispatch({ type: \\"DISABLED\\", value: disabled });\\n  }, [disabled]);\\n\\n  // Execute declarative effects\\n  useEffect(() => {\\n    state.effects.forEach((effect) => {\\n      if (effect.type === \\"notifyChange\\") {\\n        // \\"Send\\" a message back up to the parent \\"actor\\"\\n        onChange(state.value);\\n      }\\n    });\\n  }, [state.effects]);\\n\\n  return (\\n    <input\\n      disabled={disabled}\\n      value={state.value}\\n      onChange={(e) =>\\n        dispatch({\\n          type: \\"CHANGE\\",\\n          value: e.target.value,\\n        })\\n      }\\n      onBlur={() => dispatch({ type: \\"BLUR\\" })}\\n    />\\n  );\\n};\\n```\\n\\n## Multi-Redux?\\n\\nAgain, one of Redux\'s three main principles is that Redux exists in a single, global, atomic source of truth. All of the events are routed through that store, and the single huge state object is updated and permeates through all connected components, which use their selectors and memoization and other tricks to ensure that they are only updated when they need to be, especially when dealing with excessive, irrelevant state updates.\\n\\nAnd using a single global store has worked pretty well when using Redux, right? Well... not exactly, to the point that there are entire libraries dedicated to providing the ability to use Redux on a more distributed level, e.g., for [component state and encapsulation](https://redux.js.org/introduction/ecosystem#component-state-and-encapsulation). It is possible to use Redux at a local component level, but that was not its main purpose, and the official `react-redux` integration does not naturally provide that ability.\\n\\n## No Redux?\\n\\nThere are other libraries that embrace the idea of \\"state locality\\", such as [MobX](https://mobx.js.org/README.html) and [XState](https://xstate.js.org/docs/). For React specifically, there is [Recoil](http://recoiljs.org/) for \\"distributed\\" state and the built-in [`useReducer` hook](https://reactjs.org/docs/hooks-reference.html#usereducer) that feels a lot like a local Redux, specifically for your component. For declarative effects, I created [`useEffectReducer`](https://github.com/davidkpiano/useeffectreducer) which looks and feels just like `useReducer`, but also gives you a way to manage effects.\\n\\nFor state that needs to be shared (not globally), you can use a pattern that is very similar to what React-Redux already uses, by making an object that can be subscribed to (i.e., \\"listened\\" to) and passed down through [context](https://reactjs.org/docs/hooks-reference.html#usecontext):\\n\\n<Tweet id=\\"1228700861024604160\\" />\\n\\nThat will give you the best performance, as that \\"subscribable\\" object will seldom/never change. If that feels a bit boilerplatey for you and performance is not a huge concern, you can combine `useContext` and `useReducer` with not too much effort:\\n\\n```jsx\\nconst CartContext = createContext();\\n\\nconst cartReducer = (state, event) => {\\n  // reducer logic\\n  // try using a state machine here! they\'re pretty neat\\n\\n  return state;\\n};\\n\\nconst initialCartState = {\\n  // ...\\n};\\n\\nconst CartContextProvider = ({ children }) => {\\n  const [state, dispatch] = useReducer(cartReducer, initialCartState);\\n\\n  return (\\n    <CartContext.Provider value={[state, dispatch]}>\\n      {children}\\n    </CartContext.Provider>\\n  );\\n};\\n\\nexport const useCartContext = () => {\\n  return useContext(CartContext);\\n};\\n```\\n\\nAnd then use it in your components:\\n\\n```jsx\\nconst CartView = () => {\\n  const [state, dispatch] = useCartContext();\\n\\n  // ...\\n};\\n```\\n\\nNot too bad, right? In general, this is not a problem that can be solved in Redux without going against-the-grain, since Redux is fundamentally a single, atomic global store.\\n\\n## What do others think?\\n\\nI ran a non-scientific poll on Twitter to see where most app state lives, and how developers feel about it:\\n\\n<Tweet id=\\"1227615817640087553\\" />\\n\\n![Global vs. Local State poll](https://dev-to-uploads.s3.amazonaws.com/i/lioo56gpviopcy2ccwqf.png)\\n\\nFrom this, I gather two things:\\n\\n- Whether you distribute state locally, or contain all state in a single store, you will be able to accomplish app state requirements successfully.\\n- However, more developers are discontent with the majority of app state being global instead of local, which also might hint to why the majority of developers are happy using local state instead.\\n\\nWhat do you think? Share your thoughts in the comments!\\n\\n## Conclusion\\n\\nThinking in terms of \\"actors\\", in which your application is organized by lots of smaller actors that all talk to each other by passing messages/events to each other, can encourage separation of concerns and make you think differently about how state should be localized (distributed) and connected. My goal for this post is to help you realize that not _all_ state needs to be global, and that other patterns (such as the Actor Model) exist for modeling distributed state and communication flow.\\n\\nThe Actor Model is not a panacea, though. If you\'re not careful, you can end up having a spaghetti-like state management problem, where you have completely lost track of which actor is talking to another actor. Anti-patterns are present in any solution that you choose, so it helps to research best practices and actually model your app before you start coding.\\n\\nIf you want to learn more about the Actor Model, check out [The Actor Model in 10 Minutes](https://www.brianstorti.com/the-actor-model/) by [Brian Storti](https://twitter.com/brianstorti), or any of these videos:\\n\\n<YouTube id=\\"ELwEdb_pD0k?\\"/>\\n\\n<YouTube id=\\"Vg60lf92EkM?\\"/>\\n\\nPlease keep in mind that this is post reflects my opinions based on what I\'ve researched, and is in no way meant to be authoritative on the way you should do things. I want to make you _think_, and I hope that this post accomplished that goal. Thanks for reading!\\n\\nIf you enjoyed this post (or even if you didn\'t and just want to hear more of my state management ramblings), [subscribe to the Stately Newsletter](https://www.stately.dev/) for more content, thoughts, and discussion \ud83d\udcec\\n\\n<Tweet id=\\"1237091703087079425\\" />"},{"id":"2020-01-20-redux-is-half-a-pattern-1-2","metadata":{"permalink":"/statelyai-docs/blog/2020-01-20-redux-is-half-a-pattern-1-2","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2020-01-20-redux-is-half-a-pattern-1-2/index.mdx","source":"@site/blog/2020-01-20-redux-is-half-a-pattern-1-2/index.mdx","title":"Redux is half of a pattern (1/2)","description":"Learn how Redux, and all other state management libraries, have one thing in common - they are all partial implementations of state machines - and how we can improve the way we model app state and logic.","date":"2020-01-20T00:00:00.000Z","formattedDate":"January 20, 2020","tags":[{"label":"redux","permalink":"/statelyai-docs/blog/tags/redux"},{"label":"state machine","permalink":"/statelyai-docs/blog/tags/state-machine"},{"label":"statechart","permalink":"/statelyai-docs/blog/tags/statechart"},{"label":"state","permalink":"/statelyai-docs/blog/tags/state"}],"readingTime":18.495,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"Redux is half of a pattern (1/2)","description":"Learn how Redux, and all other state management libraries, have one thing in common - they are all partial implementations of state machines - and how we can improve the way we model app state and logic.","tags":["redux","state machine","statechart","state"],"date":"2020-01-20T00:00:00.000Z","authors":["david"],"image":"/blog/2020-01-20-redux-is-half-a-pattern-1-2.png","slug":"2020-01-20-redux-is-half-a-pattern-1-2"},"prevItem":{"title":"Redux is half of a pattern (2/2)","permalink":"/statelyai-docs/blog/2020-05-22-redux-is-half-a-pattern-2-2"},"nextItem":{"title":"XState: version 4.7 and the future","permalink":"/statelyai-docs/blog/2019-12-09-xstate-version-47-and-the-future"}},"content":"<head>\\n  <link rel=\\"canonical\\" href=\\"https://dev.to/davidkpiano/redux-is-half-of-a-pattern-1-2-1hd7\\" />\\n</head>\\n\\nRedux is fantastic.\\n\\nSome of you might disagree, so let me tell you why.\\n\\nOver the last few years, Redux has popularized the idea of using message-passing (also known as [event-driven programming](https://en.wikipedia.org/wiki/Event-driven_programming)) to manage application state. Instead of making arbitrary method calls to various class instances or mutating data structures, we now can think of state as being in a \\"predictable container\\" that only changes as a reaction to these \\"events\\".\\n\\n\x3c!--truncate--\x3e\\n\\nThis simple idea and implementation is universal enough to be used with any framework (or no framework at all), and has inspired libraries for other popular frameworks such as:\\n\\n- [Vuex](https://vuex.vuejs.org/) for Vue\\n- [NgRx](https://ngrx.io/) for Angular\\n\\nHowever, Redux has recently come under scrutiny by some prominent developers in the web community:\\n\\n<Tweet id=\\"1191487232038883332\\" />\\n\\n<Tweet id=\\"1195126928799227905\\" />\\n\\nIf you don\'t know these developers, they are the co-creators of Redux themselves. So why have Dan and Andrew, and many other developers, all but forsaken the use of Redux in applications?\\n\\nThe ideas and patterns in Redux appear sound and reasonable, and Redux is still used in many large-scale production apps today. However, it forces a certain architecture in your application:\\n\\n<Tweet id=\\"1025408731805184000\\" />\\n\\nAs it turns out, this kind of single-atom immutable architecture is _not natural_ nor does it represent how any software application works (nor should work) in the real-world.\\n\\nRedux is an alternative implementation of Facebook\'s [Flux \\"pattern\\"](https://facebook.github.io/flux). Many sticking points and hardships with Facebook\'s implementation have led developers to seek out alternative, nicer, more developer-friendly APIs such as Redux, Alt, Reflux, Flummox, [and many more.](https://github.com/kriasoft/react-starter-kit/issues/22). Redux emerged as a [clear winner](https://facebook.github.io/flux/docs/related-libraries/#redux---alternative-state-management), and it is stated that Redux combines the ideas from:\\n\\n- [The Command pattern](https://www.wikiwand.com/en/Command_pattern)\\n- [The Elm Architecture](https://guide.elm-lang.org/architecture/)\\n\\nHowever, not even the Elm architecture is a standalone architecture/pattern, as it is based on fundamental patterns, whether developers know it or not:\\n\\n> Rather than someone inventing it, early Elm programmers kept discovering the same basic patterns in their code. It was kind of spooky to see people ending up with well-architected code without planning ahead!\\n\\n<Tweet id=\\"1202580315652448263\\" />\\n\\nIn this post, I will highlight some of the reasons that Redux is _not_ a standalone pattern by comparing it to a fundamental, well-established pattern: the **finite state machine**. This is not an arbitrary choice; every single application that we write is basically a state machine, whether we know it or not. The difference is that the state machines we write are implicitly defined.\\n\\nI hope that some of these comparisons and differences will help you realize how some of the common pain points in Redux-driven applications materialize, and how you can use this existing pattern to help you craft a better state management architecture, whether you\'re using Redux, another library, or no library at all.\\n\\n## What is a finite state machine?\\n\\n(Taken from another article I wrote, [The FaceTime Bug and the Dangers of Implicit State Machines](https://medium.com/@DavidKPiano/the-facetime-bug-and-the-dangers-of-implicit-state-machines-a5f0f61bdaa2)):\\n\\nWikipedia has a [useful but technical description](https://en.wikipedia.org/wiki/Finite-state_machine) on what a finite state machine is. In essence, a finite state machine is a computational model centered around states, events, and transitions between states. To make it simpler, think of it this way:\\n\\n- Any software you make can be described in a **finite number of states** (e.g., `idle`, `loading`, `success`, `error`)\\n- You can only be in **one** of those states at any given time (e.g., you can\u2019t be in the `success` and `error` states at the same time)\\n- You always start at some **initial state** (e.g., `idle`)\\n- You move from state to state, or **transition**, based on events (e.g., from the `idle` state, when the `LOAD` event occurs, you immediately transition to the `loading` state)\\n\\nIt\u2019s like the software that you\u2019re used to writing, but with more explicit rules. You might have been used to writing `isLoading` or `isSuccess` as Boolean flags before, but state machines make it so that you\u2019re not allowed to have `isLoading === true && isSuccess === true` at the same time.\\n\\nIt also makes it _visually clear_ that event handlers can only do one main thing: forward their events to a state machine. They\u2019re not allowed to \u201cescape\u201d the state machine and execute business logic, just like real-world physical devices: buttons on calculators or ATMs don\u2019t actually do operations or execute actions; rather, they send \\"signals\\" to some central unit that manages (or _orchestrates_) state, and that unit decides what should happen when it receives that \\"signal\\".\\n\\n## What about state that is not finite?\\n\\nWith state machines, especially [UML state machines (a.k.a. statecharts)](https://en.wikipedia.org/wiki/UML_state_machine), \\"state\\" refers to something different than the data that doesn\'t fit neatly into finite states, but both \\"state\\" and what\'s known as [\\"extended state\\"](https://en.wikipedia.org/wiki/UML_state_machine#Extended_states) work together.\\n\\nFor example, let\'s consider water \ud83d\udeb0. It can fit into one of four phases, and we consider these the _states_ of water:\\n\\n- `liquid`\\n- `solid` (e.g., ice, frost)\\n- `gas` (e.g., vapor, steam)\\n- `plasma`\\n\\n[![Water phase UML state machine diagram](https://www.uml-diagrams.org/examples/state-machine-example-water.png)](https://www.uml-diagrams.org/examples/water-phase-uml-state-machine-diagram-example.html)\\n\\n> Water phase UML state machine diagram from [uml-diagrams.com](https://www.uml-diagrams.org/examples/water-phase-uml-state-machine-diagram-example.html)\\n\\nHowever, the temperature of water is a _continuous_ measurement, not a discrete one, and it can\'t be represented in a finite way. Despite this, water temperature can be represented alongside the finite state of water, e.g.:\\n\\n- `liquid` where `temperature === 90` (celsius)\\n- `solid` where `temperature === -5`\\n- `gas` where `temperature === 500`\\n\\nThere\'s many ways to represent the combination of finite and extended state in your application. For the water example, I would personally call the finite state `value` (as in the \\"finite state value\\") and the extended state `context` (as in \\"_contextual_ data\\"):\\n\\n```js\\nconst waterState = {\\n  value: \\"liquid\\", // finite state\\n  context: {\\n    // extended state\\n    temperature: 90,\\n  },\\n};\\n```\\n\\nBut you\'re free to represent it in other ways:\\n\\n```js\\nconst waterState = {\\n  phase: \\"liquid\\", // finite state\\n  data: {\\n    // extended state\\n    temperature: 90,\\n  },\\n};\\n\\n// or...\\n\\nconst waterState = {\\n  status: \\"liquid\\", // finite state\\n  temperature: 90, // anything not \'status\' is extended state\\n};\\n```\\n\\nThe key point is that there is a clear distinction between **finite** and **extended** state, and there is logic that prevents the application from reaching an _impossible state_, e.g.:\\n\\n```js\\nconst waterState = {\\n  isLiquid: true,\\n  isGas: true, // \ud83d\udeb1 Water can\'t be both liquid and gas simultaneously!\\n  temperature: -50, // \u2744\ufe0f This is ice!! What\'s going on??\\n};\\n```\\n\\nAnd we can extend these examples to realistic code, such as changing this:\\n\\n```js\\nconst userState = {\\n  isLoading: true,\\n  isSuccess: false,\\n  user: null,\\n  error: null,\\n};\\n```\\n\\nTo something like this:\\n\\n```js\\nconst userState = {\\n  status: \\"loading\\", // or \'idle\' or \'error\' or \'success\'\\n  user: null,\\n  error: null,\\n};\\n```\\n\\nThis prevents impossible states like `userState.isLoading === true` and `userState.isSuccess === true` happening simultaneously.\\n\\n## How does Redux compare to a finite state machine?\\n\\nThe reason I\'m comparing Redux to a state machine is because, from a birds-eye view, their state management models look pretty similar. For Redux:\\n\\n> `state` + `action` = `newState`\\n\\nFor state machines:\\n\\n> `state` + `event` = `newState` + `effects`\\n\\nIn code, these can even be represented the same way, by using a [reducer](https://redux.js.org/basics/reducers/):\\n\\n```js\\nfunction userReducer(state, event) {\\n  // Return the next state, which is\\n  // determined based on the current `state`\\n  // and the received `event` object\\n\\n  // This nextState may contain a \\"finite\\"\\n  // state value, as well as \\"extended\\"\\n  // state values.\\n\\n  // It may also contain side-effects\\n  // to be executed by some interpreter.\\n  return nextState;\\n}\\n```\\n\\nThere are already some subtle differences, such as \\"action\\" vs. \\"event\\" or how extended state machines model side-effects ([they do](https://en.wikipedia.org/wiki/UML_state_machine#Actions_and_transitions)). Dan Abramov even recognizes some of the differences:\\n\\n<Tweet id=\\"1064661742188417029\\" />\\n\\nA reducer can be used to implement a finite state machine, but most reducers are _not_ modeled as finite state machines. Let\'s change that by learning some of the differences between Redux and state machines.\\n\\n## Difference: finite & extended states\\n\\nTypically, a Redux reducer\'s state will not make a clear distinction between \\"finite\\" and \\"extended\\" states, as previously mentioned above. This is an important concept in state machines: an application is always in _exactly one_ of a finite number of \\"states\\", and the rest of its data is represented as its extended state.\\n\\nFinite states can be introduced to a reducer by making an explicit property that represents exactly one of the many possible states:\\n\\n```js\\nconst initialUserState = {\\n  status: \\"idle\\", // explicit finite state\\n  user: null,\\n  error: null,\\n};\\n```\\n\\nWhat\'s great about this is that, if you\'re using TypeScript, you can take advantage of using [discriminated unions](https://basarat.gitbooks.io/typescript/docs/types/discriminated-unions.html) to make impossible states impossible:\\n\\n```js\\ninterface User {\\n  name: string;\\n  avatar: string;\\n}\\n\\ntype UserState =\\n  | { status: \\"idle\\", user: null, error: null }\\n  | { status: \\"loading\\", user: null, error: null }\\n  | { status: \\"success\\", user: User, error: null }\\n  | { status: \\"failure\\", user: null, error: string };\\n```\\n\\n## Difference: events vs. actions\\n\\nIn [state machine terminology](https://en.wikipedia.org/wiki/UML_state_machine#Actions_and_transitions), an \\"action\\" is a side-effect that occurs as the result of a transition:\\n\\n> When an event instance is dispatched, the state machine responds by **performing actions**, such as changing a variable, performing I/O, invoking a function, generating another event instance, or changing to another state.\\n\\nThis isn\'t the only reason that using the term \\"action\\" to describe something that causes a state transition is confusing; \\"action\\" also suggests something that needs to be done (i.e., a command), rather than something that just happened (i.e., an event).\\n\\nSo keep the following terminology in mind when we talk about state machines:\\n\\n- An **event** describes something that occurred. Events trigger state transitions.\\n- An **action** describes a side-effect that should occur as a _response_ to a state transition.\\n\\nThe [Redux style guide](https://redux.js.org/style-guide/style-guide/) also directly suggests modeling actions as events:\\n\\n> However, we recommend trying to treat actions more as \\"describing events that occurred\\", rather than \\"setters\\". Treating actions as \\"events\\" generally leads to more meaningful action names, fewer total actions being dispatched, and a more meaningful action log history.\\n>\\n> _Source: [Redux style guide: Model actions as events, not setters](https://redux.js.org/style-guide/style-guide/#model-actions-as-events-not-setters)_\\n\\nWhen the word \\"event\\" is used in this article, that has the same meaning as a conventional Redux action object. For side-effects, the word \\"effect\\" will be used.\\n\\n<Tweet id=\\"1218698479872040960\\" />\\n\\n## Difference: explicit transitions\\n\\nAnother fundamental part of how state machines work are **transitions**. A transition describes how one finite state transitions to another finite state due to an event. This can be represented using boxes and arrows:\\n\\n![State machine describing login flow](https://thepracticaldev.s3.amazonaws.com/i/9cerj02qg66buqdmjrmq.png)\\n\\nThis diagram makes it clear that it\'s impossible to transition directly from, e.g., `idle` to `success` or from `success` to `error`. There are clear sequences of events that need to occur to transition from one state to another.\\n\\nHowever, the way that developers tend to model reducers is by determining the next state solely on the received event:\\n\\n```js\\nfunction userReducer(state, event) {\\n  switch (event.type) {\\n    case \\"FETCH\\":\\n    // go to some \'loading\' state\\n    case \\"RESOLVE\\":\\n    // go to some \'success\' state\\n    case \\"REJECT\\":\\n    // go to some \'error\' state\\n    default:\\n      return state;\\n  }\\n}\\n```\\n\\nThe problem with managing state this way is that it does not prevent _impossible transitions_. Have you ever seen a screen that briefly displays an error, and then shows some success view? If you haven\'t, browse [Reddit](https://reddit.com), and do the following steps:\\n\\n1. Search for anything.\\n2. Click on the \\"Posts\\" tab while the search is happening.\\n3. Say \\"aha!\\" and wait a couple seconds.\\n\\nIn step 3, you\'ll probably see something like this (visible at the time of publishing this article):\\n\\n![Reddit bug showing no search results](https://i.imgur.com/NJnApBV.gif)\\n\\nAfter a couple seconds, this unexpected view will disappear and you will finally see search results. This bug has been present for a while, and even though it\'s innocuous, it\'s not the best user experience, and it can definitely be considered faulty logic.\\n\\nHowever it is implemented (Reddit _does_ use Redux...), something is definitely wrong: _an impossible state transition happened_. It makes absolutely no sense to transition directly from the \\"error\\" view to the \\"success\\" view, and in this case, the user shouldn\'t see an \\"error\\" view anyway because it\'s not an error; it\'s still loading!\\n\\nYou might be looking through your existing Redux reducers and realize where this potential bug may surface, because by basing state transitions only on events, these impossible transitions become possible to occur. Sprinkling if-statements all over your reducer might alleviate the symptoms of this:\\n\\n```js\\nfunction userReducer(state, event) {\\n  switch (event.type) {\\n    case \\"FETCH\\":\\n      if (state.status !== \\"loading\\") {\\n        // go to some \'loading\' state...\\n        // but ONLY if we\'re not already loading\\n      }\\n\\n    // ...\\n  }\\n}\\n```\\n\\nBut that only makes your state logic harder to follow because the state transitions are _not explicit_. Even though it might be a little more verbose, it\'s better to determine the next state based on both the current finite state and the event, rather than just on the event:\\n\\n```js\\nfunction userReducer(state, event) {\\n  switch (state.status) {\\n    case \\"idle\\":\\n      switch (event.type) {\\n        case \\"FETCH\\":\\n        // go to some \'loading\' state\\n\\n        // ...\\n      }\\n\\n    // ...\\n  }\\n}\\n```\\n\\nYou can even split this up into individual \\"finite state\\" reducers, to make things cleaner:\\n\\n```js\\nfunction idleUserReducer(state, event) {\\n  switch (event.type) {\\n    case \'FETCH\':\\n      // go to some \'loading\' state\\n\\n      // ...\\n    }\\n    default:\\n      return state;\\n  }\\n}\\n\\nfunction userReducer(state, event) {\\n  switch (state.status) {\\n    case \'idle\':\\n      return idleUserReducer(state, event);\\n    // ...\\n  }\\n}\\n```\\n\\nBut don\'t just take my word for it. The Redux style guide also strongly recommends treating your reducers as state machines:\\n\\n> [...] treat reducers as \\"state machines\\", where the combination of both the current state and the dispatched action determines whether a new state value is actually calculated, not just the action itself unconditionally.\\n>\\n> _Source: [Redux style guide: treat reducers as state machines](https://redux.js.org/style-guide/style-guide/#treat-reducers-as-state-machines)_\\n\\nI also talk about this idea in length in my post: [No, disabling a button is not app logic.](https://dev.to/davidkpiano/no-disabling-a-button-is-not-app-logic-598i)\\n\\n## Difference: declarative effects\\n\\nIf you look at Redux in isolation, its strategy for managing and executing side-effects is this:\\n\\n> \xaf\\\\\\\\\\\\_(\u30c4)\\\\_/\xaf\\n\\nThat\'s right; Redux has no built-in way of handling side-effects. In any non-trivial application, you _will_ have side-effects if you want to do anything useful, such as make a network request or kick off some sort of async process. Importantly enough, side-effects should _not_ be considered an afterthought; they should be treated as a first-class citizen and uncompromisingly represented in your application logic.\\n\\nUnfortunately, with Redux, they are, and the only solution is to use [middleware](https://redux.js.org/advanced/middleware), which is inexplicably an advanced topic, despite being required for any non-trivial app logic:\\n\\n> Without middleware, Redux store only supports synchronous data flow.\\n>\\n> _Source: [Redux docs: Async Flow](https://redux.js.org/advanced/async-flow)_\\n\\nWith extended/UML state machines (also known as statecharts), these side-effects are known as **actions** (and will be referred to as actions for the rest of this post) and are declaratively modeled. Actions are the direct result of a transition:\\n\\n> When an event instance is dispatched, the state machine responds by **performing actions**, such as changing a variable, performing I/O, invoking a function, generating another event instance, or changing to another state.\\n>\\n> \\\\_Source: [(Wikipedia) UML State Machine: Actions and Transitions](https://en.wikipedia.org/wiki/UML_state_machine#Actions_and_transitions)\\n\\nThis means that when an event changes state, actions (effects) may be executed as a result, even if the state stays the same (known as a \\"self-transition\\"). Just like Newton said:\\n\\n> For every action, there is an equal and opposite reaction.\\n>\\n> _Source: Newton\'s Third Law of Motion_\\n\\nActions _never_ occur spontaneously, without cause; not in software, not in hardware, not in real life, never. There is _always_ a cause for an action to occur, and with state machines, that cause is a state transition, due to a received event.\\n\\nStatecharts distinguish how actions are determined in three possible ways:\\n\\n- **Entry actions** are effects that are executed whenever a specific finite state is entered\\n- **Exit actions** are effects that are executed whenever a specific finite state is exited\\n- **Transition actions** are effects that are executed whenever a specific transition between two finite states is taken.\\n\\nFun fact: this is why statecharts are said to have the characteristic of both [Mealy machines](https://en.wikipedia.org/wiki/Mealy_machine) and [Moore machines](https://en.wikipedia.org/wiki/Moore_machine):\\n\\n- With Mealy machines, \\"output\\" (actions) depends on the state and the event (transition actions)\\n- With Moore machines, \\"output\\" (actions) depends on just the state (entry & exit actions)\\n\\nThe original philosophy of Redux is that it did not want to be opinionated on how these side-effects are executed, which is why middleware such as [redux-thunk](https://github.com/reduxjs/redux-thunk) and [redux-promise](https://github.com/redux-utilities/redux-promise) exist. These libraries work around the fact that Redux is side-effect-agnostic by having third-party, use-case specific \\"solutions\\" for handling different types of effects.\\n\\nSo how can this be solved? It may seem weird, but just like you can use a property to specify finite state, you can also use a property to specify _actions that should be executed_ in a declarative way:\\n\\n```js\\n// ...\\ncase \'FETCH\':\\n  return {\\n    ...state,\\n\\n    // finite state\\n    status: \'loading\',\\n\\n    // actions (effects) to execute\\n    actions: [\\n      { type: \'fetchUser\', id: 42 }\\n    ]\\n  }\\n// ...\\n```\\n\\nNow, your reducer will return useful information that answers the question, \\"what side-effects (actions) should be executed as a result of this state transition?\\" The answer is clear and colocated right in your app state: read the `actions` property for a declarative description of the actions to be executed, and execute them:\\n\\n```js\\n// pretend the state came from a Redux React hook\\nconst { actions } = state;\\n\\nuseEffect(() => {\\n  actions.forEach((action) => {\\n    if (action.type === \\"fetchUser\\") {\\n      fetch(`/api/user/${action.id}`)\\n        .then((res) => res.json())\\n        .then((data) => {\\n          dispatch({ type: \\"RESOLVE\\", user: data });\\n        });\\n    }\\n    // ... etc. for other action implementations\\n  });\\n}, [actions]);\\n```\\n\\nHaving side-effects modeled declaratively in some `state.actions` property (or similar) has some great benefits, such as in predicting/testing or being able to trace when actions will or have been executed, as well as being able to customize the implementation details of executing those actions. For instance, the `fetchUser` action can be changed to read from a cache instead, all without changing any of the logic in the reducer.\\n\\n## Difference: sync vs. async data flow\\n\\nThe fact is that middleware is indirection. It fragments your application logic by having it present in multiple places (the reducers and the middleware) without a clear, cohesive understanding of how they work together. Furthermore, it makes some use-cases easier but others much more difficult. For example: take this example from the [Redux advanced tutorial](https://redux.js.org/advanced/example-reddit-api), which uses `redux-thunk` to allow dispatching a \\"thunk\\" for making an async request:\\n\\n```js\\nfunction fetchPosts(subreddit) {\\n  return (dispatch) => {\\n    dispatch(requestPosts(subreddit));\\n    return fetch(`https://www.reddit.com/r/${subreddit}.json`)\\n      .then((response) => response.json())\\n      .then((json) => dispatch(receivePosts(subreddit, json)));\\n  };\\n}\\n```\\n\\nNow ask yourself: _how can I cancel this request?_ With `redux-thunk`, it simply isn\'t possible. And if your answer is to \\"choose a different middleware\\", you just validated the previous point. Modeling logic should not be a question of which middleware you choose, and middleware shouldn\'t even be part of the state modeling process.\\n\\nAs previously mentioned, the only way to model async data flow with Redux is by using middleware. And with all the possible use-cases, from thunks to Promises to sagas (generators) to epics (observables) and more, the ecosystem has plenty of different solutions for these. But the ideal number of solutions is _one_: the solution provided by the pattern in use.\\n\\nAlright, so how do state machines solve the async data flow problem?\\n\\n_They don\'t._\\n\\nTo clarify, state machines do not distinguish between sync and async data flows, because there is no difference. This is such an important realization to make, because not only does it simplify the idea of data flow, but it also models how things work in real life:\\n\\n- A state transition (triggered by a received event) always occurs in \\"zero-time\\"; that is, states synchronously transition.\\n- Events can be received at any time.\\n\\nThere is no such thing as an asynchronous transition. For example, modeling data fetching doesn\'t look like this:\\n\\n```\\nidle . . . . . . . . . . . . success\\n```\\n\\nInstead, it looks like this:\\n\\n```html\\nidle --(FETCH)--\x3e loading --(RESOLVE)--\x3e success\\n```\\n\\nEverything is the result of some event triggering a state transition. Middleware obscures this fact. If you\'re curious how async cancellation can be handled in a synchronous state transition manner, here\'s a couple of guiding points for a potential implementation:\\n\\n- A cancellation intent is an _event_ (e.g., `{ type: \'CANCEL\' }`)\\n- Cancelling an in-flight request is an _action_ (i.e., side-effect)\\n- \\"Canceled\\" is a state, whether it\'s a specific state (e.g., `canceled`) or a state where a request shouldn\'t be active (e.g., `idle`)\\n\\n## To be continued\\n\\nIt is possible to model application state in Redux to be more like a finite state machine, and it is good to do so for many reasons. The applications that we write have different modes, or \\"behaviors\\", that vary depending on which \\"state\\" it\'s in. Before, this state might have been implicit. But now, with finite states, you can group behavior by these finite states (such as `idle`, `loading`, `success`, etc.), which makes the overall app logic much more clear, and prevents the app from getting stuck in an impossible state.\\n\\nFinite states also make clear what events can do, depending on which state it\'s in, as well as what all the possible states are in an application. Additionally, they can map one-to-one to views in user interfaces.\\n\\nBut most importantly, state machines are present in all of the software that you write, and they have been for over half a century. Making finite state machines explicit brings clarity and robustness to complex app logic, and it is possible to implement them in any libraries that you use (or even no library at all).\\n\\nIn the next post, we\'ll talk about how the Redux atomic global store is also half of a pattern, the challenges it presents, and how it compares to another well-known model of computation (the Actor model)."},{"id":"2019-12-09-xstate-version-47-and-the-future","metadata":{"permalink":"/statelyai-docs/blog/2019-12-09-xstate-version-47-and-the-future","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2019-12-09-xstate-version-47-and-the-future/index.mdx","source":"@site/blog/2019-12-09-xstate-version-47-and-the-future/index.mdx","title":"XState: version 4.7 and the future","description":"XState version 4.7 has just been released. This is a minor version bump, but a major reworking of the internal algorithms, a lot of new capabilites, bug fixes and a better TypeScript experience.","date":"2019-12-09T00:00:00.000Z","formattedDate":"December 9, 2019","tags":[{"label":"update","permalink":"/statelyai-docs/blog/tags/update"},{"label":"state machine","permalink":"/statelyai-docs/blog/tags/state-machine"},{"label":"statechart","permalink":"/statelyai-docs/blog/tags/statechart"},{"label":"xstate","permalink":"/statelyai-docs/blog/tags/xstate"},{"label":"state","permalink":"/statelyai-docs/blog/tags/state"}],"readingTime":8.64,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"XState: version 4.7 and the future","description":"XState version 4.7 has just been released. This is a minor version bump, but a major reworking of the internal algorithms, a lot of new capabilites, bug fixes and a better TypeScript experience.","tags":["update","state machine","statechart","xstate","state"],"authors":["david"],"image":"/blog/2019-12-09-xstate-version-47-and-the-future.png","slug":"2019-12-09-xstate-version-47-and-the-future","date":"2019-12-09T00:00:00.000Z"},"prevItem":{"title":"Redux is half of a pattern (1/2)","permalink":"/statelyai-docs/blog/2020-01-20-redux-is-half-a-pattern-1-2"},"nextItem":{"title":"No, disabling a button is not app logic.","permalink":"/statelyai-docs/blog/2019-11-13-no-disabling-a-button-is-not-app-logic"}},"content":"<head>\\n  <link rel=\\"canonical\\" href=\\"https://dev.to/davidkpiano/xstate-version-4-7-and-the-future-2ehk\\" />\\n</head>\\n\\n[XState](https://github.com/davidkpiano/xstate) version 4.7 [has just been released](https://github.com/davidkpiano/xstate/releases/tag/v4.7.0). This is a minor version bump, but a major reworking of the internal algorithms, a lot of new capabilities, bug fixes, and a better TypeScript experience. It also paves the road for even more utilities, like `@xstate/test` and `@xstate/react`, as well as compatibility with other 3rd-party tools across the ecosystem, and even across languages.\\n\\n\x3c!--truncate--\x3e\\n\\n## What is XState?\\n\\nXState is a JavaScript (and TypeScript) library for creating state machines and statecharts, and interpreting them. State machines enforce a specific set of \u201drules\u201c on logic structure such that:\\n\\n- There are a finite number of **states** (such as `\\"loading\\"` or `\\"success\\"`), which is different than _context_ (related data with potentially infinite possibilities, such as `email` or `age`)\\n- There are a finite number of **events** (such as `{ type: \'FETCH\', query: \\"...\\" }` that can trigger a transition between states.\\n- Each state has **transitions**, which say, \u201dGiven some **event**, go to this next state and/or do these actions\u201d.\\n\\nYou don\u2019t need a state machine library to do this, as you can use `switch` statements instead:\\n\\n```ts\\n    switch (state.status) {\\n      case \'idle\': // finite state\\n        switch (event.type) {\\n          case \'FETCH\':\\n            return {\\n              ...state,\\n              status: \'loading\',\\n              query: event.query\\n            };\\n          // ...\\n        // ...\\n      // ...\\n    }\\n```\\n\\nBut let\u2019s be honest, writing it like this is arguably a bit cleaner:\\n\\n```ts\\nconst machine = Machine({\\n  initial: \\"idle\\",\\n  states: {\\n    idle: {\\n      on: {\\n        FETCH: {\\n          target: \\"loading\\",\\n          actions: assign({ query: (_, event) => event.query }),\\n        },\\n      },\\n    },\\n    // ...\\n  },\\n});\\n```\\n\\nAnd it also makes it possible to directly copy-paste this machine code into a visualizer, like [XState Viz](https://xstate.js.org/viz), and visualize it, like was done at the end of the [No, disabling a button is not app logic](https://dev.to/davidkpiano/no-disabling-a-button-is-not-app-logic-598i) article:\\n\\n![State machine visualization on XState Viz](https://res.cloudinary.com/practicaldev/image/fetch/s--o5PbZ3py--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/218tb91ltxrnv988owz0.png)\\n[View this viz on XState Viz](https://xstate.js.org/viz/?gist=414c0e4c40dab1dc80c9218f85605a24)\\n\\nThen there are **statecharts**, which are an extension of finite state machines created by [David Harel in 1989 (read the paper \ud83d\udcd1)](http://www.inf.ed.ac.uk/teaching/courses/seoc/2005_2006/resources/statecharts.pdf). Statecharts offer many improvements and mitigate many issues of using flat finite state machines, such as:\\n\\n- Nested states (hierarchy)\\n- Parallel states (orthogonality)\\n- History states\\n- Entry, exit, and transition actions\\n- Transient states\\n- Activities (ongoing actions)\\n- Communication with many machines (invoked services)\\n- Delayed transitions\\n- And much more\\n\\nThese are things that you _definitely_ do not want to implement yourself, which is why libraries like XState exist. And this brings us to\u2026\\n\\n## What is new in XState 4.7?\\n\\nThis minor release has been worked on for months, with a huge amount of help from [Mateusz Burzy\u0144ski (also known as AndaristRake)](https://twitter.com/AndaristRake) \ud83d\udc4f. The reason it took so long was because we are internally reworking the algorithms to be simpler, fit the [SCXML spec](https://www.w3.org/TR/scxml/#InternalStructureofEvents), and be compatible with a growing number of tools in the ecosystem. This refactoring also makes adding new capabilities much easier, and will hopefully encourage more contributors to help with this project. As a nice side-effect, it also eliminates a few edge-case bugs that had workarounds, but might have caused a suboptimal developer experience in previous versions.\\n\\n## Refactored internal algorithms\\n\\nHow difficult can it be to create a statechart library? A lot more difficult than it seems, especially if you want to conform to the long, but well-established [SCXML spec](https://www.w3.org/TR/scxml). There\u2019s even libraries for integrating SCXML code directly with JavaScript, such as Jacob Beard\u2019s excellent [SCION tools](http://scion.scxml.io/), which I highly recommend you check out. It was a huge inspiration for XState, and XState is tested against much of the same code.\\n\\nSCXML specifies an [algorithm for SCXML interpretation](https://www.w3.org/TR/scxml/#AlgorithmforSCXMLInterpretation), which is written in pseudocode, but directly transferable to many popular languages. This algorithm was followed more closely in the refactor, which simplified a lot of the code base and removed the need for ad-hoc data structures such as `StateTree`, which was used to keep track of which state nodes were \\"active\\" for a given transition (now it\u2019s just a set).\\n\\nAs a result, the core code base is a little smaller, the algorithms are a little bit faster (determining the next state is basically an O(1) lookup, O(n) worst-case), and the code base is a lot nicer to work with and contribute to. We will continue to improve the algorithms used as we move towards 5.0.\\n\\n## Typestates\\n\\n[Typestates](https://en.wikipedia.org/wiki/Typestate_analysis) are really useful for developers. They\u2019re popular in Rust, and this article on [The Typestate Pattern in Rust](http://cliffle.com/blog/rust-typestate/) describes them elegantly:\\n\\n> Typestates are a technique for moving **properties of state** (the dynamic information a program is processing) **into the type level** (the static world that the compiler can check ahead-of-time).\\n\\nWithout learning Rust or diving into the Wikipedia article, let\u2019s present a classic example: loading data. You might represent the state\u2019s context in this way:\\n\\n```ts\\ninterface User {\\n  name: string;\\n}\\n\\ninterface UserContext {\\n  user?: User;\\n  error?: string;\\n}\\n```\\n\\nThis type-safe declaration allows you to defensively program effectively, but it can be a bit annoying when you are 100% sure that `user` is defined:\\n\\n```ts\\nif (state.matches(\\"success\\")) {\\n  if (!state.context.user) {\\n    // this should be impossible!\\n    // the user definitely exists!\\n    throw new Error(\\"Something weird happened\\");\\n  }\\n\\n  return state.context.user.name;\\n}\\n```\\n\\nIn 4.7, XState allows you to [represent your states with Typestates](https://xstate.js.org/docs/guides/typescript.html#typestates) so that you can tell the compiler that you know how the `context` should be in any given state:\\n\\n![GIF showing that the optional user object will be defined in the success state](https://res.cloudinary.com/practicaldev/image/fetch/s--GakogjRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/64d42j77op89yta9gbi8.gif)\\n\\nThis is very useful and improves the developer experience, but should be used as a strong guide, and not as a guarantee. It works by using [discriminated unions in TypeScript](https://basarat.gitbooks.io/typescript/docs/types/discriminated-unions.html) to define your states, but the way it is implemented requires TypeScript version 3.7 and higher. There\u2019s still some quirks to work out, as we\u2019re basically trying to trick TypeScript into knowing some extra information about our state machines that is otherwise difficult/impossible to infer in a statically typed language. (Maybe one day JavaScript will have a dependently-typed flavor.)\\n\\n## Better service experience\\n\\nXState makes invoking external \u201dservices\u201d a first-class citizen. If this is a foreign concept, for now, just understand that it answers the question \u201chow can many state machines communicate with each other?\u201d, and the answer is by using events as the main communication mechanism. In 4.7, the developer experience for this is improved:\\n\\n- Invoked services can now be referenced on the `state.children` object by their ID. So if a state invokes some service with `id: \'fetchUser\'`, then that invocation will be present on `state.children.fetchUser`.\\n- The new `forwardTo()` action creator allows you to forward events to invoked services, which cuts down a lot of boilerplate:\\n\\n```ts\\non: {\\n  SOME_EVENT: {\\n    actions: forwardTo(\\"someService\\");\\n  }\\n}\\n```\\n\\n- SCXML has this notion of a `sessionid`, which is a unique identifier for each invoked service. XState 4.7 becomes more SCXML-compatible by keeping a reference of this in `state._sessionid`, which corresponds to the SCXML `_sessionid` variable.\\n- XState can use that `_sessionid` to determine which service sent an event, so it can respond with an event back, using the new `respond()` action creator:\\n\\n```ts\\nconst authServerMachine = Machine({\\n  initial: \\"waitingForCode\\",\\n  states: {\\n    waitingForCode: {\\n      on: {\\n        CODE: {\\n          actions: respond(\\"TOKEN\\", { delay: 10 }),\\n        },\\n      },\\n    },\\n  },\\n});\\n\\nconst authClientMachine = Machine({\\n  initial: \\"idle\\",\\n  states: {\\n    idle: {\\n      on: { AUTH: \\"authorizing\\" },\\n    },\\n    authorizing: {\\n      invoke: {\\n        id: \\"auth-server\\",\\n        src: authServerMachine,\\n      },\\n      entry: send(\\"CODE\\", { to: \\"auth-server\\" }),\\n      on: {\\n        TOKEN: \\"authorized\\",\\n      },\\n    },\\n    authorized: {\\n      type: \\"final\\",\\n    },\\n  },\\n});\\n```\\n\\nYou can make your own custom action creators too, and implement patterns that you might be familiar with already if you\u2019ve worked with microservices.\\n\\n## Wildcard descriptors\\n\\nIf you\u2019ve ever wanted to transition from a state if _any_ (unspecified) event is received? Well, you\u2019re in luck, because XState now supports [wildcard descriptors](https://xstate.js.org/docs/guides/transitions.html#wildcard-descriptors), which are a type of [event descriptor (SCXML)](https://www.w3.org/TR/scxml/#EventDescriptors) that describes a transition for any event in a given state:\\n\\n```ts\\nconst quietMachine = Machine({\\n  id: \\"quiet\\",\\n  initial: \\"idle\\",\\n  states: {\\n    idle: {\\n      on: {\\n        WHISPER: undefined,\\n        // On any event besides a WHISPER, transition to the \'disturbed\' state\\n        \\"*\\": \\"disturbed\\",\\n      },\\n    },\\n    disturbed: {},\\n  },\\n});\\n\\nquietMachine.transition(quietMachine.initialState, \\"WHISPER\\");\\n// => State { value: \'idle\' }\\n\\nquietMachine.transition(quietMachine.initialState, \\"SOME_EVENT\\");\\n// => State { value: \'disturbed\' }\\n```\\n\\n## Much, much more\\n\\nSee [https://github.com/davidkpiano/xstate/releases/tag/v4.7.0](https://github.com/davidkpiano/xstate/releases/tag/v4.7.0) for an overview of the latest updates in this minor version.\\n\\n## The future of XState\\n\\nAll this leads to the big question: what are the future plans/goals for XState? The first important thing to realize is that XState is _not just another state management library_, and state management was never its only goal. XState strives to bring two things to the JavaScript ecosystem:\\n\\n- **State machines/statecharts**, for modeling the logic of any individual component\\n- **Actor model**, for modeling how components communicate with each other and behave in a system\\n\\nAll of these are very old, very useful, and battle-tested concepts. The benefits they provide cannot be understated, and highlight the future plans for XState and related tooling:\\n\\n- Better visualization tools, including an updated visualizer, dev tools for Firefox and Chrome (work in progress!), dev tools for VS Code, and integration with other graphical viz tools such as [PlantUML](https://plantuml.com/) and [GraphViz](https://www.graphviz.org/)\\n- Full [SCXML](https://www.w3.org/TR/scxml/) compatibility, which will allow statecharts authored in XState to be reusable in other languages that have SCXML tooling, as it is a truly language-agnostic spec\\n- A catalog of examples, to demonstrate common patterns and best practices for many use-cases\\n- Analytics, testing, and simulation tools\\n\\nAs well as some initial ideas for XState version 5.0:\\n\\n- Better type safety and a more seamless TypeScript experience\\n- Static analysis tools for compile-time hints/warnings and run-time optimizations\\n- A more \u201dfunctional\u201d, and completely optional, syntax for defining states and transitions more naturally (developer experience)\\n- Higher-level state types such as `\\"task\\"` and `\\"choice\\"` to make it easier to define workflows and remove some boilerplate\\n\\nWe\u2019re also listening to ideas that you present to us in the [XState Wish List](https://spectrum.chat/statecharts/general/xstate-wish-list~6f025b10-fcbc-4ab5-ae59-5201112f06f2) thread, so post what you would like to see!\\n\\n## More information\\n\\nIf you\u2019re curious about XState or statecharts in general, there are many fantastic resources, including:\\n\\n- [The World of Statecharts](https://statecharts.github.io/) by Erik Mogensen\\n- [Statecharts community](https://spectrum.chat/statecharts) on Spectrum\\n- [XState docs](https://xstate.js.org/docs)\\n- [Other tutorials](https://xstate.js.org/docs/about/tutorials.html) made by many excellent developers in the community"},{"id":"2019-11-13-no-disabling-a-button-is-not-app-logic","metadata":{"permalink":"/statelyai-docs/blog/2019-11-13-no-disabling-a-button-is-not-app-logic","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2019-11-13-no-disabling-a-button-is-not-app-logic/index.mdx","source":"@site/blog/2019-11-13-no-disabling-a-button-is-not-app-logic/index.mdx","title":"No, disabling a button is not app logic.","description":"Disabling a button is not logic. Rather, it is a sign that logic is fragile and bug-prone. Let\u2019s explore this with a simple example: fetching data in a React component.","date":"2019-11-13T00:00:00.000Z","formattedDate":"November 13, 2019","tags":[{"label":"data fetching","permalink":"/statelyai-docs/blog/tags/data-fetching"},{"label":"state machine","permalink":"/statelyai-docs/blog/tags/state-machine"},{"label":"statechart","permalink":"/statelyai-docs/blog/tags/statechart"},{"label":"state","permalink":"/statelyai-docs/blog/tags/state"},{"label":"business logic","permalink":"/statelyai-docs/blog/tags/business-logic"}],"readingTime":15.28,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"No, disabling a button is not app logic.","description":"Disabling a button is not logic. Rather, it is a sign that logic is fragile and bug-prone. Let\u2019s explore this with a simple example: fetching data in a React component.","tags":["data fetching","state machine","statechart","state","business logic"],"authors":["david"],"image":"/blog/2019-11-13-no-disabling-a-button-is-not-app-logic.png","slug":"2019-11-13-no-disabling-a-button-is-not-app-logic","date":"2019-11-13T00:00:00.000Z"},"prevItem":{"title":"XState: version 4.7 and the future","permalink":"/statelyai-docs/blog/2019-12-09-xstate-version-47-and-the-future"}},"content":"<head>\\n  <link rel=\\"canonical\\" href=\\"https://dev.to/davidkpiano/no-disabling-a-button-is-not-app-logic-598i\\" />\\n</head>\\n\\nI\u2019m going to start this post with an excerpt from the book \u201cConstructing the User Interface with Statecharts\u201d, written by Ian Horrocks in 1999:\\n\\n> User interface development tools are very powerful. They can be used to construct large and complex user interfaces, with only a relatively small amount of code written by an application developer. And yet, despite the power of such tools and the relatively small amount of code that is written, user interface software often has the following characteristics:\\n>\\n> - the code can be difficult to understand and review thoroughly:\\n> - the code can be difficult to test in a systematic and thorough way;\\n> - the code can contain bugs even after extensive testing and bug fixing;\\n> - the code can be difficult to enhance without introducing unwanted side-effects;\\n> - the quality of the code tends to deteriorate as enhancements are made to it.\\n>\\n> Despite the obvious problems associated with user interface development, **little effort has been made to improve the situation**. Any practitioner who has worked on large user interface projects will be familiar with many of the above characteristics, which are **symptomatic of the way in which the software is constructed**.\\n\\n\x3c!--truncate--\x3e\\n\\nIn case you didn\u2019t do the math, this was written _over 20 years ago_ and yet it echoes the same sentiments that many developers feel today about the state of app development. Why is that?\\n\\nWe\u2019ll explore this with a simple example: fetching data in a React component. Keep in mind, the ideas presented in this article are not library-specific, nor framework-specific\u2026 in fact, they\u2019re not even language specific!\\n\\n## Trying to make `fetch()` happen\\n\\nSuppose we have a `DogFetcher` component that has a button that you can click to fetch a random dog. When the button is clicked, a `GET` request is made to the [Dog API](https://dog.ceo/dog-api/), and when the dog is received, we show it off in an `<img />` tag.\\n\\nA typical implementation with [React Hooks](https://reactjs.org/docs/hooks-intro.html) might look like this:\\n\\n```ts\\nfunction DogFetcher() {\\n  const [isLoading, setIsLoading] = useState(false);\\n  const [dog, setDog] = useState(null);\\n\\n  return (\\n    <div>\\n      <figure className=\\"dog\\">{dog && <img src={dog} alt=\\"doggo\\" />}</figure>\\n\\n      <button\\n        onClick={() => {\\n          setIsLoading(true);\\n          fetch(`https://dog.ceo/api/breeds/image/random`)\\n            .then((data) => data.json())\\n            .then((response) => {\\n              setDog(response.message);\\n              setIsLoading(false);\\n            });\\n        }}\\n      >\\n        {isLoading ? \\"Fetching...\\" : \\"Fetch dog!\\"}\\n      </button>\\n    </div>\\n  );\\n}\\n```\\n\\nThis works, but there\u2019s one immediate problem: clicking the button more than once (while a dog is loading) will display one dog briefly, and then replace that dog with another dog. That\u2019s not very considerate to the first dog.\\n\\nThe typical solution to this is to add a `disabled={isLoading}` attribute to the button:\\n\\n```ts\\nfunction DogFetcher() {\\n  // ...\\n\\n  <button\\n    onClick={() => {\\n      // ... excessive amount of ad-hoc logic\\n    }}\\n    disabled={isLoading}\\n  >\\n    {isLoading ? \\"Fetching...\\" : \\"Fetch dog!\\"}\\n  </button>;\\n\\n  // ...\\n}\\n```\\n\\nThis also works; you\u2019re probably satisfied with this solution. Allow me to burst this bubble.\\n\\n## What can possibly go wrong?\\n\\nCurrently, the logic reads like this:\\n\\n> When the button is clicked, fetch a new random dog, and set a flag to make sure that the button cannot be clicked again to fetch a dog while one is being fetched.\\n\\nHowever, the logic you _really_ want is this:\\n\\n> When a new dog is requested, fetch it and make sure that another dog can\u2019t be fetched at the same time.\\n\\nSee the difference? The desired logic is completely separate from the button being clicked; it doesn\u2019t matter _how_ the request is made; it only matters what logic happens afterwards.\\n\\nSuppose that you want to add the feature that double-clicking the image loads a new dog. What would you have to do?\\n\\nIt\u2019s all too easy to forget to add the same \u201cguard\u201d logic on `figure` (after all, `<figure disabled={isLoading}>` won\u2019t work, go figure), but let\u2019s say you\u2019re an astute developer who remembers to add this logic:\\n\\n```ts\\n    function DogFetcher() {\\n      // ...\\n\\n      <figure\\n        onDoubleClick={() => {\\n          if (isLoading) return;\\n\\n          // copy-paste the fetch logic from the button onClick handler\\n        }}\\n      >\\n        {/* ... */}\\n      </figure>\\n\\n      // ...\\n\\n      <button\\n        onClick={() => {\\n          // fetch logic\\n        }}\\n        disabled={isLoading}\\n      >\\n        {/* ... */}\\n      </button>\\n\\n      // ...\\n    }\\n```\\n\\nIn reality, you can think about this as any use-case where some sort of \u201ctrigger\u201d can happen from multiple locations, such as:\\n\\n- a form being able to be submitted by pressing \u201cEnter\u201d in an input or clicking the \u201cSubmit\u201d button\\n- an event being triggered by a user action _or_ a timeout\\n- any app logic that needs to be shared between different platforms with different event-handling implementations (think React Native)\\n\\nBut there\u2019s a code smell here. Our same fetch logic is implemented in more than one place, and understanding the app logic requires developers to jump around in multiple parts of the code base, finding all of the event handlers where there are tidbits of logic and connecting them together mentally.\\n\\n## DRYing up the splashes of logic\\n\\nOkay, so putting logic in our event handlers is probably not a good idea, but we can\u2019t exactly put our finger on the reason why yet. Let\u2019s move the fetch logic out into a function:\\n\\n```ts\\nfunction DogFetcher() {\\n  const [isLoading, setIsLoading] = useState(false);\\n  const [dog, setDog] = useState(null);\\n\\n  function fetchDog() {\\n    if (isLoading) return;\\n\\n    setIsLoading(true);\\n    fetch(`https://dog.ceo/api/breeds/image/random`)\\n      .then((data) => data.json())\\n      .then((response) => {\\n        setDog(response.message);\\n        setIsLoading(false);\\n      });\\n  }\\n\\n  return (\\n    <div>\\n      <figure className=\\"dog\\" onDoubleClick={fetchDog}>\\n        {dog && <img src={dog} alt=\\"doggo\\" />}\\n      </figure>\\n\\n      <button onClick={fetchDog}>\\n        {isLoading ? \\"Fetching...\\" : \\"Fetch dog!\\"}\\n      </button>\\n    </div>\\n  );\\n}\\n```\\n\\n## Adding features and complexity\\n\\nNow let\u2019s see what happens when we want to add basic \u201cfeatures\u201d, such as:\\n\\n- If fetching a dog fails, an error should be shown.\\n- Fetching a dog should be cancellable.\\n\\nI hesitate to call these \u201cfeatures\u201d because these types of behaviors should be naturally enabled by the programming patterns used, but let\u2019s try to add them anyhow:\\n\\n```ts\\nfunction DogFetcher() {\\n  const [isLoading, setIsLoading] = useState(false);\\n  const [error, setError] = useState(null);\\n  const [canceled, setCanceled] = useState(false);\\n  const [dog, setDog] = useState(null);\\n\\n  function fetchDog() {\\n    setCanceled(false);\\n    setError(null);\\n    setIsLoading(true);\\n\\n    fetchRandomDog()\\n      .then((response) => {\\n        // This should work... but it doesn\'t!\\n        if (canceled) return;\\n\\n        setIsLoading(false);\\n        setDog(response.message);\\n      })\\n      .catch((error) => {\\n        setIsLoading(false);\\n        setCanceled(false);\\n        setError(error);\\n      });\\n  }\\n\\n  function cancel() {\\n    setIsLoading(false);\\n    setCanceled(true);\\n  }\\n\\n  return (\\n    <div>\\n      {error && <span style={{ color: \\"red\\" }}>{error}</span>}\\n      <figure className=\\"dog\\" onDoubleClick={fetchDog}>\\n        {dog && <img src={dog} alt=\\"doggo\\" />}\\n      </figure>\\n\\n      <button onClick={fetchDog}>\\n        {isLoading ? \\"Fetching...\\" : \\"Fetch dog!\\"}\\n      </button>\\n      <button onClick={cancel}>Cancel</button>\\n    </div>\\n  );\\n}\\n```\\n\\nThis _looks_ like it should work -- all of our Boolean flags are being set to the correct values when things happen. However, **it does not work** because of a hard-to-catch bug: _stale callbacks_. In this case, the `canceled` flag inside the `.then(...)` callback will always be the previous value instead of the latest `canceled` value, so cancelling has no effect until the next time we try to fetch a dog, which isn\u2019t what we want.\\n\\nHopefully you can see that even with these simple use-cases, our logic has quickly gone out-of-hand, and juggling Boolean flags has made the logic buggier and harder to understand.\\n\\n## Reducing complexity effectively\\n\\nInstead of haphazardly adding Boolean flags everywhere, let\u2019s clean this up with the `useReducer` and `useEffect` hooks. These hooks are useful because they express some concepts that lead to better logic organization:\\n\\n- The `useReducer` hook uses reducers, which return the next state given the current state and some event that just occurred.\\n- The `useEffect` hook synchronizes effects with state.\\n\\nTo help us organize the various app states, let\u2019s define a few and put them under a `status` property:\\n\\n- An `\\"idle\\"` status means that nothing happened yet.\\n- A `\\"loading\\"` status means that the dog is currently being fetched.\\n- A `\\"success\\"` status means that the dog was successfully fetched.\\n- A `\\"failure\\"` status means that an error occurred while trying to fetch the dog.\\n\\nNow let\u2019s define a few events that can happen in the app. Keep in mind: these events can happen from **anywhere**, whether it\u2019s initiated by the user or somewhere else:\\n\\n- A `\\"FETCH\\"` event indicates that fetching a dog should occur.\\n- A `\\"RESOLVE\\"` event with a `data` property indicates that a dog was successfully fetched.\\n- A `\\"REJECT\\"` event with an `error` property indicates that a dog was unable to be fetched for some reason.\\n- A `\\"CANCEL\\"` event indicates that an in-progress fetch should be canceled.\\n\\nGreat! Now let\u2019s write our reducer:\\n\\n```ts\\nfunction dogReducer(state, event) {\\n  switch (event.type) {\\n    case \\"FETCH\\":\\n      return {\\n        ...state,\\n        status: \\"loading\\",\\n      };\\n    case \\"RESOLVE\\":\\n      return {\\n        ...state,\\n        status: \\"success\\",\\n        dog: event.data,\\n      };\\n    case \\"REJECT\\":\\n      return {\\n        ...state,\\n        status: \\"failure\\",\\n        error: event.error,\\n      };\\n    case \\"CANCEL\\":\\n      return {\\n        ...state,\\n        status: \\"idle\\",\\n      };\\n    default:\\n      return state;\\n  }\\n}\\n\\nconst initialState = {\\n  status: \\"idle\\",\\n  dog: null,\\n  error: null,\\n};\\n```\\n\\nHere\u2019s the beautiful thing about this reducer. It is _completely framework-agnostic_ - we can take this and use it in any framework, or no framework at all. And that also makes it much easier to test.\\n\\nBut also, implementing this in a framework becomes _reduced_ (pun intended) to _just dispatching events_. No more logic in event handlers:\\n\\n```ts\\nfunction DogFetcher() {\\n  const [state, dispatch] = useReducer(dogReducer, initialState);\\n  const { error, dog, status } = state;\\n\\n  useEffect(() => {\\n    // ... fetchDog?\\n  }, [state.status]);\\n\\n  return (\\n    <div>\\n      {error && <span style={{ color: \\"red\\" }}>{error}</span>}\\n      <figure className=\\"dog\\" onDoubleClick={() => dispatch({ type: \\"FETCH\\" })}>\\n        {dog && <img src={dog} alt=\\"doggo\\" />}\\n      </figure>\\n\\n      <button onClick={() => dispatch({ type: \\"FETCH\\" })}>\\n        {status === \\"loading\\" ? \\"Fetching...\\" : \\"Fetch dog!\\"}\\n      </button>\\n      <button onClick={() => dispatch({ type: \\"CANCEL\\" })}>Cancel</button>\\n    </div>\\n  );\\n}\\n```\\n\\nHowever, the question remains: how do we execute the side-effect of actually fetching the dog? Well, since the `useEffect` hook is meant for synchronizing effects with state, we can synchronize the `fetchDog()` effect with `status === \'loading\'`, since `\'loading\'` means that that side-effect is being executed anyway:\\n\\n```ts\\n// ...\\nuseEffect(() => {\\n  if (state.status === \\"loading\\") {\\n    let canceled = false;\\n\\n    fetchRandomDog()\\n      .then((data) => {\\n        if (canceled) return;\\n        dispatch({ type: \\"RESOLVE\\", data });\\n      })\\n      .catch((error) => {\\n        if (canceled) return;\\n        dispatch({ type: \\"REJECT\\", error });\\n      });\\n\\n    return () => {\\n      canceled = true;\\n    };\\n  }\\n}, [state.status]);\\n// ...\\n```\\n\\n## The fabled \\"disabled\\" attribute\\n\\n---\\n\\nThe logic above works great. We\u2019re able to:\\n\\n- Click the \u201cFetch dog\u201d button to fetch a dog\\n- Display a random dog when fetched\\n- Show an error if the dog is unable to be fetched\\n- Cancel an in-flight fetch request by clicking the \u201cCancel\u201d button\\n- Prevent more than one dog from being fetched at the same time\\n\\n\u2026all without having to put any logic in the `<button disabled={...}>` attribute. In fact, we completely forgot to do so anyway, and the logic still works!\\n\\nThis is how you know your logic is robust; when it works, regardless of the UI. Whether the \u201cFetch dog\u201d button is disabled or not, clicking it multiple times in a row won\u2019t exhibit any unexpected behavior.\\n\\nAlso, because most of the logic is delegated to a `dogReducer` function defined _outside_ of your component, it is:\\n\\n- easy to make into a custom hook\\n- easy to test\\n- easy to reuse in other components\\n- easy to reuse in other _frameworks_\\n\\n## The final result\\n\\nChange the `<DogFetcher />` version in the select dropdown to see each of the versions we\'ve explored in this tutorial (even the buggy ones).\\n\\n## Pushing effects to the side\\n\\nThere\u2019s one lingering thought, though\u2026 is `useEffect()` the ideal place to put a side effect, such as fetching?\\n\\n_Maybe, maybe not._\\n\\nHonestly, in most use-cases, it works, and it works fine. But it\u2019s difficult to test or separate that effect from your component code. And with the upcoming Suspense and Concurrent Mode features in React, the recommendation is to execute these side-effects when some action triggers them, rather than in `useEffect()`. This is because the official React advice is:\\n\\n> If you\u2019re working on a data fetching library, there\u2019s a crucial aspect of Render-as-You-Fetch you don\u2019t want to miss. **We kick off fetching before rendering.**\\n>\\n> [https://reactjs.org/docs/concurrent-mode-suspense.html#start-fetching-early](https://reactjs.org/docs/concurrent-mode-suspense.html#start-fetching-early)\\n\\nThis is good advice. Fetching data should not be coupled with rendering. However, they also say this:\\n\\n> The answer to this is we want to start fetching in the event handlers instead.\\n\\nThis is misleading advice. Instead, here\'s what should happen:\\n\\n1.  An event handler should **send a signal** to \u201csomething\u201d that indicates that some action just happened (in the form of an event)\\n2.  That \u201csomething\u201d should **orchestrate** what happens next when it receives that event.\\n\\nTwo possible things can happen when an event is received by some orchestrator:\\n\\n- State can be changed\\n- Effects can be executed\\n\\nAll of this can happen outside of the component render cycle, because it doesn\'t necessarily concern the view. Unfortunately, React doesn\'t have a built-in way (yet?) to handle state management, side-effects, data fetching, caching etc. outside of the components (we all know Relay is not commonly used), so let\'s explore one way we can accomplish this completely outside of the component.\\n\\n## Using a state machine\\n\\nIn this case, we\'re going to use a state machine to manage and orchestrate state. If you\'re new to state machines, just know that they feel like your typical Redux reducers with a few more \\"rules\\". Those rules have some powerful advantages, and are also the mathematical basis for how literally every computer in existence today works. So they might be worth learning.\\n\\nI\'m going to use [XState](https://xstate.js.org/docs) and [`@xstate/react`](https://xstate.js.org/docs/packages/xstate-react/) to create the machine:\\n\\n```ts\\nimport { Machine, assign } from \\"xstate\\";\\nimport { useMachine } from \\"@xstate/react\\";\\n\\n// ...\\n\\nconst dogFetcherMachine = Machine({\\n  id: \\"dog fetcher\\",\\n  initial: \\"idle\\",\\n  context: {\\n    dog: null,\\n    error: null,\\n  },\\n  states: {\\n    idle: {\\n      on: { FETCH: \\"loading\\" },\\n    },\\n    loading: {\\n      invoke: {\\n        src: () => fetchRandomDog(),\\n        onDone: {\\n          target: \\"success\\",\\n          actions: assign({ dog: (_, event) => event.data.message }),\\n        },\\n        onError: {\\n          target: \\"failure\\",\\n          actions: assign({ error: (_, event) => event.data }),\\n        },\\n      },\\n      on: { CANCEL: \\"idle\\" },\\n    },\\n    success: {\\n      on: { FETCH: \\"loading\\" },\\n    },\\n    failure: {\\n      on: { FETCH: \\"loading\\" },\\n    },\\n  },\\n});\\n```\\n\\nNotice how the machine looks like our previous reducer, with a couple of differences:\\n\\n- It looks like some sort of configuration object instead of a switch statement\\n- We\u2019re matching on the _state_ first, instead of the _event_ first\\n- We\u2019re invoking the `fetchRandomDog()` promise inside the machine! \ud83d\ude31\\n\\nDon\u2019t worry; we\u2019re not actually executing any side-effects inside of this machine. In fact, `dogFetcherMachine.transition(state, event)` is a _pure function_ that tells you the next state given the current state and event. Seems familiar, huh?\\n\\nFurthermore, I can copy-paste this exact machine and [visualize it in XState Viz](https://xstate.js.org/viz):\\n\\n![Visualization of dog fetching machine](https://res.cloudinary.com/practicaldev/image/fetch/s--sSFyyRFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/hnsqk07cxbygbjo0h07j.png)\\n\\n[View this viz on xstate.js.org/viz](https://xstate.js.org/viz/?gist=414c0e4c40dab1dc80c9218f85605a24)\\n\\nSo what does our component code look like now? Take a look:\\n\\n```ts\\nfunction DogFetcher() {\\n  const [current, send] = useMachine(dogFetcherMachine);\\n  const { error, dog } = current.context;\\n\\n  return (\\n    <div>\\n      {error && <span style={{ color: \\"red\\" }}>{error}</span>}\\n      <figure className=\\"dog\\" onDoubleClick={() => send(\\"FETCH\\")}>\\n        {dog && <img src={dog} alt=\\"doggo\\" />}\\n      </figure>\\n\\n      <button onClick={() => send(\\"FETCH\\")}>\\n        {current.matches(\\"loading\\") && \\"Fetching...\\"}\\n        {current.matches(\\"success\\") && \\"Fetch another dog!\\"}\\n        {current.matches(\\"idle\\") && \\"Fetch dog\\"}\\n        {current.matches(\\"failure\\") && \\"Try again\\"}\\n      </button>\\n      <button onClick={() => send(\\"CANCEL\\")}>Cancel</button>\\n    </div>\\n  );\\n}\\n```\\n\\nHere\u2019s the difference between using a state machine and a reducer:\\n\\n- The hook signature for `useMachine(...)` looks almost the same as `useReducer(...)`\\n- No fetching logic exists inside the component; it\u2019s all external!\\n- There\u2019s a nice `current.matches(...)` function that lets us customize our button text\\n- `send(...)` instead of `dispatch(...)`... and it takes a plain string! (Or an object, up to you).\\n\\nA state machine/statechart defines its transitions from the state because it answers the question: \u201cWhich events should be handled _from this state?_\u201d The reason that having `<button disabled={isLoading}>` is fragile is because we admit that some \u201cFETCH\u201d event can cause an effect no matter which state we\u2019re in, so we have to clean up our ~mess~ faulty logic by preventing the user from clicking the button while loading.\\n\\nInstead, it\u2019s better to be proactive about your logic. Fetching should only happen when the app is not in some `\\"loading\\"` state, which is what is clearly defined in the state machine -- the `\\"FETCH\\"` event is not handled in the `\\"loading\\"` state, which means it has no effect. Perfect.\\n\\n## Final points\\n\\nDisabling a button is not logic. Rather, it is a sign that logic is fragile and bug-prone. In my opinion, disabling a button should only be a visual cue to the user that clicking the button _will have no effect_.\\n\\nSo when you\u2019re creating fetching logic (or any other kind of complex logic) in your applications, no matter the framework, ask yourself these questions:\\n\\n- What are the concrete, finite states this app/component can be in? E.g., \\"loading\\", \\"success\\", \\"idle\\", \\"failure\\", etc.\\n- What are all the possible events that can occur, regardless of state? This includes events that don\'t come from the user (such as `\\"RESOLVE\\"` or `\\"REJECT\\"` events from promises)\\n- Which of the finite states should handle these events?\\n- How can I organize my app logic so that these events are handled properly in those states?\\n\\nYou do not need a state machine library (like XState) to do this. In fact, you might not even need `useReducer` when you\u2019re first adopting these principles. Even something as simple as having a state variable representing a finite state can already clean up your logic plenty:\\n\\n```ts\\nfunction DogFetcher() {\\n  // \'idle\' or \'loading\' or \'success\' or \'error\'\\n  const [status, setStatus] = useState(\\"idle\\");\\n}\\n```\\n\\nAnd just like that, you\u2019ve eliminated `isLoading`, `isError`, `isSuccess`, `startedLoading`, and whatever Boolean flags you were going to create. And if you really start to miss that `isLoading` flag (for whatever reason), you can still have it, but ONLY if it\u2019s derived from your organized, finite states. The `isLoading` variable should NEVER be a primary source of state:\\n\\n```ts\\nfunction DogFetcher() {\\n  // \'idle\' or \'loading\' or \'success\' or \'error\'\\n  const [status, setStatus] = useState(\\"idle\\");\\n\\n  const isLoading = status === \\"loading\\";\\n\\n  return (\\n    // ...\\n    <button disabled={isLoading}>{/* ... */}</button>\\n    // ...\\n  );\\n}\\n```\\n\\nAnd we\u2019ve come full circle. Thanks for reading."}]}')}}]);