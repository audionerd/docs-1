"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[58200],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>d,mdx:()=>g,useMDXComponents:()=>m,withMDXComponents:()=>p});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},s.apply(this,arguments)}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),p=function(e){return function(t){var n=m(t.components);return a.createElement(e,s({},t,{components:n}))}},m=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=m(n),d=o,h=p["".concat(r,".").concat(d)]||p[d]||u[d]||s;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var c=2;c<s;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},69160:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const s={title:"\u201cJust use props\u201d: An opinionated guide to React and XState",description:"XState is the most powerful tool available for managing complex state. The challenge comes when integrating XState with React\u2026",tags:["prop","xstate","state machine","react"],authors:["matt"],image:"/blog/2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate.png",slug:"2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate",date:new Date("2021-01-11T00:00:00.000Z")},r=void 0,i={permalink:"/statelyai-docs/blog/2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate",editUrl:"https://github.com/statelyai/docs/edit/main/blog/2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate/index.mdx",source:"@site/blog/2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate/index.mdx",title:"\u201cJust use props\u201d: An opinionated guide to React and XState",description:"XState is the most powerful tool available for managing complex state. The challenge comes when integrating XState with React\u2026",date:"2021-01-11T00:00:00.000Z",formattedDate:"January 11, 2021",tags:[{label:"prop",permalink:"/statelyai-docs/blog/tags/prop"},{label:"xstate",permalink:"/statelyai-docs/blog/tags/xstate"},{label:"state machine",permalink:"/statelyai-docs/blog/tags/state-machine"},{label:"react",permalink:"/statelyai-docs/blog/tags/react"}],readingTime:5.685,hasTruncateMarker:!0,authors:[{name:"Matt Pocock",title:"Stately Team",url:"https://github.com/mattpocock",imageURL:"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png",key:"matt"}],frontMatter:{title:"\u201cJust use props\u201d: An opinionated guide to React and XState",description:"XState is the most powerful tool available for managing complex state. The challenge comes when integrating XState with React\u2026",tags:["prop","xstate","state machine","react"],authors:["matt"],image:"/blog/2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate.png",slug:"2021-01-11-just-use-props-an-opinionated-guide-to-react-and-xstate",date:"2021-01-11T00:00:00.000Z"},prevItem:{title:"You don\u2019t need a library for state machines",permalink:"/statelyai-docs/blog/2021-01-20-you-dont-need-a-library-for-state-machines"},nextItem:{title:"State machines: How to stop making Horcruxes in your code",permalink:"/statelyai-docs/blog/2020-07-27-state-machines-how-to-stop-making-horcruxes-in-your-code"}},l={authorsImageUrls:[void 0]},c=[{value:"Just Use Props",id:"just-use-props",level:2},{value:"Create machines. Not too many. Mostly useMachine",id:"create-machines-not-too-many-mostly-usemachine",level:3},{value:"Let React handle the tree",id:"let-react-handle-the-tree",level:3},{value:"Passing services through props",id:"passing-services-through-props",level:4},{value:"Just pass props",id:"just-pass-props",level:4},{value:"Keep state as local as possible",id:"keep-state-as-local-as-possible",level:3},{value:"Examples and challenges",id:"examples-and-challenges",level:2},{value:"Syncing parents and children",id:"syncing-parents-and-children",level:3},{value:"Summary",id:"summary",level:2}],p=(m="Tweet",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var m;const d={toc:c};function u(e){let{components:t,...n}=e;return(0,o.mdx)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"XState can feel overwhelming. Once you\u2019ve gone through ",(0,o.mdx)("a",{parentName:"p",href:"https://egghead.io/courses/introduction-to-state-machines-using-xstate"},"Kyle")," or ",(0,o.mdx)("a",{parentName:"p",href:"https://frontendmasters.com/courses/xstate/"},"David\u2019s")," courses and read through the ",(0,o.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs"},"docs"),", you\u2019ll get a thorough understanding of the API. You\u2019ll see that XState is the most powerful tool available for managing complex state."),(0,o.mdx)("p",null,"The challenge comes when integrating XState with React. Where should state machines live in my React tree? How should I manage parent and child machines?"),(0,o.mdx)(p,{id:"1345085887026106368",mdxType:"Tweet"}),(0,o.mdx)("h2",{id:"just-use-props"},"Just Use Props"),(0,o.mdx)("p",null,"I\u2019d like to propose an architecture for XState and React which prioritises simplicity, readability and type-safety. It\u2019s incrementally adoptable, and gives you a base for exploring more complex solutions. We\u2019ve used it at ",(0,o.mdx)("a",{parentName:"p",href:"https://www.yozobi.com/"},"Yozobi")," in production, and we\u2019re planning to use it for every project moving forward."),(0,o.mdx)("p",null,"It\u2019s called ",(0,o.mdx)("strong",{parentName:"p"},"just use props"),". It\u2019s got a few simple rules:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Create machines. Not too many. Mostly useMachine"),(0,o.mdx)("li",{parentName:"ol"},"Let React handle the tree"),(0,o.mdx)("li",{parentName:"ol"},"Keep state as local as possible")),(0,o.mdx)("h3",{id:"create-machines-not-too-many-mostly-usemachine"},"Create machines. Not too many. Mostly useMachine"),(0,o.mdx)("p",null,"The simplest way to integrate a state machine in your app is with ",(0,o.mdx)("inlineCode",{parentName:"p"},"useMachine"),"."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'import { createMachine, interpret } from "xstate";\nimport { useMachine } from "@xstate/react";\n\nconst machine = createMachine({\n  initial: "open",\n  states: {\n    open: {},\n    closed: {},\n  },\n});\n\nconst Component = () => {\n  const [state, send] = useMachine(machine);\n\n  return state.matches("open") ? "Open" : "Closed";\n};\n')),(0,o.mdx)("p",null,"Note that this puts React in charge of the machine. The machine is tied to the component, and it obeys all the normal React rules of the ",(0,o.mdx)("a",{parentName:"p",href:"https://reactjs.org/docs/state-and-lifecycle.html#the-data-flows-down"},"data flowing down"),". In other words, you can think of it just like ",(0,o.mdx)("inlineCode",{parentName:"p"},"useState")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"useReducer"),", but a ",(0,o.mdx)("a",{parentName:"p",href:"https://dev.to/mpocock1/usestate-vs-usereducer-vs-xstate-part-1-modals-569e"},"vastly improved version"),"."),(0,o.mdx)("h3",{id:"let-react-handle-the-tree"},"Let React handle the tree"),(0,o.mdx)("p",null,"Let\u2019s say you have a parent component and a child component. The parent has some state which it needs to pass to the child. There are several ways to do this."),(0,o.mdx)("h4",{id:"passing-services-through-props"},"Passing services through props"),(0,o.mdx)("p",null,"The first is to pass a running service to the child which the child can subscribe to:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'import { useMachine, useService } from "@xstate/react";\nimport { createMachine, Interpreter } from "xstate";\n\n/**\n * Types for the machine declaration\n */\ntype MachineContext = {};\ntype MachineEvent = { type: "TOGGLE" };\n\nconst machine = createMachine<MachineContext, MachineEvent>({});\n\nconst ParentComponent = () => {\n  /**\n   * We instantiate the service here...\n   */\n  const [state, send, service] = useMachine(machine);\n\n  return <ChildComponent service={service} />;\n};\n\ninterface ChildComponentProps {\n  service: Interpreter<MachineContext, any, MachineEvent>;\n}\n\nconst ChildComponent = (props: ChildComponentProps) => {\n  /**\n   * ...and receive it here\n   */\n  const [state, send] = useService(props.service);\n\n  return (\n    <button onClick={() => send("TOGGLE")}>\n      {state.matches("open") ? "Open" : "Closed"}\n    </button>\n  );\n};\n')),(0,o.mdx)("p",null,"I don\u2019t like this pattern. For someone not used to XState, it\u2019s unclear what a \u2018service\u2019 is. We don\u2019t get clarity from reading the types, which is a particularly ugly ",(0,o.mdx)("inlineCode",{parentName:"p"},"Interpreter")," with multiple generics."),(0,o.mdx)("p",null,"The machine appears to bleed across multiple components. Its service seems to have a life of its own, outside of React's tree. To a newbie, this feels like misdirection."),(0,o.mdx)("h4",{id:"just-pass-props"},"Just pass props"),(0,o.mdx)("p",null,"This can be expressed much more cleanly using props:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'import { useMachine } from "@xstate/react";\nimport { createMachine } from "xstate";\n\n/**\n * Types for the machine declaration\n */\ntype MachineContext = {};\ntype MachineEvent = { type: "TOGGLE" };\n\nconst machine = createMachine<MachineContext, MachineEvent>({});\n\nconst ParentComponent = () => {\n  const [state, send] = useMachine(machine);\n\n  return (\n    <ChildComponent\n      isOpen={state.matches("open")}\n      toggle={() => send("TOGGLE")}\n    />\n  );\n};\n\n/**\n * Note that the props declarations are\n * much more specific\n */\ninterface ChildComponentProps {\n  isOpen: boolean;\n  toggle: () => void;\n}\n\nconst ChildComponent = (props: ChildComponentProps) => {\n  return (\n    <button onClick={() => props.toggle()}>\n      {props.isOpen ? "Open" : "Closed"}\n    </button>\n  );\n};\n')),(0,o.mdx)("p",null,"Much better. We get several improvements in clarity in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ChildComponent")," - the types are much easier to read. We get to ditch the use of ",(0,o.mdx)("inlineCode",{parentName:"p"},"Interpreter")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"useService")," entirely."),(0,o.mdx)("p",null,"The best improvement, though, is in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ParentComponent"),". In the previous example, the machine crossed multiple components by passing its service around. In this example, it\u2019s scoped to the component, and props are derived from its state. This is far easier to grok for someone unused to XState."),(0,o.mdx)("h3",{id:"keep-state-as-local-as-possible"},"Keep state as local as possible"),(0,o.mdx)("p",null,"Unlike tools which require a global store, XState has no opinion on where you keep your state. If you have a piece of state which belongs near the root of your app, you can use React Context to make it globally available:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'import React, { createContext } from "react";\nimport { useMachine } from "@xstate/react";\nimport { createMachine } from "xstate";\n\nconst globalMachine = createMachine({});\n\ninterface GlobalContextType {\n  isOpen: boolean;\n  toggle: () => void;\n}\n\nexport const GlobalContext = createContext<GlobalContextType>();\n\nconst Provider: React.FC = ({ children }) => {\n  const [state, send] = useMachine(globalMachine);\n\n  return (\n    <GlobalContext.Provider\n      value={{ isOpen: state.matches("open"), toggle: () => send("TOGGLE") }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n')),(0,o.mdx)("p",null,(0,o.mdx)("em",{parentName:"p"},"Just as above, we\u2019re not passing a service, but props, into context.")),(0,o.mdx)("p",null,"If you have a piece of state which needs to belong lower in your tree, then obey the usual rules by ",(0,o.mdx)("a",{parentName:"p",href:"https://reactjs.org/docs/lifting-state-up.html"},"lifting state up")," to where it\u2019s needed."),(0,o.mdx)("p",null,"If that feels familiar, you\u2019re right. You\u2019re making the same decisions you\u2019re used to: where to store state and how to pass it around."),(0,o.mdx)("h2",{id:"examples-and-challenges"},"Examples and challenges"),(0,o.mdx)("h3",{id:"syncing-parents-and-children"},"Syncing parents and children"),(0,o.mdx)("p",null,"Sometimes, you need to use a parent machine ",(0,o.mdx)("em",{parentName:"p"},"and")," a child machine. Let\u2019s say that you need the child to pay attention to when a prop changes from the parent - for instance to sync some data. Here\u2019s how you can do it:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'const machine = createMachine({\n  initial: "open",\n  context: {\n    numberToStore: 0,\n  },\n  on: {\n    /**\n     * When REPORT_NEW_NUMBER occurs, sync\n     * the new number to context\n     */\n    REPORT_NEW_NUMBER: {\n      actions: [\n        assign((context, event) => {\n          return {\n            numberToStore: event.newNumber,\n          };\n        }),\n      ],\n    },\n  },\n});\n\ninterface ChildComponentProps {\n  someNumber: number;\n}\n\nconst ChildComponent = (props: ChildComponentProps) => {\n  const [state, send] = useMachine(machine);\n\n  useEffect(() => {\n    send({\n      type: "REPORT_NEW_NUMBER",\n      newNumber: props.someNumber,\n    });\n  }, [props.someNumber]);\n};\n')),(0,o.mdx)("p",null,"This can also be used to sync data from other sources, such as query hooks:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},'const ChildComponent = () => {\n  const [result] = useSomeDataHook(() => fetchNumber());\n\n  const [state, send] = useMachine(machine);\n\n  useEffect(() => {\n    send({\n      type: "REPORT_NEW_NUMBER",\n      newNumber: result.data.someNumber,\n    });\n  }, [result.data.someNumber]);\n};\n')),(0,o.mdx)("h2",{id:"summary"},"Summary"),(0,o.mdx)("p",null,"In the \u201cjust use props\u201d approach, XState lets React take charge. We stick to idiomatic React by passing props, not services. We keep machines scoped to components. And we put state at the level it\u2019s needed, just like you\u2019re used to."),(0,o.mdx)("p",null,"This article isn\u2019t finished. I\u2019m sure there will be many more questions about integrating XState with React. My plan is to come back to this article again with more examples and clarifications. Thanks for your time, and I\u2019m looking forward to seeing what you build with XState."))}u.isMDXComponent=!0}}]);