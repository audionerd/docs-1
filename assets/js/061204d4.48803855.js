"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[77723],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>m,MDXProvider:()=>p,mdx:()=>h,useMDXComponents:()=>c,withMDXComponents:()=>l});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var m=a.createContext({}),l=function(e){return function(n){var t=c(n.components);return a.createElement(e,r({},n,{components:t}))}},c=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(m.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},x=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),l=c(t),p=o,x=l["".concat(i,".").concat(p)]||l[p]||u[p]||r;return t?a.createElement(x,d(d({ref:n},m),{},{components:t})):a.createElement(x,d({ref:n},m))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=x;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d.mdxType="string"==typeof e?e:o,i[1]=d;for(var m=2;m<r;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}x.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(67294),o=t(86010);const r="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,i),hidden:t},n)}},31792:(e,n,t)=>{t.d(n,{Z:()=>T});var a=t(87462),o=t(67294),r=t(86010),i=t(12466),d=t(76775),s=t(91980),m=t(67392),l=t(50012);function c(e){return function(e){var n;return(null==(n=o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:n.filter(Boolean))??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:o}}=e;return{value:n,label:t,attributes:a,default:o}}))}function p(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??c(t);return function(e){const n=(0,m.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function u(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:t}=e;const a=(0,d.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(r),(0,o.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=p(e),[i,d]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[s,m]=x({queryString:t,groupId:a}),[c,h]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,l.Nk)(t);return[a,(0,o.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),v=(()=>{const e=s??c;return u({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{v&&d(v)}),[v]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!u({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);d(e),m(e),h(e)}),[m,h,r]),tabValues:r}}var v=t(72389);const g="tabList_TRJ7",b="tabItem_hGfb";function y(e){let{className:n,block:t,selectedValue:d,selectValue:s,tabValues:m}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),p=e=>{const n=e.currentTarget,t=l.indexOf(n),a=m[t].value;a!==d&&(c(n),s(a))},u=e=>{var n;let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}null==(n=t)||n.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n)},m.map((e=>{let{value:n,label:t,attributes:i}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:d===n?0:-1,"aria-selected":d===n,key:n,ref:e=>l.push(e),onKeyDown:u,onClick:p},i,{className:(0,r.Z)("tabs__item",b,null==i?void 0:i.className,{"tabs__item--active":d===n})}),t??n)})))}function f(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"padding-top--s"}):null}return o.createElement("div",{className:"padding-top--s"},r.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function N(e){const n=h(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",g)},o.createElement(y,(0,a.Z)({},e,n)),o.createElement(f,(0,a.Z)({},e,n)))}function T(e){const n=(0,v.Z)();return o.createElement(N,(0,a.Z)({key:String(n)},e))}},37289:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>d,metadata:()=>m,toc:()=>c});var a=t(87462),o=(t(67294),t(3905)),r=t(31792),i=t(85162);const d={title:"Migrating XState v4 to v5"},s=void 0,m={unversionedId:"migration",id:"migration",title:"Migrating XState v4 to v5",description:"Following our guide below, migrating from XState version 4 to version 5 should be straightforward. If you get stuck or have any questions, please reach out to the Stately team on our Discord.",source:"@site/docs/migration.mdx",sourceDirName:".",slug:"/migration",permalink:"/statelyai-docs/docs/migration",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/docs/migration.mdx",tags:[],version:"current",frontMatter:{title:"Migrating XState v4 to v5"},sidebar:"docs",previous:{title:"Quick start",permalink:"/statelyai-docs/docs/quick-start"},next:{title:"XState examples",permalink:"/statelyai-docs/docs/examples"}},l={},c=[{value:"Creating machines and actors",id:"creating-machines-and-actors",level:2},{value:"Use <code>createMachine()</code>, not <code>Machine()</code>",id:"use-createmachine-not-machine",level:3},{value:"Use <code>createActor()</code>, not <code>interpret()</code>",id:"use-createactor-not-interpret",level:3},{value:"Use <code>machine.provide()</code>, not <code>machine.withConfig()</code>",id:"use-machineprovide-not-machinewithconfig",level:3},{value:"Set context with <code>input</code>, not <code>machine.withContext()</code>",id:"set-context-with-input-not-machinewithcontext",level:3},{value:"Actions ordered by default, <code>predictableActionArguments</code> no longer needed",id:"actions-ordered-by-default-predictableactionarguments-no-longer-needed",level:3},{value:"Events and transitions",id:"events-and-transitions",level:2},{value:"Implementation functions receive a single argument",id:"implementation-functions-receive-a-single-argument",level:3},{value:"Use either <code>raise()</code> or <code>sendTo()</code>, not <code>send()</code>",id:"use-either-raise-or-sendto-not-send",level:3},{value:"<code>actor.send()</code> no longer accepts string types",id:"actorsend-no-longer-accepts-string-types",level:3},{value:"<code>state.can()</code> no longer accepts string types",id:"statecan-no-longer-accepts-string-types",level:3},{value:"Guarded transitions use <code>guard</code>, not <code>cond</code>",id:"guarded-transitions-use-guard-not-cond",level:3},{value:"Use <code>params</code> to pass custom event data",id:"use-params-to-pass-custom-event-data",level:3},{value:"Use wildcard <code>*</code> transitions, not strict mode",id:"use-wildcard--transitions-not-strict-mode",level:3},{value:"Use explicit eventless (<code>always</code>) transitions",id:"use-explicit-eventless-always-transitions",level:3},{value:"Use <code>reenter: true</code>, not <code>internal: false</code>",id:"use-reenter-true-not-internal-false",level:3},{value:"Transitions are internal by default, not external",id:"transitions-are-internal-by-default-not-external",level:3},{value:"Child state nodes are always re-entered",id:"child-state-nodes-are-always-re-entered",level:3},{value:"Use <code>stateIn()</code> to validate state transitions, not <code>in</code>",id:"use-statein-to-validate-state-transitions-not-in",level:3},{value:"Use <code>actor.subscribe()</code> instead of <code>state.history</code>",id:"use-actorsubscribe-instead-of-statehistory",level:3},{value:"Actors",id:"actors",level:2},{value:"Use actor logic creators for <code>invoke.src</code> instead of functions",id:"use-actor-logic-creators-for-invokesrc-instead-of-functions",level:3},{value:"Use <code>invoke.input</code> instead of <code>invoke.data</code>",id:"use-invokeinput-instead-of-invokedata",level:3},{value:"Use <code>output</code> in final states instead of <code>data</code>",id:"use-output-in-final-states-instead-of-data",level:3},{value:"Don&#39;t use property mappers in <code>input</code> or <code>output</code>",id:"dont-use-property-mappers-in-input-or-output",level:3},{value:"Use <code>actors</code> property on <code>options</code> object instead of <code>services</code>",id:"use-actors-property-on-options-object-instead-of-services",level:3},{value:"Use <code>subscribe()</code> for changes, not <code>onTransition()</code>",id:"use-subscribe-for-changes-not-ontransition",level:3},{value:"<code>createActor()</code> (formerly <code>interpret()</code>) accepts a second argument to restore state",id:"createactor-formerly-interpret-accepts-a-second-argument-to-restore-state",level:3},{value:"Use <code>actor.getSnapshot()</code> to get actor\u2019s state",id:"use-actorgetsnapshot-to-get-actors-state",level:3},{value:"Loop over events instead of using <code>actor.batch()</code>",id:"loop-over-events-instead-of-using-actorbatch",level:3},{value:"TypeScript",id:"typescript",level:2},{value:"Use <code>types</code> instead of <code>schema</code>",id:"use-types-instead-of-schema",level:3},{value:"Use <code>types.typegen</code> instead of <code>tsTypes</code>",id:"use-typestypegen-instead-of-tstypes",level:3},{value:"New features",id:"new-features",level:2},{value:"Timeline",id:"timeline",level:2},{value:"When will XState V5 be out of beta?",id:"when-will-xstate-v5-be-out-of-beta",level:3},{value:"When will Stately Studio be compatible with XState V5?",id:"when-will-stately-studio-be-compatible-with-xstate-v5",level:3},{value:"When will the XState VS Code extension be compatible with XState V5?",id:"when-will-the-xstate-vs-code-extension-be-compatible-with-xstate-v5",level:3},{value:"When will XState V5 have typegen?",id:"when-will-xstate-v5-have-typegen",level:3}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,o.mdx)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Following our guide below, migrating from XState version 4 to version 5 should be straightforward. If you get stuck or have any questions, please reach out to the Stately team on ",(0,o.mdx)("a",{parentName:"p",href:"https://discord.gg/xstate"},"our Discord"),"."),(0,o.mdx)("p",null,"This guide is for users who want to update their codebase from v4 to v5 and should also be valuable for any developers wanting to know the differences between v4 and v5."),(0,o.mdx)("admonition",{type:"video"},(0,o.mdx)("p",{parentName:"admonition"},"Prefer video? ",(0,o.mdx)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=s-nqoIbIZac"},"Watch our Migration to XState V5 beta webinar on YouTube"),".")),(0,o.mdx)("admonition",{type:"tip"},(0,o.mdx)("h2",{parentName:"admonition",id:"im-starting-a-new-project-should-i-use-xstate-v5"},"I\u2019m starting a new project. Should I use XState V5?"),(0,o.mdx)("p",{parentName:"admonition"},"XState version 5 is in beta, and compared to XState version 4, it is ",(0,o.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Software_release_life_cycle#Feature_complete"},"feature complete")," with all the features of V4 and more. But as V5 is still in beta, some slight breaking changes may occur with future beta versions. So go ahead, but proceed with caution!")),(0,o.mdx)("h2",{id:"creating-machines-and-actors"},"Creating machines and actors"),(0,o.mdx)("h3",{id:"use-createmachine-not-machine"},"Use ",(0,o.mdx)("inlineCode",{parentName:"h3"},"createMachine()"),", not ",(0,o.mdx)("inlineCode",{parentName:"h3"},"Machine()")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"Machine(config)")," function is now called ",(0,o.mdx)("inlineCode",{parentName:"p"},"createMachine(config)"),":"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine({\n  // ...\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nimport { Machine } from 'xstate';\n\nconst machine = Machine({\n  // ...\n});\n")))),(0,o.mdx)("h3",{id:"use-createactor-not-interpret"},"Use ",(0,o.mdx)("inlineCode",{parentName:"h3"},"createActor()"),", not ",(0,o.mdx)("inlineCode",{parentName:"h3"},"interpret()")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"interpret()")," function has been renamed to ",(0,o.mdx)("inlineCode",{parentName:"p"},"createActor()"),":"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, createActor } from 'xstate';\n\nconst machine = createMachine(/* ... */);\n\n// \u2705\nconst actor = createActor(machine);\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, interpret } from 'xstate';\n\nconst machine = createMachine(/* ... */);\n\n// \u274c DEPRECATED\nconst actor = interpret(machine);\n")))),(0,o.mdx)("h3",{id:"use-machineprovide-not-machinewithconfig"},"Use ",(0,o.mdx)("inlineCode",{parentName:"h3"},"machine.provide()"),", not ",(0,o.mdx)("inlineCode",{parentName:"h3"},"machine.withConfig()")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"machine.withConfig()")," method has been renamed to ",(0,o.mdx)("inlineCode",{parentName:"p"},"machine.provide()"),":"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst specificMachine = machine.provide({\n  actions: {\n    /* ... */\n  },\n  guards: {\n    /* ... */\n  },\n  actors: {\n    /* ... */\n  },\n  // ...\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst specificMachine = machine.withConfig({\n  actions: {\n    /* ... */\n  },\n  guards: {\n    /* ... */\n  },\n  services: {\n    /* ... */\n  },\n  // ...\n});\n")))),(0,o.mdx)("h3",{id:"set-context-with-input-not-machinewithcontext"},"Set context with ",(0,o.mdx)("inlineCode",{parentName:"h3"},"input"),", not ",(0,o.mdx)("inlineCode",{parentName:"h3"},"machine.withContext()")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"machine.withContext(...)")," method can no longer be used, as ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," can no longer be overridden in this manner. Use ",(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/input"},"input")," instead:"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  context: ({ input }) => ({\n    actualMoney: Math.min(input.money, 42),\n  }),\n});\n\nconst actor = createActor(machine, {\n  input: {\n    money: 1000,\n  },\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  context: {\n    actualMoney: 0,\n  },\n});\n\nconst moneyMachine = machine.withContext({\n  actualMoney: 1000,\n});\n")))),(0,o.mdx)("h3",{id:"actions-ordered-by-default-predictableactionarguments-no-longer-needed"},"Actions ordered by default, ",(0,o.mdx)("inlineCode",{parentName:"h3"},"predictableActionArguments")," no longer needed"),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"Actions are now in predictable order by default, so the ",(0,o.mdx)("inlineCode",{parentName:"p"},"predictableActionArguments")," flag is no longer required. Assign actions will always run in the order they are defined."),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  entry: [\n    ({ context }) => {\n      console.log(context.count); // 0\n    },\n    assign({ count: 1 }),\n    ({ context }) => {\n      console.log(context.count); // 1\n    },\n    assign({ count: 2 }),\n    ({ context }) => {\n      console.log(context.count); // 2\n    },\n  ],\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  predictableActionArguments: true,\n  entry: [\n    (context) => {\n      console.log(context.count); // 0\n    },\n    assign({ count: 1 }),\n    (context) => {\n      console.log(context.count); // 1\n    },\n    assign({ count: 2 }),\n    (context) => {\n      console.log(context.count); // 2\n    },\n  ],\n});\n")))),(0,o.mdx)("h2",{id:"events-and-transitions"},"Events and transitions"),(0,o.mdx)("h3",{id:"implementation-functions-receive-a-single-argument"},"Implementation functions receive a single argument"),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"Implementation functions now take in a single argument: an object with ",(0,o.mdx)("inlineCode",{parentName:"p"},"context"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"event"),", and other properties."),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  entry: ({ context, event }) => {\n    // ...\n  },\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  entry: (context, event) => {\n    // ...\n  },\n});\n")))),(0,o.mdx)("h3",{id:"use-either-raise-or-sendto-not-send"},"Use either ",(0,o.mdx)("inlineCode",{parentName:"h3"},"raise()")," or ",(0,o.mdx)("inlineCode",{parentName:"h3"},"sendTo()"),", not ",(0,o.mdx)("inlineCode",{parentName:"h3"},"send()")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"send(...)")," action creator is removed. Use ",(0,o.mdx)("inlineCode",{parentName:"p"},"raise(...)")," for sending events to self or ",(0,o.mdx)("inlineCode",{parentName:"p"},"sendTo(...)")," for sending events to other actors instead."),(0,o.mdx)("p",null,"Read the documentation on the ",(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/actions#send-to-action"},(0,o.mdx)("inlineCode",{parentName:"a"},"sendTo")," action")," and ",(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/actions#raise-action"},(0,o.mdx)("inlineCode",{parentName:"a"},"raise")," action")," for more information."),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  // ...\n  entry: [\n    // Send an event to self\n    raise({ type: 'someEvent' }),\n\n    // Send an event to another actor\n    sendTo('someActor', { type: 'someEvent' }),\n  ],\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  // ...\n  entry: [\n    // Send an event to self\n    send({ type: 'someEvent' }),\n\n    // Send an event to another actor\n    send({ type: 'someEvent' }, { to: 'someActor' }),\n  ],\n});\n")))),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Pre-migration tip:")," Update v4 projects to use ",(0,o.mdx)("inlineCode",{parentName:"p"},"sendTo")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"raise")," instead of ",(0,o.mdx)("inlineCode",{parentName:"p"},"send"),"."),(0,o.mdx)("h3",{id:"actorsend-no-longer-accepts-string-types"},(0,o.mdx)("inlineCode",{parentName:"h3"},"actor.send()")," no longer accepts string types"),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"String event types can no longer be sent to, e.g., ",(0,o.mdx)("inlineCode",{parentName:"p"},"actor.send(event)"),"; you must send an event object instead:"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nactor.send({ type: 'someEvent' });\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nactor.send('someEvent');\n")))),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Pre-migration tip:")," Update v4 projects to pass an object to ",(0,o.mdx)("inlineCode",{parentName:"p"},".send()"),"."),(0,o.mdx)("h3",{id:"statecan-no-longer-accepts-string-types"},(0,o.mdx)("inlineCode",{parentName:"h3"},"state.can()")," no longer accepts string types"),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"String event types can no longer be sent to, e.g., ",(0,o.mdx)("inlineCode",{parentName:"p"},"state.can(event)"),"; you must send an event object instead:"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nstate.can({ type: 'someEvent' });\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nstate.can('someEvent');\n")))),(0,o.mdx)("h3",{id:"guarded-transitions-use-guard-not-cond"},"Guarded transitions use ",(0,o.mdx)("inlineCode",{parentName:"h3"},"guard"),", not ",(0,o.mdx)("inlineCode",{parentName:"h3"},"cond")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"cond")," transition property for guarded transitions is now called ",(0,o.mdx)("inlineCode",{parentName:"p"},"guard"),":"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  on: {\n    someEvent: {\n      guard: 'someGuard',\n      target: 'someState',\n    },\n  },\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  on: {\n    someEvent: {\n      // renamed to `guard` in v5\n      cond: 'someGuard',\n      target: 'someState',\n    },\n  },\n});\n")))),(0,o.mdx)("h3",{id:"use-params-to-pass-custom-event-data"},"Use ",(0,o.mdx)("inlineCode",{parentName:"h3"},"params")," to pass custom event data"),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"Properties other than ",(0,o.mdx)("inlineCode",{parentName:"p"},"type")," on action objects and guard objects should be nested under a ",(0,o.mdx)("inlineCode",{parentName:"p"},"params")," property; ",(0,o.mdx)("inlineCode",{parentName:"p"},"{ type: 'someType', message: 'hello' }")," becomes ",(0,o.mdx)("inlineCode",{parentName:"p"},"{ type: 'someType', params: { message: 'hello' }}"),":"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  entry: {\n    type: 'greet',\n    params: {\n      message: 'Hello world',\n    },\n  },\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  entry: {\n    type: 'greet',\n    message: 'Hello world',\n  },\n});\n")))),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Pre-migration tip:")," Update action and guard objects on v4 projects to move properties (other than ",(0,o.mdx)("inlineCode",{parentName:"p"},"type"),") to a ",(0,o.mdx)("inlineCode",{parentName:"p"},"params")," object."),(0,o.mdx)("h3",{id:"use-wildcard--transitions-not-strict-mode"},"Use wildcard ",(0,o.mdx)("inlineCode",{parentName:"h3"},"*")," transitions, not strict mode"),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"Strict mode is removed. If you want to throw on unhandled events, you should use a wildcard transition:"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  on: {\n    knownEvent: {\n      // ...\n    },\n    '*': {\n      // unknown event\n      actions: ({ event }) => {\n        throw new Error(`Unknown event: ${event.type}`);\n      },\n    },\n  },\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  strict: true,\n  on: {\n    knownEvent: {\n      // ...\n    },\n  },\n});\n")))),(0,o.mdx)("h3",{id:"use-explicit-eventless-always-transitions"},"Use explicit eventless (",(0,o.mdx)("inlineCode",{parentName:"h3"},"always"),") transitions"),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"Eventless (\u201calways\u201d) transitions must now be defined through the ",(0,o.mdx)("inlineCode",{parentName:"p"},"always: { ... }")," property of a state node; they can no longer be defined via an empty string:"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  // ...\n  states: {\n    someState: {\n      always: {\n        target: 'anotherState',\n      },\n    },\n  },\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  // ...\n  states: {\n    someState: {\n      on: {\n        '': {\n          target: 'anotherState',\n        },\n      },\n    },\n  },\n});\n")))),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Pre-migration tip:")," Update v4 projects to use ",(0,o.mdx)("inlineCode",{parentName:"p"},"always")," for ",(0,o.mdx)("em",{parentName:"p"},"eventless")," transitions."),(0,o.mdx)("h3",{id:"use-reenter-true-not-internal-false"},"Use ",(0,o.mdx)("inlineCode",{parentName:"h3"},"reenter: true"),", not ",(0,o.mdx)("inlineCode",{parentName:"h3"},"internal: false")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"internal: false")," is now ",(0,o.mdx)("inlineCode",{parentName:"p"},"reenter: true")),(0,o.mdx)("p",null,"External transitions previously specified with ",(0,o.mdx)("inlineCode",{parentName:"p"},"internal: false")," are now specified with ",(0,o.mdx)("inlineCode",{parentName:"p"},"reenter: true"),":"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  // ...\n  on: {\n    someEvent: {\n      target: 'sameState',\n      reenter: true,\n    },\n  },\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  // ...\n  on: {\n    someEvent: {\n      target: 'sameState',\n      internal: false,\n    },\n  },\n});\n")))),(0,o.mdx)("h3",{id:"transitions-are-internal-by-default-not-external"},"Transitions are internal by default, not external"),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"All transitions are implicitly internal. This change is relevant for transitions defined on compound state nodes with ",(0,o.mdx)("inlineCode",{parentName:"p"},"entry")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"exit")," actions, invoked actors, or delayed transitions (",(0,o.mdx)("inlineCode",{parentName:"p"},"after"),"). If you relied on implicit re-entering of a compound state node, use ",(0,o.mdx)("inlineCode",{parentName:"p"},"reenter: true"),":"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  // ...\n  states: {\n    compoundState: {\n      entry: 'someAction',\n      on: {\n        someEvent: {\n          target: 'compoundState.childState',\n          // Reenters the `compoundState` state,\n          // just like an external transition\n          reenter: true,\n        },\n      },\n      initial: 'childState',\n      states: {\n        childState: {},\n      },\n    },\n  },\n})\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  // ...\n  states: {\n    compoundState: {\n      entry: 'someAction',\n      on: {\n        someEvent: {\n          // implicitly external\n          target: 'compoundState.childState', // non-relative target\n        },\n      },\n      initial: 'childState',\n      states: {\n        childState: {},\n      },\n    },\n  },\n})\n")))),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  // ...\n  states: {\n    compoundState: {\n      after: {\n        1000: {\n          target: 'compoundState.childState',\n          reenter: true, // make it external explicitly!\n        }\n      },\n      initial: 'childState',\n      states: {\n        childState: {},\n      },\n    },\n  },\n})\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  // ...\n  states: {\n    compoundState: {\n      after: {\n        1000: {\n          // implicitly external\n          target: 'compoundState.childState', // non-relative target\n        }\n      },\n      initial: 'childState',\n      states: {\n        childState: {},\n      },\n    },\n  },\n})\n")))),(0,o.mdx)("h3",{id:"child-state-nodes-are-always-re-entered"},"Child state nodes are always re-entered"),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"Child state nodes are always re-entered when they are targeted by transitions (both external and ",(0,o.mdx)("strong",{parentName:"p"},"internal"),") defined on compound state nodes. This change is relevant only if a child state node has ",(0,o.mdx)("inlineCode",{parentName:"p"},"entry")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"exit")," actions, invoked actors, or delayed transitions (",(0,o.mdx)("inlineCode",{parentName:"p"},"after"),"). Add a ",(0,o.mdx)("inlineCode",{parentName:"p"},"stateIn")," guard to prevent undesirable re-entry of the child state:"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\n\nconst machine = createMachine({\n  // ...\n  states: {\n    compoundState: {\n      on: {\n        someEvent: {\n          guard: not(stateIn({ compoundState: 'childState' }),\n          target: '.childState',\n        },\n      },\n      initial: 'childState',\n      states: {\n        childState: {\n          entry: 'someAction',\n        },\n      },\n    },\n  },\n})\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\n\nconst machine = createMachine({\n  // ...\n  states: {\n    compoundState: {\n      on: {\n        someEvent: {\n          target: '.childState', // implicitly internal, childState not re-entered\n        },\n      },\n      initial: 'childState',\n      states: {\n        childState: {\n          entry: 'someAction',\n        },\n      },\n    },\n  },\n})\n")))),(0,o.mdx)("h3",{id:"use-statein-to-validate-state-transitions-not-in"},"Use ",(0,o.mdx)("inlineCode",{parentName:"h3"},"stateIn()")," to validate state transitions, not ",(0,o.mdx)("inlineCode",{parentName:"h3"},"in")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"in: 'someState'")," transition property is removed. Use ",(0,o.mdx)("inlineCode",{parentName:"p"},"guard: stateIn(...)")," instead:"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  on: {\n    someEvent: {\n      guard: stateIn({ form: 'submitting' }),\n      target: 'someState',\n    },\n  },\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  on: {\n    someEvent: {\n      in: '#someMachine.form.submitting'\n      target: 'someState',\n    },\n  },\n});\n")))),(0,o.mdx)("h3",{id:"use-actorsubscribe-instead-of-statehistory"},"Use ",(0,o.mdx)("inlineCode",{parentName:"h3"},"actor.subscribe()")," instead of ",(0,o.mdx)("inlineCode",{parentName:"h3"},"state.history")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"state.history")," property is removed. If you want the previous snapshot, you should maintain that via ",(0,o.mdx)("inlineCode",{parentName:"p"},"actor.subscribe(...)")," instead."),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nlet previousSnapshot = actor.getSnapshot();\n\nactor.subscribe((snapshot) => {\n  doSomeComparison(previousSnapshot, snapshot);\n  previousSnapshot = snapshot;\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nactor.subscribe((state) => {\n  doSomeComparison(state.history, state);\n});\n")))),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Pre-migration tip:")," Update v4 projects to track history using ",(0,o.mdx)("inlineCode",{parentName:"p"},"actor.subscribe()"),"."),(0,o.mdx)("h2",{id:"actors"},"Actors"),(0,o.mdx)("h3",{id:"use-actor-logic-creators-for-invokesrc-instead-of-functions"},"Use actor logic creators for ",(0,o.mdx)("inlineCode",{parentName:"h3"},"invoke.src")," instead of functions"),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"The available actor logic creators are:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"createMachine")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"fromPromise")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"fromObservable")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"fromEventObservable")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"fromTransition")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"fromCallback"))),(0,o.mdx)("p",null,"See ",(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/actors"},"Actors")," for more information."),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nimport { fromPromise, createMachine } from 'xstate';\n\nconst machine = createMachine({\n  invoke: {\n    src: fromPromise(async ({ input }) => {\n      const data = await getData(input.userId);\n      // ...\n      return data;\n    }),\n    input: ({ context, event }) => ({\n      userId: context.userId,\n    }),\n  },\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nimport { createMachine } from 'xstate';\n\nconst machine = createMachine({\n  invoke: {\n    src: (context) => async () => {\n      const data = await getData(context.userId);\n\n      // ...\n      return data;\n    },\n  },\n});\n")))),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nimport { fromCallback, createMachine } from 'xstate';\n\nconst machine = createMachine({\n  invoke: {\n    src: fromCallback(({ sendBack, receive, input }) => {\n      // ...\n    }),\n    input: ({ context, event }) => ({\n      userId: context.userId,\n    }),\n  },\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nimport { createMachine } from 'xstate';\n\nconst machine = createMachine({\n  invoke: {\n    src: (context, event) => (sendBack, receive) => {\n      // context.userId\n      // ...\n    },\n  },\n});\n")))),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nimport { fromEventObservable, createMachine } from 'xstate';\nimport { interval, mapTo } from 'rxjs';\n\nconst machine = createMachine({\n  invoke: {\n    src: fromEventObservable(() =>\n      interval(1000).pipe(mapTo({ type: 'tick' })),\n    ),\n  },\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nimport { createMachine } from 'xstate';\nimport { interval, mapTo } from 'rxjs';\n\nconst machine = createMachine({\n  invoke: {\n    src: () => interval(1000).pipe(mapTo({ type: 'tick' })),\n  },\n});\n")))),(0,o.mdx)("h3",{id:"use-invokeinput-instead-of-invokedata"},"Use ",(0,o.mdx)("inlineCode",{parentName:"h3"},"invoke.input")," instead of ",(0,o.mdx)("inlineCode",{parentName:"h3"},"invoke.data")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"invoke.data")," property is removed. If you want to provide context to invoked actors, use ",(0,o.mdx)("inlineCode",{parentName:"p"},"invoke.input"),":"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  // ...\n  invoke: {\n    src: 'someActor',\n    input: {\n      value: 42,\n    },\n  },\n});\n\n// The input must be consumed by the invoked actor:\nconst someActor = createMachine({\n  // ...\n  context: ({ input }) => input,\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  // ...\n  invoke: {\n    src: 'someActor',\n    data: {\n      value: 42,\n    },\n  },\n});\n")))),(0,o.mdx)("h3",{id:"use-output-in-final-states-instead-of-data"},"Use ",(0,o.mdx)("inlineCode",{parentName:"h3"},"output")," in final states instead of ",(0,o.mdx)("inlineCode",{parentName:"h3"},"data")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"To produce output data from a machine which reached its final state, use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"output")," property instead of ",(0,o.mdx)("inlineCode",{parentName:"p"},"data"),":"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  // ...\n  states: {\n    finished: {\n      type: 'final',\n      output: {\n        answer: 42,\n      },\n    },\n  },\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  // ...\n  states: {\n    finished: {\n      type: 'final',\n      data: {\n        answer: 42,\n      },\n    },\n  },\n});\n")))),(0,o.mdx)("h3",{id:"dont-use-property-mappers-in-input-or-output"},"Don't use property mappers in ",(0,o.mdx)("inlineCode",{parentName:"h3"},"input")," or ",(0,o.mdx)("inlineCode",{parentName:"h3"},"output")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"If you want to provide dynamic context to invoked actors, or produce dynamic output from final states, use a function instead of an object with property mappers."),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  // ...\n  invoke: {\n    src: 'someActor',\n    input: ({ context, event }) => ({\n      value: event.value,\n    }),\n  },\n});\n\n// The input must be consumed by the invoked actor:\nconst someActor = createMachine({\n  // ...\n  context: ({ input }) => input,\n});\n\n// Producing machine output\nconst machine = createMachine({\n  // ...\n  states: {\n    finished: {\n      type: 'final',\n      output: ({ context, event }) => ({\n        answer: context.value,\n      }),\n    },\n  },\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  // ...\n  invoke: {\n    src: 'someActor',\n    data: {\n      value: (context, event) => event.value, // a property mapper\n    },\n  },\n});\n\n// Producing machine output\nconst machine = createMachine({\n  // ...\n  states: {\n    finished: {\n      type: 'final',\n      data: {\n        answer: (context, event) => context.value, // a property mapper\n      },\n    },\n  },\n});\n")))),(0,o.mdx)("h3",{id:"use-actors-property-on-options-object-instead-of-services"},"Use ",(0,o.mdx)("inlineCode",{parentName:"h3"},"actors")," property on ",(0,o.mdx)("inlineCode",{parentName:"h3"},"options")," object instead of ",(0,o.mdx)("inlineCode",{parentName:"h3"},"services")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"services")," have been renamed to ",(0,o.mdx)("inlineCode",{parentName:"p"},"actors"),":"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst specificMachine = machine.provide({\n  actions: {\n    /* ... */\n  },\n  guards: {\n    /* ... */\n  },\n  actors: {\n    /* ... */\n  },\n  // ...\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst specificMachine = machine.withConfig({\n  actions: {\n    /* ... */\n  },\n  guards: {\n    /* ... */\n  },\n  services: {\n    /* ... */\n  },\n  // ...\n});\n")))),(0,o.mdx)("h3",{id:"use-subscribe-for-changes-not-ontransition"},"Use ",(0,o.mdx)("inlineCode",{parentName:"h3"},"subscribe()")," for changes, not ",(0,o.mdx)("inlineCode",{parentName:"h3"},"onTransition()")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"actor.onTransition(...)")," method is removed. Use ",(0,o.mdx)("inlineCode",{parentName:"p"},"actor.subscribe(...)")," instead."),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst actor = createActor(machine);\nactor.subscribe((state) => {\n  // ...\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst actor = interpret(machine);\nactor.onTransition((state) => {\n  // ...\n});\n")))),(0,o.mdx)("h3",{id:"createactor-formerly-interpret-accepts-a-second-argument-to-restore-state"},(0,o.mdx)("inlineCode",{parentName:"h3"},"createActor()")," (formerly ",(0,o.mdx)("inlineCode",{parentName:"h3"},"interpret()"),") accepts a second argument to restore state"),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"interpret(machine).start(state)")," is now ",(0,o.mdx)("inlineCode",{parentName:"p"},"createActor(machine, { state }).start()")),(0,o.mdx)("p",null,"To restore an actor at a specific state, you should now pass the state as the ",(0,o.mdx)("inlineCode",{parentName:"p"},"state")," property of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"options")," argument of ",(0,o.mdx)("inlineCode",{parentName:"p"},"createActor(logic, options)"),". The ",(0,o.mdx)("inlineCode",{parentName:"p"},"actor.start()")," property no longer takes in a ",(0,o.mdx)("inlineCode",{parentName:"p"},"state")," argument."),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst actor = createActor(machine, { state: someState });\nactor.start();\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst actor = interpret(machine);\nactor.start(someState);\n")))),(0,o.mdx)("h3",{id:"use-actorgetsnapshot-to-get-actors-state"},"Use ",(0,o.mdx)("inlineCode",{parentName:"h3"},"actor.getSnapshot()")," to get actor\u2019s state"),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"Subscribing to an actor (",(0,o.mdx)("inlineCode",{parentName:"p"},"actor.subscribe(...)"),") after the actor has started will no longer emit the current snapshot immediately. Instead, read the current snapshot from ",(0,o.mdx)("inlineCode",{parentName:"p"},"actor.getSnapshot()"),":"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst actor = createActor(machine);\nactor.start();\n\nconst initialState = actor.getSnapshot();\n\nactor.subscribe((state) => {\n  // Snapshots from when the subscription was created\n  // Will not emit the current snapshot until a transition happens\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst actor = interpret(machine);\nactor.start();\n\nactor.subscribe((state) => {\n  // Current snapshot immediately emitted\n});\n")))),(0,o.mdx)("h3",{id:"loop-over-events-instead-of-using-actorbatch"},"Loop over events instead of using ",(0,o.mdx)("inlineCode",{parentName:"h3"},"actor.batch()")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"actor.batch([...])")," method for batching events is removed."),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nfor (const event of events) {\n  actor.send(event);\n}\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nactor.batch(events);\n")))),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Pre-migration tip:")," Update v4 projects to loop over events to send them as a batch."),(0,o.mdx)("h2",{id:"typescript"},"TypeScript"),(0,o.mdx)("h3",{id:"use-types-instead-of-schema"},"Use ",(0,o.mdx)("inlineCode",{parentName:"h3"},"types")," instead of ",(0,o.mdx)("inlineCode",{parentName:"h3"},"schema")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"machineConfig.schema")," property is renamed to ",(0,o.mdx)("inlineCode",{parentName:"p"},"machineConfig.types"),":"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  types: {} as {\n    context: {\n      /* ...*/\n    };\n    events: {\n      /* ...*/\n    };\n  },\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  schema: {} as {\n    context: {\n      /* ...*/\n    };\n    events: {\n      /* ...*/\n    };\n  },\n});\n")))),(0,o.mdx)("h3",{id:"use-typestypegen-instead-of-tstypes"},"Use ",(0,o.mdx)("inlineCode",{parentName:"h3"},"types.typegen")," instead of ",(0,o.mdx)("inlineCode",{parentName:"h3"},"tsTypes")),(0,o.mdx)("admonition",{type:"breakingchange"},(0,o.mdx)("p",{parentName:"admonition"},"Breaking change")),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"machineConfig.tsTypes")," has been renamed and is now nested as ",(0,o.mdx)("inlineCode",{parentName:"p"},"machineConfig.types.typegen"),":"),(0,o.mdx)(r.Z,{mdxType:"Tabs"},(0,o.mdx)(i.Z,{value:"v5",label:"XState v5 beta",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u2705\nconst machine = createMachine({\n  types: {} as {\n    typegen: {};\n    context: {\n      /* ...*/\n    };\n    events: {\n      /* ...*/\n    };\n  },\n});\n"))),(0,o.mdx)(i.Z,{value:"v4",label:"XState v4",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"// \u274c DEPRECATED\nconst machine = createMachine({\n  tsTypes: {};\n  schema: {} as {\n    context: {\n      /* ...*/\n    };\n    events: {\n      /* ...*/\n    };\n  },\n});\n")))),(0,o.mdx)("h2",{id:"new-features"},"New features"),(0,o.mdx)("p",null,(0,o.mdx)("em",{parentName:"p"},"List coming soon")),(0,o.mdx)("h2",{id:"timeline"},"Timeline"),(0,o.mdx)("p",null,"XState V5 is in beta, so there\u2019s still work to be done. We anticipate the tools will be fully compatible with XState V5 beta by summer/fall 2023, with XState V5 stable being released by the end of 2023."),(0,o.mdx)("h3",{id:"when-will-xstate-v5-be-out-of-beta"},"When will XState V5 be out of beta?"),(0,o.mdx)("p",null,"We hope to release XState V5 as a stable major release this year (2023) but can\u2019t provide any exact estimates. The rough timeline is:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Get early feedback on XState V5 beta (",(0,o.mdx)("inlineCode",{parentName:"li"},"xstate@beta"),")"),(0,o.mdx)("li",{parentName:"ol"},"Ensure all related packages (e.g. ",(0,o.mdx)("inlineCode",{parentName:"li"},"@xstate/react"),", ",(0,o.mdx)("inlineCode",{parentName:"li"},"@xstate/vue"),") are fully compatible with XState V5"),(0,o.mdx)("li",{parentName:"ol"},"Support V5 in typegen, ",(0,o.mdx)("inlineCode",{parentName:"li"},"@xstate/inspect"),", and related tools"),(0,o.mdx)("li",{parentName:"ol"},"Support V5 (importing & exporting) in Stately Studio"),(0,o.mdx)("li",{parentName:"ol"},"Release candidates"),(0,o.mdx)("li",{parentName:"ol"},"Release XState V5 stable")),(0,o.mdx)("p",null,"Upvote or comment on ",(0,o.mdx)("a",{parentName:"p",href:"https://feedback.stately.ai/xstate/p/xstate-v5"},"XState V5 in our roadmap")," to be the first to find out when V5 is released."),(0,o.mdx)("h3",{id:"when-will-stately-studio-be-compatible-with-xstate-v5"},"When will Stately Studio be compatible with XState V5?"),(0,o.mdx)("p",null,"We are currently working on ",(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/studio"},"Stately Studio")," compatibility with XState V5. Exporting to XState V5 (JavaScript or TypeScript) will happen soonest, followed by support for new XState V5 features, such as higher-order guards, partial event wildcards, and machine input/output."),(0,o.mdx)("p",null,"Upvote or comment on ",(0,o.mdx)("a",{parentName:"p",href:"https://feedback.stately.ai/editor/p/stately-studio-xstate-v5-compatibility"},"Stately Studio + XState V5 compatibility in our roadmap")," to stay updated on our progress."),(0,o.mdx)("h3",{id:"when-will-the-xstate-vs-code-extension-be-compatible-with-xstate-v5"},"When will the XState VS Code extension be compatible with XState V5?"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/xstate-vscode-extension"},"XState VS Code extension")," is not yet compatible with XState v5. The extension is a priority for us, and work is already underway."),(0,o.mdx)("p",null,"Upvote or comment on ",(0,o.mdx)("a",{parentName:"p",href:"https://feedback.stately.ai/devtools/p/xstate-v5-compatibility-for-vs-code-extension"},"XState V5 compatibility for VS Code extension in our roadmap")," to stay updated on our progress."),(0,o.mdx)("h3",{id:"when-will-xstate-v5-have-typegen"},"When will XState V5 have typegen?"),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/typegen"},"Typegen")," automatically generates intelligent typings for XState and is not yet compatible with XState v5. We\u2019re working on Typegen alongside the VS Code extension."),(0,o.mdx)("p",null,"Upvote or comment on ",(0,o.mdx)("a",{parentName:"p",href:"https://feedback.stately.ai/xstate/p/typegen-for-xstate-v5"},"Typegen for XState V5 in our roadmap")," to stay updated on our progress."))}u.isMDXComponent=!0}}]);