"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[76779],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>l,MDXProvider:()=>p,mdx:()=>x,useMDXComponents:()=>d,withMDXComponents:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){return function(t){var n=d(t.components);return a.createElement(e,i({},t,{components:n}))}},d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),c=d(n),p=r,h=c["".concat(s,".").concat(p)]||c[p]||u[p]||i;return n?a.createElement(h,o(o({ref:t},l),{},{components:n})):a.createElement(h,o({ref:t},l))}));function x(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=h;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},64258:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={title:"@xstate/react",description:"The @xstate/react package contains utilities for using React with XState. Learn how to install and get started quickly with @xstate/react."},s=void 0,o={unversionedId:"xstate/packages/xstate-react",id:"version-4/xstate/packages/xstate-react",title:"@xstate/react",description:"The @xstate/react package contains utilities for using React with XState. Learn how to install and get started quickly with @xstate/react.",source:"@site/versioned_docs/version-4/xstate/packages/xstate-react.mdx",sourceDirName:"xstate/packages",slug:"/xstate/packages/xstate-react",permalink:"/docs/xstate-v4/xstate/packages/xstate-react",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/packages/xstate-react.mdx",tags:[],version:"4",frontMatter:{title:"@xstate/react",description:"The @xstate/react package contains utilities for using React with XState. Learn how to install and get started quickly with @xstate/react."},sidebar:"tutorialSidebar",previous:{title:"@xstate/immer",permalink:"/docs/xstate-v4/xstate/packages/xstate-immer"},next:{title:"@xstate/svelte",permalink:"/docs/xstate-v4/xstate/packages/xstate-svelte"}},m={},l=[{value:"Quick start",id:"quick-start",level:2},{value:"Via CDN",id:"via-cdn",level:4},{value:"Examples",id:"examples",level:2},{value:"API",id:"api",level:2},{value:"<code>useMachine(machine, options?)</code>",id:"usemachinemachine-options",level:3},{value:"Arguments",id:"arguments",level:4},{value:"<code>useActor(actor, getSnapshot?)</code>",id:"useactoractor-getsnapshot",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"<code>useInterpret(machine, options?, observer?)</code>",id:"useinterpretmachine-options-observer",level:3},{value:"Arguments",id:"arguments-2",level:4},{value:"<code>useSelector(actor, selector, compare?, getSnapshot?)</code>",id:"useselectoractor-selector-compare-getsnapshot",level:3},{value:"Arguments",id:"arguments-3",level:4},{value:"<code>createActorContext(machine)</code>",id:"createactorcontextmachine",level:3},{value:"Arguments",id:"arguments-4",level:4},{value:"Shallow comparison",id:"shallow-comparison",level:3},{value:"<code>useMachine(machine)</code> with <code>@xstate/fsm</code>",id:"usemachinemachine-with-xstatefsm",level:3},{value:"Arguments",id:"arguments-5",level:4},{value:"Example",id:"example",level:4},{value:"Configuring machines",id:"configuring-machines",level:2},{value:"Matching states",id:"matching-states",level:2},{value:"Persisted and rehydrated State",id:"persisted-and-rehydrated-state",level:2},{value:"Services",id:"services",level:2},{value:"Resources",id:"resources",level:2}],c={toc:l};function d(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"The ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/statelyai/xstate/tree/main/packages/xstate-react"},"@xstate/react package")," contains utilities for using ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/statelyai/xstate"},"XState")," with ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/react/"},"React"),"."),(0,r.mdx)("h2",{id:"quick-start"},"Quick start"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"Install ",(0,r.mdx)("inlineCode",{parentName:"li"},"xstate")," and ",(0,r.mdx)("inlineCode",{parentName:"li"},"@xstate/react"),":")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"npm i xstate @xstate/react\n")),(0,r.mdx)("h4",{id:"via-cdn"},"Via CDN"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-html"},'<script src="https://unpkg.com/@xstate/react/dist/xstate-react.umd.min.js"><\/script>\n')),(0,r.mdx)("p",null,"By using the global variable ",(0,r.mdx)("inlineCode",{parentName:"p"},"XStateReact")),(0,r.mdx)("p",null,"or"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-html"},'<script src="https://unpkg.com/@xstate/react/dist/xstate-react-fsm.umd.min.js"><\/script>\n')),(0,r.mdx)("p",null,"By using the global variable ",(0,r.mdx)("inlineCode",{parentName:"p"},"XStateReactFSM")),(0,r.mdx)("ol",{start:2},(0,r.mdx)("li",{parentName:"ol"},"Import the ",(0,r.mdx)("inlineCode",{parentName:"li"},"useMachine")," hook:")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { useMachine } from '@xstate/react';\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' },\n    },\n    active: {\n      on: { TOGGLE: 'inactive' },\n    },\n  },\n});\n\nexport const Toggler = () => {\n  const [state, send] = useMachine(toggleMachine);\n\n  return (\n    <button onClick={() => send('TOGGLE')}>\n      {state.value === 'inactive'\n        ? 'Click to activate'\n        : 'Active! Click to deactivate'}\n    </button>\n  );\n};\n")),(0,r.mdx)("h2",{id:"examples"},"Examples"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://codesandbox.io/s/xstate-todomvc-33wr94qv1"},"XState + React TodoMVC (CodeSandbox)"))),(0,r.mdx)("h2",{id:"api"},"API"),(0,r.mdx)("h3",{id:"usemachinemachine-options"},(0,r.mdx)("inlineCode",{parentName:"h3"},"useMachine(machine, options?)")),(0,r.mdx)("p",null,"A ",(0,r.mdx)("a",{parentName:"p",href:"https://reactjs.org/hooks"},"React hook")," that interprets the given ",(0,r.mdx)("inlineCode",{parentName:"p"},"machine")," and starts a service that runs for the lifetime of the component."),(0,r.mdx)("h4",{id:"arguments"},"Arguments"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"machine")," - An ",(0,r.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/machines.html"},"XState machine")," or a function that lazily returns a machine:"),(0,r.mdx)("pre",{parentName:"li"},(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// existing machine\nconst [state, send] = useMachine(machine);\n\n// lazily-created machine\nconst [state, send] = useMachine(() =>\n  createMachine({\n    /* ... */\n  })\n);\n"))),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"options")," (optional) - ",(0,r.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/interpretation.html#options"},"Interpreter options")," and/or any of the following machine config options: ",(0,r.mdx)("inlineCode",{parentName:"p"},"guards"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"actions"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"services"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"delays"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"immediate"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"context"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"state"),". If the machine already contains any of these options, they will be merged, with these options taking precedence."))),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Returns")," a tuple of ",(0,r.mdx)("inlineCode",{parentName:"p"},"[state, send, service]"),":"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"state")," - Represents the current state of the machine as an XState ",(0,r.mdx)("inlineCode",{parentName:"li"},"State")," object."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"send")," - A function that sends events to the running service."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"service")," - The created service.")),(0,r.mdx)("h3",{id:"useactoractor-getsnapshot"},(0,r.mdx)("inlineCode",{parentName:"h3"},"useActor(actor, getSnapshot?)")),(0,r.mdx)("p",null,"A ",(0,r.mdx)("a",{parentName:"p",href:"https://reactjs.org/hooks"},"React hook")," that subscribes to emitted changes from an existing ",(0,r.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/actors.html"},"actor"),"."),(0,r.mdx)("h4",{id:"arguments-1"},"Arguments"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"actor")," - an actor-like object that contains ",(0,r.mdx)("inlineCode",{parentName:"li"},".send(...)")," and ",(0,r.mdx)("inlineCode",{parentName:"li"},".subscribe(...)")," methods."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"getSnapshot")," - a function that should return the latest emitted value from the ",(0,r.mdx)("inlineCode",{parentName:"li"},"actor"),".",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Defaults to attempting to get the ",(0,r.mdx)("inlineCode",{parentName:"li"},"actor.state"),", or returning ",(0,r.mdx)("inlineCode",{parentName:"li"},"undefined")," if that does not exist.")))),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"const [state, send] = useActor(someSpawnedActor);\n\n// with custom actors\nconst [state, send] = useActor(customActor, (actor) => {\n  // implementation-specific pseudocode example:\n  return actor.getLastEmittedValue();\n});\n")),(0,r.mdx)("h3",{id:"useinterpretmachine-options-observer"},(0,r.mdx)("inlineCode",{parentName:"h3"},"useInterpret(machine, options?, observer?)")),(0,r.mdx)("p",null,"A React hook that returns the ",(0,r.mdx)("inlineCode",{parentName:"p"},"service")," created from the ",(0,r.mdx)("inlineCode",{parentName:"p"},"machine")," with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"options"),", if specified. It starts the service and runs it for the lifetime of the component. This is similar to ",(0,r.mdx)("inlineCode",{parentName:"p"},"useMachine"),"; however, ",(0,r.mdx)("inlineCode",{parentName:"p"},"useInterpret")," allows for a custom ",(0,r.mdx)("inlineCode",{parentName:"p"},"observer")," to subscribe to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"service"),"."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"useInterpret")," is useful when you want fine-grained control, e.g. to add logging, or minimize re-renders. In contrast to ",(0,r.mdx)("inlineCode",{parentName:"p"},"useMachine")," that would flush each update from the machine to the React component, ",(0,r.mdx)("inlineCode",{parentName:"p"},"useInterpret")," instead returns a static reference (to just the interpreted machine) which will not rerender when its state changes."),(0,r.mdx)("p",null,"To use a piece of state from the service inside a render, use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"useSelector(...)")," hook to subscribe to it."),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 1.3.0")),(0,r.mdx)("h4",{id:"arguments-2"},"Arguments"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"machine")," - An ",(0,r.mdx)("a",{parentName:"li",href:"https://xstate.js.org/docs/guides/machines.html"},"XState machine")," or a function that lazily returns a machine."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"options")," (optional) - ",(0,r.mdx)("a",{parentName:"li",href:"https://xstate.js.org/docs/guides/interpretation.html#options"},"Interpreter options")," and/or any of the following machine config options: ",(0,r.mdx)("inlineCode",{parentName:"li"},"guards"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"actions"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"services"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"delays"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"immediate"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"context"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"state"),". If the machine already contains any of these options, they will be merged, with these options taking precedence."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"observer")," (optional) - an observer or listener that listens to state updates:",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"an observer (e.g., ",(0,r.mdx)("inlineCode",{parentName:"li"},"{ next: (state) => {/* ... */} }"),")"),(0,r.mdx)("li",{parentName:"ul"},"or a listener (e.g., ",(0,r.mdx)("inlineCode",{parentName:"li"},"(state) => {/* ... */}"),")")))),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { useInterpret } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\n\nconst App = () => {\n  const service = useInterpret(someMachine);\n\n  // ...\n};\n")),(0,r.mdx)("p",null,"With options + listener:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n\nconst App = () => {\n  const service = useInterpret(\n    someMachine,\n    {\n      actions: {\n        /* ... */\n      },\n    },\n    (state) => {\n      // subscribes to state changes\n      console.log(state);\n    }\n  );\n\n  // ...\n};\n")),(0,r.mdx)("h3",{id:"useselectoractor-selector-compare-getsnapshot"},(0,r.mdx)("inlineCode",{parentName:"h3"},"useSelector(actor, selector, compare?, getSnapshot?)")),(0,r.mdx)("p",null,"A React hook that returns the selected value from the snapshot of an ",(0,r.mdx)("inlineCode",{parentName:"p"},"actor"),", such as a service. This hook will only cause a rerender if the selected value changes, as determined by the optional ",(0,r.mdx)("inlineCode",{parentName:"p"},"compare")," function."),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 1.3.0")),(0,r.mdx)("h4",{id:"arguments-3"},"Arguments"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"actor")," - a service or an actor-like object that contains ",(0,r.mdx)("inlineCode",{parentName:"li"},".send(...)")," and ",(0,r.mdx)("inlineCode",{parentName:"li"},".subscribe(...)")," methods."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"selector"),' - a function that takes in an actor\u2019s "current state" (snapshot) as an argument and returns the desired selected value.'),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"compare")," (optional) - a function that determines if the current selected value is the same as the previous selected value."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"getSnapshot")," (optional) - a function that should return the latest emitted value from the ",(0,r.mdx)("inlineCode",{parentName:"li"},"actor"),".",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Defaults to attempting to get the ",(0,r.mdx)("inlineCode",{parentName:"li"},"actor.state"),", or returning ",(0,r.mdx)("inlineCode",{parentName:"li"},"undefined")," if that does not exist. Will automatically pull the state from services.")))),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { useSelector } from '@xstate/react';\n\n// tip: optimize selectors by defining them externally when possible\nconst selectCount = (state) => state.context.count;\n\nconst App = ({ service }) => {\n  const count = useSelector(service, selectCount);\n\n  // ...\n};\n")),(0,r.mdx)("p",null,"With ",(0,r.mdx)("inlineCode",{parentName:"p"},"compare")," function:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n\nconst selectUser = (state) => state.context.user;\nconst compareUser = (prevUser, nextUser) => prevUser.id === nextUser.id;\n\nconst App = ({ service }) => {\n  const user = useSelector(service, selectUser, compareUser);\n\n  // ...\n};\n")),(0,r.mdx)("h3",{id:"createactorcontextmachine"},(0,r.mdx)("inlineCode",{parentName:"h3"},"createActorContext(machine)")),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 3.1.0")),(0,r.mdx)("p",null,"Returns a ",(0,r.mdx)("a",{parentName:"p",href:"https://beta.reactjs.org/learn/passing-data-deeply-with-context"},"React Context object")," that interprets the ",(0,r.mdx)("inlineCode",{parentName:"p"},"machine")," and makes the interpreted actor available through React Context. There are helper methods for accessing state and the actor ref."),(0,r.mdx)("h4",{id:"arguments-4"},"Arguments"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"machine")," - An ",(0,r.mdx)("a",{parentName:"li",href:"https://xstate.js.org/docs/guides/machines.html"},"XState machine")," or a function that lazily returns a machine.")),(0,r.mdx)("p",null,"Returns a React Context object that contains the following properties:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"Provider")," - a React Context Provider component with the following props:",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"machine")," - An ",(0,r.mdx)("a",{parentName:"li",href:"https://xstate.js.org/docs/guides/machines.html"},"XState machine")," that must be of the same type as the machine passed to ",(0,r.mdx)("inlineCode",{parentName:"li"},"createActorContext(...)")))),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"useActor()")," - a React hook that returns a tuple of ",(0,r.mdx)("inlineCode",{parentName:"li"},"[state, send]")," from the React Context"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"useSelector(selector, compare?)")," - a React hook that takes in a ",(0,r.mdx)("inlineCode",{parentName:"li"},"selector")," function and optional ",(0,r.mdx)("inlineCode",{parentName:"li"},"compare")," function and returns the selected value from the actor snapshot"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"useActorRef()")," - a React hook that returns the actor ref of the interpreted ",(0,r.mdx)("inlineCode",{parentName:"li"},"machine"))),(0,r.mdx)("p",null,"Creating a React Context for the actor and providing it in app scope:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { createActorContext } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\n\nconst SomeMachineContext = createActorContext(someMachine);\n\nfunction App() {\n  return (\n    <SomeMachineContext.Provider>\n      <SomeComponent />\n    </SomeMachineContext.Provider>\n  );\n}\n")),(0,r.mdx)("p",null,"Consuming the actor in a component:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { SomeMachineContext } from '../path/to/SomeMachineContext';\n\nfunction SomeComponent() {\n  // Read full snapshot and get `send` function from `useActor()`\n  const [state, send] = SomeMachineContext.useActor();\n\n  // Or derive a specific value from the snapshot with `useSelector()`\n  const count = SomeMachineContext.useSelector((state) => state.context.count);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => send('INCREMENT')}>Increment</button>\n    </div>\n  );\n}\n")),(0,r.mdx)("p",null,"Reading the actor ref:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { SomeMachineContext } from '../path/to/SomeMachineContext';\n\nfunction SomeComponent() {\n  const actorRef = SomeMachineContext.useActorRef();\n\n  return (\n    <div>\n      <button onClick={() => actorRef.send('INCREMENT')}>Increment</button>\n    </div>\n  );\n}\n")),(0,r.mdx)("p",null,"Providing a similar machine:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { SomeMachineContext } from '../path/to/SomeMachineContext';\nimport { someMachine } from '../path/to/someMachine';\n\nfunction SomeComponent() {\n  return (\n    <SomeMachineContext.Provider\n      machine={() =>\n        someMachine.withConfig({\n          /* ... */\n        })\n      }\n    >\n      <SomeOtherComponent />\n    </SomeMachineContext.Provider>\n  );\n}\n")),(0,r.mdx)("h3",{id:"shallow-comparison"},"Shallow comparison"),(0,r.mdx)("p",null,"The default comparison is a strict reference comparison (",(0,r.mdx)("inlineCode",{parentName:"p"},"==="),"). If your selector returns non-primitive values, such as objects or arrays, you should keep this in mind and either return the same reference, or provide a shallow or deep comparator."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"shallowEqual(...)")," comparator function is available for shallow comparison:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { useSelector, shallowEqual } from '@xstate/react';\n\n// ...\n\nconst selectUser = (state) => state.context.user;\n\nconst App = ({ service }) => {\n  // shallowEqual comparator is needed to compare the object, whose\n  // reference might change despite the shallow object values being equal\n  const user = useSelector(service, selectUser, shallowEqual);\n\n  // ...\n};\n")),(0,r.mdx)("p",null,"With ",(0,r.mdx)("inlineCode",{parentName:"p"},"useInterpret(...)"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { useInterpret, useSelector } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\n\nconst selectCount = (state) => state.context.count;\n\nconst App = ({ service }) => {\n  const service = useInterpret(someMachine);\n  const count = useSelector(service, selectCount);\n\n  // ...\n};\n")),(0,r.mdx)("h3",{id:"usemachinemachine-with-xstatefsm"},(0,r.mdx)("inlineCode",{parentName:"h3"},"useMachine(machine)")," with ",(0,r.mdx)("inlineCode",{parentName:"h3"},"@xstate/fsm")),(0,r.mdx)("p",null,"A ",(0,r.mdx)("a",{parentName:"p",href:"https://reactjs.org/hooks"},"React hook")," that interprets the given finite state ",(0,r.mdx)("inlineCode",{parentName:"p"},"machine")," from ","[",(0,r.mdx)("inlineCode",{parentName:"p"},"@xstate/fsm"),"]"," and starts a service that runs for the lifetime of the component."),(0,r.mdx)("p",null,"This special ",(0,r.mdx)("inlineCode",{parentName:"p"},"useMachine")," hook is imported from ",(0,r.mdx)("inlineCode",{parentName:"p"},"@xstate/react/fsm")),(0,r.mdx)("h4",{id:"arguments-5"},"Arguments"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"machine")," - An ",(0,r.mdx)("a",{parentName:"li",href:"https://xstate.js.org/docs/packages/xstate-fsm/"},"XState finite state machine (FSM)"),"."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"options")," - An optional ",(0,r.mdx)("inlineCode",{parentName:"li"},"options")," object.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Returns")," a tuple of ",(0,r.mdx)("inlineCode",{parentName:"p"},"[state, send, service]"),":"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"state")," - Represents the current state of the machine as an ",(0,r.mdx)("inlineCode",{parentName:"li"},"@xstate/fsm")," ",(0,r.mdx)("inlineCode",{parentName:"li"},"StateMachine.State")," object."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"send")," - A function that sends events to the running service."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"service")," - The created ",(0,r.mdx)("inlineCode",{parentName:"li"},"@xstate/fsm")," service.")),(0,r.mdx)("h4",{id:"example"},"Example"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { useEffect } from 'react';\nimport { useMachine } from '@xstate/react/fsm';\nimport { createMachine } from '@xstate/fsm';\n\nconst context = {\n  data: undefined,\n};\nconst fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  context,\n  states: {\n    idle: {\n      on: { FETCH: 'loading' },\n    },\n    loading: {\n      entry: ['load'],\n      on: {\n        RESOLVE: {\n          target: 'success',\n          actions: assign({\n            data: (context, event) => event.data,\n          }),\n        },\n      },\n    },\n    success: {},\n  },\n});\n\nconst Fetcher = ({\n  onFetch = () => new Promise((res) => res('some data')),\n}) => {\n  const [state, send] = useMachine(fetchMachine, {\n    actions: {\n      load: () => {\n        onFetch().then((res) => {\n          send({ type: 'RESOLVE', data: res });\n        });\n      },\n    },\n  });\n\n  switch (state.value) {\n    case 'idle':\n      return <button onClick={(_) => send('FETCH')}>Fetch</button>;\n    case 'loading':\n      return <div>Loading...</div>;\n    case 'success':\n      return (\n        <div>\n          Success! Data: <div data-testid=\"data\">{state.context.data}</div>\n        </div>\n      );\n    default:\n      return null;\n  }\n};\n")),(0,r.mdx)("h2",{id:"configuring-machines"},"Configuring machines"),(0,r.mdx)("p",null,"Existing machines can be configured by passing the machine options as the 2nd argument of ",(0,r.mdx)("inlineCode",{parentName:"p"},"useMachine(machine, options)"),"."),(0,r.mdx)("p",null,"Example: the ",(0,r.mdx)("inlineCode",{parentName:"p"},"'fetchData'")," service and ",(0,r.mdx)("inlineCode",{parentName:"p"},"'notifySuccess'")," action are both configurable:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"const fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  context: {\n    data: undefined,\n    error: undefined,\n  },\n  states: {\n    idle: {\n      on: { FETCH: 'loading' },\n    },\n    loading: {\n      invoke: {\n        src: 'fetchData',\n        onDone: {\n          target: 'success',\n          actions: assign({\n            data: (_, event) => event.data,\n          }),\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({\n            error: (_, event) => event.data,\n          }),\n        },\n      },\n    },\n    success: {\n      entry: 'notifySuccess',\n      type: 'final',\n    },\n    failure: {\n      on: {\n        RETRY: 'loading',\n      },\n    },\n  },\n});\n\nconst Fetcher = ({ onResolve }) => {\n  const [state, send] = useMachine(fetchMachine, {\n    actions: {\n      notifySuccess: (ctx) => onResolve(ctx.data),\n    },\n    services: {\n      fetchData: (_, e) =>\n        fetch(`some/api/${e.query}`).then((res) => res.json()),\n    },\n  });\n\n  switch (state.value) {\n    case 'idle':\n      return (\n        <button onClick={() => send({ type: 'FETCH', query: 'something' })}>\n          Search for something\n        </button>\n      );\n    case 'loading':\n      return <div>Searching...</div>;\n    case 'success':\n      return <div>Success! Data: {state.context.data}</div>;\n    case 'failure':\n      return (\n        <>\n          <p>{state.context.error.message}</p>\n          <button onClick={() => send('RETRY')}>Retry</button>\n        </>\n      );\n    default:\n      return null;\n  }\n};\n")),(0,r.mdx)("h2",{id:"matching-states"},"Matching states"),(0,r.mdx)("p",null,"When using ",(0,r.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/hierarchical.html"},"hierarchical")," and ",(0,r.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/parallel.html"},"parallel")," machines, the state values will be objects, not strings. In this case, it is best to use ",(0,r.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/states.html#state-methods-and-getters"},(0,r.mdx)("inlineCode",{parentName:"a"},"state.matches(...)")),"."),(0,r.mdx)("p",null,"We can do this with ",(0,r.mdx)("inlineCode",{parentName:"p"},"if/else if/else")," blocks:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\nif (state.matches('idle')) {\n  return /* ... */;\n} else if (state.matches({ loading: 'user' })) {\n  return /* ... */;\n} else if (state.matches({ loading: 'friends' })) {\n  return /* ... */;\n} else {\n  return null;\n}\n")),(0,r.mdx)("p",null,"We can also continue to use ",(0,r.mdx)("inlineCode",{parentName:"p"},"switch"),", but we must make an adjustment to our approach. By setting the expression of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"switch")," to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true"),", we can use ",(0,r.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/states.html#state-methods-and-getters"},(0,r.mdx)("inlineCode",{parentName:"a"},"state.matches(...)"))," as a predicate in each ",(0,r.mdx)("inlineCode",{parentName:"p"},"case"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"switch (true) {\n  case state.matches('idle'):\n    return /* ... */;\n  case state.matches({ loading: 'user' }):\n    return /* ... */;\n  case state.matches({ loading: 'friends' }):\n    return /* ... */;\n  default:\n    return null;\n}\n")),(0,r.mdx)("p",null,"A ternary statement can also be considered, especially within rendered JSX:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-jsx"},"const Loader = () => {\n  const [state, send] = useMachine(/* ... */);\n\n  return (\n    <div>\n      {state.matches('idle') ? (\n        <Loader.Idle />\n      ) : state.matches({ loading: 'user' }) ? (\n        <Loader.LoadingUser />\n      ) : state.matches({ loading: 'friends' }) ? (\n        <Loader.LoadingFriends />\n      ) : null}\n    </div>\n  );\n};\n")),(0,r.mdx)("h2",{id:"persisted-and-rehydrated-state"},"Persisted and rehydrated State"),(0,r.mdx)("p",null,"You can persist and rehydrate state with ",(0,r.mdx)("inlineCode",{parentName:"p"},"useMachine(...)")," via ",(0,r.mdx)("inlineCode",{parentName:"p"},"options.state"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n\n// Get the persisted state config object from somewhere, e.g. localStorage\nconst persistedState = JSON.parse(localStorage.getItem('some-persisted-state-key')) || someMachine.initialState;\n\nconst App = () => {\n  const [state, send] = useMachine(someMachine, {\n    state: persistedState // provide persisted state config object here\n  });\n\n  // state will initially be that persisted state, not the machine\u2019s initialState\n\n  return (/* ... */)\n}\n")),(0,r.mdx)("h2",{id:"services"},"Services"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"service")," created in ",(0,r.mdx)("inlineCode",{parentName:"p"},"useMachine(machine)")," can be referenced as the third returned value:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"//                  vvvvvvv\nconst [state, send, service] = useMachine(someMachine);\n")),(0,r.mdx)("p",null,"You can subscribe to that service\u2019s state changes with the ",(0,r.mdx)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-effect.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"useEffect")," hook"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n\nuseEffect(() => {\n  const subscription = service.subscribe((state) => {\n    // simple state logging\n    console.log(state);\n  });\n\n  return subscription.unsubscribe;\n}, [service]); // note: service should never change\n")),(0,r.mdx)("h2",{id:"resources"},"Resources"),(0,r.mdx)("p",null,(0,r.mdx)("a",{parentName:"p",href:"https://gedd.ski/post/state-machines-in-react/"},"State Machines in React")))}d.isMDXComponent=!0}}]);