"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[59242],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>d,mdx:()=>x,useMDXComponents:()=>m,withMDXComponents:()=>p});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),p=function(e){return function(t){var n=m(t.components);return a.createElement(e,o({},t,{components:n}))}},m=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=m(n),d=i,h=p["".concat(s,".").concat(d)]||p[d]||u[d]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function x(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=h;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},60316:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const o={title:"Options",description:"The statechart\u2019s config describes how the machine behaves, the machine\u2019s options are implementation details that expand the machine\u2019s capabilities."},s=void 0,r={unversionedId:"xstate/basics/options",id:"version-4/xstate/basics/options",title:"Options",description:"The statechart\u2019s config describes how the machine behaves, the machine\u2019s options are implementation details that expand the machine\u2019s capabilities.",source:"@site/versioned_docs/version-4/xstate/basics/options.mdx",sourceDirName:"xstate/basics",slug:"/xstate/basics/options",permalink:"/statelyai-docs/docs/xstate-v4/xstate/basics/options",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/basics/options.mdx",tags:[],version:"4",frontMatter:{title:"Options",description:"The statechart\u2019s config describes how the machine behaves, the machine\u2019s options are implementation details that expand the machine\u2019s capabilities."},sidebar:"tutorialSidebar",previous:{title:"XState statechart basics",permalink:"/statelyai-docs/docs/xstate-v4/xstate/basics/what-is-a-statechart"},next:{title:"Inline vs. named Options",permalink:"/statelyai-docs/docs/xstate-v4/xstate/basics/inline-vs-named-options"}},l={},c=[{value:"Option types",id:"option-types",level:2},{value:"Guards",id:"guards",level:3},{value:"Actions",id:"actions",level:3},{value:"Actors",id:"actors",level:3},{value:"Delays",id:"delays",level:3},{value:"Options API",id:"options-api",level:2},{value:"Summary",id:"summary",level:2}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,i.mdx)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"Statecharts require that a machine is separated into two parts. The first part is the machine\u2019s ",(0,i.mdx)("strong",{parentName:"p"},"config"),". The config describes ",(0,i.mdx)("em",{parentName:"p"},"how the machine behaves")," \u2014 its states, events and transitions."),(0,i.mdx)("p",null,"The second part is a machine\u2019s ",(0,i.mdx)("strong",{parentName:"p"},"options")," \u2014 implementation details that expand the machine\u2019s capabilities."),(0,i.mdx)("p",null,"Options can:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Make decisions based on checks, such as an ",(0,i.mdx)("inlineCode",{parentName:"li"},"if/else")," statement"),(0,i.mdx)("li",{parentName:"ul"},"Make changes to the machine\u2019s surrounding environment"),(0,i.mdx)("li",{parentName:"ul"},"Subscribe to changes from the machine\u2019s outside environment")),(0,i.mdx)("p",null,"In XState, the separation is divided between:"),(0,i.mdx)("table",null,(0,i.mdx)("thead",{parentName:"table"},(0,i.mdx)("tr",{parentName:"thead"},(0,i.mdx)("th",{parentName:"tr",align:null},"Term"),(0,i.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,i.mdx)("tbody",{parentName:"table"},(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"Config"),(0,i.mdx)("td",{parentName:"tr",align:null},"What the machine does")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"Options"),(0,i.mdx)("td",{parentName:"tr",align:null},"How the machine does it")))),(0,i.mdx)("p",null,"Below is an example where we describe in our config that when the machine first starts, it 'says hello', using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"sayHello")," action."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const helloMachine = createMachine({\n  /**\n   * Below is an 'action' \u2014 we\u2019ll\n   * learn more about actions later\n   */\n  entry: ['sayHello'],\n});\n")),(0,i.mdx)("p",null,"As a visualization, the config is readable. But the machine doesn\u2019t ",(0,i.mdx)("em",{parentName:"p"},"do")," anything yet."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Options")," let us pass an implementation for the ",(0,i.mdx)("inlineCode",{parentName:"p"},"sayHello")," action."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const helloMachine = createMachine(\n  {\n    entry: ['sayHello'],\n  },\n  {\n    actions: {\n      sayHello: () => {\n        console.log('Hello!');\n      },\n    },\n  }\n);\n")),(0,i.mdx)("p",null,"The separation between \u201cwhat your code does\u201d and \u201chow your code does it\u201d is powerful because it allows you to understand its purpose without requiring you to read through the implementation details."),(0,i.mdx)("h2",{id:"option-types"},"Option types"),(0,i.mdx)("p",null,"There are four types of options you can pass to your statechart."),(0,i.mdx)("h3",{id:"guards"},"Guards"),(0,i.mdx)("p",null,"Guards allow you to check something before you proceed, enabling you to implement if/else logic in XState."),(0,i.mdx)("p",null,"Below is an example of a guard:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nlet iAmHappyAndIKnowIt = true;\n\nconst machine = createMachine(\n  {\n    initial: 'notClappingHands',\n    states: {\n      notClappingHands: {\n        on: {\n          HEAR_MUSIC: {\n            /**\n             * Name the guard\u2026\n             */\n            cond: 'ifYoureHappyAndYouKnowIt',\n            target: 'clappingHands',\n          },\n        },\n      },\n      clappingHands: {},\n    },\n  },\n  {\n    guards: {\n      /**\n       * \u2026then implement the guard.\n       */\n      ifYoureHappyAndYouKnowIt: () => {\n        return iAmHappyAndIKnowIt;\n      },\n    },\n  }\n);\n")),(0,i.mdx)("p",null,"In the example above, the guard is activated when the machine is in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"notClappingHands")," state and reaches the ",(0,i.mdx)("inlineCode",{parentName:"p"},"HEAR_MUSIC")," event. If the ",(0,i.mdx)("inlineCode",{parentName:"p"},"ifYoureHappyAndYouKnowIt")," guard is true, the machine will go to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"clappingHands")," state."),(0,i.mdx)("h3",{id:"actions"},"Actions"),(0,i.mdx)("p",null,"Actions allow you to perform simple actions, such as assigning to a variable or calling synchronous actions:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine(\n  {\n    entry: ['sayHello'],\n  },\n  {\n    actions: {\n      sayHello: () => {\n        console.log('Hello!');\n      },\n    },\n  }\n);\n")),(0,i.mdx)("p",null,"In the example above, ",(0,i.mdx)("inlineCode",{parentName:"p"},"sayHello")," will be called when the machine is started."),(0,i.mdx)("h3",{id:"actors"},"Actors"),(0,i.mdx)("p",null,"Actors are entities that have their own state and can send and receive events. Actors are useful for processes like:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Subscribing to a websocket/DOM listener for updates"),(0,i.mdx)("li",{parentName:"ul"},"Invoking a promise and waiting for it to resolve"),(0,i.mdx)("li",{parentName:"ul"},"Uploading a file")),(0,i.mdx)("p",null,"We\u2019ll revisit actors in more depth later. ",(0,i.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/xstate-v4/actions-and-actors/actors"},"Take a fast track to learn more about actors"),"."),(0,i.mdx)("h3",{id:"delays"},"Delays"),(0,i.mdx)("p",null,"Delays are used in XState to represent timers and intervals. We\u2019ll revisit delays in more depth later. ",(0,i.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/xstate-v4/xstate/transitions-and-choices/after"},"Take a fast track to learn more about delays"),"."),(0,i.mdx)("h2",{id:"options-api"},"Options API"),(0,i.mdx)("p",null,"You can specify machine options in several places. Firstly, you can set options inside the machine itself:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine(\n  {\n    // Set config here\n  },\n  {\n    // Set options here:\n    actions: {},\n    // `actors` in v5\n    services: {},\n    guards: {},\n    delays: {},\n  }\n);\n")),(0,i.mdx)("admonition",{type:"warningxstate"},(0,i.mdx)("p",{parentName:"admonition"},"XState v5 is in beta. ",(0,i.mdx)("a",{parentName:"p",href:"https://www.npmjs.com/package/xstate/v/5.0.0-beta.13"},"Check out XState v5 Beta on NPM"),".")),(0,i.mdx)("p",null,"Or, you can specify options later with a ",(0,i.mdx)("inlineCode",{parentName:"p"},".withConfig")," call:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine({});\n\n// ---cut---\n\nmachine.withConfig({\n  actions: {},\n  // `actors` in v5\n  services: {},\n  guards: {},\n  delays: {},\n});\n")),(0,i.mdx)("h2",{id:"summary"},"Summary"),(0,i.mdx)("p",null,"Options are how you make your machine ",(0,i.mdx)("em",{parentName:"p"},"do")," things. They allow machines to keep control of the config and enable you to pass in options later."))}m.isMDXComponent=!0}}]);