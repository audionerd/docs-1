"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[9518],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>l,MDXProvider:()=>u,mdx:()=>h,useMDXComponents:()=>m,withMDXComponents:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){return function(t){var n=m(t.components);return a.createElement(e,i({},t,{components:n}))}},m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=m(n),u=r,f=d["".concat(o,".").concat(u)]||d[u]||p[u]||i;return n?a.createElement(f,s(s({ref:t},l),{},{components:n})):a.createElement(f,s({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},23930:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={title:"After"},o="After",s={unversionedId:"xstate/transitions-and-choices/after",id:"version-4/xstate/transitions-and-choices/after",title:"After",description:"Timeouts and intervals can be hard to manage in application code. Statecharts make it easy and declarative using the after syntax.",source:"@site/versioned_docs/version-4/xstate/transitions-and-choices/after.mdx",sourceDirName:"xstate/transitions-and-choices",slug:"/xstate/transitions-and-choices/after",permalink:"/statelyai-docs/docs/xstate-v4/xstate/transitions-and-choices/after",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/transitions-and-choices/after.mdx",tags:[],version:"4",frontMatter:{title:"After"},sidebar:"tutorialSidebar",previous:{title:"Always",permalink:"/statelyai-docs/docs/xstate-v4/xstate/transitions-and-choices/always"},next:{title:"Internal and external transitions",permalink:"/statelyai-docs/docs/xstate-v4/xstate/transitions-and-choices/internal-external"}},c={},l=[{value:"Dynamic delays",id:"dynamic-delays",level:2}],d={toc:l};function m(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"after"},"After"),(0,r.mdx)("p",null,"Timeouts and intervals can be hard to manage in application code. Statecharts make it easy and declarative using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"after")," syntax."),(0,r.mdx)("p",null,"The example below is a statechart for a game where you need to push a button within 5 seconds, or you get timed out:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst pushTheButtonGame = createMachine({\n  initial: 'waitingForButtonPush',\n  states: {\n    waitingForButtonPush: {\n      // highlight-start\n      after: {\n        5000: {\n          target: 'timedOut',\n          actions: 'logThatYouGotTimedOut',\n        },\n      },\n      // highlight-end\n      on: {\n        PUSH_BUTTON: {\n          actions: 'logSuccess',\n          target: 'success',\n        },\n      },\n    },\n    success: {},\n    timedOut: {},\n  },\n});\n")),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"after")," property is a keyed object. The key is the time you want to wait for in milliseconds (ms). You can also do conditional checks and if/else logic on the object, as with any transition."),(0,r.mdx)("p",null,"One useful feature of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"after")," declaration is that you don\u2019t need to cancel the timers in your code. For example, if the ",(0,r.mdx)("inlineCode",{parentName:"p"},"PUSH_BUTTON")," event is received before the timeout finishes, the ",(0,r.mdx)("strong",{parentName:"p"},"timeout is automatically cancelled"),". No ",(0,r.mdx)("inlineCode",{parentName:"p"},"clearTimeout")," needed."),(0,r.mdx)("p",null,"You can also specify multiple delayed events on the same ",(0,r.mdx)("inlineCode",{parentName:"p"},"after")," declaration:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst pushTheButtonGame = createMachine({\n  initial: 'waitingForButtonPush',\n  states: {\n    waitingForButtonPush: {\n      after: {\n        // highlight-start\n        4000: {\n          actions: 'warnThatYouAreAboutToLose',\n        },\n        // highlight-end\n        5000: {\n          target: 'timedOut',\n          actions: 'logThatYouGotTimedOut',\n        },\n      },\n      on: {\n        PUSH_BUTTON: {\n          actions: 'logSuccess',\n          target: 'success',\n        },\n      },\n    },\n    success: {},\n    timedOut: {},\n  },\n});\n")),(0,r.mdx)("p",null,"In the example above, the machine warns you when there\u2019s one second remaining and then transitions."),(0,r.mdx)("h2",{id:"dynamic-delays"},"Dynamic delays"),(0,r.mdx)("p",null,"Sometimes you\u2019ll want the length of time waited in an ",(0,r.mdx)("inlineCode",{parentName:"p"},"after")," transition to be dynamic. A dynamic delay is specified by passing a string reference instead of the number of milliseconds."),(0,r.mdx)("p",null,"Dynamic delays can either pass in a number or pass a function that returns the delay."),(0,r.mdx)("p",null,"In the example below, ",(0,r.mdx)("inlineCode",{parentName:"p"},"YELLOW_DELAY")," passes a number, and ",(0,r.mdx)("inlineCode",{parentName:"p"},"GREEN_DELAY")," passes a function."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst lightDelayMachine = createMachine(\n  {\n    initial: 'green',\n    context: {\n      trafficLevel: 'low',\n    },\n    states: {\n      green: {\n        after: {\n          // after the GREEN_DELAY, transition to yellow\n          GREEN_DELAY: { target: 'yellow' },\n        },\n      },\n      yellow: {\n        after: {\n          // after the YELLOW_DELAY, transition to red\n          YELLOW_DELAY: { target: 'red' },\n        },\n      },\n      red: {},\n    },\n  },\n  {\n    delays: {\n      GREEN_DELAY: (context, event) => {\n        return context.trafficLevel === 'low' ? 1000 : 3000;\n      },\n      YELLOW_DELAY: 500,\n    },\n  }\n);\n")))}m.isMDXComponent=!0}}]);