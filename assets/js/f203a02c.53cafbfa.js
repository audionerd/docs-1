"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[54098],{3905:(e,a,t)=>{t.r(a),t.d(a,{MDXContext:()=>d,MDXProvider:()=>c,mdx:()=>g,useMDXComponents:()=>p,withMDXComponents:()=>l});var n=t(67294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(){return r=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},r.apply(this,arguments)}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function m(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=n.createContext({}),l=function(e){return function(a){var t=p(a.components);return n.createElement(e,r({},a,{components:t}))}},p=function(e){var a=n.useContext(d),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},c=function(e){var a=p(e.components);return n.createElement(d.Provider,{value:a},e.children)},h={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=m(e,["components","mdxType","originalType","parentName"]),l=p(t),c=i,u=l["".concat(s,".").concat(c)]||l[c]||h[c]||r;return t?n.createElement(u,o(o({ref:a},d),{},{components:t})):n.createElement(u,o({ref:a},d))}));function g(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=u;var o={};for(var m in a)hasOwnProperty.call(a,m)&&(o[m]=a[m]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var d=2;d<r;d++)s[d]=t[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},26159:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var n=t(87462),i=(t(67294),t(3905));const r={title:"What is a state machine?",description:"Learn what a state machine is, and how it can help you model and understand complex systems visually.",tags:["state machine","statechart"],authors:["david"],slug:"2023-10-05-what-is-a-state-machine",image:"/blog/2023-10-05-what-is-a-state-machine.png",date:new Date("2023-10-05T00:00:00.000Z")},s=void 0,o={permalink:"/statelyai-docs/blog/2023-10-05-what-is-a-state-machine",editUrl:"https://github.com/statelyai/docs/edit/main/blog/2023-10-02-what-is-a-state-machine/index.mdx",source:"@site/blog/2023-10-02-what-is-a-state-machine/index.mdx",title:"What is a state machine?",description:"Learn what a state machine is, and how it can help you model and understand complex systems visually.",date:"2023-10-05T00:00:00.000Z",formattedDate:"October 5, 2023",tags:[{label:"state machine",permalink:"/statelyai-docs/blog/tags/state-machine"},{label:"statechart",permalink:"/statelyai-docs/blog/tags/statechart"}],readingTime:8.655,hasTruncateMarker:!0,authors:[{name:"David Khourshid",title:"Stately Team",url:"https://github.com/davidkpiano",imageURL:"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png",key:"david"}],frontMatter:{title:"What is a state machine?",description:"Learn what a state machine is, and how it can help you model and understand complex systems visually.",tags:["state machine","statechart"],authors:["david"],slug:"2023-10-05-what-is-a-state-machine",image:"/blog/2023-10-05-what-is-a-state-machine.png",date:"2023-10-05T00:00:00.000Z"},nextItem:{title:"Persisting and restoring state in XState",permalink:"/statelyai-docs/blog/2023-10-02-persisting-state"}},m={authorsImageUrls:[void 0]},d=[{value:"The parts of a state machine",id:"the-parts-of-a-state-machine",level:2},{value:"States",id:"states",level:3},{value:"Events",id:"events",level:3},{value:"Transitions",id:"transitions",level:3},{value:"A state machine example",id:"a-state-machine-example",level:2},{value:"Benefits of using state machines",id:"benefits-of-using-state-machines",level:2},{value:"Visualized documentation",id:"visualized-documentation",level:3},{value:"Consistent, robust application logic",id:"consistent-robust-application-logic",level:3},{value:"Modularity and scalability",id:"modularity-and-scalability",level:3},{value:"Test path generation",id:"test-path-generation",level:3},{value:"Transition to state machines",id:"transition-to-state-machines",level:2}],l=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",a)},p=l("ThemedImage"),c=l("EmbedMachine"),h={toc:d};function u(e){let{components:a,...t}=e;return(0,i.mdx)("wrapper",(0,n.Z)({},h,t,{components:a,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"You might have heard of \u201cstate machine\u201d or \u201cfinite-state machine\u201d before. ",(0,i.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Finite-state_machine"},"If you look up ",(0,i.mdx)("em",{parentName:"a"},"state machine")," on Wikipedia"),", you\u2019ll read that a state machine is described as a \u201cmathematical model of computation,\u201d followed by a bunch of symbols and computer science jargon that doesn\u2019t immediately seem to apply to your team\u2019s work."),(0,i.mdx)("p",null,"However, state machines are ",(0,i.mdx)("em",{parentName:"p"},"really useful")," for describing almost any kind of logic, feature, user story, sequence, process, workflow, specification, and more. ","They can greatly improve how your team collaborates on processes, flows, features, and any other kinds of application logic, and they\u2019re much simpler to understand than you may think."),(0,i.mdx)("p",null,"If you\u2019ve worked with flowcharts or diagrammed a process on a whiteboard with boxes and arrows, you may already know how state machines work!"),(0,i.mdx)("h1",{id:"what-is-a-state-machine"},"What is a state machine?"),(0,i.mdx)("p",null,"A state machine is a way of modeling how something works, using states and transitions to show how something changes over time in response to events."),(0,i.mdx)(p,{alt:"A state machine for a music player. The state machine starts in the Paused state, and on play, goes to the Playing state. On pause, it goes back to the Paused state. In any state, you can skip to the next track.",sources:{light:"/blog/2023-10-02-what-is-a-state-machine/music-player-state-machine-light.png",dark:"/blog/2023-10-02-what-is-a-state-machine/music-player-state-machine-dark.png"},mdxType:"ThemedImage"}),(0,i.mdx)("p",null,"Specifically, it formally models how a system transitions from one state to another based on specific events (e.g., triggers, signals, changes, etc.). Think of it as a useful tool for visualizing and designing the flow of user experiences, product features, or any process you\u2019re working on."),(0,i.mdx)("p",null,"Visually, state machine diagrams are similar to flowcharts. Both use shapes to represent states (e.g., steps in a flow) and arrows to indicate transitions between those states. The main difference is that state machines are more precise, formal, and powerful than flowcharts. They\u2019re also more flexible since you can use them to model any kind of logic, not just processes."),(0,i.mdx)(p,{alt:"A booking state machine with an initial idle state. From idle you can transition to car booking, flight booking, and hotel booking states.",sources:{light:"/blog/2023-10-02-what-is-a-state-machine/flight-booking-state-machine.png",dark:"/blog/2023-10-02-what-is-a-state-machine/flight-booking-state-machine.png"},mdxType:"ThemedImage"}),(0,i.mdx)("p",null,"State machines are a concept deeply rooted in computer science; however, they have broad applications that extend to various business domains and design disciplines. From developing intuitive software interfaces to designing effective business processes, state machines provide a structured way to model and understand complex systems. Whether you\u2019re a product owner, project manager, designer, developer, QA tester, business analyst, or any other role, understanding state machines can significantly improve your ability to design, manage, and refine features, processes, and products."),(0,i.mdx)("p",null,"In short, a state machine lets us clearly understand how something reacts when an event occurs."),(0,i.mdx)("h2",{id:"the-parts-of-a-state-machine"},"The parts of a state machine"),(0,i.mdx)("p",null,"Visually, state machines are just boxes and arrows. The building blocks of a state machine \u2013\xa0",(0,i.mdx)("strong",{parentName:"p"},"states, events,")," and ",(0,i.mdx)("strong",{parentName:"p"},"transitions,")," are quite straightforward (no pun intended), but together, they form a powerful tool for modeling and understanding systems."),(0,i.mdx)("h3",{id:"states"},"States"),(0,i.mdx)("p",null,"A ",(0,i.mdx)("a",{parentName:"p",href:"/docs/state-machines-and-statecharts#states"},"state")," represents a particular situation, mode, or status that something can be in. For instance, an e-commerce site\u2019s order can be in the ",(0,i.mdx)("em",{parentName:"p"},"Pending"),", ",(0,i.mdx)("em",{parentName:"p"},"Shipped"),", ",(0,i.mdx)("em",{parentName:"p"},"Delivered"),", or ",(0,i.mdx)("em",{parentName:"p"},"Returned")," states. Each of these is a finite state, contributing to the entire lifecycle of an order."),(0,i.mdx)("p",null,(0,i.mdx)(p,{alt:"Pending and shipped states.",sources:{light:"/blog/2023-10-02-what-is-a-state-machine/order-states-light.png",dark:"/blog/2023-10-02-what-is-a-state-machine/order-states-dark.png"},mdxType:"ThemedImage"})),(0,i.mdx)("p",null,"Finite states are ",(0,i.mdx)("strong",{parentName:"p"},"deterministic"),", meaning that something can only be in exactly one finite state at a time. An order cannot be in both the ",(0,i.mdx)("em",{parentName:"p"},"Pending")," and ",(0,i.mdx)("em",{parentName:"p"},"Delivered")," states at the same time, just like you can\u2019t be in both the ",(0,i.mdx)("em",{parentName:"p"},"Asleep")," and ",(0,i.mdx)("em",{parentName:"p"},"Awake")," states simultaneously."),(0,i.mdx)("p",null,"State machines always start at an ",(0,i.mdx)("strong",{parentName:"p"},(0,i.mdx)("a",{parentName:"strong",href:"/docs/state-machines-and-statecharts#initial-state"},"initial state"))," and may end up in a ",(0,i.mdx)("strong",{parentName:"p"},(0,i.mdx)("a",{parentName:"strong",href:"/docs/state-machines-and-statecharts#final-state"},"final state")),", indicating that the state machine is \u201cdone\u201d and can no longer transition to any other state."),(0,i.mdx)("h3",{id:"events"},"Events"),(0,i.mdx)("p",null,"Events are occurrences; they\u2019re a record that something happened. Using the previous example, an event like ",(0,i.mdx)("em",{parentName:"p"},"item shipped")," might transition an order\u2019s state from ",(0,i.mdx)("em",{parentName:"p"},"Pending")," to ",(0,i.mdx)("em",{parentName:"p"},"Shipped"),"."),(0,i.mdx)("p",null,(0,i.mdx)(p,{alt:"There is an initial Pending state. The machine transitions from Pending to the Shipped state with the item shipped event.",sources:{light:"/blog/2023-10-02-what-is-a-state-machine/order-event-light.png",dark:"/blog/2023-10-02-what-is-a-state-machine/order-event-dark.png"},mdxType:"ThemedImage"})),(0,i.mdx)("h3",{id:"transitions"},"Transitions"),(0,i.mdx)("p",null,"A state ",(0,i.mdx)("a",{parentName:"p",href:"/docs/transitions"},"transition")," describes how a system \u201cmoves\u201d from one state to another. These are the arrows between the states, labeled by the event that causes the transition to occur."),(0,i.mdx)("p",null,"In state machines, transitions always happen immediately. For example, an order can be ",(0,i.mdx)("em",{parentName:"p"},"Pending")," for some time (almost frustratingly so), but when the ",(0,i.mdx)("em",{parentName:"p"},"item shipped")," event occurs, it immediately transitions to the ",(0,i.mdx)("em",{parentName:"p"},"Shipped")," state."),(0,i.mdx)("p",null,(0,i.mdx)(p,{alt:"State machine for an order: the states are pending, shipped, delivered, and returned.",sources:{light:"/blog/2023-10-02-what-is-a-state-machine/order-transitions-light.png",dark:"/blog/2023-10-02-what-is-a-state-machine/order-transitions-dark.png"},mdxType:"ThemedImage"})),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"https://stately.ai/registry/editor/092bf401-2d65-48ae-969c-99b4a7eeb87f?machineId=942c00ac-7922-4a5a-bf92-d2438847c62f&mode=design"},"View this state machine in Stately"),"."),(0,i.mdx)("h2",{id:"a-state-machine-example"},"A state machine example"),(0,i.mdx)("p",null,"Let\u2019s say you wanted to create a flow for a travel booking app. This flow represents the logic of a user booking a flight, hotel, and rental car, and you can apply this logic to the frontend code (as a multi-step flow) and backend code (as a workflow that communicates with APIs to book everything). Let\u2019s model this travel booking flow as a state machine."),(0,i.mdx)("p",null,"First, think of all of the ",(0,i.mdx)("strong",{parentName:"p"},"states")," of this flow. Each state represents something that is happening, such as the flight or hotel being booked:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Booking flight"),(0,i.mdx)("li",{parentName:"ul"},"Booking hotel"),(0,i.mdx)("li",{parentName:"ul"},"Booking car"),(0,i.mdx)("li",{parentName:"ul"},"Confirmation"),(0,i.mdx)("li",{parentName:"ul"},"Error")),(0,i.mdx)("p",null,"Tip: make sure to handle errors! In the real world, things don\u2019t always go according to plan."),(0,i.mdx)("p",null,"Then, think of all the ",(0,i.mdx)("strong",{parentName:"p"},"events")," that can happen in the flow. There are the \u201chappy-path\u201d events:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Flight booked"),(0,i.mdx)("li",{parentName:"ul"},"Hotel booked"),(0,i.mdx)("li",{parentName:"ul"},"Car booked")),(0,i.mdx)("p",null,"But other events can happen:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Flight booking failed"),(0,i.mdx)("li",{parentName:"ul"},"Hotel booking failed"),(0,i.mdx)("li",{parentName:"ul"},"Car booking failed"),(0,i.mdx)("li",{parentName:"ul"},"Timeout")),(0,i.mdx)("p",null,"You can then combine these states and events to create a complete ",(0,i.mdx)("strong",{parentName:"p"},"state machine diagram")," that represents all the possible user flows through the app:"),(0,i.mdx)(c,{name:"booking machine",embedURL:"https://stately.ai/registry/editor/embed/9fa24cc0-3026-41be-bb22-9afc3980fefc?machineId=5e614700-7fc3-4d22-adce-4dd6cf4f6de0&mode=Design",mdxType:"EmbedMachine"}),(0,i.mdx)("p",null,"The state machine above uses parent and child states, a feature of ",(0,i.mdx)("a",{parentName:"p",href:"/docs/state-machines-and-statecharts#what-is-a-statechart"},"statecharts"),", to reduce complexity."),(0,i.mdx)("p",null,"These state machines serve as a ",(0,i.mdx)("strong",{parentName:"p"},"source of truth")," for your app logic since you can use them for:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},"Documentation")," that outlines the features and use cases represented in the flow"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},"Code")," you can generate from the state machine"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},"Diagrams")," as visual documentation"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},"Tests")," you can also generate for various flows")),(0,i.mdx)("h2",{id:"benefits-of-using-state-machines"},"Benefits of using state machines"),(0,i.mdx)("p",null,"Understanding and managing anything that can happen in your applications is crucial for ",(0,i.mdx)("a",{parentName:"p",href:"/blog/using-teams-in-stately-studio"},"efficient collaboration and innovation")," \u2013\xa0you want to ensure that your team can understand and iterate on app logic and features quickly, no matter how complex they get. State machines are a powerful visual approach for accomplishing that, and they\u2019re much more than just a diagramming tool."),(0,i.mdx)("p",null,"There are many key advantages of using state machines:"),(0,i.mdx)("h3",{id:"visualized-documentation"},"Visualized documentation"),(0,i.mdx)("p",null,"With state machine diagrams, you can visually represent the states of a process, making it easier to grasp and communicate complex logic. These diagrams bridge the communication gap between technical and non-technical team members. They also provide a clear way to document and share app logic, which you could use for onboarding new team members. After all, following boxes and arrows (just like a flowchart) is much easier than parsing code, especially for someone unfamiliar with the codebase."),(0,i.mdx)(p,{alt:"A mermaid diagram of our order state machine.",sources:{light:"/blog/2023-10-02-what-is-a-state-machine/mermaid-order-machine-light.png",dark:"/blog/2023-10-02-what-is-a-state-machine/mermaid-order-machine-dark.png"},mdxType:"ThemedImage"}),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Our ",(0,i.mdx)("a",{parentName:"em",href:"/docs/export-as-code#export-formats"},"export to Mermaid feature")," enables you to embed your state machines in GitHub and GitLab pull requests and comments.")),(0,i.mdx)("h3",{id:"consistent-robust-application-logic"},"Consistent, robust application logic"),(0,i.mdx)("p",null,"By mapping out all states and transitions, state machines ensure you account for every possible scenario. This minimizes unexpected behaviors (such as undesired states/transitions) and system inconsistencies because it is ",(0,i.mdx)("strong",{parentName:"p"},"mathematically impossible")," for a state machine to take a transition that does not exist. You can quickly identify a transition to a state that should not go to that state. This is especially useful for complex apps, where it\u2019s easy to miss edge cases or unexpected scenarios."),(0,i.mdx)("h3",{id:"modularity-and-scalability"},"Modularity and scalability"),(0,i.mdx)("p",null,"State machines allow for isolating logic, meaning you can make changes or additions to a specific segment without overhauling the entire system. Regardless of framework, programming language, or implementation, the core abstractions remain the same: states, events, and transitions. If you need to add, change, or remove a feature, the process is to add, change, or remove states and transitions."),(0,i.mdx)("h3",{id:"test-path-generation"},"Test path generation"),(0,i.mdx)("p",null,"State machines clearly define all possible states, events, and transitions, allowing testers to simulate specific events and verify if transitions to specific states occur as expected. Since state machines are directed graphs, they act like a \u201cmap\u201d for your app logic. This map enables the automatic generation of many different \u201cpaths\u201d through the state machine. Each path represents a potential use case, even those that may initially go unnoticed, such as edge cases. Exhaustive test path generation is also possible so that you can test every possible path through the state machine."),(0,i.mdx)("admonition",{type:"info"},(0,i.mdx)("p",{parentName:"admonition"},(0,i.mdx)("em",{parentName:"p"},"Our ",(0,i.mdx)("a",{parentName:"em",href:"/docs/export-as-code#export-formats"},"export to Stories feature")," enables you to generate the happy paths (stories) for your app:")),(0,i.mdx)("h3",{parentName:"admonition",id:"stories-for-ordermachine"},"Stories for ",(0,i.mdx)("inlineCode",{parentName:"h3"},"orderMachine")),(0,i.mdx)("h4",{parentName:"admonition",id:"ordermachinepending"},"orderMachine.Pending"),(0,i.mdx)("ol",{parentName:"admonition"},(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("p",{parentName:"li"},(0,i.mdx)("em",{parentName:"p"},"Start")),(0,i.mdx)("p",{parentName:"li"},"\u2192 ",(0,i.mdx)("strong",{parentName:"p"},"State")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"orderMachine.Pending")))),(0,i.mdx)("h4",{parentName:"admonition",id:"ordermachineshipped"},"orderMachine.Shipped"),(0,i.mdx)("ol",{parentName:"admonition"},(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("p",{parentName:"li"},(0,i.mdx)("em",{parentName:"p"},"Start")),(0,i.mdx)("p",{parentName:"li"},"\u2192 ",(0,i.mdx)("strong",{parentName:"p"},"State")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"orderMachine.Pending"))),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("p",{parentName:"li"},(0,i.mdx)("strong",{parentName:"p"},"Event")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"item shipped")),(0,i.mdx)("p",{parentName:"li"},"\u2192 ",(0,i.mdx)("strong",{parentName:"p"},"State")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"orderMachine.Shipped")))),(0,i.mdx)("h4",{parentName:"admonition",id:"ordermachinedelivered"},"orderMachine.Delivered"),(0,i.mdx)("ol",{parentName:"admonition"},(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("p",{parentName:"li"},(0,i.mdx)("em",{parentName:"p"},"Start")),(0,i.mdx)("p",{parentName:"li"},"\u2192 ",(0,i.mdx)("strong",{parentName:"p"},"State")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"orderMachine.Pending"))),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("p",{parentName:"li"},(0,i.mdx)("strong",{parentName:"p"},"Event")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"item shipped")),(0,i.mdx)("p",{parentName:"li"},"\u2192 ",(0,i.mdx)("strong",{parentName:"p"},"State")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"orderMachine.Shipped"))),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("p",{parentName:"li"},(0,i.mdx)("strong",{parentName:"p"},"Event")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"item delivered")),(0,i.mdx)("p",{parentName:"li"},"\u2192 ",(0,i.mdx)("strong",{parentName:"p"},"State")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"orderMachine.Delivered")))),(0,i.mdx)("h4",{parentName:"admonition",id:"ordermachinereturned"},"orderMachine.Returned"),(0,i.mdx)("ol",{parentName:"admonition"},(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("p",{parentName:"li"},(0,i.mdx)("em",{parentName:"p"},"Start")),(0,i.mdx)("p",{parentName:"li"},"\u2192 ",(0,i.mdx)("strong",{parentName:"p"},"State")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"orderMachine.Pending"))),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("p",{parentName:"li"},(0,i.mdx)("strong",{parentName:"p"},"Event")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"item shipped")),(0,i.mdx)("p",{parentName:"li"},"\u2192 ",(0,i.mdx)("strong",{parentName:"p"},"State")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"orderMachine.Shipped"))),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("p",{parentName:"li"},(0,i.mdx)("strong",{parentName:"p"},"Event")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"item delivered")),(0,i.mdx)("p",{parentName:"li"},"\u2192 ",(0,i.mdx)("strong",{parentName:"p"},"State")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"orderMachine.Delivered"))),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("p",{parentName:"li"},(0,i.mdx)("strong",{parentName:"p"},"Event")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"item returned")),(0,i.mdx)("p",{parentName:"li"},"\u2192 ",(0,i.mdx)("strong",{parentName:"p"},"State")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"orderMachine.Returned"))))),(0,i.mdx)("h2",{id:"transition-to-state-machines"},"Transition to state machines"),(0,i.mdx)("p",null,"We love state machines at ",(0,i.mdx)("a",{parentName:"p",href:"/"},"Stately")," because we know how valuable they can be to development teams. State machines provide a visually clear way to understand, design, and manage flows and logic at any level of complexity. Integrating the principles of state machines can lead to more predictable outcomes, clearer communication, and enhanced efficiency for the entire team, from project managers to designers and developers. You can use them as a precise way of diagramming and documenting app logic and even use them in your codebase to power that same logic."),(0,i.mdx)("p",null,"There are many ways to get started with state machines:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=EzYIerEutgk"},"Watch our video intro to Stately"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=wjZE39wCZXo"},"Learn about generating state machines from text descriptions")," with our AI feature."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"/docs/xstate"},"Read more about using XState"),", our open-source library for state machines anywhere JavaScript is supported."),(0,i.mdx)("li",{parentName:"ul"},"Jump into creating your own machine in ",(0,i.mdx)("a",{parentName:"li",href:"https://state.new"},"our drag-and-drop editor at state.new"),".")))}u.isMDXComponent=!0}}]);