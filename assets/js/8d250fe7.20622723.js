"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[53346],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>c,mdx:()=>g,useMDXComponents:()=>p,withMDXComponents:()=>m});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var d=a.createContext({}),m=function(e){return function(t){var n=p(t.components);return a.createElement(e,o({},t,{components:n}))}},p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,r=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=s,h=m["".concat(r,".").concat(c)]||m[c]||u[c]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,r[1]=i;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},28227:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=n(87462),s=(n(67294),n(3905));const o={title:"Model-based testing"},r="Model-based testing",i={unversionedId:"xstate/model-based-testing/intro",id:"version-4/xstate/model-based-testing/intro",title:"Model-based testing",description:"Adopting model-based testing can lead to self-documenting, easy-to-maintain tests which are far more DRY than regular tests.",source:"@site/versioned_docs/version-4/xstate/model-based-testing/intro.mdx",sourceDirName:"xstate/model-based-testing",slug:"/xstate/model-based-testing/intro",permalink:"/statelyai-docs/docs/xstate-v4/xstate/model-based-testing/intro",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/model-based-testing/intro.mdx",tags:[],version:"4",frontMatter:{title:"Model-based testing"},sidebar:"tutorialSidebar",previous:{title:"Model-based testing",permalink:"/statelyai-docs/docs/xstate-v4/category/xstate-model-based-testing"},next:{title:"When to use XState Test",permalink:"/statelyai-docs/docs/xstate-v4/xstate/model-based-testing/when-to-use"}},l={},d=[{value:"Imperative testing",id:"imperative-testing",level:2},{value:"Many tests, one model",id:"many-tests-one-model",level:2},{value:"Summary",id:"summary",level:2}],m={toc:d};function p(e){let{components:t,...n}=e;return(0,s.mdx)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"model-based-testing"},"Model-based testing"),(0,s.mdx)("p",null,"Adopting model-based testing can lead to ",(0,s.mdx)("strong",{parentName:"p"},"self-documenting, easy-to-maintain tests")," which are far more ",(0,s.mdx)("strong",{parentName:"p"},(0,s.mdx)("a",{parentName:"strong",href:"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"},"DRY"))," than regular tests."),(0,s.mdx)("p",null,"You create a visual model, tell it how to interact with your app, and execute the model to ",(0,s.mdx)("strong",{parentName:"p"},"test your app automatically"),"."),(0,s.mdx)("h2",{id:"imperative-testing"},"Imperative testing"),(0,s.mdx)("p",null,"If you\u2019ve done any automated application testing before, you\u2019ve likely come across code like this:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"describe('Search box', () => {\n  it('Should let you search for a page and go there', () => {\n    // Visit the home page\n    cy.visit('/');\n\n    // Search for \u2018Model-based testing\u2018 in the search box\n    cy.findByPlaceholderText('Search').type('Model-based testing');\n\n    // Ensure the text is visible\n    cy.findByText('Model-based testing').should('be.visible');\n\n    // Click on the result that\u2019s shown\n    cy.findByText('Model-based testing').click();\n\n    // Assert the URL has changed\n    cy.url().should('include', '/model-based-testing/intro');\n  });\n});\n")),(0,s.mdx)("p",null,"In the example above, we\u2019re using ",(0,s.mdx)("a",{parentName:"p",href:"https://docs.cypress.io/"},"Cypress")," syntax. The test visits the homepage, searches for an item, clicks on that item, then asserts that the URL has changed. We\u2019ll call this style of testing ",(0,s.mdx)("strong",{parentName:"p"},"imperative testing"),". You\u2019re telling the test suite exactly what to do and in what order."),(0,s.mdx)("p",null,"You might model this flow with a statechart as follows:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createTestMachine } from '@xstate/test';\n\nconst machine = createTestMachine({\n  initial: 'onHomePage',\n  states: {\n    onHomePage: {\n      on: {\n        SEARCH_FOR_MODEL_BASED_TESTING: 'searchResultsVisible',\n      },\n    },\n    searchResultsVisible: {\n      on: {\n        CLICK_MODEL_BASED_TESTING_RESULT: 'onModelBasedTestingPage',\n      },\n    },\n    onModelBasedTestingPage: {},\n  },\n});\n")),(0,s.mdx)("p",null,"In the example above, we use three states to represent the different states the application can be in, and transition between them using events."),(0,s.mdx)("p",null,"If we were to run a test using this model, the sequence would be as follows:"),(0,s.mdx)("ol",null,(0,s.mdx)("li",{parentName:"ol"},"Check we\u2019re in state ",(0,s.mdx)("inlineCode",{parentName:"li"},"onHomePage"))),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"cy.visit('/');\n")),(0,s.mdx)("ol",{start:2},(0,s.mdx)("li",{parentName:"ol"},"Perform event ",(0,s.mdx)("inlineCode",{parentName:"li"},"SEARCH_FOR_MODEL_BASED_TESTING"))),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"cy.findByPlaceholderText('Search').type('Model-based testing');\n")),(0,s.mdx)("ol",{start:3},(0,s.mdx)("li",{parentName:"ol"},"Check we\u2019re in state ",(0,s.mdx)("inlineCode",{parentName:"li"},"searchResultsVisible"))),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"cy.findByText('Model-based testing').should('be.visible');\n")),(0,s.mdx)("ol",{start:4},(0,s.mdx)("li",{parentName:"ol"},"Perform event ",(0,s.mdx)("inlineCode",{parentName:"li"},"CLICK_MODEL_BASED_TESTING_RESULT"))),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"cy.findByText('Model-based testing').click();\n")),(0,s.mdx)("ol",{start:5},(0,s.mdx)("li",{parentName:"ol"},"Check we\u2019re in state ",(0,s.mdx)("inlineCode",{parentName:"li"},"onModelBasedTestingPage"))),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"cy.url().should('include', '/model-based-testing/intro');\n")),(0,s.mdx)("p",null,"Each of the assertions and actions in the original test map neatly onto this model."),(0,s.mdx)("p",null,"This approach is ",(0,s.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Model-based_testing"},"model-based testing"),". You can create a model representing the part of your app you want to test, and use it to execute your tests."),(0,s.mdx)("h2",{id:"many-tests-one-model"},"Many tests, one model"),(0,s.mdx)("p",null,"The benefits of model-based testing over imperative testing come when you need to test multiple, complex paths in your app."),(0,s.mdx)("p",null,"Imagine if we wanted to add a new test for \u201cwhen we press \u2018escape\u2019 with the search box open, the box closes.\u201d With our initial test suite, we\u2019d need to add a new test:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts",metastring:"{5-26}","{5-26}":!0},"describe('Search box', () => {\n  it('Should let you search for a page and go there', () => {\n    // ...\n  });\n\n  it('Should close when you press ESC', () => {\n    // Visit the home page\n    cy.visit('/');\n\n    // Search for \u2018Model-based testing\u2019 in the search box\n    cy.findByPlaceholderText('Search').type('Model-based testing');\n\n    // Ensure the text is visible\n    cy.findByText('Model-based testing').should('be.visible');\n\n    // Press escape\n    cy.realPress('{escape}');\n\n    // Ensure the text is NOT visible\n    cy.findByText('Model-based testing').should('not.be.visible');\n  });\n});\n")),(0,s.mdx)("p",null,"Note how much code is duplicated between this test and the previous test. The first three steps of \u201cvisit home page,\u201d \u201ctype in search box,\u201d and \u201censure text is visible\u201d are exactly the same. You might extract the code to a ",(0,s.mdx)("inlineCode",{parentName:"p"},"setupSearchBoxTest()")," function, but that would make the tests hard to decipher."),(0,s.mdx)("p",null,"In our model-based test, you just add a new state and event to the model:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts",metastring:"{16, 19}","{16,":!0,"19}":!0},"import { createTestMachine } from '@xstate/test';\n\nconst machine = createTestMachine({\n  initial: 'onHomePage',\n  states: {\n    onHomePage: {\n      on: {\n        SEARCH_FOR_MODEL_BASED_TESTING: 'searchResultsVisible',\n      },\n    },\n    searchResultsVisible: {\n      on: {\n        CLICK_MODEL_BASED_TESTING_RESULT: 'onModelBasedTestingPage',\n        PRESS_ESCAPE: 'searchBoxClosed',\n      },\n    },\n    searchBoxClosed: {},\n    onModelBasedTestingPage: {},\n  },\n});\n")),(0,s.mdx)("p",null,"Now, there are two possible test paths for the model:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},"Aim for ",(0,s.mdx)("inlineCode",{parentName:"li"},"searchBoxClosed")),(0,s.mdx)("li",{parentName:"ul"},"Aim for ",(0,s.mdx)("inlineCode",{parentName:"li"},"onModelBasedTestingPage"))),(0,s.mdx)("p",null,"We then just need to add instructions to our model on how to:"),(0,s.mdx)("p",null,"Press escape:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"cy.realPress('{escape}');\n")),(0,s.mdx)("p",null,"And check we\u2019re in the ",(0,s.mdx)("inlineCode",{parentName:"p"},"searchBoxClosed")," state:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"cy.findByText('Model-based testing').should('not.be.visible');\n")),(0,s.mdx)("h2",{id:"summary"},"Summary"),(0,s.mdx)("p",null,"You might be starting to see the power of model-based testing. You can ",(0,s.mdx)("strong",{parentName:"p"},"create a visual model of your app")," using our ",(0,s.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/xstate-v4/studio#stately-studios-editor"},"Stately Studio editor"),". You can ",(0,s.mdx)("strong",{parentName:"p"},"tell the model how to interact with your application"),"; we\u2019ll look at the syntax in depth later. Finally, you can let the ",(0,s.mdx)("strong",{parentName:"p"},"model test your app for you"),". It\u2019ll calculate the fewest possible number of test paths through your model, then run the tests for you."),(0,s.mdx)("p",null,"Adopting model-based testing leads to a test suite that is:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Self-documenting"),": you can inspect the visual models, give them descriptions, and share them with non-devs."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"},(0,s.mdx)("strong",{parentName:"a"},"DRY")),": you write the minimum amount of setup code for each test."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Easy to maintain"),": adding new tests becomes as easy as adding a new state or event to an existing model.")),(0,s.mdx)("p",null,"This approach also works with ",(0,s.mdx)("strong",{parentName:"p"},"any existing test framework"),", alongside your existing test suite."))}p.isMDXComponent=!0}}]);