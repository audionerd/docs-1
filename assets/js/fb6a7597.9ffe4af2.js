"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[27957],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>l,MDXProvider:()=>c,mdx:()=>x,useMDXComponents:()=>m,withMDXComponents:()=>p});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){return function(n){var t=m(n.components);return a.createElement(e,r({},n,{components:t}))}},m=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=m(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),p=m(t),c=i,h=p["".concat(o,".").concat(c)]||p[c]||u[c]||r;return t?a.createElement(h,s(s({ref:n},l),{},{components:t})):a.createElement(h,s({ref:n},l))}));function x(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=h;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},98995:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=t(87462),i=(t(67294),t(3905));const r={title:"Advanced transitions"},o="Advanced transitions",s={unversionedId:"xstate/states/advanced-transitions",id:"version-4/xstate/states/advanced-transitions",title:"Advanced transitions",description:"Parent and child states offer more opportunities for various types of transitions. You can transition from any state to any other state. XState has a few different syntaxes to help you out.",source:"@site/versioned_docs/version-4/xstate/states/advanced-transitions.mdx",sourceDirName:"xstate/states",slug:"/xstate/states/advanced-transitions",permalink:"/statelyai-docs/docs/xstate-v4/xstate/states/advanced-transitions",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/states/advanced-transitions.mdx",tags:[],version:"4",frontMatter:{title:"Advanced transitions"},sidebar:"tutorialSidebar",previous:{title:"Other state attributes",permalink:"/statelyai-docs/docs/xstate-v4/xstate/states/other-state-attributes"},next:{title:"Final states",permalink:"/statelyai-docs/docs/xstate-v4/xstate/states/final-states"}},d={},l=[{value:"Transitioning to a node\u2019s own children",id:"transitioning-to-a-nodes-own-children",level:2},{value:"Transitioning to another node\u2019s children",id:"transitioning-to-another-nodes-children",level:2},{value:"Transitioning to any node",id:"transitioning-to-any-node",level:2}],p={toc:l};function m(e){let{components:n,...t}=e;return(0,i.mdx)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"advanced-transitions"},"Advanced transitions"),(0,i.mdx)("p",null,"Parent and child states offer more opportunities for various types of transitions. You can transition from any state to any other state. XState has a few different syntaxes to help you out."),(0,i.mdx)("h2",{id:"transitioning-to-a-nodes-own-children"},"Transitioning to a node\u2019s own children"),(0,i.mdx)("p",null,"Use the ",(0,i.mdx)("inlineCode",{parentName:"p"},".target")," syntax to transition to a child state from a parent state."),(0,i.mdx)("p",null,"The following machine uses the ",(0,i.mdx)("inlineCode",{parentName:"p"},".target")," syntax for ",(0,i.mdx)("inlineCode",{parentName:"p"},".hovered"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine({\n  initial: 'inactive',\n  on: {\n    HOVER: '.hovered',\n  },\n  states: {\n    inactive: {},\n    hovered: {},\n    visited: {},\n  },\n});\n")),(0,i.mdx)("p",null,"Whichever state the machine is in, whenever it receives a ",(0,i.mdx)("inlineCode",{parentName:"p"},"HOVER")," event, it\u2019ll transition to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"hovered")," state."),(0,i.mdx)("h2",{id:"transitioning-to-another-nodes-children"},"Transitioning to another node\u2019s children"),(0,i.mdx)("p",null,"Transition directly into a node\u2019s children using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"a.b")," syntax."),(0,i.mdx)("p",null,"The following machine uses the ",(0,i.mdx)("inlineCode",{parentName:"p"},"a.b")," syntax for ",(0,i.mdx)("inlineCode",{parentName:"p"},".hovered"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine({\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: {\n        HOVER: 'active.hovered',\n      },\n    },\n    active: {\n      initial: 'focused',\n      states: {\n        focused: {},\n        hovered: {},\n      },\n    },\n  },\n});\n")),(0,i.mdx)("p",null,"In the example above, the machine transitions directly to ",(0,i.mdx)("inlineCode",{parentName:"p"},"active.hovered")," when the ",(0,i.mdx)("inlineCode",{parentName:"p"},"HOVER")," event is received in state ",(0,i.mdx)("inlineCode",{parentName:"p"},"inactive"),"."),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"initial")," state of ",(0,i.mdx)("inlineCode",{parentName:"p"},"focused")," inside ",(0,i.mdx)("inlineCode",{parentName:"p"},"active")," is ignored."),(0,i.mdx)("h2",{id:"transitioning-to-any-node"},"Transitioning to any node"),(0,i.mdx)("p",null,"If you want to transition to ",(0,i.mdx)("em",{parentName:"p"},"any")," state:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Give the state node an ",(0,i.mdx)("inlineCode",{parentName:"li"},"id"),", for example, ",(0,i.mdx)("inlineCode",{parentName:"li"},"myState")),(0,i.mdx)("li",{parentName:"ol"},"Target the state node with a ",(0,i.mdx)("inlineCode",{parentName:"li"},"#")," prefix: ",(0,i.mdx)("inlineCode",{parentName:"li"},"#myState"))),(0,i.mdx)("p",null,"The approach above works for transitioning to any state node from any state node, so it\u2019s a useful trick if you can\u2019t target a state with the ",(0,i.mdx)("inlineCode",{parentName:"p"},".a")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"a.b")," syntaxes."),(0,i.mdx)("p",null,"The example below shows the ",(0,i.mdx)("inlineCode",{parentName:"p"},"paused")," state with an ",(0,i.mdx)("inlineCode",{parentName:"p"},"id")," of ",(0,i.mdx)("inlineCode",{parentName:"p"},"playerPaused")," and that ",(0,i.mdx)("inlineCode",{parentName:"p"},"id")," targeted using ",(0,i.mdx)("inlineCode",{parentName:"p"},"#playerPaused"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst musicMachine = createMachine({\n  initial: 'playing',\n  states: {\n    playing: {\n      initial: 'playingTrackOne',\n      states: {\n        playingTrackOne: {\n          on: {\n            PAUSE: {\n              target: '#playerPaused',\n            },\n          },\n        },\n      },\n    },\n    paused: {\n      id: 'playerPaused',\n    },\n  },\n});\n")),(0,i.mdx)("p",null,"You can also give the root of your machine an ",(0,i.mdx)("inlineCode",{parentName:"p"},"id")," and combine the use of the root machine\u2019s ",(0,i.mdx)("inlineCode",{parentName:"p"},"id")," with the ",(0,i.mdx)("inlineCode",{parentName:"p"},"a.b")," syntax."),(0,i.mdx)("p",null,"The example below shows the machine\u2019s root with an ",(0,i.mdx)("inlineCode",{parentName:"p"},"id")," of ",(0,i.mdx)("inlineCode",{parentName:"p"},"player")," and the ",(0,i.mdx)("inlineCode",{parentName:"p"},"paused")," state targeted using ",(0,i.mdx)("inlineCode",{parentName:"p"},"#player.paused"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst musicMachine = createMachine({\n  id: 'player',\n  initial: 'playing',\n  states: {\n    playing: {\n      initial: 'playingTrackOne',\n      states: {\n        playingTrackOne: {\n          on: {\n            PAUSE: {\n              target: '#player.paused',\n            },\n          },\n        },\n      },\n    },\n    paused: {},\n  },\n});\n")),(0,i.mdx)("p",null,"Combining a machine\u2019s root ",(0,i.mdx)("inlineCode",{parentName:"p"},"id")," with the use of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"a.b")," syntax can help you reduce the number of state ",(0,i.mdx)("inlineCode",{parentName:"p"},"id"),"s required."))}m.isMDXComponent=!0}}]);