"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[11620],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>m,mdx:()=>y,useMDXComponents:()=>p,withMDXComponents:()=>c});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},s.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),c=function(e){return function(t){var n=p(t.components);return a.createElement(e,s({},t,{components:n}))}},p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,g=c["".concat(i,".").concat(m)]||c[m]||u[m]||s;return n?a.createElement(g,r(r({ref:t},d),{},{components:n})):a.createElement(g,r({ref:t},d))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=g;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var d=2;d<s;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},19269:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));const s={title:"Typegen",description:"You can automatically generate intelligent typings for XState using our VS Code extension or our CLI."},i=void 0,r={unversionedId:"xstate/typescript/typegen",id:"version-4/xstate/typescript/typegen",title:"Typegen",description:"You can automatically generate intelligent typings for XState using our VS Code extension or our CLI.",source:"@site/versioned_docs/version-4/xstate/typescript/typegen.mdx",sourceDirName:"xstate/typescript",slug:"/xstate/typescript/typegen",permalink:"/statelyai-docs/docs/xstate-v4/xstate/typescript/typegen",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/typescript/typegen.mdx",tags:[],version:"4",frontMatter:{title:"Typegen",description:"You can automatically generate intelligent typings for XState using our VS Code extension or our CLI."},sidebar:"tutorialSidebar",previous:{title:"TypeScript",permalink:"/statelyai-docs/docs/xstate-v4/category/xstate-typescript"},next:{title:"Type helpers",permalink:"/statelyai-docs/docs/xstate-v4/xstate/typescript/type-helpers"}},l={},d=[{value:"How to get started with VS Code",id:"how-to-get-started-with-vs-code",level:4},{value:"How to get started with the CLI (other editors)",id:"how-to-get-started-with-the-cli-other-editors",level:4},{value:"Typegen in action",id:"typegen-in-action",level:3},{value:"Typing promise actors",id:"typing-promise-actors",level:2},{value:"Typegen best practices",id:"typegen-best-practices",level:2},{value:"Use named actions, guards and actors",id:"use-named-actions-guards-and-actors",level:3},{value:"The generated files",id:"the-generated-files",level:3},{value:"Don\u2019t use enums",id:"dont-use-enums",level:3},{value:"Nesting typegen files",id:"nesting-typegen-files",level:2},{value:"Known limitations",id:"known-limitations",level:2},{value:"\u201cAlways\u201d transitions and raised events",id:"always-transitions-and-raised-events",level:3}],c={toc:d};function p(e){let{components:t,...n}=e;return(0,o.mdx)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("admonition",{type:"caution"},(0,o.mdx)("p",{parentName:"admonition"},(0,o.mdx)("strong",{parentName:"p"},"This feature is in beta!")," Read the section below on ",(0,o.mdx)("a",{parentName:"p",href:"/#known-limitations"},"known limitations")," to find out what we\u2019re actively looking to improve.")),(0,o.mdx)("p",null,"You can automatically generate intelligent typings for XState using our ",(0,o.mdx)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=statelyai.stately-vscode"},"VS Code extension")," or our ",(0,o.mdx)("a",{parentName:"p",href:"../../tools/developer-tools#xstate-cli-command-line-interface"},"CLI"),"."),(0,o.mdx)("h4",{id:"how-to-get-started-with-vs-code"},"How to get started with VS Code"),(0,o.mdx)("p",null,"All you need to do is to install the ",(0,o.mdx)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=statelyai.stately-vscode"},"Stately XState extension"),"."),(0,o.mdx)("h4",{id:"how-to-get-started-with-the-cli-other-editors"},"How to get started with the CLI (other editors)"),(0,o.mdx)("p",null,"Install the ",(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/xstate-v4/tools/developer-tools#xstate-cli-command-line-interface"},"CLI")," and run the ",(0,o.mdx)("inlineCode",{parentName:"p"},"xstate typegen")," command with the ",(0,o.mdx)("inlineCode",{parentName:"p"},"--watch")," flag."),(0,o.mdx)("h3",{id:"typegen-in-action"},"Typegen in action"),(0,o.mdx)("p",null,"Next try to create a machine, make sure to set the ",(0,o.mdx)("inlineCode",{parentName:"p"},"schema")," attributes:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine({\n  // highlight-start\n  schema: {\n    context: {} as { value: string },\n    events: {} as { type: 'FOO'; value: string } | { type: 'BAR' },\n  },\n  // highlight-end\n  initial: 'a',\n  states: {\n    a: {\n      on: {\n        FOO: {\n          actions: 'consoleLogValue',\n          target: 'b',\n        },\n      },\n    },\n    b: {\n      entry: 'consoleLogValueAgain',\n    },\n  },\n});\n")),(0,o.mdx)("ol",{start:3},(0,o.mdx)("li",{parentName:"ol"},"Add ",(0,o.mdx)("inlineCode",{parentName:"li"},"tsTypes: {}")," to the machine and save the file:")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts",metastring:"{1}","{1}":!0},"const machine = createMachine({\n  tsTypes: {},\n  schema: {\n    context: {} as { value: string },\n    events: {} as { type: 'FOO'; value: string } | { type: 'BAR' },\n  },\n  initial: 'a',\n  states: {\n    a: {},\n    b: {},\n  },\n});\n")),(0,o.mdx)("ol",{start:4},(0,o.mdx)("li",{parentName:"ol"},"The extension should automatically add a generic to the machine:")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts",metastring:"{1}","{1}":!0},"const machine = createMachine({\n  tsTypes: {} as import('./filename.typegen').Typegen0,\n  /* ... */\n});\n")),(0,o.mdx)("ol",{start:5},(0,o.mdx)("li",{parentName:"ol"},"Add a second parameter into the ",(0,o.mdx)("inlineCode",{parentName:"li"},"createMachine")," call. This second parameter is where you implement the machine\u2019s actions, actors, guards and delays.")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts",metastring:"{4-15}","{4-15}":!0},"const machine = createMachine(\n  {\n    /* ... */\n  },\n  {\n    actions: {\n      consoleLogValue: (context, event) => {\n        // Wow! event is typed to { type: 'FOO' }\n        console.log(event.value);\n      },\n      consoleLogValueAgain: (context, event) => {\n        // Wow! event is typed to { type: 'FOO' }\n        console.log(event.value);\n      },\n    },\n  },\n);\n")),(0,o.mdx)("p",null,"Now the events in the options are ",(0,o.mdx)("em",{parentName:"p"},"strongly typed to the events that cause the action to be triggered"),", including actions, guards, actors and delays."),(0,o.mdx)("p",null,"You\u2019ll also notice that ",(0,o.mdx)("inlineCode",{parentName:"p"},"state.matches"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"tags")," and other parts of the machine are now type-safe."),(0,o.mdx)("h2",{id:"typing-promise-actors"},"Typing promise actors"),(0,o.mdx)("p",null,"You can use the generated types to specify the return type of promise-based actors by using the ",(0,o.mdx)("inlineCode",{parentName:"p"},"actors")," schema property:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\ncreateMachine(\n  {\n    schema: {\n      // `actors` in v5\n      services: {} as {\n        myActor: {\n          // The data that gets returned from the actor\n          data: { id: string };\n        };\n      },\n    },\n    invoke: {\n      src: 'myActor',\n      onDone: {\n        actions: 'consoleLogId',\n      },\n    },\n  },\n  {\n    // `actors` in v5\n    services: {\n      myActor: async () => {\n        // This return type is now type-safe\n        return {\n          id: '1',\n        };\n      },\n    },\n    actions: {\n      consoleLogId: (context, event) => {\n        // This event type is now type-safe\n        console.log(event.data.id);\n      },\n    },\n  },\n);\n")),(0,o.mdx)("admonition",{type:"warningxstate"},(0,o.mdx)("p",{parentName:"admonition"},"XState v5 is in beta. ",(0,o.mdx)("a",{parentName:"p",href:"https://www.npmjs.com/package/xstate/v/5.0.0-beta.13"},"Check out XState v5 Beta on NPM"),".")),(0,o.mdx)("h2",{id:"typegen-best-practices"},"Typegen best practices"),(0,o.mdx)("p",null,"Below are some recommendations to help you get the most out of using typegen."),(0,o.mdx)("h3",{id:"use-named-actions-guards-and-actors"},"Use named actions, guards and actors"),(0,o.mdx)("p",null,"We recommend using named actions, guards and actors instead of inline actions, guards and actors."),(0,o.mdx)("p",null,"Named actions, actors and guards allow for:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Better visualization with the names appearing in the statechart"),(0,o.mdx)("li",{parentName:"ul"},"Easier-to-understand code"),(0,o.mdx)("li",{parentName:"ul"},"Overrides in ",(0,o.mdx)("inlineCode",{parentName:"li"},"useMachine")," or ",(0,o.mdx)("inlineCode",{parentName:"li"},"machine.withConfig"))),(0,o.mdx)("p",null,"The following example is optimal:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"createMachine(\n  {\n    entry: ['sayHello'],\n  },\n  {\n    actions: {\n      sayHello: () => {\n        console.log('Hello!');\n      },\n    },\n  },\n);\n")),(0,o.mdx)("p",null,"The following example is useful but less optimal:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"createMachine({\n  entry: [\n    () => {\n      console.log('Hello!');\n    },\n  ],\n});\n")),(0,o.mdx)("h3",{id:"the-generated-files"},"The generated files"),(0,o.mdx)("p",null,"We recommend you gitignore the generated files (",(0,o.mdx)("inlineCode",{parentName:"p"},"*filename*.typegen.ts"),") from your repository."),(0,o.mdx)("p",null,"You can use the ",(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/xstate-v4/tools/developer-tools#xstate-cli-command-line-interface"},"CLI")," to regenerate them on CI (Continuous Integration), for instance, via a postinstall script:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "postinstall": "xstate typegen \\"./src/**/*.ts?(x)\\""\n  }\n}\n')),(0,o.mdx)("h3",{id:"dont-use-enums"},"Don\u2019t use enums"),(0,o.mdx)("p",null,"Enums were a common pattern used with XState TypeScript and were often used to declare state names as follows:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"enum States {\n  A,\n  B,\n}\n\ncreateMachine({\n  initial: States.A,\n  states: {\n    [States.A]: {},\n    [States.B]: {},\n  },\n});\n")),(0,o.mdx)("p",null,"You can then check ",(0,o.mdx)("inlineCode",{parentName:"p"},"state.matches(States.A)")," on the resulting machine, which allows for type-safe checks of state names."),(0,o.mdx)("p",null,"With typegen, using enums is no longer necessary as all ",(0,o.mdx)("inlineCode",{parentName:"p"},"state.matches")," types are type-safe. Enums are currently not supported by our static analysis tool. We\u2019re unlikely to support enums with typegen due to the complexity they add for comparatively little gain."),(0,o.mdx)("p",null,"Instead of enums, use typegen and rely on the strength of the type-safety provided."),(0,o.mdx)("h2",{id:"nesting-typegen-files"},"Nesting typegen files"),(0,o.mdx)("p",null,"When you use typegen, you'll notice that it generates new type files. If you use VS Code we have made it easy for you to nest these files. Our extension will automatically ask you if you want to enable nesting. If you want to know more about file-nesting, you can ",(0,o.mdx)("a",{parentName:"p",href:"/blog/nesting-typegen-files"},"read the blog post where we introduced nesting typegen files"),"."),(0,o.mdx)("h2",{id:"known-limitations"},"Known limitations"),(0,o.mdx)("p",null,"There are a few known limitations with typegen, which we are working to fix."),(0,o.mdx)("h3",{id:"always-transitions-and-raised-events"},"\u201cAlways\u201d transitions and raised events"),(0,o.mdx)("p",null,"Typegen might incorrectly annotate actions, actors, guards and delays if they are called \u201cin response\u201d to always transitions or raised events. We are working on fixing this, both in XState and in the typegen."))}p.isMDXComponent=!0}}]);