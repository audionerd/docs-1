"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[77074],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>u,MDXProvider:()=>m,mdx:()=>v,useMDXComponents:()=>l,withMDXComponents:()=>p});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),p=function(e){return function(t){var n=l(t.components);return r.createElement(e,a({},t,{components:n}))}},l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=o,y=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(y,c(c({ref:t},u),{},{components:n})):r.createElement(y,c({ref:t},u))}));function v(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=y;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},42678:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var r=n(87462),o=(n(67294),n(3905));const a={title:"Actors",description:"When you run a statechart, it becomes an actor, a running process that can receive events. Often, you\u2019ll need your actor to run other actors."},s="Actors",c={unversionedId:"xstate/actors/intro",id:"version-4/xstate/actors/intro",title:"Actors",description:"When you run a statechart, it becomes an actor, a running process that can receive events. Often, you\u2019ll need your actor to run other actors.",source:"@site/versioned_docs/version-4/xstate/actors/intro.mdx",sourceDirName:"xstate/actors",slug:"/xstate/actors/intro",permalink:"/statelyai-docs/docs/xstate-v4/xstate/actors/intro",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/actors/intro.mdx",tags:[],version:"4",frontMatter:{title:"Actors",description:"When you run a statechart, it becomes an actor, a running process that can receive events. Often, you\u2019ll need your actor to run other actors."},sidebar:"tutorialSidebar",previous:{title:"Actors",permalink:"/statelyai-docs/docs/xstate-v4/category/xstate-actors"},next:{title:"Promises",permalink:"/statelyai-docs/docs/xstate-v4/xstate/actors/promises"}},i={},u=[],p={toc:u};function l(e){let{components:t,...n}=e;return(0,o.mdx)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"actors"},"Actors"),(0,o.mdx)("p",null,"When you run a statechart, it becomes an ",(0,o.mdx)("em",{parentName:"p"},"actor"),", a running process that can receive events. Often, you\u2019ll need your actor to run ",(0,o.mdx)("em",{parentName:"p"},"other actors"),"; spawning new statecharts, waiting for promises, or subscribing to observables."),(0,o.mdx)("p",null,"We use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"invoke")," attribute on a state to ",(0,o.mdx)("em",{parentName:"p"},"invoke")," an actor in our machine. You can invoke an actor on any state, including the root node."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine(\n  {\n    invoke: {\n      src: 'someActor',\n    },\n  },\n  {\n    // `actors` in v5\n    services: {\n      /**\n       * The actor is defined here\n       */\n      someActor: async () => {},\n    },\n  }\n);\n")),(0,o.mdx)("admonition",{type:"warningxstate"},(0,o.mdx)("p",{parentName:"admonition"},"XState v5 is in beta. ",(0,o.mdx)("a",{parentName:"p",href:"https://www.npmjs.com/package/xstate/v/5.0.0-beta.13"},"Check out XState v5 Beta on NPM"),".")),(0,o.mdx)("p",null,"You can also run several invocations at the same time by specifying ",(0,o.mdx)("inlineCode",{parentName:"p"},"invoke")," as an array:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine(\n  {\n    invoke: [\n      {\n        src: 'someActor',\n      },\n      {\n        src: 'someOtherActor',\n      },\n    ],\n  },\n  {\n    // `actors` in v5      \n    services: {\n      someActor: async () => {},\n      someOtherActor: async () => {},\n    },\n  }\n);\n")),(0,o.mdx)("p",null,"Running several invocations simultaneously is useful when you want several sub-processes running on the same state."))}l.isMDXComponent=!0}}]);