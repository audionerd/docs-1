"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[4787],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>c,mdx:()=>h,useMDXComponents:()=>p,withMDXComponents:()=>o});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),o=function(e){return function(t){var n=p(t.components);return a.createElement(e,i({},t,{components:n}))}},p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},x={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),o=p(n),c=r,u=o["".concat(l,".").concat(c)]||o[c]||x[c]||i;return n?a.createElement(u,m(m({ref:t},s),{},{components:n})):a.createElement(u,m({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var m={};for(var d in t)hasOwnProperty.call(t,d)&&(m[d]=t[d]);m.originalType=e,m.mdxType="string"==typeof e?e:r,l[1]=m;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},63391:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>m,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={title:"@xstate/fsm",description:"The @xstate/fsm package contains a minimal, 1kb implementation of XState for finite state machines. Learn how to install and use @xstate/fsm."},l=void 0,m={unversionedId:"xstate/packages/xstate-fsm",id:"version-4/xstate/packages/xstate-fsm",title:"@xstate/fsm",description:"The @xstate/fsm package contains a minimal, 1kb implementation of XState for finite state machines. Learn how to install and use @xstate/fsm.",source:"@site/versioned_docs/version-4/xstate/packages/xstate-fsm.mdx",sourceDirName:"xstate/packages",slug:"/xstate/packages/xstate-fsm",permalink:"/statelyai-docs/docs/xstate-v4/xstate/packages/xstate-fsm",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/packages/xstate-fsm.mdx",tags:[],version:"4",frontMatter:{title:"@xstate/fsm",description:"The @xstate/fsm package contains a minimal, 1kb implementation of XState for finite state machines. Learn how to install and use @xstate/fsm."},sidebar:"tutorialSidebar",previous:{title:"Packages",permalink:"/statelyai-docs/docs/xstate-v4/category/xstate-packages"},next:{title:"@xstate/graph",permalink:"/statelyai-docs/docs/xstate-v4/xstate/packages/xstate-graph"}},d={},s=[{value:"Features",id:"features",level:2},{value:"Quick start",id:"quick-start",level:2},{value:"Installation",id:"installation",level:3},{value:"Usage (machine)",id:"usage-machine",level:3},{value:"Usage (service)",id:"usage-service",level:3},{value:"API",id:"api",level:2},{value:"<code>createMachine(config, options)</code>",id:"createmachineconfig-options",level:3},{value:"Returns",id:"returns",level:4},{value:"Machine config",id:"machine-config",level:3},{value:"State config",id:"state-config",level:3},{value:"Transition config",id:"transition-config",level:3},{value:"Machine options",id:"machine-options",level:3},{value:"Action config",id:"action-config",level:3},{value:"<code>machine.initialState</code>",id:"machineinitialstate",level:3},{value:"<code>machine.transition(state, event)</code>",id:"machinetransitionstate-event",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example",level:4},{value:"State",id:"state",level:3},{value:"<code>interpret(machine)</code>",id:"interpretmachine",level:3},{value:"Example",id:"example-1",level:4},{value:"<code>service.subscribe(stateListener)</code>",id:"servicesubscribestatelistener",level:3},{value:"Returns",id:"returns-2",level:4},{value:"<code>service.send(event)</code>",id:"servicesendevent",level:3},{value:"<code>service.start()</code>",id:"servicestart",level:3},{value:"<code>service.stop()</code>",id:"servicestop",level:3},{value:"TypeScript",id:"typescript",level:2},{value:"Example",id:"example-2",level:4},{value:"Example",id:"example-3",level:2}],o={toc:s};function p(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"The ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/statelyai/xstate/tree/main/packages/xstate-fsm"},"@xstate/fsm package")," contains a minimal, 1kb implementation of ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/statelyai/xstate"},"XState")," for ",(0,r.mdx)("strong",{parentName:"p"},"finite state machines"),"."),(0,r.mdx)("h2",{id:"features"},"Features"),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null}),(0,r.mdx)("th",{parentName:"tr",align:"center"},(0,r.mdx)("strong",{parentName:"th"},"@xstate/fsm")),(0,r.mdx)("th",{parentName:"tr",align:"center"},(0,r.mdx)("a",{parentName:"th",href:"https://github.com/statelyai/xstate"},"XState")))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Finite states"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Initial state"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Transitions (object)"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Transitions (string target)"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Delayed transitions"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"cross mark"},"\u274c")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Eventless transitions"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"cross mark"},"\u274c")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Nested states"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"cross mark"},"\u274c")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Parallel states"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"cross mark"},"\u274c")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"History states"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"cross mark"},"\u274c")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Final states"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"cross mark"},"\u274c")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Context"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Entry actions"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Exit actions"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Transition actions"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Parameterized actions"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"cross mark"},"\u274c")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Transition guards"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Parameterized guards"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"cross mark"},"\u274c")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Spawned actors"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"cross mark"},"\u274c")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Invoked actors"),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"cross mark"},"\u274c")),(0,r.mdx)("td",{parentName:"tr",align:"center"},(0,r.mdx)("span",{parentName:"td",role:"img","aria-label":"check mark button"},"\u2705"))))),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Finite states (non-nested)"),(0,r.mdx)("li",{parentName:"ul"},"Initial state"),(0,r.mdx)("li",{parentName:"ul"},"Transitions (object or strings)"),(0,r.mdx)("li",{parentName:"ul"},"Context"),(0,r.mdx)("li",{parentName:"ul"},"Entry actions"),(0,r.mdx)("li",{parentName:"ul"},"Exit actions"),(0,r.mdx)("li",{parentName:"ul"},"Transition actions"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"state.changed"))),(0,r.mdx)("p",null,"If you want to use statechart features such as nested states, parallel states, history states, activities, invoked services, delayed transitions, transient transitions, etc. please use ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/statelyai/xstate"},(0,r.mdx)("inlineCode",{parentName:"a"},"XState")),"."),(0,r.mdx)("h2",{id:"quick-start"},"Quick start"),(0,r.mdx)("h3",{id:"installation"},"Installation"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"npm i @xstate/fsm\n")),(0,r.mdx)("h3",{id:"usage-machine"},"Usage (machine)"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { createMachine } from '@xstate/fsm';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: { on: { TOGGLE: 'active' } },\n    active: { on: { TOGGLE: 'inactive' } }\n  }\n});\n\nconst { initialState } = toggleMachine;\n\nconst toggledState = toggleMachine.transition(initialState, 'TOGGLE');\ntoggledState.value;\nconst untoggledState = toggleMachine.transition(toggledState, 'TOGGLE');\nuntoggledState.value;\n// => 'inactive'\n")),(0,r.mdx)("h3",{id:"usage-service"},"Usage (service)"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { createMachine, interpret } from '@xstate/fsm';\n\nconst toggleMachine = createMachine({});\n\nconst toggleService = interpret(toggleMachine).start();\n\ntoggleService.subscribe((state) => {\n  console.log(state.value);\n});\n\ntoggleService.send('TOGGLE');\ntoggleService.send('TOGGLE');\ntoggleService.stop();\n")),(0,r.mdx)("h2",{id:"api"},"API"),(0,r.mdx)("h3",{id:"createmachineconfig-options"},(0,r.mdx)("inlineCode",{parentName:"h3"},"createMachine(config, options)")),(0,r.mdx)("p",null,"Creates a new finite state machine from the config."),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Argument"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"config")),(0,r.mdx)("td",{parentName:"tr",align:null},"object (see below)"),(0,r.mdx)("td",{parentName:"tr",align:null},"The config object for creating the machine.")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"options")),(0,r.mdx)("td",{parentName:"tr",align:null},"object (see below)"),(0,r.mdx)("td",{parentName:"tr",align:null},"The optional options object.")))),(0,r.mdx)("h4",{id:"returns"},"Returns"),(0,r.mdx)("p",null,"A ",(0,r.mdx)("inlineCode",{parentName:"p"},"Machine"),", which provides:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"machine.initialState"),": the machine\u2019s resolved initial state"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"machine.transition(state, event)"),": a pure transition function that returns the next state given the current ",(0,r.mdx)("inlineCode",{parentName:"li"},"state")," and ",(0,r.mdx)("inlineCode",{parentName:"li"},"event"))),(0,r.mdx)("p",null,"The machine config has this schema:"),(0,r.mdx)("h3",{id:"machine-config"},"Machine config"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"id")," (string) - an identifier for the type of machine this is. Useful for debugging."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"initial")," (string) - the key of the initial state."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"states")," (object) - an object mapping state names (keys) to ",(0,r.mdx)("a",{parentName:"li",href:"/#state-config"},"states"))),(0,r.mdx)("h3",{id:"state-config"},"State config"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"on")," (object) - an object mapping event types (keys) to ",(0,r.mdx)("a",{parentName:"li",href:"/#transition-config"},"transitions"))),(0,r.mdx)("h3",{id:"transition-config"},"Transition config"),(0,r.mdx)("p",null,"String syntax:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"(string) - the state name to transition to.",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Same as ",(0,r.mdx)("inlineCode",{parentName:"li"},"{ target: stateName }"))))),(0,r.mdx)("p",null,"Object syntax:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"target?")," (string) - the state name to transition to."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"actions?")," (Action | Action[]) - the ",(0,r.mdx)("a",{parentName:"li",href:"/#action-config"},"action(s)")," to execute when this transition is taken."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"cond?")," (Guard) - the condition (predicate function) to test. If it returns ",(0,r.mdx)("inlineCode",{parentName:"li"},"true"),", the transition will be taken.")),(0,r.mdx)("h3",{id:"machine-options"},"Machine options"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"actions?")," (object) - a lookup object for your string actions.")),(0,r.mdx)("h3",{id:"action-config"},"Action config"),(0,r.mdx)("p",null,"Function syntax:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"(function) - the action function to execute. Resolves to ",(0,r.mdx)("inlineCode",{parentName:"li"},"{ type: actionFn.name, exec: actionFn }")," and the function takes the following arguments:",(0,r.mdx)("ol",{parentName:"li"},(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("inlineCode",{parentName:"li"},"context")," (any) - the machine\u2019s current ",(0,r.mdx)("inlineCode",{parentName:"li"},"context"),"."),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("inlineCode",{parentName:"li"},"event")," (object) - the event that caused the action to be executed.")))),(0,r.mdx)("p",null,"Object syntax:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"type")," (string) - the action type."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"exec?")," (function) - the action function to execute.")),(0,r.mdx)("p",null,"String syntax:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"(string) - the action type.",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"By default it resolves to ",(0,r.mdx)("inlineCode",{parentName:"li"},"{ type: actionType, exec: undefined }"),". It can resolve to resolved function or resolved object action ",(0,r.mdx)("strong",{parentName:"li"},"if")," the action can be looked up in the ",(0,r.mdx)("inlineCode",{parentName:"li"},"options.actions")," object.")))),(0,r.mdx)("details",null,(0,r.mdx)("summary",null,"Why use a string or object for defining actions?"),(0,r.mdx)("p",null,"Using the string or object syntax is useful for handling actions in a custom way, rather than baking in the implementation details to your machine:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"const nextState = machine.transition();\n\nnextState.actions.forEach((action) => {\n  if (action.type === 'focus') {\n  }\n});\n"))),(0,r.mdx)("h3",{id:"machineinitialstate"},(0,r.mdx)("inlineCode",{parentName:"h3"},"machine.initialState")),(0,r.mdx)("p",null,"The resolved initial state of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"machine"),"."),(0,r.mdx)("h3",{id:"machinetransitionstate-event"},(0,r.mdx)("inlineCode",{parentName:"h3"},"machine.transition(state, event)")),(0,r.mdx)("p",null,"A pure transition function that returns the next state given the current ",(0,r.mdx)("inlineCode",{parentName:"p"},"state")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"event"),"."),(0,r.mdx)("p",null,"The state can be a ",(0,r.mdx)("inlineCode",{parentName:"p"},"string")," state name, or a ",(0,r.mdx)("inlineCode",{parentName:"p"},"State")," object (the return type of ",(0,r.mdx)("inlineCode",{parentName:"p"},"machine.transition(...)"),")."),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Argument"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"state")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")," or ",(0,r.mdx)("inlineCode",{parentName:"td"},"State")," object"),(0,r.mdx)("td",{parentName:"tr",align:null},"The current state to transition from")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"event")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")," or ",(0,r.mdx)("inlineCode",{parentName:"td"},"{ type: string, ... }")),(0,r.mdx)("td",{parentName:"tr",align:null},"The event that transitions the current ",(0,r.mdx)("inlineCode",{parentName:"td"},"state")," to the next state")))),(0,r.mdx)("h4",{id:"returns-1"},"Returns"),(0,r.mdx)("p",null,"A ",(0,r.mdx)("inlineCode",{parentName:"p"},"State")," object, which represents the next state."),(0,r.mdx)("h4",{id:"example"},"Example"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"const yellowState = machine.transition('green', 'TIMER');\nconst redState = machine.transition(yellowState, 'TIMER');\nconst greenState = machine.transition(yellowState, { type: 'TIMER' });\n// => { value: 'green', ... }\n")),(0,r.mdx)("h3",{id:"state"},"State"),(0,r.mdx)("p",null,"An object that represents the state of a machine with the following schema:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"value")," (string) - the finite state value"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"context")," (object) - the extended state (context)"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"actions")," (array) - an array of action objects representing the side-effects (actions) to be executed"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"changed")," (boolean) - whether this state is changed from the previous state (",(0,r.mdx)("inlineCode",{parentName:"li"},"true")," if the ",(0,r.mdx)("inlineCode",{parentName:"li"},"state.value")," and ",(0,r.mdx)("inlineCode",{parentName:"li"},"state.context")," are the same, and there are no side-effects)"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"matches(value)")," (boolean) - whether this state\u2019s value matches (i.e., is equal to) the ",(0,r.mdx)("inlineCode",{parentName:"li"},"value"),". This is useful for typestate checking.")),(0,r.mdx)("h3",{id:"interpretmachine"},(0,r.mdx)("inlineCode",{parentName:"h3"},"interpret(machine)")),(0,r.mdx)("p",null,"Creates an instance of an interpreted machine, also known as a ",(0,r.mdx)("strong",{parentName:"p"},"service"),". This is a stateful representation of the running machine, which you can subscribe to, send events to, start, and stop."),(0,r.mdx)("p",null,"Actions will also be executed by the interpreter."),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Argument"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"machine")),(0,r.mdx)("td",{parentName:"tr",align:null},"StateMachine"),(0,r.mdx)("td",{parentName:"tr",align:null},"The machine to be interpreted.")))),(0,r.mdx)("h4",{id:"example-1"},"Example"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { createMachine, interpret } from '@xstate/fsm';\n\nconst machine = createMachine({});\n\nconst service = interpret(machine);\n\nconst subscription = service.subscribe((state) => {\n  console.log(state);\n});\n\nservice.start();\n\nservice.send('SOME_EVENT');\nservice.send({ type: 'ANOTHER_EVENT' });\n\nsubscription.unsubscribe();\n\nservice.stop();\n")),(0,r.mdx)("h3",{id:"servicesubscribestatelistener"},(0,r.mdx)("inlineCode",{parentName:"h3"},"service.subscribe(stateListener)")),(0,r.mdx)("p",null,"A service (created from ",(0,r.mdx)("inlineCode",{parentName:"p"},"interpret(machine)"),") can be subscribed to via the ",(0,r.mdx)("inlineCode",{parentName:"p"},".subscribe(...)")," method. The subscription will be notified of all state changes (including the initial state) and can be unsubscribed."),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Argument"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"stateListener")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"(state) => void")),(0,r.mdx)("td",{parentName:"tr",align:null},"The listener that is called with the interpreted machine\u2019s current ",(0,r.mdx)("inlineCode",{parentName:"td"},"state")," whenever it changes.")))),(0,r.mdx)("h4",{id:"returns-2"},"Returns"),(0,r.mdx)("p",null,"A subscription object with an ",(0,r.mdx)("inlineCode",{parentName:"p"},"unsubscribe")," method."),(0,r.mdx)("h3",{id:"servicesendevent"},(0,r.mdx)("inlineCode",{parentName:"h3"},"service.send(event)")),(0,r.mdx)("p",null,"Sends an ",(0,r.mdx)("inlineCode",{parentName:"p"},"event")," to the interpreted machine. The event can be a string (e.g., ",(0,r.mdx)("inlineCode",{parentName:"p"},'"EVENT"'),") or an object with a ",(0,r.mdx)("inlineCode",{parentName:"p"},"type")," property (e.g., ",(0,r.mdx)("inlineCode",{parentName:"p"},'{ type: "EVENT" }'),")."),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Argument"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"event")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")," or ",(0,r.mdx)("inlineCode",{parentName:"td"},"{ type: string, ... }")),(0,r.mdx)("td",{parentName:"tr",align:null},"The event to be sent to the interpreted machine.")))),(0,r.mdx)("h3",{id:"servicestart"},(0,r.mdx)("inlineCode",{parentName:"h3"},"service.start()")),(0,r.mdx)("p",null,"Starts the interpreted machine."),(0,r.mdx)("p",null,"Events sent to the interpreted machine will not trigger any transitions until the service is started. All listeners (via ",(0,r.mdx)("inlineCode",{parentName:"p"},"service.subscribe(listener)"),") will receive the ",(0,r.mdx)("inlineCode",{parentName:"p"},"machine.initialState"),"."),(0,r.mdx)("h3",{id:"servicestop"},(0,r.mdx)("inlineCode",{parentName:"h3"},"service.stop()")),(0,r.mdx)("p",null,"Stops the interpreted machine."),(0,r.mdx)("p",null,"Events sent to a stopped service will no longer trigger any transitions. All listeners (via ",(0,r.mdx)("inlineCode",{parentName:"p"},"service.subscribe(listener)"),") will be unsubscribed."),(0,r.mdx)("h2",{id:"typescript"},"TypeScript"),(0,r.mdx)("p",null,"A machine can be strictly typed by passing in 3 generic types:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"TContext")," - the machine\u2019s ",(0,r.mdx)("inlineCode",{parentName:"li"},"context")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"TEvent")," - all events that the machine accepts"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"TState")," - all states that the machine can be in")),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"TContext")," type should be an ",(0,r.mdx)("inlineCode",{parentName:"p"},"object")," that represents all possible combined types of ",(0,r.mdx)("inlineCode",{parentName:"p"},"state.context"),"."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"TEvent")," type should be the union of all event objects that the machine can accept, where each event object has a ",(0,r.mdx)("inlineCode",{parentName:"p"},"{ type: string }")," property, as well as any other properties that may be present."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"TState")," type should be the union of all typestates (value and contexts) that the machine can be in, where each typestate has:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"value")," (string) - the value (name) of the state"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"context")," (object) - an object that extends ",(0,r.mdx)("inlineCode",{parentName:"li"},"TContext")," and narrows the shape of the context to what it should be in this state.")),(0,r.mdx)("h4",{id:"example-2"},"Example"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"interface User {\n  name: string;\n}\n\ninterface UserContext {\n  user?: User;\n  error?: string;\n}\n\ntype UserEvent =\n  | { type: 'FETCH'; id: string }\n  | { type: 'RESOLVE'; user: User }\n  | { type: 'REJECT'; error: string };\n\ntype UserState =\n  | {\n      value: 'idle';\n      context: UserContext & {\n        user: undefined;\n        error: undefined;\n      };\n    }\n  | {\n      value: 'loading';\n      context: UserContext;\n    }\n  | {\n      value: 'success';\n      context: UserContext & { user: User; error: undefined };\n    }\n  | {\n      value: 'failure';\n      context: UserContext & { user: undefined; error: string };\n    };\n\nconst userMachine = createMachine<UserContext, UserEvent, UserState>({\n  /* ... */\n});\n\nconst userService = interpret(userMachine);\n\nuserService.subscribe((state) => {\n  if (state.matches('success')) {\n    // from UserState, `user` will be defined\n    state.context.user.name;\n  }\n});\n")),(0,r.mdx)("h2",{id:"example-3"},"Example"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { createMachine, assign, interpret } from '@xstate/fsm';\n\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  context: { redLights: 0 },\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: {\n          target: 'red',\n          actions: () => console.log('Going to red!')\n        }\n      }\n    },\n    red: {\n      entry: assign({ redLights: (ctx) => ctx.redLights + 1 }),\n      on: {\n        TIMER: 'green'\n      }\n    }\n  }\n});\n\nconst lightService = interpret(lightMachine);\n\nlightService.subscribe((state) => {\n  console.log(state);\n});\n\nlightService.start();\nlightService.send('TIMER');\nlightService.send('TIMER');\n// => logs {\n//   value: 'red',\n//   context: { redLights: 1 },\n//   actions: [],\n//   changed: true\n// }\n")))}p.isMDXComponent=!0}}]);