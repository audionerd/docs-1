"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[22743],{3905:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>d,MDXProvider:()=>p,mdx:()=>x,useMDXComponents:()=>c,withMDXComponents:()=>m});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},s.apply(this,arguments)}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=n.createContext({}),m=function(e){return function(t){var a=c(t.components);return n.createElement(e,s({},t,{components:a}))}},c=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,s=e.originalType,r=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(a),p=i,h=m["".concat(r,".").concat(p)]||m[p]||u[p]||s;return a?n.createElement(h,o(o({ref:t},d),{},{components:a})):n.createElement(h,o({ref:t},d))}));function x(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=a.length,r=new Array(s);r[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var d=2;d<s;d++)r[d]=a[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},16768:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var n=a(87462),i=(a(67294),a(3905));const s={title:"Redux is half of a pattern (1/2)",description:"Learn how Redux, and all other state management libraries, have one thing in common - they are all partial implementations of state machines - and how we can improve the way we model app state and logic.",tags:["redux","state machine","statechart","state"],date:new Date("2020-01-20T00:00:00.000Z"),authors:["david"],image:"/blog/2020-01-20-redux-is-half-a-pattern-1-2.png",slug:"2020-01-20-redux-is-half-a-pattern-1-2"},r=void 0,o={permalink:"/statelyai-docs/blog/2020-01-20-redux-is-half-a-pattern-1-2",editUrl:"https://github.com/statelyai/docs/edit/main/blog/2020-01-20-redux-is-half-a-pattern-1-2/index.mdx",source:"@site/blog/2020-01-20-redux-is-half-a-pattern-1-2/index.mdx",title:"Redux is half of a pattern (1/2)",description:"Learn how Redux, and all other state management libraries, have one thing in common - they are all partial implementations of state machines - and how we can improve the way we model app state and logic.",date:"2020-01-20T00:00:00.000Z",formattedDate:"January 20, 2020",tags:[{label:"redux",permalink:"/statelyai-docs/blog/tags/redux"},{label:"state machine",permalink:"/statelyai-docs/blog/tags/state-machine"},{label:"statechart",permalink:"/statelyai-docs/blog/tags/statechart"},{label:"state",permalink:"/statelyai-docs/blog/tags/state"}],readingTime:18.495,hasTruncateMarker:!0,authors:[{name:"David Khourshid",title:"Stately Team",url:"https://github.com/davidkpiano",imageURL:"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png",key:"david"}],frontMatter:{title:"Redux is half of a pattern (1/2)",description:"Learn how Redux, and all other state management libraries, have one thing in common - they are all partial implementations of state machines - and how we can improve the way we model app state and logic.",tags:["redux","state machine","statechart","state"],date:"2020-01-20T00:00:00.000Z",authors:["david"],image:"/blog/2020-01-20-redux-is-half-a-pattern-1-2.png",slug:"2020-01-20-redux-is-half-a-pattern-1-2"},prevItem:{title:"Redux is half of a pattern (2/2)",permalink:"/statelyai-docs/blog/2020-05-22-redux-is-half-a-pattern-2-2"},nextItem:{title:"XState: version 4.7 and the future",permalink:"/statelyai-docs/blog/2019-12-09-xstate-version-47-and-the-future"}},l={authorsImageUrls:[void 0]},d=[{value:"What is a finite state machine?",id:"what-is-a-finite-state-machine",level:2},{value:"What about state that is not finite?",id:"what-about-state-that-is-not-finite",level:2},{value:"How does Redux compare to a finite state machine?",id:"how-does-redux-compare-to-a-finite-state-machine",level:2},{value:"Difference: finite &amp; extended states",id:"difference-finite--extended-states",level:2},{value:"Difference: events vs. actions",id:"difference-events-vs-actions",level:2},{value:"Difference: explicit transitions",id:"difference-explicit-transitions",level:2},{value:"Difference: declarative effects",id:"difference-declarative-effects",level:2},{value:"Difference: sync vs. async data flow",id:"difference-sync-vs-async-data-flow",level:2},{value:"To be continued",id:"to-be-continued",level:2}],m=(c="Tweet",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",e)});var c;const p={toc:d};function u(e){let{components:t,...a}=e;return(0,i.mdx)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("head",null,(0,i.mdx)("link",{rel:"canonical",href:"https://dev.to/davidkpiano/redux-is-half-of-a-pattern-1-2-1hd7"})),(0,i.mdx)("p",null,"Redux is fantastic."),(0,i.mdx)("p",null,"Some of you might disagree, so let me tell you why."),(0,i.mdx)("p",null,"Over the last few years, Redux has popularized the idea of using message-passing (also known as ",(0,i.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Event-driven_programming"},"event-driven programming"),') to manage application state. Instead of making arbitrary method calls to various class instances or mutating data structures, we now can think of state as being in a "predictable container" that only changes as a reaction to these "events".'),(0,i.mdx)("p",null,"This simple idea and implementation is universal enough to be used with any framework (or no framework at all), and has inspired libraries for other popular frameworks such as:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://vuex.vuejs.org/"},"Vuex")," for Vue"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://ngrx.io/"},"NgRx")," for Angular")),(0,i.mdx)("p",null,"However, Redux has recently come under scrutiny by some prominent developers in the web community:"),(0,i.mdx)(m,{id:"1191487232038883332",mdxType:"Tweet"}),(0,i.mdx)(m,{id:"1195126928799227905",mdxType:"Tweet"}),(0,i.mdx)("p",null,"If you don't know these developers, they are the co-creators of Redux themselves. So why have Dan and Andrew, and many other developers, all but forsaken the use of Redux in applications?"),(0,i.mdx)("p",null,"The ideas and patterns in Redux appear sound and reasonable, and Redux is still used in many large-scale production apps today. However, it forces a certain architecture in your application:"),(0,i.mdx)(m,{id:"1025408731805184000",mdxType:"Tweet"}),(0,i.mdx)("p",null,"As it turns out, this kind of single-atom immutable architecture is ",(0,i.mdx)("em",{parentName:"p"},"not natural")," nor does it represent how any software application works (nor should work) in the real-world."),(0,i.mdx)("p",null,"Redux is an alternative implementation of Facebook's ",(0,i.mdx)("a",{parentName:"p",href:"https://facebook.github.io/flux"},'Flux "pattern"'),". Many sticking points and hardships with Facebook's implementation have led developers to seek out alternative, nicer, more developer-friendly APIs such as Redux, Alt, Reflux, Flummox, ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/kriasoft/react-starter-kit/issues/22"},"and many more."),". Redux emerged as a ",(0,i.mdx)("a",{parentName:"p",href:"https://facebook.github.io/flux/docs/related-libraries/#redux---alternative-state-management"},"clear winner"),", and it is stated that Redux combines the ideas from:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://www.wikiwand.com/en/Command_pattern"},"The Command pattern")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://guide.elm-lang.org/architecture/"},"The Elm Architecture"))),(0,i.mdx)("p",null,"However, not even the Elm architecture is a standalone architecture/pattern, as it is based on fundamental patterns, whether developers know it or not:"),(0,i.mdx)("blockquote",null,(0,i.mdx)("p",{parentName:"blockquote"},"Rather than someone inventing it, early Elm programmers kept discovering the same basic patterns in their code. It was kind of spooky to see people ending up with well-architected code without planning ahead!")),(0,i.mdx)(m,{id:"1202580315652448263",mdxType:"Tweet"}),(0,i.mdx)("p",null,"In this post, I will highlight some of the reasons that Redux is ",(0,i.mdx)("em",{parentName:"p"},"not")," a standalone pattern by comparing it to a fundamental, well-established pattern: the ",(0,i.mdx)("strong",{parentName:"p"},"finite state machine"),". This is not an arbitrary choice; every single application that we write is basically a state machine, whether we know it or not. The difference is that the state machines we write are implicitly defined."),(0,i.mdx)("p",null,"I hope that some of these comparisons and differences will help you realize how some of the common pain points in Redux-driven applications materialize, and how you can use this existing pattern to help you craft a better state management architecture, whether you're using Redux, another library, or no library at all."),(0,i.mdx)("h2",{id:"what-is-a-finite-state-machine"},"What is a finite state machine?"),(0,i.mdx)("p",null,"(Taken from another article I wrote, ",(0,i.mdx)("a",{parentName:"p",href:"https://medium.com/@DavidKPiano/the-facetime-bug-and-the-dangers-of-implicit-state-machines-a5f0f61bdaa2"},"The FaceTime Bug and the Dangers of Implicit State Machines"),"):"),(0,i.mdx)("p",null,"Wikipedia has a ",(0,i.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Finite-state_machine"},"useful but technical description")," on what a finite state machine is. In essence, a finite state machine is a computational model centered around states, events, and transitions between states. To make it simpler, think of it this way:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Any software you make can be described in a ",(0,i.mdx)("strong",{parentName:"li"},"finite number of states")," (e.g., ",(0,i.mdx)("inlineCode",{parentName:"li"},"idle"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"loading"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"success"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"error"),")"),(0,i.mdx)("li",{parentName:"ul"},"You can only be in ",(0,i.mdx)("strong",{parentName:"li"},"one")," of those states at any given time (e.g., you can\u2019t be in the ",(0,i.mdx)("inlineCode",{parentName:"li"},"success")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},"error")," states at the same time)"),(0,i.mdx)("li",{parentName:"ul"},"You always start at some ",(0,i.mdx)("strong",{parentName:"li"},"initial state")," (e.g., ",(0,i.mdx)("inlineCode",{parentName:"li"},"idle"),")"),(0,i.mdx)("li",{parentName:"ul"},"You move from state to state, or ",(0,i.mdx)("strong",{parentName:"li"},"transition"),", based on events (e.g., from the ",(0,i.mdx)("inlineCode",{parentName:"li"},"idle")," state, when the ",(0,i.mdx)("inlineCode",{parentName:"li"},"LOAD")," event occurs, you immediately transition to the ",(0,i.mdx)("inlineCode",{parentName:"li"},"loading")," state)")),(0,i.mdx)("p",null,"It\u2019s like the software that you\u2019re used to writing, but with more explicit rules. You might have been used to writing ",(0,i.mdx)("inlineCode",{parentName:"p"},"isLoading")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"isSuccess")," as Boolean flags before, but state machines make it so that you\u2019re not allowed to have ",(0,i.mdx)("inlineCode",{parentName:"p"},"isLoading === true && isSuccess === true")," at the same time."),(0,i.mdx)("p",null,"It also makes it ",(0,i.mdx)("em",{parentName:"p"},"visually clear"),' that event handlers can only do one main thing: forward their events to a state machine. They\u2019re not allowed to \u201cescape\u201d the state machine and execute business logic, just like real-world physical devices: buttons on calculators or ATMs don\u2019t actually do operations or execute actions; rather, they send "signals" to some central unit that manages (or ',(0,i.mdx)("em",{parentName:"p"},"orchestrates"),') state, and that unit decides what should happen when it receives that "signal".'),(0,i.mdx)("h2",{id:"what-about-state-that-is-not-finite"},"What about state that is not finite?"),(0,i.mdx)("p",null,"With state machines, especially ",(0,i.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/UML_state_machine"},"UML state machines (a.k.a. statecharts)"),', "state" refers to something different than the data that doesn\'t fit neatly into finite states, but both "state" and what\'s known as ',(0,i.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/UML_state_machine#Extended_states"},'"extended state"')," work together."),(0,i.mdx)("p",null,"For example, let's consider water \ud83d\udeb0. It can fit into one of four phases, and we consider these the ",(0,i.mdx)("em",{parentName:"p"},"states")," of water:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"liquid")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"solid")," (e.g., ice, frost)"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"gas")," (e.g., vapor, steam)"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"plasma"))),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"https://www.uml-diagrams.org/examples/water-phase-uml-state-machine-diagram-example.html"},(0,i.mdx)("img",{parentName:"a",src:"https://www.uml-diagrams.org/examples/state-machine-example-water.png",alt:"Water phase UML state machine diagram"}))),(0,i.mdx)("blockquote",null,(0,i.mdx)("p",{parentName:"blockquote"},"Water phase UML state machine diagram from ",(0,i.mdx)("a",{parentName:"p",href:"https://www.uml-diagrams.org/examples/water-phase-uml-state-machine-diagram-example.html"},"uml-diagrams.com"))),(0,i.mdx)("p",null,"However, the temperature of water is a ",(0,i.mdx)("em",{parentName:"p"},"continuous")," measurement, not a discrete one, and it can't be represented in a finite way. Despite this, water temperature can be represented alongside the finite state of water, e.g.:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"liquid")," where ",(0,i.mdx)("inlineCode",{parentName:"li"},"temperature === 90")," (celsius)"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"solid")," where ",(0,i.mdx)("inlineCode",{parentName:"li"},"temperature === -5")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"gas")," where ",(0,i.mdx)("inlineCode",{parentName:"li"},"temperature === 500"))),(0,i.mdx)("p",null,"There's many ways to represent the combination of finite and extended state in your application. For the water example, I would personally call the finite state ",(0,i.mdx)("inlineCode",{parentName:"p"},"value"),' (as in the "finite state value") and the extended state ',(0,i.mdx)("inlineCode",{parentName:"p"},"context"),' (as in "',(0,i.mdx)("em",{parentName:"p"},"contextual"),' data"):'),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'const waterState = {\n  value: "liquid", // finite state\n  context: {\n    // extended state\n    temperature: 90,\n  },\n};\n')),(0,i.mdx)("p",null,"But you're free to represent it in other ways:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'const waterState = {\n  phase: "liquid", // finite state\n  data: {\n    // extended state\n    temperature: 90,\n  },\n};\n\n// or...\n\nconst waterState = {\n  status: "liquid", // finite state\n  temperature: 90, // anything not \'status\' is extended state\n};\n')),(0,i.mdx)("p",null,"The key point is that there is a clear distinction between ",(0,i.mdx)("strong",{parentName:"p"},"finite")," and ",(0,i.mdx)("strong",{parentName:"p"},"extended")," state, and there is logic that prevents the application from reaching an ",(0,i.mdx)("em",{parentName:"p"},"impossible state"),", e.g.:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"const waterState = {\n  isLiquid: true,\n  isGas: true, // \ud83d\udeb1 Water can't be both liquid and gas simultaneously!\n  temperature: -50, // \u2744\ufe0f This is ice!! What's going on??\n};\n")),(0,i.mdx)("p",null,"And we can extend these examples to realistic code, such as changing this:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"const userState = {\n  isLoading: true,\n  isSuccess: false,\n  user: null,\n  error: null,\n};\n")),(0,i.mdx)("p",null,"To something like this:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"const userState = {\n  status: \"loading\", // or 'idle' or 'error' or 'success'\n  user: null,\n  error: null,\n};\n")),(0,i.mdx)("p",null,"This prevents impossible states like ",(0,i.mdx)("inlineCode",{parentName:"p"},"userState.isLoading === true")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"userState.isSuccess === true")," happening simultaneously."),(0,i.mdx)("h2",{id:"how-does-redux-compare-to-a-finite-state-machine"},"How does Redux compare to a finite state machine?"),(0,i.mdx)("p",null,"The reason I'm comparing Redux to a state machine is because, from a birds-eye view, their state management models look pretty similar. For Redux:"),(0,i.mdx)("blockquote",null,(0,i.mdx)("p",{parentName:"blockquote"},(0,i.mdx)("inlineCode",{parentName:"p"},"state")," + ",(0,i.mdx)("inlineCode",{parentName:"p"},"action")," = ",(0,i.mdx)("inlineCode",{parentName:"p"},"newState"))),(0,i.mdx)("p",null,"For state machines:"),(0,i.mdx)("blockquote",null,(0,i.mdx)("p",{parentName:"blockquote"},(0,i.mdx)("inlineCode",{parentName:"p"},"state")," + ",(0,i.mdx)("inlineCode",{parentName:"p"},"event")," = ",(0,i.mdx)("inlineCode",{parentName:"p"},"newState")," + ",(0,i.mdx)("inlineCode",{parentName:"p"},"effects"))),(0,i.mdx)("p",null,"In code, these can even be represented the same way, by using a ",(0,i.mdx)("a",{parentName:"p",href:"https://redux.js.org/basics/reducers/"},"reducer"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'function userReducer(state, event) {\n  // Return the next state, which is\n  // determined based on the current `state`\n  // and the received `event` object\n\n  // This nextState may contain a "finite"\n  // state value, as well as "extended"\n  // state values.\n\n  // It may also contain side-effects\n  // to be executed by some interpreter.\n  return nextState;\n}\n')),(0,i.mdx)("p",null,'There are already some subtle differences, such as "action" vs. "event" or how extended state machines model side-effects (',(0,i.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/UML_state_machine#Actions_and_transitions"},"they do"),"). Dan Abramov even recognizes some of the differences:"),(0,i.mdx)(m,{id:"1064661742188417029",mdxType:"Tweet"}),(0,i.mdx)("p",null,"A reducer can be used to implement a finite state machine, but most reducers are ",(0,i.mdx)("em",{parentName:"p"},"not")," modeled as finite state machines. Let's change that by learning some of the differences between Redux and state machines."),(0,i.mdx)("h2",{id:"difference-finite--extended-states"},"Difference: finite & extended states"),(0,i.mdx)("p",null,'Typically, a Redux reducer\'s state will not make a clear distinction between "finite" and "extended" states, as previously mentioned above. This is an important concept in state machines: an application is always in ',(0,i.mdx)("em",{parentName:"p"},"exactly one"),' of a finite number of "states", and the rest of its data is represented as its extended state.'),(0,i.mdx)("p",null,"Finite states can be introduced to a reducer by making an explicit property that represents exactly one of the many possible states:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'const initialUserState = {\n  status: "idle", // explicit finite state\n  user: null,\n  error: null,\n};\n')),(0,i.mdx)("p",null,"What's great about this is that, if you're using TypeScript, you can take advantage of using ",(0,i.mdx)("a",{parentName:"p",href:"https://basarat.gitbooks.io/typescript/docs/types/discriminated-unions.html"},"discriminated unions")," to make impossible states impossible:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'interface User {\n  name: string;\n  avatar: string;\n}\n\ntype UserState =\n  | { status: "idle", user: null, error: null }\n  | { status: "loading", user: null, error: null }\n  | { status: "success", user: User, error: null }\n  | { status: "failure", user: null, error: string };\n')),(0,i.mdx)("h2",{id:"difference-events-vs-actions"},"Difference: events vs. actions"),(0,i.mdx)("p",null,"In ",(0,i.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/UML_state_machine#Actions_and_transitions"},"state machine terminology"),', an "action" is a side-effect that occurs as the result of a transition:'),(0,i.mdx)("blockquote",null,(0,i.mdx)("p",{parentName:"blockquote"},"When an event instance is dispatched, the state machine responds by ",(0,i.mdx)("strong",{parentName:"p"},"performing actions"),", such as changing a variable, performing I/O, invoking a function, generating another event instance, or changing to another state.")),(0,i.mdx)("p",null,'This isn\'t the only reason that using the term "action" to describe something that causes a state transition is confusing; "action" also suggests something that needs to be done (i.e., a command), rather than something that just happened (i.e., an event).'),(0,i.mdx)("p",null,"So keep the following terminology in mind when we talk about state machines:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"An ",(0,i.mdx)("strong",{parentName:"li"},"event")," describes something that occurred. Events trigger state transitions."),(0,i.mdx)("li",{parentName:"ul"},"An ",(0,i.mdx)("strong",{parentName:"li"},"action")," describes a side-effect that should occur as a ",(0,i.mdx)("em",{parentName:"li"},"response")," to a state transition.")),(0,i.mdx)("p",null,"The ",(0,i.mdx)("a",{parentName:"p",href:"https://redux.js.org/style-guide/style-guide/"},"Redux style guide")," also directly suggests modeling actions as events:"),(0,i.mdx)("blockquote",null,(0,i.mdx)("p",{parentName:"blockquote"},'However, we recommend trying to treat actions more as "describing events that occurred", rather than "setters". Treating actions as "events" generally leads to more meaningful action names, fewer total actions being dispatched, and a more meaningful action log history.'),(0,i.mdx)("p",{parentName:"blockquote"},(0,i.mdx)("em",{parentName:"p"},"Source: ",(0,i.mdx)("a",{parentName:"em",href:"https://redux.js.org/style-guide/style-guide/#model-actions-as-events-not-setters"},"Redux style guide: Model actions as events, not setters")))),(0,i.mdx)("p",null,'When the word "event" is used in this article, that has the same meaning as a conventional Redux action object. For side-effects, the word "effect" will be used.'),(0,i.mdx)(m,{id:"1218698479872040960",mdxType:"Tweet"}),(0,i.mdx)("h2",{id:"difference-explicit-transitions"},"Difference: explicit transitions"),(0,i.mdx)("p",null,"Another fundamental part of how state machines work are ",(0,i.mdx)("strong",{parentName:"p"},"transitions"),". A transition describes how one finite state transitions to another finite state due to an event. This can be represented using boxes and arrows:"),(0,i.mdx)("p",null,(0,i.mdx)("img",{parentName:"p",src:"https://thepracticaldev.s3.amazonaws.com/i/9cerj02qg66buqdmjrmq.png",alt:"State machine describing login flow"})),(0,i.mdx)("p",null,"This diagram makes it clear that it's impossible to transition directly from, e.g., ",(0,i.mdx)("inlineCode",{parentName:"p"},"idle")," to ",(0,i.mdx)("inlineCode",{parentName:"p"},"success")," or from ",(0,i.mdx)("inlineCode",{parentName:"p"},"success")," to ",(0,i.mdx)("inlineCode",{parentName:"p"},"error"),". There are clear sequences of events that need to occur to transition from one state to another."),(0,i.mdx)("p",null,"However, the way that developers tend to model reducers is by determining the next state solely on the received event:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"function userReducer(state, event) {\n  switch (event.type) {\n    case \"FETCH\":\n    // go to some 'loading' state\n    case \"RESOLVE\":\n    // go to some 'success' state\n    case \"REJECT\":\n    // go to some 'error' state\n    default:\n      return state;\n  }\n}\n")),(0,i.mdx)("p",null,"The problem with managing state this way is that it does not prevent ",(0,i.mdx)("em",{parentName:"p"},"impossible transitions"),". Have you ever seen a screen that briefly displays an error, and then shows some success view? If you haven't, browse ",(0,i.mdx)("a",{parentName:"p",href:"https://reddit.com"},"Reddit"),", and do the following steps:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Search for anything."),(0,i.mdx)("li",{parentName:"ol"},'Click on the "Posts" tab while the search is happening.'),(0,i.mdx)("li",{parentName:"ol"},'Say "aha!" and wait a couple seconds.')),(0,i.mdx)("p",null,"In step 3, you'll probably see something like this (visible at the time of publishing this article):"),(0,i.mdx)("p",null,(0,i.mdx)("img",{parentName:"p",src:"https://i.imgur.com/NJnApBV.gif",alt:"Reddit bug showing no search results"})),(0,i.mdx)("p",null,"After a couple seconds, this unexpected view will disappear and you will finally see search results. This bug has been present for a while, and even though it's innocuous, it's not the best user experience, and it can definitely be considered faulty logic."),(0,i.mdx)("p",null,"However it is implemented (Reddit ",(0,i.mdx)("em",{parentName:"p"},"does")," use Redux...), something is definitely wrong: ",(0,i.mdx)("em",{parentName:"p"},"an impossible state transition happened"),'. It makes absolutely no sense to transition directly from the "error" view to the "success" view, and in this case, the user shouldn\'t see an "error" view anyway because it\'s not an error; it\'s still loading!'),(0,i.mdx)("p",null,"You might be looking through your existing Redux reducers and realize where this potential bug may surface, because by basing state transitions only on events, these impossible transitions become possible to occur. Sprinkling if-statements all over your reducer might alleviate the symptoms of this:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'function userReducer(state, event) {\n  switch (event.type) {\n    case "FETCH":\n      if (state.status !== "loading") {\n        // go to some \'loading\' state...\n        // but ONLY if we\'re not already loading\n      }\n\n    // ...\n  }\n}\n')),(0,i.mdx)("p",null,"But that only makes your state logic harder to follow because the state transitions are ",(0,i.mdx)("em",{parentName:"p"},"not explicit"),". Even though it might be a little more verbose, it's better to determine the next state based on both the current finite state and the event, rather than just on the event:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'function userReducer(state, event) {\n  switch (state.status) {\n    case "idle":\n      switch (event.type) {\n        case "FETCH":\n        // go to some \'loading\' state\n\n        // ...\n      }\n\n    // ...\n  }\n}\n')),(0,i.mdx)("p",null,'You can even split this up into individual "finite state" reducers, to make things cleaner:'),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"function idleUserReducer(state, event) {\n  switch (event.type) {\n    case 'FETCH':\n      // go to some 'loading' state\n\n      // ...\n    }\n    default:\n      return state;\n  }\n}\n\nfunction userReducer(state, event) {\n  switch (state.status) {\n    case 'idle':\n      return idleUserReducer(state, event);\n    // ...\n  }\n}\n")),(0,i.mdx)("p",null,"But don't just take my word for it. The Redux style guide also strongly recommends treating your reducers as state machines:"),(0,i.mdx)("blockquote",null,(0,i.mdx)("p",{parentName:"blockquote"},"[...]",' treat reducers as "state machines", where the combination of both the current state and the dispatched action determines whether a new state value is actually calculated, not just the action itself unconditionally.'),(0,i.mdx)("p",{parentName:"blockquote"},(0,i.mdx)("em",{parentName:"p"},"Source: ",(0,i.mdx)("a",{parentName:"em",href:"https://redux.js.org/style-guide/style-guide/#treat-reducers-as-state-machines"},"Redux style guide: treat reducers as state machines")))),(0,i.mdx)("p",null,"I also talk about this idea in length in my post: ",(0,i.mdx)("a",{parentName:"p",href:"https://dev.to/davidkpiano/no-disabling-a-button-is-not-app-logic-598i"},"No, disabling a button is not app logic.")),(0,i.mdx)("h2",{id:"difference-declarative-effects"},"Difference: declarative effects"),(0,i.mdx)("p",null,"If you look at Redux in isolation, its strategy for managing and executing side-effects is this:"),(0,i.mdx)("blockquote",null,(0,i.mdx)("p",{parentName:"blockquote"},"\xaf","\\","_","(\u30c4)","_","/\xaf")),(0,i.mdx)("p",null,"That's right; Redux has no built-in way of handling side-effects. In any non-trivial application, you ",(0,i.mdx)("em",{parentName:"p"},"will")," have side-effects if you want to do anything useful, such as make a network request or kick off some sort of async process. Importantly enough, side-effects should ",(0,i.mdx)("em",{parentName:"p"},"not")," be considered an afterthought; they should be treated as a first-class citizen and uncompromisingly represented in your application logic."),(0,i.mdx)("p",null,"Unfortunately, with Redux, they are, and the only solution is to use ",(0,i.mdx)("a",{parentName:"p",href:"https://redux.js.org/advanced/middleware"},"middleware"),", which is inexplicably an advanced topic, despite being required for any non-trivial app logic:"),(0,i.mdx)("blockquote",null,(0,i.mdx)("p",{parentName:"blockquote"},"Without middleware, Redux store only supports synchronous data flow."),(0,i.mdx)("p",{parentName:"blockquote"},(0,i.mdx)("em",{parentName:"p"},"Source: ",(0,i.mdx)("a",{parentName:"em",href:"https://redux.js.org/advanced/async-flow"},"Redux docs: Async Flow")))),(0,i.mdx)("p",null,"With extended/UML state machines (also known as statecharts), these side-effects are known as ",(0,i.mdx)("strong",{parentName:"p"},"actions")," (and will be referred to as actions for the rest of this post) and are declaratively modeled. Actions are the direct result of a transition:"),(0,i.mdx)("blockquote",null,(0,i.mdx)("p",{parentName:"blockquote"},"When an event instance is dispatched, the state machine responds by ",(0,i.mdx)("strong",{parentName:"p"},"performing actions"),", such as changing a variable, performing I/O, invoking a function, generating another event instance, or changing to another state."),(0,i.mdx)("p",{parentName:"blockquote"},"_","Source: ",(0,i.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/UML_state_machine#Actions_and_transitions"},"(Wikipedia) UML State Machine: Actions and Transitions"))),(0,i.mdx)("p",null,'This means that when an event changes state, actions (effects) may be executed as a result, even if the state stays the same (known as a "self-transition"). Just like Newton said:'),(0,i.mdx)("blockquote",null,(0,i.mdx)("p",{parentName:"blockquote"},"For every action, there is an equal and opposite reaction."),(0,i.mdx)("p",{parentName:"blockquote"},(0,i.mdx)("em",{parentName:"p"},"Source: Newton's Third Law of Motion"))),(0,i.mdx)("p",null,"Actions ",(0,i.mdx)("em",{parentName:"p"},"never")," occur spontaneously, without cause; not in software, not in hardware, not in real life, never. There is ",(0,i.mdx)("em",{parentName:"p"},"always")," a cause for an action to occur, and with state machines, that cause is a state transition, due to a received event."),(0,i.mdx)("p",null,"Statecharts distinguish how actions are determined in three possible ways:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},"Entry actions")," are effects that are executed whenever a specific finite state is entered"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},"Exit actions")," are effects that are executed whenever a specific finite state is exited"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},"Transition actions")," are effects that are executed whenever a specific transition between two finite states is taken.")),(0,i.mdx)("p",null,"Fun fact: this is why statecharts are said to have the characteristic of both ",(0,i.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Mealy_machine"},"Mealy machines")," and ",(0,i.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Moore_machine"},"Moore machines"),":"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},'With Mealy machines, "output" (actions) depends on the state and the event (transition actions)'),(0,i.mdx)("li",{parentName:"ul"},'With Moore machines, "output" (actions) depends on just the state (entry & exit actions)')),(0,i.mdx)("p",null,"The original philosophy of Redux is that it did not want to be opinionated on how these side-effects are executed, which is why middleware such as ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/reduxjs/redux-thunk"},"redux-thunk")," and ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/redux-utilities/redux-promise"},"redux-promise"),' exist. These libraries work around the fact that Redux is side-effect-agnostic by having third-party, use-case specific "solutions" for handling different types of effects.'),(0,i.mdx)("p",null,"So how can this be solved? It may seem weird, but just like you can use a property to specify finite state, you can also use a property to specify ",(0,i.mdx)("em",{parentName:"p"},"actions that should be executed")," in a declarative way:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\ncase 'FETCH':\n  return {\n    ...state,\n\n    // finite state\n    status: 'loading',\n\n    // actions (effects) to execute\n    actions: [\n      { type: 'fetchUser', id: 42 }\n    ]\n  }\n// ...\n")),(0,i.mdx)("p",null,'Now, your reducer will return useful information that answers the question, "what side-effects (actions) should be executed as a result of this state transition?" The answer is clear and colocated right in your app state: read the ',(0,i.mdx)("inlineCode",{parentName:"p"},"actions")," property for a declarative description of the actions to be executed, and execute them:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// pretend the state came from a Redux React hook\nconst { actions } = state;\n\nuseEffect(() => {\n  actions.forEach((action) => {\n    if (action.type === "fetchUser") {\n      fetch(`/api/user/${action.id}`)\n        .then((res) => res.json())\n        .then((data) => {\n          dispatch({ type: "RESOLVE", user: data });\n        });\n    }\n    // ... etc. for other action implementations\n  });\n}, [actions]);\n')),(0,i.mdx)("p",null,"Having side-effects modeled declaratively in some ",(0,i.mdx)("inlineCode",{parentName:"p"},"state.actions")," property (or similar) has some great benefits, such as in predicting/testing or being able to trace when actions will or have been executed, as well as being able to customize the implementation details of executing those actions. For instance, the ",(0,i.mdx)("inlineCode",{parentName:"p"},"fetchUser")," action can be changed to read from a cache instead, all without changing any of the logic in the reducer."),(0,i.mdx)("h2",{id:"difference-sync-vs-async-data-flow"},"Difference: sync vs. async data flow"),(0,i.mdx)("p",null,"The fact is that middleware is indirection. It fragments your application logic by having it present in multiple places (the reducers and the middleware) without a clear, cohesive understanding of how they work together. Furthermore, it makes some use-cases easier but others much more difficult. For example: take this example from the ",(0,i.mdx)("a",{parentName:"p",href:"https://redux.js.org/advanced/example-reddit-api"},"Redux advanced tutorial"),", which uses ",(0,i.mdx)("inlineCode",{parentName:"p"},"redux-thunk"),' to allow dispatching a "thunk" for making an async request:'),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"function fetchPosts(subreddit) {\n  return (dispatch) => {\n    dispatch(requestPosts(subreddit));\n    return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n      .then((response) => response.json())\n      .then((json) => dispatch(receivePosts(subreddit, json)));\n  };\n}\n")),(0,i.mdx)("p",null,"Now ask yourself: ",(0,i.mdx)("em",{parentName:"p"},"how can I cancel this request?")," With ",(0,i.mdx)("inlineCode",{parentName:"p"},"redux-thunk"),", it simply isn't possible. And if your answer is to \"choose a different middleware\", you just validated the previous point. Modeling logic should not be a question of which middleware you choose, and middleware shouldn't even be part of the state modeling process."),(0,i.mdx)("p",null,"As previously mentioned, the only way to model async data flow with Redux is by using middleware. And with all the possible use-cases, from thunks to Promises to sagas (generators) to epics (observables) and more, the ecosystem has plenty of different solutions for these. But the ideal number of solutions is ",(0,i.mdx)("em",{parentName:"p"},"one"),": the solution provided by the pattern in use."),(0,i.mdx)("p",null,"Alright, so how do state machines solve the async data flow problem?"),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"They don't.")),(0,i.mdx)("p",null,"To clarify, state machines do not distinguish between sync and async data flows, because there is no difference. This is such an important realization to make, because not only does it simplify the idea of data flow, but it also models how things work in real life:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},'A state transition (triggered by a received event) always occurs in "zero-time"; that is, states synchronously transition.'),(0,i.mdx)("li",{parentName:"ul"},"Events can be received at any time.")),(0,i.mdx)("p",null,"There is no such thing as an asynchronous transition. For example, modeling data fetching doesn't look like this:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"idle . . . . . . . . . . . . success\n")),(0,i.mdx)("p",null,"Instead, it looks like this:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-html"},"idle --(FETCH)--\x3e loading --(RESOLVE)--\x3e success\n")),(0,i.mdx)("p",null,"Everything is the result of some event triggering a state transition. Middleware obscures this fact. If you're curious how async cancellation can be handled in a synchronous state transition manner, here's a couple of guiding points for a potential implementation:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"A cancellation intent is an ",(0,i.mdx)("em",{parentName:"li"},"event")," (e.g., ",(0,i.mdx)("inlineCode",{parentName:"li"},"{ type: 'CANCEL' }"),")"),(0,i.mdx)("li",{parentName:"ul"},"Cancelling an in-flight request is an ",(0,i.mdx)("em",{parentName:"li"},"action")," (i.e., side-effect)"),(0,i.mdx)("li",{parentName:"ul"},'"Canceled" is a state, whether it\'s a specific state (e.g., ',(0,i.mdx)("inlineCode",{parentName:"li"},"canceled"),") or a state where a request shouldn't be active (e.g., ",(0,i.mdx)("inlineCode",{parentName:"li"},"idle"),")")),(0,i.mdx)("h2",{id:"to-be-continued"},"To be continued"),(0,i.mdx)("p",null,'It is possible to model application state in Redux to be more like a finite state machine, and it is good to do so for many reasons. The applications that we write have different modes, or "behaviors", that vary depending on which "state" it\'s in. Before, this state might have been implicit. But now, with finite states, you can group behavior by these finite states (such as ',(0,i.mdx)("inlineCode",{parentName:"p"},"idle"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"loading"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"success"),", etc.), which makes the overall app logic much more clear, and prevents the app from getting stuck in an impossible state."),(0,i.mdx)("p",null,"Finite states also make clear what events can do, depending on which state it's in, as well as what all the possible states are in an application. Additionally, they can map one-to-one to views in user interfaces."),(0,i.mdx)("p",null,"But most importantly, state machines are present in all of the software that you write, and they have been for over half a century. Making finite state machines explicit brings clarity and robustness to complex app logic, and it is possible to implement them in any libraries that you use (or even no library at all)."),(0,i.mdx)("p",null,"In the next post, we'll talk about how the Redux atomic global store is also half of a pattern, the challenges it presents, and how it compares to another well-known model of computation (the Actor model)."))}u.isMDXComponent=!0}}]);