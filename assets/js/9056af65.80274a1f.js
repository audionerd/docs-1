"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[68730],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>l,MDXProvider:()=>p,mdx:()=>x,useMDXComponents:()=>d,withMDXComponents:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){return function(t){var n=d(t.components);return a.createElement(e,o({},t,{components:n}))}},d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=d(n),p=r,h=m["".concat(i,".").concat(p)]||m[p]||u[p]||o;return n?a.createElement(h,s(s({ref:t},l),{},{components:n})):a.createElement(h,s({ref:t},l))}));function x(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},26072:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={title:"Actions vs. actors",description:"Sometimes it\u2019s unclear whether you should use an action or an actor. Both appear to do similar things, executing side effects. Let\u2019s break down the differences."},i="Actions vs. actors",s={unversionedId:"xstate/actors/actions-vs-actors",id:"version-4/xstate/actors/actions-vs-actors",title:"Actions vs. actors",description:"Sometimes it\u2019s unclear whether you should use an action or an actor. Both appear to do similar things, executing side effects. Let\u2019s break down the differences.",source:"@site/versioned_docs/version-4/xstate/actors/actions-vs-actors.mdx",sourceDirName:"xstate/actors",slug:"/xstate/actors/actions-vs-actors",permalink:"/statelyai-docs/docs/xstate-v4/xstate/actors/actions-vs-actors",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/actors/actions-vs-actors.mdx",tags:[],version:"4",frontMatter:{title:"Actions vs. actors",description:"Sometimes it\u2019s unclear whether you should use an action or an actor. Both appear to do similar things, executing side effects. Let\u2019s break down the differences."},sidebar:"tutorialSidebar",previous:{title:"Promises",permalink:"/statelyai-docs/docs/xstate-v4/xstate/actors/promises"},next:{title:"Callbacks",permalink:"/statelyai-docs/docs/xstate-v4/xstate/actors/callbacks"}},c={},l=[],m={toc:l};function d(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"actions-vs-actors"},"Actions vs. actors"),(0,r.mdx)("p",null,"Sometimes it\u2019s unclear whether you should use an action or an actor. Both appear to do similar things, executing side effects. Let\u2019s break down the differences:"),(0,r.mdx)("p",null,"Actions are \u201cfire-and-forget\u201d; as soon as their execution starts, the statechart running the actions forgets about them. If you specify an action as ",(0,r.mdx)("inlineCode",{parentName:"p"},"async"),", ",(0,r.mdx)("strong",{parentName:"p"},"the action won\u2019t be awaited before moving to the next state"),". Below is an example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine(\n  {\n    context: {\n      userName: '',\n    },\n    initial: 'collectingFormDetails',\n    states: {\n      collectingFormDetails: {\n        on: {\n          SUBMIT: {\n            actions: 'submitForm',\n            target: 'submitted',\n          },\n        },\n      },\n      submitted: {},\n    },\n  },\n  {\n    actions: {\n      submitForm: async (context) => {\n        await createUser(context.userName);\n      },\n    },\n  }\n);\n")),(0,r.mdx)("p",null,"You might think that the sequence would work as follows:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"In the ",(0,r.mdx)("inlineCode",{parentName:"li"},"collectingFormDetails")," state, we receive the ",(0,r.mdx)("inlineCode",{parentName:"li"},"SUBMIT")," event."),(0,r.mdx)("li",{parentName:"ol"},"We execute the ",(0,r.mdx)("inlineCode",{parentName:"li"},"submitForm")," action and wait for it to finish."),(0,r.mdx)("li",{parentName:"ol"},"When the ",(0,r.mdx)("inlineCode",{parentName:"li"},"submitForm")," action is done, we go to the ",(0,r.mdx)("inlineCode",{parentName:"li"},"submitted")," state.")),(0,r.mdx)("p",null,"Instead, the sequence works like this:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"In the ",(0,r.mdx)("inlineCode",{parentName:"li"},"collectingFormDetails")," state, we receive the ",(0,r.mdx)("inlineCode",{parentName:"li"},"SUBMIT")," event."),(0,r.mdx)("li",{parentName:"ol"},"We execute the ",(0,r.mdx)("inlineCode",{parentName:"li"},"submitForm")," action and immediately transition to the ",(0,r.mdx)("inlineCode",{parentName:"li"},"submitted")," state."),(0,r.mdx)("li",{parentName:"ol"},"The result of the ",(0,r.mdx)("inlineCode",{parentName:"li"},"submitForm")," action is ignored.")),(0,r.mdx)("p",null,"To handle ",(0,r.mdx)("inlineCode",{parentName:"p"},"submitForm")," properly, we need to use an actor:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine(\n  {\n    context: {\n      userName: '',\n    },\n    initial: 'collectingFormDetails',\n    states: {\n      collectingFormDetails: {\n        on: {\n          SUBMIT: {\n            // highlight-start\n            target: 'submitting',\n            // highlight-end\n          },\n        },\n      },\n      // highlight-start\n      submitting: {\n        invoke: {\n          src: 'submitForm',\n          onDone: {\n            target: 'submitted',\n          },\n          onError: {\n            target: 'errored',\n          },\n        },\n      },\n      // highlight-end\n      errored: {},\n      submitted: {},\n    },\n  },\n  {\n    // `actors` in v5\n    services: {\n      submitForm: async (context) => {\n        await createUser(context.userName);\n      },\n    },\n  }\n);\n")),(0,r.mdx)("admonition",{type:"warningxstate"},(0,r.mdx)("p",{parentName:"admonition"},"XState v5 is in beta. ",(0,r.mdx)("a",{parentName:"p",href:"https://www.npmjs.com/package/xstate/v/5.0.0-beta.13"},"Check out XState v5 Beta on NPM"),".")),(0,r.mdx)("p",null,"Now, the sequence in the example above is:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"In the ",(0,r.mdx)("inlineCode",{parentName:"li"},"collectingFormDetails")," state, we receive the ",(0,r.mdx)("inlineCode",{parentName:"li"},"SUBMIT")," event."),(0,r.mdx)("li",{parentName:"ol"},"We go to the ",(0,r.mdx)("inlineCode",{parentName:"li"},"submitting")," state, where we execute the ",(0,r.mdx)("inlineCode",{parentName:"li"},"submitForm")," actor."),(0,r.mdx)("li",{parentName:"ol"},"When the ",(0,r.mdx)("inlineCode",{parentName:"li"},"submitForm")," actor is done, we go to the ",(0,r.mdx)("inlineCode",{parentName:"li"},"submitted")," state."),(0,r.mdx)("li",{parentName:"ol"},"If the ",(0,r.mdx)("inlineCode",{parentName:"li"},"submitForm")," actor errors, we go to the ",(0,r.mdx)("inlineCode",{parentName:"li"},"errored")," state.")),(0,r.mdx)("p",null,"The main difference between actions and actors is that ",(0,r.mdx)("strong",{parentName:"p"},"actions can\u2019t communicate back to the machine. Actors can.")))}d.isMDXComponent=!0}}]);