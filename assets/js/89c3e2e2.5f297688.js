"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[6438],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>p,MDXProvider:()=>d,mdx:()=>v,useMDXComponents:()=>m,withMDXComponents:()=>l});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=a.createContext({}),l=function(e){return function(t){var n=m(t.components);return a.createElement(e,i({},t,{components:n}))}},m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,r=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=m(n),d=s,u=l["".concat(r,".").concat(d)]||l[d]||h[d]||i;return n?a.createElement(u,o(o({ref:t},p),{},{components:n})):a.createElement(u,o({ref:t},p))}));function v(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,r=new Array(i);r[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:s,r[1]=o;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},96057:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),s=(n(67294),n(3905));const i={title:"XState statechart basics",description:"An XState cheatsheet for statechart basics, including installation, states, initial states, transitions and events, and TypeScript."},r="What is a statechart?",o={unversionedId:"xstate/basics/what-is-a-statechart",id:"version-4/xstate/basics/what-is-a-statechart",title:"XState statechart basics",description:"An XState cheatsheet for statechart basics, including installation, states, initial states, transitions and events, and TypeScript.",source:"@site/versioned_docs/version-4/xstate/basics/what-is-a-statechart.mdx",sourceDirName:"xstate/basics",slug:"/xstate/basics/what-is-a-statechart",permalink:"/docs/xstate-v4/xstate/basics/what-is-a-statechart",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/basics/what-is-a-statechart.mdx",tags:[],version:"4",frontMatter:{title:"XState statechart basics",description:"An XState cheatsheet for statechart basics, including installation, states, initial states, transitions and events, and TypeScript."},sidebar:"tutorialSidebar",previous:{title:"Basics",permalink:"/docs/xstate-v4/category/xstate-basics"},next:{title:"Options",permalink:"/docs/xstate-v4/xstate/basics/options"}},c={},p=[{value:"States",id:"states",level:2},{value:"Initial state",id:"initial-state",level:3},{value:"Transitions and events",id:"transitions-and-events",level:2},{value:"Events",id:"events",level:3},{value:"Summary",id:"summary",level:2}],l={toc:p};function m(e){let{components:t,...n}=e;return(0,s.mdx)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"what-is-a-statechart"},"What is a statechart?"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"/docs/xstate-v4/xstate/installation"},"Install XState")," and create a statechart by importing ",(0,s.mdx)("inlineCode",{parentName:"p"},"createMachine")," from ",(0,s.mdx)("inlineCode",{parentName:"p"},"xstate"),"."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine({\n  // statechart config goes here\n});\n")),(0,s.mdx)("h2",{id:"states"},"States"),(0,s.mdx)("p",null,"You can create these states in XState using the ",(0,s.mdx)("inlineCode",{parentName:"p"},"states")," property:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  initial: 'asleep',\n  // highlight-start\n  states: {\n    asleep: {},\n    awake: {},\n  },\n  // highlight-end\n});\n")),(0,s.mdx)("h3",{id:"initial-state"},"Initial state"),(0,s.mdx)("p",null,"When a state machine starts, it enters the ",(0,s.mdx)("a",{parentName:"p",href:"../../states/initial-states"},(0,s.mdx)("strong",{parentName:"a"},"initial state"))," first. A machine can only have one top-level initial state."),(0,s.mdx)("admonition",{type:"studio"},(0,s.mdx)("p",{parentName:"admonition"},(0,s.mdx)("a",{parentName:"p",href:"/docs/xstate-v4/state-machines-and-statecharts#initial-state"},"Read about the basics on initial states"),", and ",(0,s.mdx)("a",{parentName:"p",href:"../../states/initial-states"},"how to use initial states in the Stately Studio"),".")),(0,s.mdx)("p",null,"In a statechart describing the process of walking the dog, the initial state would be ",(0,s.mdx)("strong",{parentName:"p"},"waiting")," to walk:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  // highlight-start\n  initial: 'waiting',\n  // highlight-end\n  states: {\n    waiting: {},\n  },\n});\n")),(0,s.mdx)("h2",{id:"transitions-and-events"},"Transitions and events"),(0,s.mdx)("p",null,"A machine moves from state to state through\xa0",(0,s.mdx)("a",{parentName:"p",href:"/docs/xstate-v4/transitions-and-events/intro"},"transitions"),". Transitions are caused by events; when an event happens, the machine transitions to the next state. Transitions are \u201cdeterministic\u201d; each combination of state and event always points to the same next state."),(0,s.mdx)("admonition",{type:"studio"},(0,s.mdx)("p",{parentName:"admonition"},(0,s.mdx)("a",{parentName:"p",href:"/docs/xstate-v4/state-machines-and-statecharts#transitions-and-events"},"Read about the basics of transitions and events"),", and ",(0,s.mdx)("a",{parentName:"p",href:"/docs/xstate-v4/transitions-and-events/intro"},"how to use transitions and events in the Stately Studio"),".")),(0,s.mdx)("p",null,"Use the ",(0,s.mdx)("inlineCode",{parentName:"p"},"on")," property inside the desired state to represent its transitions."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine({\n  initial: 'asleep',\n  states: {\n    asleep: {\n      // highlight-start\n      on: {\n        'wakes up': {\n          target: 'awake',\n        },\n      },\n      // highlight-end\n    },\n    awake: {\n      // highlight-start\n      on: {\n        'falls asleep': {\n          target: 'asleep',\n        },\n      },\n      // highlight-end\n    },\n  },\n});\n")),(0,s.mdx)("h3",{id:"events"},"Events"),(0,s.mdx)("p",null,"Define an event with an object using the ",(0,s.mdx)("inlineCode",{parentName:"p"},"type")," attribute to describe the event\u2019s name. Events can also pass in other properties along with their type."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"const VALID_EVENTS = [\n  {\n    type: 'LOG_OUT',\n  },\n  {\n    type: 'LOG_IN',\n    /**\n     * Pass in any other properties\n     * along with the event\n     */\n    username: 'myusername',\n  },\n  {\n    /**\n     * The event type key and value\n     * can be any text case\n     */\n    type: 'wake up',\n  },\n];\n\nconst INVALID_EVENTS = [\n  {\n    /**\n     * The event type key must\n     * be the same text case as\n     * its first instance\n     */\n    TYPE: 'Some event',\n  },\n  {\n    /**\n     * The event type value must\n     * be a string\n     */\n    type: 123,\n  },\n];\n")),(0,s.mdx)("admonition",{type:"typescript"},(0,s.mdx)("h3",{parentName:"admonition",id:"events-in-typescript"},"Events in TypeScript"),(0,s.mdx)("p",{parentName:"admonition"},"In TypeScript, you can strongly type your events by passing a ",(0,s.mdx)("em",{parentName:"p"},(0,s.mdx)("a",{parentName:"em",href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types"},"union type"))," of all the events to the ",(0,s.mdx)("inlineCode",{parentName:"p"},"schema")," property."),(0,s.mdx)("pre",{parentName:"admonition"},(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine({\n  schema: {\n    events: {} as\n      | { type: 'LOG_OUT' }\n      | { type: 'LOG_IN'; value: string }\n      | { type: 'COUNTDOWN'; value: number },\n  },\n});\n")),(0,s.mdx)("p",{parentName:"admonition"},"Wherever you send an event to a machine, or access the event inside the machine, the event will be strongly typed.")),(0,s.mdx)("h2",{id:"summary"},"Summary"),(0,s.mdx)("p",null,"A statechart turns boxes and arrows into executable code. The \u201cboxes\u201d are states\u2014the different modes your app can be in. The \u201carrows\u201d are transitions, letting your statechart know how to move from state to state. Events sent to the statechart can trigger transitions and also pass values to the statechart."),(0,s.mdx)("p",null,"Next, we\u2019ll learn how to make a statechart execute side effects with ",(0,s.mdx)("a",{parentName:"p",href:"/docs/xstate-v4/xstate/basics/options"},"Options"),"."))}m.isMDXComponent=!0}}]);