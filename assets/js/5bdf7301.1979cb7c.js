"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[63125],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>l,MDXProvider:()=>c,mdx:()=>x,useMDXComponents:()=>p,withMDXComponents:()=>d});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r.apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){return function(t){var n=p(t.components);return a.createElement(e,r({},t,{components:n}))}},p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),d=p(n),c=i,h=d["".concat(s,".").concat(c)]||d[c]||u[c]||r;return n?a.createElement(h,o(o({ref:t},l),{},{components:n})):a.createElement(h,o({ref:t},l))}));function x(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=h;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var l=2;l<r;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},94005:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var a=n(87462),i=(n(67294),n(3905));const r={title:"@xstate/vue"},s=void 0,o={unversionedId:"xstate-vue",id:"xstate-vue",title:"@xstate/vue",description:"The @xstate/vue package contains utilities for using XState with Vue.",source:"@site/docs/xstate-vue.mdx",sourceDirName:".",slug:"/xstate-vue",permalink:"/docs/xstate-vue",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/docs/xstate-vue.mdx",tags:[],version:"current",frontMatter:{title:"@xstate/vue"},sidebar:"docs",previous:{title:"@xstate/react",permalink:"/docs/xstate-react"},next:{title:"@xstate/svelte",permalink:"/docs/xstate-svelte"}},m={},l=[{value:"Quick start",id:"quick-start",level:2},{value:"Via CDN",id:"via-cdn",level:3},{value:"API",id:"api",level:2},{value:"<code>useMachine(machine, options?)</code>",id:"usemachinemachine-options",level:3},{value:"Arguments",id:"arguments",level:4},{value:"<code>useActor(actor, getSnapshot)</code>",id:"useactoractor-getsnapshot",level:3},{value:"Arguments (<em>Since 0.5.0</em>)",id:"arguments-since-050",level:4},{value:"<code>useInterpret(machine, options?, observer?)</code>",id:"useinterpretmachine-options-observer",level:3},{value:"Arguments (<em>Since 0.5.0</em>)",id:"arguments-since-050-1",level:4},{value:"<code>useSelector(actor, selector, compare?, getSnapshot?)</code>",id:"useselectoractor-selector-compare-getsnapshot",level:3},{value:"Arguments (<em>Since 0.6.0</em>)",id:"arguments-since-060",level:4},{value:"<code>useMachine(machine)</code> with <code>@xstate/fsm</code>",id:"usemachinemachine-with-xstatefsm",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Configuring machines",id:"configuring-machines",level:2},{value:"Matching states",id:"matching-states",level:2},{value:"Persisted and rehydrated state",id:"persisted-and-rehydrated-state",level:2},{value:"Migration from 0.4.0",id:"migration-from-040",level:2}],d={toc:l};function p(e){let{components:t,...n}=e;return(0,i.mdx)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"The ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/statelyai/xstate/tree/main/packages/xstate-vue"},"@xstate/vue package")," contains utilities for using ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/statelyai/xstate"},"XState")," with ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/vuejs/vue"},"Vue"),"."),(0,i.mdx)("admonition",{type:"caution"},(0,i.mdx)("h2",{parentName:"admonition",id:"vue-2"},"Vue 2"),(0,i.mdx)("p",{parentName:"admonition"},"If you\u2019re using Vue 2.x, please see ",(0,i.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/recipes/vue.html"},"the Vue recipe")," instead, or use the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/ChrisShank/xstate-vue2"},(0,i.mdx)("inlineCode",{parentName:"a"},"xstate-vue2")," package")," if you want to use the Vue Composition API.")),(0,i.mdx)("h2",{id:"quick-start"},"Quick start"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Install ",(0,i.mdx)("inlineCode",{parentName:"li"},"xstate")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},"@xstate/vue"),":")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"npm i xstate @xstate/vue\n")),(0,i.mdx)("h3",{id:"via-cdn"},"Via CDN"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-html"},'<script src="https://unpkg.com/@xstate/vue/dist/xstate-vue.min.js"><\/script>\n')),(0,i.mdx)("p",null,"By using the global variable ",(0,i.mdx)("inlineCode",{parentName:"p"},"XStateVue")),(0,i.mdx)("p",null,"or"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-html"},'<script src="https://unpkg.com/@xstate/vue/dist/xstate-vue.fsm.min.js"><\/script>\n')),(0,i.mdx)("p",null,"By using the global variable ",(0,i.mdx)("inlineCode",{parentName:"p"},"XStateVueFSM")),(0,i.mdx)("ol",{start:2},(0,i.mdx)("li",{parentName:"ol"},"Import the ",(0,i.mdx)("inlineCode",{parentName:"li"},"useMachine")," composition function:")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-vue"},"<template>\n  <button @click=\"send('TOGGLE')\">\n    {{\n      state.value === 'inactive'\n        ? 'Click to activate'\n        : 'Active! Click to deactivate'\n    }}\n  </button>\n</template>\n\n<script>\nimport { useMachine } from '@xstate/vue';\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' },\n    },\n    active: {\n      on: { TOGGLE: 'inactive' },\n    },\n  },\n});\n\nexport default {\n  setup() {\n    const { state, send } = useMachine(toggleMachine);\n    return {\n      state,\n      send,\n    };\n  },\n};\n<\/script>\n")),(0,i.mdx)("h2",{id:"api"},"API"),(0,i.mdx)("h3",{id:"usemachinemachine-options"},(0,i.mdx)("inlineCode",{parentName:"h3"},"useMachine(machine, options?)")),(0,i.mdx)("p",null,"A ",(0,i.mdx)("a",{parentName:"p",href:"https://v3.vuejs.org/guide/composition-api-introduction.html"},"Vue composition function")," that creates an actor from the given the given ",(0,i.mdx)("inlineCode",{parentName:"p"},"machine")," and starts a service that runs for the lifetime of the component."),(0,i.mdx)("h4",{id:"arguments"},"Arguments"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"machine")," - An ",(0,i.mdx)("a",{parentName:"li",href:"https://xstate.js.org/docs/guides/machines.html"},"XState machine"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"options")," (optional) - ",(0,i.mdx)("a",{parentName:"li",href:"https://xstate.js.org/docs/guides/interpretation.html#options"},"Actor options")," OR one of the following Machine Config options: ",(0,i.mdx)("inlineCode",{parentName:"li"},"guards"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"actions"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"activities"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"services"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"delays"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"immediate"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"context"),", or ",(0,i.mdx)("inlineCode",{parentName:"li"},"state"),".")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Returns")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"{ state, send, service}"),":"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"state")," - Represents the current state of the machine as an XState ",(0,i.mdx)("inlineCode",{parentName:"li"},"State")," object."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"send")," - A function that sends events to the running service."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"service")," - The created service.")),(0,i.mdx)("h3",{id:"useactoractor-getsnapshot"},(0,i.mdx)("inlineCode",{parentName:"h3"},"useActor(actor, getSnapshot)")),(0,i.mdx)("p",null,"A ",(0,i.mdx)("a",{parentName:"p",href:"https://vuejs.org/guide/extras/composition-api-faq.html"},"Vue composition function")," that provides access to an existing ",(0,i.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/actors.html"},"actor"),"."),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Since 0.5.0")),(0,i.mdx)("h4",{id:"arguments-since-050"},"Arguments (",(0,i.mdx)("em",{parentName:"h4"},"Since 0.5.0"),")"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"actor")," - an actor-like object that contains ",(0,i.mdx)("inlineCode",{parentName:"li"},".send(...)")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},".subscribe(...)")," methods."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"getSnapshot")," - a function that should return the latest emitted value from the ",(0,i.mdx)("inlineCode",{parentName:"li"},"actor"),".",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"Defaults to attempting to get the ",(0,i.mdx)("inlineCode",{parentName:"li"},"actor.state"),", or returning ",(0,i.mdx)("inlineCode",{parentName:"li"},"undefined")," if that does not exist.")))),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"import { useActor } from '@xstate/vue';\n\nexport default {\n  props: ['someSpawnedActor'],\n  setup(props) {\n    const { state, send } = useActor(props.someSpawnedActor);\n    return { state, send };\n  },\n};\n")),(0,i.mdx)("p",null,"To subscribe to changes on the an actor whilst retaining reactivity from props or another reactive variable, Vue\u2019s ",(0,i.mdx)("a",{parentName:"p",href:"https://vuejs.org/api/reactivity-core.html#computed"},"computed")," can be used."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"const { state, send } = useActor(computed(() => props.someSpawnedActor));\n")),(0,i.mdx)("h3",{id:"useinterpretmachine-options-observer"},(0,i.mdx)("inlineCode",{parentName:"h3"},"useInterpret(machine, options?, observer?)")),(0,i.mdx)("p",null,"A ",(0,i.mdx)("a",{parentName:"p",href:"https://v3.vuejs.org/guide/composition-api-introduction.html"},"Vue composition function")," that returns the ",(0,i.mdx)("inlineCode",{parentName:"p"},"service")," created from the ",(0,i.mdx)("inlineCode",{parentName:"p"},"machine")," with the ",(0,i.mdx)("inlineCode",{parentName:"p"},"options"),", if specified. It also sets up a subscription to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"service")," with the ",(0,i.mdx)("inlineCode",{parentName:"p"},"observer"),", if provided."),(0,i.mdx)("h4",{id:"arguments-since-050-1"},"Arguments (",(0,i.mdx)("em",{parentName:"h4"},"Since 0.5.0"),")"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"machine")," - An ",(0,i.mdx)("a",{parentName:"li",href:"https://xstate.js.org/docs/guides/machines.html"},"XState machine")," or a function that lazily returns a machine."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"options")," (optional) - ",(0,i.mdx)("a",{parentName:"li",href:"https://xstate.js.org/docs/guides/interpretation.html#options"},"Actor options")," and/or any of the following machine config options: ",(0,i.mdx)("inlineCode",{parentName:"li"},"guards"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"actions"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"services"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"delays"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"immediate"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"context"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"state"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"observer")," (optional) - an observer or listener that listens to state updates:",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"an observer (e.g., ",(0,i.mdx)("inlineCode",{parentName:"li"},"{ next: (state) => {/* ... */} }"),")"),(0,i.mdx)("li",{parentName:"ul"},"or a listener (e.g., ",(0,i.mdx)("inlineCode",{parentName:"li"},"(state) => {/* ... */}"),")")))),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"import { useInterpret } from '@xstate/vue';\nimport { someMachine } from '../path/to/someMachine';\nexport default {\n  setup() {\n    const service = useInterpret(someMachine);\n    return service;\n  },\n};\n")),(0,i.mdx)("p",null,"With options + listener:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"import { useInterpret } from '@xstate/vue';\nimport { someMachine } from '../path/to/someMachine';\nexport default {\n  setup() {\n    const service = useInterpret(\n      someMachine,\n      {\n        actions: {\n          /* ... */\n        },\n      },\n      (state) => {\n        // subscribes to state changes\n        console.log(state.value);\n      },\n    );\n    // ...\n  },\n};\n")),(0,i.mdx)("h3",{id:"useselectoractor-selector-compare-getsnapshot"},(0,i.mdx)("inlineCode",{parentName:"h3"},"useSelector(actor, selector, compare?, getSnapshot?)")),(0,i.mdx)("p",null,"A ",(0,i.mdx)("a",{parentName:"p",href:"https://v3.vuejs.org/guide/composition-api-introduction.html"},"Vue composition function")," that returns the selected value from the snapshot of an ",(0,i.mdx)("inlineCode",{parentName:"p"},"actor"),", such as a service. This hook will only cause a rerender if the selected value changes, as determined by the optional ",(0,i.mdx)("inlineCode",{parentName:"p"},"compare")," function."),(0,i.mdx)("h4",{id:"arguments-since-060"},"Arguments (",(0,i.mdx)("em",{parentName:"h4"},"Since 0.6.0"),")"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"actor")," - a service or an actor-like object that contains ",(0,i.mdx)("inlineCode",{parentName:"li"},".send(...)")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},".subscribe(...)")," methods."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"selector"),' - a function that takes in an actor\u2019s "current state" (snapshot) as an argument and returns the desired selected value.'),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"compare")," (optional) - a function that determines if the current selected value is the same as the previous selected value."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"getSnapshot")," (optional) - a function that should return the latest emitted value from the ",(0,i.mdx)("inlineCode",{parentName:"li"},"actor"),".",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"Defaults to attempting to get the ",(0,i.mdx)("inlineCode",{parentName:"li"},"actor.state"),", or returning ",(0,i.mdx)("inlineCode",{parentName:"li"},"undefined")," if that does not exist. Will automatically pull the state from services.")))),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"import { useSelector } from '@xstate/vue';\n\nconst selectCount = (state) => state.context.count;\n\nexport default {\n  props: ['service'],\n  setup(props) {\n    const count = useSelector(props.service, selectCount);\n    // ...\n    return { count };\n  },\n};\n")),(0,i.mdx)("p",null,"With ",(0,i.mdx)("inlineCode",{parentName:"p"},"compare")," function:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"import { useSelector } from '@xstate/vue';\n\nconst selectUser = (state) => state.context.user;\nconst compareUser = (prevUser, nextUser) => prevUser.id === nextUser.id;\n\nexport default {\n  props: ['service'],\n  setup(props) {\n    const user = useSelector(props.service, selectUser, compareUser);\n    // ...\n    return { user };\n  },\n};\n")),(0,i.mdx)("p",null,"With ",(0,i.mdx)("inlineCode",{parentName:"p"},"useInterpret(...)"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"import { useInterpret, useSelector } from '@xstate/vue';\nimport { someMachine } from '../path/to/someMachine';\n\nconst selectCount = (state) => state.context.count;\n\nexport default {\n  setup() {\n    const service = useInterpret(someMachine);\n    const count = useSelector(service, selectCount);\n    // ...\n    return { count, service };\n  },\n};\n")),(0,i.mdx)("h3",{id:"usemachinemachine-with-xstatefsm"},(0,i.mdx)("inlineCode",{parentName:"h3"},"useMachine(machine)")," with ",(0,i.mdx)("inlineCode",{parentName:"h3"},"@xstate/fsm")),(0,i.mdx)("p",null,"A ",(0,i.mdx)("a",{parentName:"p",href:"https://v3.vuejs.org/guide/composition-api-introduction.html"},"Vue composition function")," that creates an actor from the given the given finite state ",(0,i.mdx)("inlineCode",{parentName:"p"},"machine")," from ","[",(0,i.mdx)("inlineCode",{parentName:"p"},"@xstate/fsm"),"]"," and starts a service that runs for the lifetime of the component."),(0,i.mdx)("p",null,"This special ",(0,i.mdx)("inlineCode",{parentName:"p"},"useMachine")," hook is imported from ",(0,i.mdx)("inlineCode",{parentName:"p"},"@xstate/vue/lib/fsm")),(0,i.mdx)("h4",{id:"arguments-1"},"Arguments"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"machine")," - An ",(0,i.mdx)("a",{parentName:"li",href:"https://xstate.js.org/docs/packages/xstate-fsm/"},"XState finite state machine (FSM)"),".")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Returns")," an object ",(0,i.mdx)("inlineCode",{parentName:"p"},"{state, send, service}"),":"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"state")," - Represents the current state of the machine as an ",(0,i.mdx)("inlineCode",{parentName:"li"},"@xstate/fsm")," ",(0,i.mdx)("inlineCode",{parentName:"li"},"StateMachine.State")," object."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"send")," - A function that sends events to the running service."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"service")," - The created ",(0,i.mdx)("inlineCode",{parentName:"li"},"@xstate/fsm")," service.")),(0,i.mdx)("h2",{id:"configuring-machines"},"Configuring machines"),(0,i.mdx)("p",null,"Existing machines can be configured by passing the machine options as the 2nd argument of ",(0,i.mdx)("inlineCode",{parentName:"p"},"useMachine(machine, options)"),"."),(0,i.mdx)("p",null,"Example: the ",(0,i.mdx)("inlineCode",{parentName:"p"},"'fetchData'")," service and ",(0,i.mdx)("inlineCode",{parentName:"p"},"'notifySuccess'")," action are both configurable:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-vue"},"<template>\n  <template v-if=\"state.value === 'idle'\">\n    <button @click=\"send({ type: 'FETCH', query: 'something' })\">\n      Search for something\n    </button>\n  </template>\n\n  <template v-else-if=\"state.value === 'loading'\">\n    <div>Searching...</div>\n  </template>\n\n  <template v-else-if=\"state.value === 'success'\">\n    <div>Success! {{ state.context.data }}</div>\n  </template>\n\n  <template v-else-if=\"state.value === 'failure'\">\n    <p>{{ state.context.error.message }}</p>\n    <button @click=\"send('RETRY')\">Retry</button>\n  </template>\n</template>\n\n<script>\nimport { assign, createMachine } from 'xstate';\nimport { useMachine } from '@xstate/vue';\n\nconst fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  context: {\n    data: undefined,\n    error: undefined,\n  },\n  states: {\n    idle: {\n      on: { FETCH: 'loading' },\n    },\n    loading: {\n      invoke: {\n        src: 'fetchData',\n        onDone: {\n          target: 'success',\n          actions: assign({\n            data: (_context, event) => event.data,\n          }),\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({\n            error: (_context, event) => event.data,\n          }),\n        },\n      },\n    },\n    success: {\n      entry: 'notifySuccess',\n      type: 'final',\n    },\n    failure: {\n      on: {\n        RETRY: 'loading',\n      },\n    },\n  },\n});\n\nexport default {\n  props: {\n    onResolve: {\n      type: Function,\n      default: () => {},\n    },\n  },\n  setup(props) {\n    const { state, send } = useMachine(fetchMachine, {\n      actions: {\n        notifySuccess: (ctx) => props.onResolve(ctx.data),\n      },\n      services: {\n        fetchData: (_context, event) =>\n          fetch(`some/api/${event.query}`).then((res) => res.json()),\n      },\n    });\n    return {\n      state,\n      send,\n    };\n  },\n};\n<\/script>\n")),(0,i.mdx)("h2",{id:"matching-states"},"Matching states"),(0,i.mdx)("p",null,"For ",(0,i.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/hierarchical.html"},"hierarchical")," and ",(0,i.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/parallel.html"},"parallel")," machines, the state values will be objects, not strings. In this case, it\u2019s better to use ",(0,i.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/states.html#state-methods-and-getters"},(0,i.mdx)("inlineCode",{parentName:"a"},"state.matches(...)")),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-vue"},"<template>\n  <div>\n    <loader-idle v-if=\"state.matches('idle')\" />\n    <loader-loading-user v-if-else=\"state.matches({ loading: 'user' })\" />\n    <loader-loading-friends v-if-else=\"state.matches({ loading: 'friends' })\" />\n  </div>\n</template>\n")),(0,i.mdx)("h2",{id:"persisted-and-rehydrated-state"},"Persisted and rehydrated state"),(0,i.mdx)("p",null,"You can persist and rehydrate state with ",(0,i.mdx)("inlineCode",{parentName:"p"},"useMachine(...)")," via ",(0,i.mdx)("inlineCode",{parentName:"p"},"options.state"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-vue"},"<script>\n// Get the persisted state config object from somewhere, e.g. localStorage\nconst persistedState = JSON.parse(\n  localStorage.getItem('some-persisted-state-key'),\n);\n\nexport default {\n  setup() {\n    const { state, send } = useMachine(someMachine, {\n      state: persistedState,\n    });\n\n    // state will initially be that persisted state, not the machine\u2019s initialState\n    return { state, send };\n  },\n};\n<\/script>\n")),(0,i.mdx)("h2",{id:"migration-from-040"},"Migration from 0.4.0"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("p",{parentName:"li"},"For spawned actors created using ",(0,i.mdx)("inlineCode",{parentName:"p"},"invoke")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"spawn(...)"),", use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"useActor()")," hook instead of ",(0,i.mdx)("inlineCode",{parentName:"p"},"useService()"),":"),(0,i.mdx)("pre",{parentName:"li"},(0,i.mdx)("code",{parentName:"pre",className:"language-diff"},"-import { useService } from '@xstate/vue';\n+import { useActor } from '@xstate/vue';\n\n-const {state, send} = useService(someActor);\n+const {state, send} = useActor(someActor);\n")))))}p.isMDXComponent=!0}}]);