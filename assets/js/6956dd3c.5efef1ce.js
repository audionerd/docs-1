"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[33811],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>l,MDXProvider:()=>m,mdx:()=>u,useMDXComponents:()=>p,withMDXComponents:()=>d});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},o.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),d=function(e){return function(n){var t=p(n.components);return a.createElement(e,o({},n,{components:t}))}},p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},v=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,v=d["".concat(i,".").concat(m)]||d[m]||h[m]||o;return t?a.createElement(v,c(c({ref:n},l),{},{components:t})):a.createElement(v,c({ref:n},l))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=v;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}v.displayName="MDXCreateElement"},49565:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=t(87462),r=(t(67294),t(3905));const o={title:"Parent to child communication",description:"Invoked actors can send events to their parent using the sendParent and sendBack methods. Child actors can also receive events from the parent."},i=void 0,c={unversionedId:"xstate/actors/parent-child-communication",id:"version-4/xstate/actors/parent-child-communication",title:"Parent to child communication",description:"Invoked actors can send events to their parent using the sendParent and sendBack methods. Child actors can also receive events from the parent.",source:"@site/versioned_docs/version-4/xstate/actors/parent-child-communication.mdx",sourceDirName:"xstate/actors",slug:"/xstate/actors/parent-child-communication",permalink:"/docs/xstate-v4/xstate/actors/parent-child-communication",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/actors/parent-child-communication.mdx",tags:[],version:"4",frontMatter:{title:"Parent to child communication",description:"Invoked actors can send events to their parent using the sendParent and sendBack methods. Child actors can also receive events from the parent."},sidebar:"tutorialSidebar",previous:{title:"Observables",permalink:"/docs/xstate-v4/xstate/actors/observables"},next:{title:"Spawning actors",permalink:"/docs/xstate-v4/xstate/actors/spawn"}},s={},l=[{value:"Receiving events in invoked callbacks",id:"receiving-events-in-invoked-callbacks",level:2},{value:"forwardTo",id:"forwardto",level:2},{value:"autoForward",id:"autoforward",level:2},{value:"escalate",id:"escalate",level:2}],d={toc:l};function p(e){let{components:n,...t}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"We\u2019ve learned that invoked actors can send events to their parent via the invoked machine\u2019s ",(0,r.mdx)("inlineCode",{parentName:"p"},"sendParent")," action and the invoked callback\u2019s ",(0,r.mdx)("inlineCode",{parentName:"p"},"sendBack")," method. Child actors can also ",(0,r.mdx)("em",{parentName:"p"},"receive")," events from the parent, allowing for bidirectional communication."),(0,r.mdx)("p",null,"You must give invoked actors a unique id with ",(0,r.mdx)("inlineCode",{parentName:"p"},"invoke.id")," to enable parent to child communication:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"const childMachine = createMachine({\n  /* ... */\n});\n\nconst parentMachine = createMachine({\n  invoke: {\n    // highlight-start\n    id: 'child',\n    // highlight-end\n    src: childMachine,\n  },\n});\n")),(0,r.mdx)("p",null,"Once the invoked actor has an id, you can use that ID to send it events via the ",(0,r.mdx)("inlineCode",{parentName:"p"},"send")," event."),(0,r.mdx)("p",null,"In the example below, we specify that we want to send the ",(0,r.mdx)("inlineCode",{parentName:"p"},"HELLO_FROM_PARENT")," event to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"child")," invocation after 3 seconds. The child then logs a message to the console."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, send } from 'xstate';\n\nconst childMachine = createMachine(\n  {\n    on: {\n      HELLO_FROM_PARENT: {\n        actions: 'logToConsole',\n      },\n    },\n  },\n  {\n    actions: {\n      logToConsole: () => {\n        console.log('Event received!');\n      },\n    },\n  }\n);\n\nconst parentMachine = createMachine({\n  invoke: {\n    id: 'child',\n    src: childMachine,\n  },\n  after: {\n    3000: {\n      actions: send(\n        {\n          type: 'HELLO_FROM_PARENT',\n        },\n        // highlight-start\n        {\n          to: 'child',\n        }\n        // highlight-end\n      ),\n    },\n  },\n});\n")),(0,r.mdx)("h2",{id:"receiving-events-in-invoked-callbacks"},"Receiving events in invoked callbacks"),(0,r.mdx)("p",null,"Invoked callbacks can listen to events from the parent. To manage this, they receive an ",(0,r.mdx)("inlineCode",{parentName:"p"},"onReceive")," argument."),(0,r.mdx)("p",null,"In the example below, the parent machine sends the child ",(0,r.mdx)("inlineCode",{parentName:"p"},"ponger")," actor a ",(0,r.mdx)("inlineCode",{parentName:"p"},"PING")," event. The child actor can listen for that event using ",(0,r.mdx)("inlineCode",{parentName:"p"},"onReceive(listener)")," and send a ",(0,r.mdx)("inlineCode",{parentName:"p"},"PONG")," event back to the parent in response."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, send } from 'xstate';\n\nconst pingPongMachine = createMachine(\n  {\n    initial: 'active',\n    states: {\n      active: {\n        invoke: {\n          id: 'ponger',\n          src: 'pongActor',\n        },\n        entry: send({ type: 'PING' }, { to: 'ponger' }),\n        on: {\n          PONG: { target: 'done' },\n        },\n      },\n      done: {},\n    },\n  },\n  {\n    // `actors` in v5\n    services: {\n      pongActor: () => (sendBack, onReceive) => {\n        // Whenever parent sends 'PING',\n        // send parent 'PONG' event\n        onReceive((e) => {\n          if (e.type === 'PING') {\n            sendBack('PONG');\n          }\n        });\n      },\n    },\n  }\n);\n")),(0,r.mdx)("admonition",{type:"warningxstate"},(0,r.mdx)("p",{parentName:"admonition"},"XState v5 is in beta. ",(0,r.mdx)("a",{parentName:"p",href:"https://www.npmjs.com/package/xstate/v/5.0.0-beta.13"},"Check out XState v5 Beta on NPM"),".")),(0,r.mdx)("h2",{id:"forwardto"},"forwardTo"),(0,r.mdx)("p",null,"You\u2019ll often want to use the parent machine to \u201cforward\u201d events to the child machine. To handle this, XState provides a built-in ",(0,r.mdx)("inlineCode",{parentName:"p"},"forwardTo")," action:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, forwardTo } from 'xstate';\n\nconst alertMachine = createMachine(\n  {\n    on: {\n      ALERT: {\n        actions: 'soundTheAlarm',\n      },\n    },\n  },\n  {\n    actions: {\n      soundTheAlarm: () => {\n        alert('Oh no!');\n      },\n    },\n  }\n);\n\nconst parentMachine = createMachine({\n  id: 'parent',\n  invoke: {\n    id: 'alerter',\n    src: alertMachine,\n  },\n  on: {\n    ALERT: { actions: forwardTo('alerter') },\n  },\n});\n")),(0,r.mdx)("h2",{id:"autoforward"},"autoForward"),(0,r.mdx)("p",null,"If you want ",(0,r.mdx)("em",{parentName:"p"},"all")," events sent to the parent to be forwarded to the child, you can specify ",(0,r.mdx)("inlineCode",{parentName:"p"},"autoForward: true")," on an ",(0,r.mdx)("inlineCode",{parentName:"p"},"invoke"),"."),(0,r.mdx)("p",null,"In the example below, ",(0,r.mdx)("em",{parentName:"p"},"any")," event the machine receives will be sent on to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"eventHandler"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine(\n  {\n    invoke: {\n      src: 'eventHandler',\n      autoForward: true,\n    },\n  },\n  {\n    // `actors` in v5\n    services: {\n      eventHandler: () => (sendBack, onReceive) => {\n        onReceive((event) => {\n          // Handle the forwarded event here\n        });\n      },\n    },\n  }\n);\n")),(0,r.mdx)("h2",{id:"escalate"},"escalate"),(0,r.mdx)("p",null,"When a parent invokes a child machine, any errors that occur in the child machine will be handled ",(0,r.mdx)("em",{parentName:"p"},"in the child"),". You can use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"escalate")," action to send that error to the parent for processing."),(0,r.mdx)("p",null,"In the parent, you can listen for the ",(0,r.mdx)("inlineCode",{parentName:"p"},"escalate")," action via the ",(0,r.mdx)("inlineCode",{parentName:"p"},"invoke.onError")," transition."),(0,r.mdx)("p",null,"In the example below, the child machine immediately escalates an error to its parent on ",(0,r.mdx)("inlineCode",{parentName:"p"},"entry"),". The parent machine then processes the error in an ",(0,r.mdx)("inlineCode",{parentName:"p"},"onError")," handler by logging it to the console."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, actions } from 'xstate';\n\nconst { escalate } = actions;\n\nconst childMachine = createMachine({\n  entry: escalate({ message: 'This is some error' }),\n});\n\nconst parentMachine = createMachine({\n  invoke: {\n    src: childMachine,\n    onError: {\n      actions: (context, event) => {\n        console.log(event.data);\n        // data: {\n        //   message: 'This is some error'\n        // }\n      },\n    },\n  },\n});\n")))}p.isMDXComponent=!0}}]);