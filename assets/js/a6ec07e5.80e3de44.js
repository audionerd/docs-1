"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[80222],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>p,MDXProvider:()=>u,mdx:()=>x,useMDXComponents:()=>m,withMDXComponents:()=>d});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=a.createContext({}),d=function(e){return function(t){var n=m(t.components);return a.createElement(e,r({},t,{components:n}))}},m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=m(n),u=s,h=d["".concat(o,".").concat(u)]||d[u]||c[u]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function x(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},65113:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(87462),s=(n(67294),n(3905));const r={title:"Assertions",description:"Model-based testing with XState: How to use the setup and assert pattern when writing tests. Including examples."},o="Assertions",i={unversionedId:"xstate/model-based-testing/assertions",id:"version-4/xstate/model-based-testing/assertions",title:"Assertions",description:"Model-based testing with XState: How to use the setup and assert pattern when writing tests. Including examples.",source:"@site/versioned_docs/version-4/xstate/model-based-testing/assertions.mdx",sourceDirName:"xstate/model-based-testing",slug:"/xstate/model-based-testing/assertions",permalink:"/docs/xstate-v4/xstate/model-based-testing/assertions",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/model-based-testing/assertions.mdx",tags:[],version:"4",frontMatter:{title:"Assertions",description:"Model-based testing with XState: How to use the setup and assert pattern when writing tests. Including examples."},sidebar:"tutorialSidebar",previous:{title:"Test paths",permalink:"/docs/xstate-v4/xstate/model-based-testing/test-paths"},next:{title:"Event cases",permalink:"/docs/xstate-v4/xstate/model-based-testing/event-cases"}},l={},p=[{value:"Setup",id:"setup",level:3},{value:"Setup before each test path",id:"setup-before-each-test-path",level:3},{value:"Setup during a test",id:"setup-during-a-test",level:3},{value:"Assert",id:"assert",level:3}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,s.mdx)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"assertions"},"Assertions"),(0,s.mdx)("p",null,"If you\u2019ve done testing before, you might be familiar with the ",(0,s.mdx)("strong",{parentName:"p"},"setup, then assert")," pattern for writing tests:"),(0,s.mdx)("ol",null,(0,s.mdx)("li",{parentName:"ol"},(0,s.mdx)("strong",{parentName:"li"},"Setup")," to get the app into the desired state."),(0,s.mdx)("li",{parentName:"ol"},(0,s.mdx)("strong",{parentName:"li"},"Assert")," by checking the app is in the correct state.")),(0,s.mdx)("p",null,"The following example shows a whole test for a function that adds a user to a database:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js"},"// PSEUDOCODE\n\ndescribe('addUserToDb', () => {\n  it('Should add a user to a database', async () => {\n    // SETUP\n\n    // Clear the database before each test\n    await testUtils.clearDatabase();\n\n    // Run the function we\u2019re testing\n    await addUserToDb({\n      name: 'Matt',\n    });\n\n    // ASSERT\n\n    // Ensure that the user exists\n    await testUtils.ensureUserExistsInDb({\n      name: 'Matt',\n    });\n  });\n});\n")),(0,s.mdx)("p",null,"The test above follows the ",(0,s.mdx)("strong",{parentName:"p"},"setup")," then ",(0,s.mdx)("strong",{parentName:"p"},"assert")," steps:"),(0,s.mdx)("ol",null,(0,s.mdx)("li",{parentName:"ol"},(0,s.mdx)("strong",{parentName:"li"},"Setup"),": Clear the database, then call the ",(0,s.mdx)("inlineCode",{parentName:"li"},"addUserToDb")," function we\u2019re testing."),(0,s.mdx)("li",{parentName:"ol"},(0,s.mdx)("strong",{parentName:"li"},"Assert"),": Check the app is in the correct state with ",(0,s.mdx)("inlineCode",{parentName:"li"},"ensureUserExistsInDb"),".")),(0,s.mdx)("h3",{id:"setup"},"Setup"),(0,s.mdx)("p",null,"You have two main options to run test setup in ",(0,s.mdx)("inlineCode",{parentName:"p"},"@xstate/test"),"."),(0,s.mdx)("h3",{id:"setup-before-each-test-path"},"Setup before each test path"),(0,s.mdx)("p",null,"If your setup needs to run ",(0,s.mdx)("em",{parentName:"p"},"before each test path"),", run the setup just before calling ",(0,s.mdx)("inlineCode",{parentName:"p"},"path.test()"),":"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js"},"const paths = model.getPaths();\n\ndescribe('My model', () => {\n  paths.forEach((path) => {\n    it(path.description, () => {\n      /**\n       * Run any setup that needs to happen\n       * before each test\n       */\n\n      // Run the test\n      path.testSync({\n        states: {},\n        events: {},\n      });\n\n      /**\n       * Run any teardown that needs to\n       * happen after each test\n       */\n    });\n  });\n});\n")),(0,s.mdx)("h3",{id:"setup-during-a-test"},"Setup during a test"),(0,s.mdx)("p",null,"If your setup needs to happen ",(0,s.mdx)("em",{parentName:"p"},"during")," a test, you pass an implementation to an event. The following example tests a button. The button\u2019s text begins as \u2018pending,\u2019 but the text turns into \u2018complete\u2019 after the button is clicked."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js",metastring:"{17-21}","{17-21}":!0},"const machine = createTestMachine({\n  initial: 'buttonIsPending',\n  states: {\n    buttonIsPending: {\n      on: {\n        CLICK: 'buttonIsComplete',\n      },\n    },\n    buttonIsComplete: {},\n  },\n});\n\ncreateTestModel(machine)\n  .getPaths()\n  .forEach((path) => {\n    it(path.description, () => {\n      path.testSync({\n        events: {\n          CLICK: () => {\n            cy.findByRole('button').click();\n          },\n        },\n      });\n    });\n  });\n")),(0,s.mdx)("p",null,"When the ",(0,s.mdx)("inlineCode",{parentName:"p"},"testModel")," wants to know how to implement the ",(0,s.mdx)("inlineCode",{parentName:"p"},"CLICK")," event, it looks inside ",(0,s.mdx)("inlineCode",{parentName:"p"},"events")," and runs the function. The result is that the model knows how to setup the app in ",(0,s.mdx)("em",{parentName:"p"},"each state"),":"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},"The test model knows how to setup the button in the ",(0,s.mdx)("inlineCode",{parentName:"li"},"buttonIsPending")," state as it\u2019s the machine\u2019s initial state."),(0,s.mdx)("li",{parentName:"ul"},"The test model knows how to setup the ",(0,s.mdx)("inlineCode",{parentName:"li"},"buttonIsComplete")," state by running the ",(0,s.mdx)("inlineCode",{parentName:"li"},"CLICK")," event.")),(0,s.mdx)("h3",{id:"assert"},"Assert"),(0,s.mdx)("p",null,"Once your model can set up your app in each state, you should ",(0,s.mdx)("em",{parentName:"p"},"assert")," that your app is actually in that state. You can do this by passing ",(0,s.mdx)("inlineCode",{parentName:"p"},"states")," to ",(0,s.mdx)("inlineCode",{parentName:"p"},"path.test"),":"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js",metastring:"{10-23}","{10-23}":!0},"createTestModel(machine)\n  .getPaths()\n  .forEach((path) => {\n    it(path.description, () => {\n      path.testSync({\n        events: {\n          CLICK: () => {\n            cy.findByRole('button').click();\n          },\n        },\n        states: {\n          buttonIsPending: () => {\n            cy.findByRole('button').should('have.text', 'pending');\n          },\n          buttonIsComplete: () => {\n            cy.findByRole('button').should('have.text', 'complete');\n          },\n        },\n      });\n    });\n  });\n")),(0,s.mdx)("p",null,"The test model can now ",(0,s.mdx)("em",{parentName:"p"},"ensure")," that the app is in the state as described by the machine."),(0,s.mdx)("p",null,"This approach is a good general guide for testing with ",(0,s.mdx)("inlineCode",{parentName:"p"},"@xstate/test"),":"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Run assertions in states")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Run setup in events"),", or before/after ",(0,s.mdx)("inlineCode",{parentName:"li"},"path.test"),".")))}m.isMDXComponent=!0}}]);