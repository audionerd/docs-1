"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[58336],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>c,MDXProvider:()=>m,mdx:()=>h,useMDXComponents:()=>p,withMDXComponents:()=>d});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},i.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),d=function(e){return function(n){var t=p(n.components);return a.createElement(e,i({},n,{components:t}))}},p=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},x=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,x=d["".concat(o,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(x,s(s({ref:n},c),{},{components:t})):a.createElement(x,s({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=x;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}x.displayName="MDXCreateElement"},31666:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const i={title:"Internal and external transitions"},o="Internal and external transitions",s={unversionedId:"xstate/transitions-and-choices/internal-external",id:"version-4/xstate/transitions-and-choices/internal-external",title:"Internal and external transitions",description:"Transitions in statecharts can be one of two types: internal or external. External transitions are transitions that leave the machine\u2019s current state node; the \u201csource\u201d state node on which the transition is defined.",source:"@site/versioned_docs/version-4/xstate/transitions-and-choices/internal-external.mdx",sourceDirName:"xstate/transitions-and-choices",slug:"/xstate/transitions-and-choices/internal-external",permalink:"/statelyai-docs/docs/xstate-v4/xstate/transitions-and-choices/internal-external",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/transitions-and-choices/internal-external.mdx",tags:[],version:"4",frontMatter:{title:"Internal and external transitions"},sidebar:"tutorialSidebar",previous:{title:"After",permalink:"/statelyai-docs/docs/xstate-v4/xstate/transitions-and-choices/after"},next:{title:"Transition descriptions",permalink:"/statelyai-docs/docs/xstate-v4/xstate/transitions-and-choices/transition-descriptions"}},l={},c=[],d={toc:c};function p(e){let{components:n,...t}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"internal-and-external-transitions"},"Internal and external transitions"),(0,r.mdx)("p",null,"Transitions in statecharts can be one of two types: ",(0,r.mdx)("strong",{parentName:"p"},"internal")," or ",(0,r.mdx)("strong",{parentName:"p"},"external"),". External transitions are transitions that leave the machine\u2019s current state node; the \u201csource\u201d state node on which the transition is defined."),(0,r.mdx)("p",null,"In the example below, ",(0,r.mdx)("inlineCode",{parentName:"p"},"a -> FOO -> b")," is an external transition."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\ncreateMachine({\n  initial: 'a',\n  states: {\n    a: {\n      on: {\n        FOO: 'b',\n      },\n    },\n    b: {},\n  },\n});\n")),(0,r.mdx)("p",null,"The transition leaves the ",(0,r.mdx)("inlineCode",{parentName:"p"},"a")," state and goes to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"b")," state, making it an external transition."),(0,r.mdx)("p",null,"Internal transitions do not leave the current state. For example, self-transitions are internal transitions:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\ncreateMachine(\n  {\n    initial: 'a',\n    states: {\n      a: {\n        on: {\n          FOO: {\n            actions: 'sayHello',\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      sayHello: () => {\n        console.log('Hello!');\n      },\n    },\n  }\n);\n")),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"FOO")," transition never leaves the ",(0,r.mdx)("inlineCode",{parentName:"p"},"a")," state, which makes it an internal transition."),(0,r.mdx)("p",null,"However, you can ",(0,r.mdx)("em",{parentName:"p"},"force")," an internal transition to become an external transition. For self-transitions, you can specify the target on the transition to force it to be an external transition:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\ncreateMachine(\n  {\n    initial: 'a',\n    states: {\n      a: {\n        entry: ['logThatThisStateWasEntered'],\n        on: {\n          FOO: {\n            target: 'a',\n            actions: 'sayHello',\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      sayHello: () => {\n        console.log('Hello!');\n      },\n      logThatThisStateWasEntered: () => {\n        console.log('A was entered!');\n      },\n    },\n  }\n);\n")),(0,r.mdx)("p",null,"When ",(0,r.mdx)("inlineCode",{parentName:"p"},"target")," is ",(0,r.mdx)("inlineCode",{parentName:"p"},"a"),", the transition becomes external, which means the node is exited and re-entered and the ",(0,r.mdx)("strong",{parentName:"p"},"entry and exit actions will be re-fired"),". You can use this trick to re-run delays, restart services and it is also useful in parent and child states."))}p.isMDXComponent=!0}}]);