"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[90778],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>m,mdx:()=>x,useMDXComponents:()=>p,withMDXComponents:()=>c});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),c=function(e){return function(t){var n=p(t.components);return a.createElement(e,r({},t,{components:n}))}},p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,u=c["".concat(o,".").concat(m)]||c[m]||h[m]||r;return n?a.createElement(u,s(s({ref:t},d),{},{components:n})):a.createElement(u,s({ref:t},d))}));function x(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},89596:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const r={title:"Parent and child states"},o="Parent and child states",s={unversionedId:"xstate/states/parent-and-child-states",id:"version-4/xstate/states/parent-and-child-states",title:"Parent and child states",description:"States can contain more states, also known as\xa0child states. These child states are only active when the parent state is active. Child states are nested inside their parent states.",source:"@site/versioned_docs/version-4/xstate/states/parent-and-child-states.mdx",sourceDirName:"xstate/states",slug:"/xstate/states/parent-and-child-states",permalink:"/statelyai-docs/docs/xstate-v4/xstate/states/parent-and-child-states",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/states/parent-and-child-states.mdx",tags:[],version:"4",frontMatter:{title:"Parent and child states"},sidebar:"tutorialSidebar",previous:{title:"Deep dive: states",permalink:"/statelyai-docs/docs/xstate-v4/category/xstate-states"},next:{title:"Other state attributes",permalink:"/statelyai-docs/docs/xstate-v4/xstate/states/other-state-attributes"}},l={},d=[{value:"The root node",id:"the-root-node",level:2},{value:"<code>on</code> in parent states",id:"on-in-parent-states",level:2},{value:"Wildcard transitions",id:"wildcard-transitions",level:2}],c={toc:d};function p(e){let{components:t,...n}=e;return(0,i.mdx)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"parent-and-child-states"},"Parent and child states"),(0,i.mdx)("p",null,"States can contain more states, also known as\xa0",(0,i.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/xstate-v4/states/parent-states"},"child states"),". These child states are only active when the parent state is active. Child states are nested inside their parent states."),(0,i.mdx)("admonition",{type:"studio"},(0,i.mdx)("p",{parentName:"admonition"},(0,i.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/xstate-v4/states/parent-states"},"Read more about using parent and child states in the Stately Studio"),".")),(0,i.mdx)("p",null,"In XState, you can specify a parent state using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"states")," attribute on child nodes:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"\nconst machine = createMachine({\n  initial: 'waiting',\n  states: {\n    waiting: {\n      on: {\n        'leave home': {\n          target: 'on a walk',\n        },\n      },\n    },\n    'on a walk': {\n      initial: 'walking',\n      on: {\n        'arrive home': {\n          target: 'walk complete',\n        },\n      },\n      states: {\n        walking: {\n          on: {\n            'speed up': {\n              target: 'running',\n            },\n            stop: {\n              target: 'stopping to sniff good smells',\n            },\n          },\n        },\n        running: {\n          on: {\n            'slow down': {\n              target: 'walking',\n            },\n          },\n        },\n        'stopping to sniff good smells': {\n          on: {\n            'speed up': {\n              target: 'walking',\n            },\n          },\n        },\n      },\n    },\n    'walk complete': {},\n  },\n});\n")),(0,i.mdx)("p",null,"Note in the example above that transitions can be marked at different levels of the state hierarchy. In this example, the machine can receive the ",(0,i.mdx)("inlineCode",{parentName:"p"},"arrive home")," event in any of the child states inside ",(0,i.mdx)("inlineCode",{parentName:"p"},"on a walk"),"."),(0,i.mdx)("p",null,"However, the machine can only receive the ",(0,i.mdx)("inlineCode",{parentName:"p"},"stop")," event inside ",(0,i.mdx)("inlineCode",{parentName:"p"},"on a walk.walking"),". Events can be handled differently at different levels of the statechart, which is powerful for handling complex requirements."),(0,i.mdx)("h2",{id:"the-root-node"},"The root node"),(0,i.mdx)("p",null,"After learning about parent states, you might have noticed that all statecharts are parent states! Every statechart has a single ",(0,i.mdx)("em",{parentName:"p"},"root state")," which you can treat just like any other state."),(0,i.mdx)("p",null,"For example, you can listen to events on the root state:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  on: {\n    GREETED: {\n      actions: 'sayHello',\n    },\n  },\n  initial: 'idle',\n  states: {\n    idle: {},\n    working: {},\n  },\n});\n")),(0,i.mdx)("p",null,"Any time the machine receives the ",(0,i.mdx)("inlineCode",{parentName:"p"},"GREETED")," event, no matter which state it\u2019s in, it\u2019ll run the ",(0,i.mdx)("inlineCode",{parentName:"p"},"sayHello")," action."),(0,i.mdx)("p",null,"Entry and exit actions are also useful in the root state:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  entry: ['sayHello'],\n  exit: ['sayGoodbye'],\n  initial: 'idle',\n  states: {\n    idle: {},\n    working: {},\n  },\n});\n")),(0,i.mdx)("p",null,"In the example above, the machine will ",(0,i.mdx)("inlineCode",{parentName:"p"},"sayHello")," when it starts running and ",(0,i.mdx)("inlineCode",{parentName:"p"},"sayGoodbye")," when it stops running."),(0,i.mdx)("p",null,"You can also omit all states altogether! Sometimes you just need a root state, some events and some actions:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine({\n  entry: ['sayHello'],\n  exit: ['sayGoodbye'],\n});\n")),(0,i.mdx)("p",null,"Everything that works inside a state \u2014 ",(0,i.mdx)("inlineCode",{parentName:"p"},"after"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"always"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"invoke")," (we\u2019ll cover these later), ",(0,i.mdx)("inlineCode",{parentName:"p"},"entry"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"exit")," and more \u2014 will work inside the root node."),(0,i.mdx)("h2",{id:"on-in-parent-states"},(0,i.mdx)("inlineCode",{parentName:"h2"},"on")," in parent states"),(0,i.mdx)("p",null,"When a child state cannot handle an ",(0,i.mdx)("inlineCode",{parentName:"p"},"event"),", that ",(0,i.mdx)("inlineCode",{parentName:"p"},"event")," is propagated up to its parent state (including the root node) to be handled."),(0,i.mdx)("p",null,"In the example below, when you wave at your friend and the machine is in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"friendIsLookingAtYou")," state, the ",(0,i.mdx)("inlineCode",{parentName:"p"},"friendWavesBack")," action is fired."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst waveMachine = createMachine({\n  on: {\n    WAVE_AT_YOUR_FRIEND: {\n      actions: 'feelEmbarrassed',\n    },\n  },\n  initial: 'friendIsLookingAtYou',\n  states: {\n    friendIsLookingAtYou: {\n      on: {\n        WAVE_AT_YOUR_FRIEND: {\n          actions: 'friendWavesBack',\n        },\n      },\n    },\n    friendIsNotLookingAtYou: {},\n    friendIsNotWhoYouThoughtTheyWere: {},\n  },\n});\n")),(0,i.mdx)("p",null,"If the machine is in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"friendIsNotLookingAtYou")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"friendIsNotWhoYouThoughtTheyWere")," states, the event is propagated up to its parent state, the root node, and the ",(0,i.mdx)("inlineCode",{parentName:"p"},"feelEmbarrassed")," action is fired. We\u2019ve all been there."),(0,i.mdx)("p",null,"Adding transitions in the parent state helps reduce duplication when defining transitions."),(0,i.mdx)("h2",{id:"wildcard-transitions"},"Wildcard transitions"),(0,i.mdx)("p",null,"A transition specified with a wildcard ",(0,i.mdx)("inlineCode",{parentName:"p"},"*")," is triggered by any event not already handled by the current state."),(0,i.mdx)("p",null,"The following example shows a few different cases of when the wildcard ",(0,i.mdx)("inlineCode",{parentName:"p"},"*")," is triggered or not."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine({\n  initial: 'inactive',\n  on: {\n    '*': {\n      actions: 'logEventToConsole',\n    },\n    FOCUS: {\n      actions: 'onFocus',\n    },\n  },\n  states: {\n    inactive: {\n      on: {\n        HOVER: {\n          actions: 'onHover',\n        },\n      },\n    },\n    active: {},\n  },\n});\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"If the ",(0,i.mdx)("inlineCode",{parentName:"li"},"HOVER")," event is received in the ",(0,i.mdx)("inlineCode",{parentName:"li"},"inactive")," state, it\u2019ll trigger the ",(0,i.mdx)("inlineCode",{parentName:"li"},"onHover")," action. The wildcard won\u2019t be called."),(0,i.mdx)("li",{parentName:"ul"},"If the ",(0,i.mdx)("inlineCode",{parentName:"li"},"HOVER")," event is received in the ",(0,i.mdx)("inlineCode",{parentName:"li"},"active")," state, it\u2019ll be caught by the wildcard above it and will ",(0,i.mdx)("inlineCode",{parentName:"li"},"logEventToConsole"),"."),(0,i.mdx)("li",{parentName:"ul"},"If the ",(0,i.mdx)("inlineCode",{parentName:"li"},"FOCUS")," event is received in any state, it\u2019ll trigger the ",(0,i.mdx)("inlineCode",{parentName:"li"},"onFocus")," action, not the wildcard.")),(0,i.mdx)("p",null,"Wildcard transitions are great for logging untracked events or reducing code duplication."))}p.isMDXComponent=!0}}]);