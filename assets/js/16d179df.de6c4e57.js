"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[59967],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>p,mdx:()=>y,useMDXComponents:()=>m,withMDXComponents:()=>c});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var d=a.createContext({}),c=function(e){return function(t){var n=m(t.components);return a.createElement(e,r({},t,{components:n}))}},m=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=m(n),p=s,g=c["".concat(o,".").concat(p)]||c[p]||u[p]||r;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function y(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},94589:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var a=n(87462),s=(n(67294),n(3905));const r={title:"Quickstart",description:"Model-based testing with XState: How to get started quickly with model-based testing using XState and @xstate/test."},o="Quickstart",i={unversionedId:"xstate/model-based-testing/quickstart",id:"version-4/xstate/model-based-testing/quickstart",title:"Quickstart",description:"Model-based testing with XState: How to get started quickly with model-based testing using XState and @xstate/test.",source:"@site/versioned_docs/version-4/xstate/model-based-testing/quickstart.mdx",sourceDirName:"xstate/model-based-testing",slug:"/xstate/model-based-testing/quickstart",permalink:"/statelyai-docs/docs/xstate-v4/xstate/model-based-testing/quickstart",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/model-based-testing/quickstart.mdx",tags:[],version:"4",frontMatter:{title:"Quickstart",description:"Model-based testing with XState: How to get started quickly with model-based testing using XState and @xstate/test."},sidebar:"tutorialSidebar",previous:{title:"When to use XState Test",permalink:"/statelyai-docs/docs/xstate-v4/xstate/model-based-testing/when-to-use"},next:{title:"Test paths",permalink:"/statelyai-docs/docs/xstate-v4/xstate/model-based-testing/test-paths"}},l={},d=[],c={toc:d};function m(e){let{components:t,...n}=e;return(0,s.mdx)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"quickstart"},"Quickstart"),(0,s.mdx)("ol",null,(0,s.mdx)("li",{parentName:"ol"},"Install ",(0,s.mdx)("inlineCode",{parentName:"li"},"xstate")," and ",(0,s.mdx)("inlineCode",{parentName:"li"},"@xstate/test"),":")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-bash"},"yarn add xstate @xstate/test@alpha\n")),(0,s.mdx)("ol",{start:2},(0,s.mdx)("li",{parentName:"ol"},"Create your test machine using ",(0,s.mdx)("inlineCode",{parentName:"li"},"createTestMachine"),":")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createTestMachine } from '@xstate/test';\n\nconst machine = createTestMachine({\n  initial: 'onHomePage',\n  states: {\n    onHomePage: {\n      on: {\n        SEARCH_FOR_MODEL_BASED_TESTING: 'searchResultsVisible',\n      },\n    },\n    searchResultsVisible: {\n      on: {\n        CLICK_MODEL_BASED_TESTING_RESULT: 'onModelBasedTestingPage',\n        PRESS_ESCAPE: 'searchBoxClosed',\n      },\n    },\n    searchBoxClosed: {},\n    onModelBasedTestingPage: {},\n  },\n});\n")),(0,s.mdx)("ol",{start:3},(0,s.mdx)("li",{parentName:"ol"},"Turn the machine into a test model using ",(0,s.mdx)("inlineCode",{parentName:"li"},"createTestModel"))),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createTestModel } from '@xstate/test';\n\nconst model = createTestModel(machine);\n")),(0,s.mdx)("ol",{start:4},(0,s.mdx)("li",{parentName:"ol"},"Run the model in a test, passing in instructions on what to do on different ",(0,s.mdx)("inlineCode",{parentName:"li"},"states")," and ",(0,s.mdx)("inlineCode",{parentName:"li"},"events"),". For example, using ",(0,s.mdx)("a",{parentName:"li",href:"https://www.cypress.io/"},"Cypress"),":")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-ts"},"describe('Toggle component', () => {\n  /**\n   * For each path generated by XState,\n   * run a new test via `it`\n   */\n  model.getPaths().forEach((path) => {\n    it(path.description, () => {\n      // Run any setup before each test here\n\n      /**\n       * In environments, like Cypress,\n       * that don\u2019t support async, run plan.testSync();\n       *\n       * Otherwise, you can run await plan.test();\n       */\n      path.testSync({\n        states: {\n          onHomePage: () => {\n            cy.visit('/');\n          },\n          searchResultsVisible: () => {\n            cy.findByText('Model-based testing').should('be.visible');\n          },\n          searchBoxClosed: () => {\n            cy.findByText('Model-based testing').should('not.be.visible');\n          },\n          onModelBasedTestingPage: () => {\n            cy.url().should('include', '/model-based-testing/intro');\n          },\n        },\n        events: {\n          CLICK_MODEL_BASED_TESTING_RESULT: () => {\n            cy.findByText('Model-based testing').click();\n          },\n          SEARCH_FOR_MODEL_BASED_TESTING: () => {\n            cy.findByPlaceholderText('Search').type('Model-based testing');\n          },\n        },\n      });\n\n      // Run any cleanup after each test here\n    });\n  });\n});\n")))}m.isMDXComponent=!0}}]);