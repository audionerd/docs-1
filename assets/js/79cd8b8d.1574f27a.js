"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[52813],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>l,MDXProvider:()=>d,mdx:()=>u,useMDXComponents:()=>m,withMDXComponents:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),h=function(e){return function(t){var n=m(t.components);return a.createElement(e,i({},t,{components:n}))}},m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),h=m(n),d=r,f=h["".concat(o,".").concat(d)]||h[d]||p[d]||i;return n?a.createElement(f,c(c({ref:t},l),{},{components:n})):a.createElement(f,c({ref:t},l))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},22105:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={title:"What\u2019s the difference between Machine and createMachine?",description:"XState offers two options for declaring machine definitions. This can be confusing for beginners. Why are there two very similar-looking methods? What\u2019s the difference?",tags:["typescript","state machine"],authors:["matt"],image:"/blog/2021-04-28-whats-the-difference-between-machine-and-createmachine.png",slug:"2021-04-28-whats-the-difference-between-machine-and-createmachine",date:new Date("2021-04-28T00:00:00.000Z")},o=void 0,c={permalink:"/statelyai-docs/blog/2021-04-28-whats-the-difference-between-machine-and-createmachine",editUrl:"https://github.com/statelyai/docs/edit/main/blog/2021-04-28-whats-the-difference-between-machine-and-createmachine/index.mdx",source:"@site/blog/2021-04-28-whats-the-difference-between-machine-and-createmachine/index.mdx",title:"What\u2019s the difference between Machine and createMachine?",description:"XState offers two options for declaring machine definitions. This can be confusing for beginners. Why are there two very similar-looking methods? What\u2019s the difference?",date:"2021-04-28T00:00:00.000Z",formattedDate:"April 28, 2021",tags:[{label:"typescript",permalink:"/statelyai-docs/blog/tags/typescript"},{label:"state machine",permalink:"/statelyai-docs/blog/tags/state-machine"}],readingTime:1.255,hasTruncateMarker:!0,authors:[{name:"Matt Pocock",title:"Stately Team",url:"https://github.com/mattpocock",imageURL:"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/matt.png",key:"matt"}],frontMatter:{title:"What\u2019s the difference between Machine and createMachine?",description:"XState offers two options for declaring machine definitions. This can be confusing for beginners. Why are there two very similar-looking methods? What\u2019s the difference?",tags:["typescript","state machine"],authors:["matt"],image:"/blog/2021-04-28-whats-the-difference-between-machine-and-createmachine.png",slug:"2021-04-28-whats-the-difference-between-machine-and-createmachine",date:"2021-04-28T00:00:00.000Z"},prevItem:{title:"Should this be a state, or in context?",permalink:"/statelyai-docs/blog/2021-04-29-should-this-be-a-state-or-in-context"},nextItem:{title:"You don\u2019t need a library for state machines",permalink:"/statelyai-docs/blog/2021-01-20-you-dont-need-a-library-for-state-machines"}},s={authorsImageUrls:[void 0]},l=[{value:"The Difference",id:"the-difference",level:2},{value:"What should I choose?",id:"what-should-i-choose",level:2}],h={toc:l};function m(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("head",null,(0,r.mdx)("link",{rel:"canonical",href:"https://dev.to/mpocock1/xstate-what-s-the-difference-between-machine-and-createmachine-15h1"})),(0,r.mdx)("p",null,"XState offers two options for declaring machine definitions:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},'import { Machine } from "xstate";\n\nconst machine = Machine({ ...config });\n')),(0,r.mdx)("p",null,"\u2026or\u2026"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},'import { createMachine } from "xstate";\n\nconst machine = createMachine({ ...config });\n')),(0,r.mdx)("p",null,"This can be confusing for beginners. Why are there two very similar-looking methods? What\u2019s the difference?"),(0,r.mdx)("h2",{id:"the-difference"},"The Difference"),(0,r.mdx)("p",null,"In Javascript, there is no difference between the two. You can use them completely interchangeably."),(0,r.mdx)("p",null,"In Typescript, there is only a small difference between them - it\u2019s to do with the ordering of the generics you can pass to the machine. ",(0,r.mdx)("inlineCode",{parentName:"p"},"Machine")," allows you to pass a generic called ",(0,r.mdx)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/typescript.html#typestates"},"'Typestates'")," in the middle of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Context")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"Event")," generics."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},'import { Machine } from "xstate";\n\ninterface Context {}\n\ntype Event = { type: "EVENT_NAME" };\n\ntype States = {};\n\nconst machine = Machine<Context, States, Event>({ ...config });\n')),(0,r.mdx)("p",null,"Whereas ",(0,r.mdx)("inlineCode",{parentName:"p"},"createMachine")," asks you to insert it at the end:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},'import { createMachine } from "xstate";\n\ninterface Context {}\n\ntype Event = { type: "EVENT_NAME" };\n\ntype States = {};\n\nconst machine = createMachine<Context, Event, States>({ ...config });\n')),(0,r.mdx)("p",null,"Whichever you choose, there is ",(0,r.mdx)("em",{parentName:"p"},"no functional difference in the created machine"),". The two functions reference the same code, and create the machine in the same way."),(0,r.mdx)("h2",{id:"what-should-i-choose"},"What should I choose?"),(0,r.mdx)("p",null,"Going forward, you should use ",(0,r.mdx)("inlineCode",{parentName:"p"},"createMachine"),". That\u2019s the syntax that will be preferred when v5 releases. But if you're happy with Machine, you can keep using it."))}m.isMDXComponent=!0}}]);