"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[31842],{3905:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>c,MDXProvider:()=>h,mdx:()=>g,useMDXComponents:()=>m,withMDXComponents:()=>d});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},r.apply(this,arguments)}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=n.createContext({}),d=function(e){return function(t){var a=m(t.components);return n.createElement(e,r({},t,{components:a}))}},m=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},h=function(e){var t=m(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=m(a),h=o,u=d["".concat(i,".").concat(h)]||d[h]||p[h]||r;return a?n.createElement(u,s(s({ref:t},c),{},{components:a})):n.createElement(u,s({ref:t},c))}));function g(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},13762:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=a(87462),o=(a(67294),a(3905));const r={title:"What is the actor model and when should I use it?",description:"At Stately, the Actor Model is one of our favorite programming paradigms, and we think it\u2019s for good reason!",tags:["actor model","modeling","statechart","tutorials","state machine","typescript","blog"],authors:["gavin"],slug:"what-is-the-actor-model",image:"/blog/2023-5-30-what-is-the-actor-model-and-when-should-i-use-it.png",date:new Date("2023-05-30T00:00:00.000Z")},i=void 0,s={permalink:"/statelyai-docs/blog/what-is-the-actor-model",editUrl:"https://github.com/statelyai/docs/edit/main/blog/2023-5-30-what-is-the-actor-model-and-when-should-i-use-it/index.mdx",source:"@site/blog/2023-5-30-what-is-the-actor-model-and-when-should-i-use-it/index.mdx",title:"What is the actor model and when should I use it?",description:"At Stately, the Actor Model is one of our favorite programming paradigms, and we think it\u2019s for good reason!",date:"2023-05-30T00:00:00.000Z",formattedDate:"May 30, 2023",tags:[{label:"actor model",permalink:"/statelyai-docs/blog/tags/actor-model"},{label:"modeling",permalink:"/statelyai-docs/blog/tags/modeling"},{label:"statechart",permalink:"/statelyai-docs/blog/tags/statechart"},{label:"tutorials",permalink:"/statelyai-docs/blog/tags/tutorials"},{label:"state machine",permalink:"/statelyai-docs/blog/tags/state-machine"},{label:"typescript",permalink:"/statelyai-docs/blog/tags/typescript"},{label:"blog",permalink:"/statelyai-docs/blog/tags/blog"}],readingTime:4.525,hasTruncateMarker:!0,authors:[{name:"Gavin Bauman",title:"Stately Team",url:"https://github.com/gavination",imageURL:"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/gavin.png",key:"gavin"}],frontMatter:{title:"What is the actor model and when should I use it?",description:"At Stately, the Actor Model is one of our favorite programming paradigms, and we think it\u2019s for good reason!",tags:["actor model","modeling","statechart","tutorials","state machine","typescript","blog"],authors:["gavin"],slug:"what-is-the-actor-model",image:"/blog/2023-5-30-what-is-the-actor-model-and-when-should-i-use-it.png",date:"2023-05-30T00:00:00.000Z"},prevItem:{title:"Stately Studio minor improvements",permalink:"/statelyai-docs/blog/2023-06-14-stately-studio-minor-improvements"},nextItem:{title:"Stately Studio minor improvements",permalink:"/statelyai-docs/blog/2023-05-26-stately-studio-minor-improvements"}},l={authorsImageUrls:[void 0]},c=[{value:"What is the actor model?",id:"what-is-the-actor-model",level:2},{value:"When should I use it?",id:"when-should-i-use-it",level:2},{value:"When not to use it",id:"when-not-to-use-it",level:2},{value:"How does XState work with the actor model?",id:"how-does-xstate-work-with-the-actor-model",level:2},{value:"Spawning Actors",id:"spawning-actors",level:3}],d={toc:c};function m(e){let{components:t,...a}=e;return(0,o.mdx)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"At Stately, the ",(0,o.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Actor_model"},"Actor Model")," is one of our favorite programming paradigms, and we think it\u2019s for good reason! The actor model allows developers to build reliable message-based systems by using ",(0,o.mdx)("em",{parentName:"p"},"actors")," to communicate. This works extremely well with state machines and statecharts, which can also be modeled as actors and can communicate much in the same ways. Read on to learn what the actor model is, the problems it seeks to solve, and how you can use it in your projects to communicate reliably across different entities."),(0,o.mdx)("h2",{id:"what-is-the-actor-model"},"What is the actor model?"),(0,o.mdx)("p",null,"The actor model has been around for quite a while, dating back to the 1970\u2019s. That it\u2019s used with frameworks like ",(0,o.mdx)("a",{parentName:"p",href:"https://akka.io/"},"Akka")," and built natively into languages like ",(0,o.mdx)("a",{parentName:"p",href:"https://www.erlang.org/"},"Erlang")," are testaments to its utility. When researching the actor model, it\u2019s very common to see the phrase \u201ceverything is an actor\u201d, as it is a core tenet in the actor model philosophy. This simply means that in a given system, the ",(0,o.mdx)("em",{parentName:"p"},"actor")," is the core unit of execution. Every action that occurs in the system is driven by an actor. An actor can communicate with other actors with the use of messaging, and they can also interact with external systems. Specifically, an actor can perform the following basic tasks:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Actors can manage their own internal state"),(0,o.mdx)("li",{parentName:"ul"},"Actors can spawn other actors"),(0,o.mdx)("li",{parentName:"ul"},"Actors can send messages to other actors")),(0,o.mdx)("p",null,"It may sound simple, but this programming model allows for the development of highly scalable and concurrent systems. There are constraints though, the most important of which is that an actor ",(0,o.mdx)("em",{parentName:"p"},"cannot")," modify the internal state of another actor directly. This can be done implicitly with messaging (i.e an actor updating its state in response to a message) but ",(0,o.mdx)("em",{parentName:"p"},"never directly"),"."),(0,o.mdx)("h2",{id:"when-should-i-use-it"},"When should I use it?"),(0,o.mdx)("p",null,"The actor model is extremely useful for splitting up work that can be processed in parallel. It\u2019s excellent for ",(0,o.mdx)("a",{parentName:"p",href:"https://java-design-patterns.com/patterns/fanout-fanin/"},"\u201cfan-out/fan-in\u201d")," scenarios where several functions need to be run at once and have their results combined before final processing. It also works well with building ",(0,o.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern"},"pub/sub")," systems, where several actors can be \u201cworkers\u201d, waiting for messages from the \u201cpublisher\u201d. Our last example, but certainly not the least, is in the case of systems that need to manage several similar entities, like a multiplayer game where every player is represented as an actor. A good rule of thumb is to at least consider the actor model whenever distribution and concurrency are core requirements."),(0,o.mdx)("h2",{id:"when-not-to-use-it"},"When not to use it"),(0,o.mdx)("p",null,"As with any pattern, it\u2019s just as important to understand its weaknesses as it is to understand its strengths. Typically you may not want to use the actor pattern when order really matters. Order is usually not promised in the actor pattern, and if one of the actors fails, you\u2019ll have to deal with the concern of rolling back events. The actor model is often unnecessary when dealing with synchronous problems as well and can add unnecessary overhead. Additionally, error handling can be tricky with actors. Erlang popularized the \u201clet it crash\u201d philosophy, but given the problem, it may not always be the most reasonable answer."),(0,o.mdx)("h2",{id:"how-does-xstate-work-with-the-actor-model"},"How does XState work with the actor model?"),(0,o.mdx)("p",null,"With XState, we expose the ability to create instances of machines as actors! Looking at the example below, we can see that after defining our machine and its attributes, we only need to use ",(0,o.mdx)("inlineCode",{parentName:"p"},"interpret()")," to instantiate an actor (called ",(0,o.mdx)("inlineCode",{parentName:"p"},"toggleActor"),") and send it messages."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-typescript"},"import { createMachine, interpret } from 'xstate';\n\n// State machine definition\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: { on: { TOGGLE: 'active' } },\n    active: { on: { TOGGLE: 'inactive' } },\n  },\n});\n\n// Machine instance with internal state\nconst toggleActor = interpret(toggleMachine);\ntoggleActor.subscribe((state) => {\n  console.log(state.value);\n});\ntoggleActor.start();\n// => logs 'inactive'\n\ntoggleActor.send({ type: 'TOGGLE' });\n// => logs 'active'\n\ntoggleActor.send({ type: 'TOGGLE' });\n// => logs 'inactive'\n")),(0,o.mdx)("p",null,"This actor has its own state and context, and it can be updated whenever it receives events. Of course, in order for the internal state of an actor to be updated, the event must be a legal transition defined with the machine."),(0,o.mdx)("h3",{id:"spawning-actors"},"Spawning Actors"),(0,o.mdx)("p",null,"XState can also be used to spawn other actors and communicate with each other:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-typescript"},"import { createMachine, spawn } from 'xstate';\nimport { todoMachine } from './todoMachine';\n\nconst todosMachine = createMachine({\n  // ...\n  on: {\n    'NEW_TODO.ADD': {\n      actions: assign({\n        todos: ({ context, event }) => [\n          ...context.todos,\n          {\n            todo: event.todo,\n            // add a new todoMachine actor with a unique name\n            ref: spawn(todoMachine, `todo-${event.id}`),\n          },\n        ],\n      }),\n    },\n    // ...\n  },\n});\n")),(0,o.mdx)("p",null,"With the use of ",(0,o.mdx)("inlineCode",{parentName:"p"},"spawn()")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"assign()"),", we create a new actor instance when provided the machine logic and a unique identifier.\nBy their nature, actions are ",(0,o.mdx)("a",{parentName:"p",href:"../docs/xstate-v4/xstate/actions"},'"fire and forget" effects'),", meaning they are executed with no expectation of receiving events back to the actor. This makes sense for creating a new actor, but we may still want the parent actor to have a reference to its child, so we save that in its context using ",(0,o.mdx)("inlineCode",{parentName:"p"},"assign()"),". ",(0,o.mdx)("inlineCode",{parentName:"p"},"spawn()")," is the function called that actually creates the new actor. The parent can access this state easily by calling ",(0,o.mdx)("inlineCode",{parentName:"p"},"getSnapshot()")," on the reference to the child."),(0,o.mdx)("p",null,"For more detailed examples around working with actors in XState, like callback or promised-based actor spawning, sending updates, and communicating between actors, ",(0,o.mdx)("a",{parentName:"p",href:"../docs/xstate-v4/actions-and-actors/actors"},"check out our docs on actors"),"."))}m.isMDXComponent=!0}}]);