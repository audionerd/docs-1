"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[6790],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>u,mdx:()=>x,useMDXComponents:()=>d,withMDXComponents:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),m=function(e){return function(t){var n=d(t.components);return a.createElement(e,o({},t,{components:n}))}},d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||p[u]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function x(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(67294),r=n(86010);const o="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:n},t)}},31792:(e,t,n)=>{n.d(t,{Z:()=>y});var a=n(87462),r=n(67294),o=n(86010),s=n(12466),i=n(76775),l=n(91980),c=n(67392),m=n(50012);function d(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function u(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function x(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=u(e),[s,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[l,c]=h({queryString:n,groupId:a}),[d,x]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,m.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),f=(()=>{const e=l??d;return p({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),x(e)}),[c,x,o]),tabValues:o}}var f=n(72389);const g="tabList_TRJ7",v="tabItem_hGfb";function N(e){let{className:t,block:n,selectedValue:i,selectValue:l,tabValues:c}=e;const m=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),u=e=>{const t=e.currentTarget,n=m.indexOf(t),a=c[n].value;a!==i&&(d(t),l(a))},p=e=>{var t;let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=m.indexOf(e.currentTarget)+1;n=m[t]??m[0];break}case"ArrowLeft":{const t=m.indexOf(e.currentTarget)-1;n=m[t]??m[m.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>m.push(e),onKeyDown:p,onClick:u},s,{className:(0,o.Z)("tabs__item",v,null==s?void 0:s.className,{"tabs__item--active":i===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"padding-top--s"}):null}return r.createElement("div",{className:"padding-top--s"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function C(e){const t=x(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",g)},r.createElement(N,(0,a.Z)({},e,t)),r.createElement(b,(0,a.Z)({},e,t)))}function y(e){const t=(0,f.Z)();return r.createElement(C,(0,a.Z)({key:String(t)},e))}},21712:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var a=n(87462),r=(n(67294),n(3905)),o=n(31792),s=n(85162);const i={title:"@xstate/react"},l=void 0,c={unversionedId:"xstate-react",id:"xstate-react",title:"@xstate/react",description:"The @xstate/react package contains hooks for using XState with React.",source:"@site/docs/xstate-react.mdx",sourceDirName:".",slug:"/xstate-react",permalink:"/statelyai-docs/docs/xstate-react",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/docs/xstate-react.mdx",tags:[],version:"current",frontMatter:{title:"@xstate/react"},sidebar:"docs",previous:{title:"Packages",permalink:"/statelyai-docs/docs/category/xstate-packages"},next:{title:"@xstate/vue",permalink:"/statelyai-docs/docs/xstate-vue"}},m={},d=[{value:"Quick start",id:"quick-start",level:2},{value:"Examples",id:"examples",level:2},{value:"API",id:"api",level:2},{value:"<code>useMachine(machine, options?)</code>",id:"usemachinemachine-options",level:3},{value:"Arguments",id:"arguments",level:4},{value:"<code>useActor(actorLogic)</code>",id:"useactoractorlogic",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"<code>useActorRef(machine, options?, observer?)</code>",id:"useactorrefmachine-options-observer",level:3},{value:"Arguments",id:"arguments-2",level:4},{value:"<code>useSelector(actorRef, selector, compare?, getSnapshot?)</code>",id:"useselectoractorref-selector-compare-getsnapshot",level:3},{value:"Arguments",id:"arguments-3",level:4},{value:"<code>createActorContext(machine)</code>",id:"createactorcontextmachine",level:3},{value:"Arguments",id:"arguments-4",level:4},{value:"Shallow comparison",id:"shallow-comparison",level:3},{value:"Configuring machines",id:"configuring-machines",level:2},{value:"Matching states",id:"matching-states",level:2},{value:"Persisted and rehydrated State",id:"persisted-and-rehydrated-state",level:2},{value:"Actor refs",id:"actor-refs",level:2},{value:"Resources",id:"resources",level:2}],u={toc:d};function p(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"The ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/statelyai/xstate/tree/main/packages/xstate-react"},"@xstate/react package")," contains hooks for using ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/statelyai/xstate"},"XState")," with ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/react/"},"React"),"."),(0,r.mdx)("h2",{id:"quick-start"},"Quick start"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"Install ",(0,r.mdx)("inlineCode",{parentName:"li"},"xstate")," and ",(0,r.mdx)("inlineCode",{parentName:"li"},"@xstate/react"),":")),(0,r.mdx)(o.Z,{mdxType:"Tabs"},(0,r.mdx)(s.Z,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"yarn add xstate@beta @xstate/react@beta\n"))),(0,r.mdx)(s.Z,{value:"npm",label:"npm",mdxType:"TabItem"},(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"npm install xstate@beta @xstate/react@beta\n")))),(0,r.mdx)("ol",{start:2},(0,r.mdx)("li",{parentName:"ol"},"Import the ",(0,r.mdx)("inlineCode",{parentName:"li"},"useMachine")," hook:")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { useMachine } from '@xstate/react';\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' },\n    },\n    active: {\n      on: { TOGGLE: 'inactive' },\n    },\n  },\n});\n\nexport const Toggler = () => {\n  const [state, send] = useMachine(toggleMachine);\n\n  return (\n    <button onClick={() => send({ type: 'TOGGLE' })}>\n      {state.value === 'inactive'\n        ? 'Click to activate'\n        : 'Active! Click to deactivate'}\n    </button>\n  );\n};\n")),(0,r.mdx)("h2",{id:"examples"},"Examples"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://codesandbox.io/s/xstate-todomvc-33wr94qv1"},"XState + React TodoMVC (CodeSandbox)"))),(0,r.mdx)("h2",{id:"api"},"API"),(0,r.mdx)("h3",{id:"usemachinemachine-options"},(0,r.mdx)("inlineCode",{parentName:"h3"},"useMachine(machine, options?)")),(0,r.mdx)("p",null,"A ",(0,r.mdx)("a",{parentName:"p",href:"https://reactjs.org/hooks"},"React hook")," that creates an actor from the given ",(0,r.mdx)("inlineCode",{parentName:"p"},"machine")," and starts an actor that runs for the lifetime of the component."),(0,r.mdx)("h4",{id:"arguments"},"Arguments"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"machine")," - An ",(0,r.mdx)("a",{parentName:"li",href:"/statelyai-docs/docs/machines"},"XState machine")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"options?")," - ",(0,r.mdx)("a",{parentName:"li",href:"/statelyai-docs/docs/machines#creating-actors-from-machines"},"Actor options"),".")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Returns")," a tuple of ",(0,r.mdx)("inlineCode",{parentName:"p"},"[state, send, actor]"),":"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"state")," - Represents the current state of the machine as an XState ",(0,r.mdx)("inlineCode",{parentName:"li"},"State")," object."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"send")," - A function that sends events to the running actor."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"actor")," - The started actor.")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// Existing machine\nconst [state, send] = useMachine(machine);\n\n// Machine with provided implementations\n// Will keep provided implementations up-to-date\nconst [state, send] = useMachine(\n  machine.provide({\n    actions: {\n      doSomething: ({ context }) => {\n        // ...\n      },\n    },\n  }),\n);\n")),(0,r.mdx)("h3",{id:"useactoractorlogic"},(0,r.mdx)("inlineCode",{parentName:"h3"},"useActor(actorLogic)")),(0,r.mdx)("p",null,"A ",(0,r.mdx)("a",{parentName:"p",href:"https://reactjs.org/hooks"},"React hook")," that creates an actor from the the given ",(0,r.mdx)("inlineCode",{parentName:"p"},"actorLogic")," and starts an actor that runs for the lifetime of the component."),(0,r.mdx)("h4",{id:"arguments-1"},"Arguments"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"actorLogic")," - The actor logic to create an actor from; e.g. ",(0,r.mdx)("inlineCode",{parentName:"li"},"createMachine(...)"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"fromPromise(...)"),", etc."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"options?")," (optional) - Actor options")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"const promiseLogic = fromPromise(async () => {\n  const data = await getData(...);\n\n  return data;\n});\n\nconst [state, send] = useActor(promiseLogic);\n")),(0,r.mdx)("h3",{id:"useactorrefmachine-options-observer"},(0,r.mdx)("inlineCode",{parentName:"h3"},"useActorRef(machine, options?, observer?)")),(0,r.mdx)("p",null,"A React hook that returns the ",(0,r.mdx)("inlineCode",{parentName:"p"},"actorRef")," created from the ",(0,r.mdx)("inlineCode",{parentName:"p"},"machine")," with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"options"),", if specified. It starts the actor ref and runs it for the lifetime of the component. This is similar to ",(0,r.mdx)("inlineCode",{parentName:"p"},"useActor"),"; however, ",(0,r.mdx)("inlineCode",{parentName:"p"},"useActorRef")," allows for a custom ",(0,r.mdx)("inlineCode",{parentName:"p"},"observer")," to subscribe to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"actorRef"),"."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"useActorRef")," is useful when you want fine-grained control, e.g. to add logging, or minimize re-renders. In contrast to ",(0,r.mdx)("inlineCode",{parentName:"p"},"useActor")," that would flush each update from the machine to the React component, ",(0,r.mdx)("inlineCode",{parentName:"p"},"useActorRef")," instead returns a static reference (to just the machine actor) which will not rerender when its state changes."),(0,r.mdx)("p",null,"To use a piece of state from the actorRef inside a render, use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"useSelector(...)")," hook to subscribe to it."),(0,r.mdx)("h4",{id:"arguments-2"},"Arguments"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"actorLogic")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"options?")," (optional) - Actor options"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"observer?")," (optional) - an observer or listener that listens to state updates:",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"an observer (e.g., ",(0,r.mdx)("inlineCode",{parentName:"li"},"{ next: (snapshot) => {/* ... */} }"),")"),(0,r.mdx)("li",{parentName:"ul"},"or a listener (e.g., ",(0,r.mdx)("inlineCode",{parentName:"li"},"(snapshot) => {/* ... */}"),")")))),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { useActorRef } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\n\nconst App = () => {\n  const actorRef = useActorRef(someMachine);\n\n  // ...\n};\n")),(0,r.mdx)("p",null,"Providing machine implementations:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n\nconst App = () => {\n  const actorRef = useActorRef(\n    someMachine.provide({\n      actions: {\n        // ...\n      },\n    }),\n  );\n\n  // ...\n};\n")),(0,r.mdx)("h3",{id:"useselectoractorref-selector-compare-getsnapshot"},(0,r.mdx)("inlineCode",{parentName:"h3"},"useSelector(actorRef, selector, compare?, getSnapshot?)")),(0,r.mdx)("p",null,"A React hook that returns the selected value from the snapshot of an ",(0,r.mdx)("inlineCode",{parentName:"p"},"actorRef"),", such as a actor ref. This hook will only cause a rerender if the selected value changes, as determined by the optional ",(0,r.mdx)("inlineCode",{parentName:"p"},"compare")," function."),(0,r.mdx)("h4",{id:"arguments-3"},"Arguments"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"actorRef")," - an actor ref"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"selector")," - a function that takes in an actor\u2019s snapshot as an argument and returns the desired selected value."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"compare")," (optional) - a function that determines if the current selected value is the same as the previous selected value."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"getSnapshot")," (optional) - a function that should return the latest emitted value from the ",(0,r.mdx)("inlineCode",{parentName:"li"},"actor"),".",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Defaults to attempting to get the ",(0,r.mdx)("inlineCode",{parentName:"li"},"actor.state"),", or returning ",(0,r.mdx)("inlineCode",{parentName:"li"},"undefined")," if that does not exist. Will automatically pull the state from actor refs.")))),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { useSelector } from '@xstate/react';\n\n// tip: optimize selectors by defining them externally when possible\nconst selectCount = (snapshot) => snapshot.context.count;\n\nconst App = ({ actorRef }) => {\n  const count = useSelector(actorRef, selectCount);\n\n  // ...\n};\n")),(0,r.mdx)("p",null,"With ",(0,r.mdx)("inlineCode",{parentName:"p"},"compare")," function:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n\nconst selectUser = (snapshot) => snapshot.context.user;\nconst compareUser = (prevUser, nextUser) => prevUser.id === nextUser.id;\n\nconst App = ({ actorRef }) => {\n  const user = useSelector(actorRef, selectUser, compareUser);\n\n  // ...\n};\n")),(0,r.mdx)("h3",{id:"createactorcontextmachine"},(0,r.mdx)("inlineCode",{parentName:"h3"},"createActorContext(machine)")),(0,r.mdx)("p",null,"Returns a ",(0,r.mdx)("a",{parentName:"p",href:"https://beta.reactjs.org/learn/passing-data-deeply-with-context"},"React Context object")," that creates an actor from the ",(0,r.mdx)("inlineCode",{parentName:"p"},"machine")," and makes the actor available through React Context. There are helper methods for accessing state and the actor ref."),(0,r.mdx)("h4",{id:"arguments-4"},"Arguments"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"machine")," - An ",(0,r.mdx)("a",{parentName:"li",href:"/statelyai-docs/docs/machines"},"XState machine"))),(0,r.mdx)("p",null,"Returns a React Context object that contains the following properties:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"Provider")," - a React Context Provider component with the following props:",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"machine")," - An ",(0,r.mdx)("a",{parentName:"li",href:"/statelyai-docs/docs/machines"},"XState machine")," that must be of the same type as the machine passed to ",(0,r.mdx)("inlineCode",{parentName:"li"},"createActorContext(...)")))),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"useSelector(selector, compare?)")," - a React hook that takes in a ",(0,r.mdx)("inlineCode",{parentName:"li"},"selector")," function and optional ",(0,r.mdx)("inlineCode",{parentName:"li"},"compare")," function and returns the selected value from the actor snapshot"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"useActorRef()")," - a React hook that returns the actor ref of the ",(0,r.mdx)("inlineCode",{parentName:"li"},"machine")," actor")),(0,r.mdx)("p",null,"Creating a React Context for the actor and providing it in app scope:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { createActorContext } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\n\nconst SomeMachineContext = createActorContext(someMachine);\n\nfunction App() {\n  return (\n    <SomeMachineContext.Provider>\n      <SomeComponent />\n    </SomeMachineContext.Provider>\n  );\n}\n")),(0,r.mdx)("p",null,"Consuming the actor in a component:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { SomeMachineContext } from '../path/to/SomeMachineContext';\n\nfunction SomeComponent() {\n  const count = SomeMachineContext.useSelector((state) => state.context.count);\n  const someActorRef = SomeMachineContext.useActorRef();\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => someActorRef.send({ type: 'inc' })}>\n        Increment\n      </button>\n    </div>\n  );\n}\n")),(0,r.mdx)("p",null,"Providing a similar machine:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { SomeMachineContext } from '../path/to/SomeMachineContext';\nimport { someMachine } from '../path/to/someMachine';\n\nfunction SomeComponent() {\n  return (\n    <SomeMachineContext.Provider\n      machine={someMachine.provide({\n        actions: {\n          someAction: differentImplementation,\n        },\n        // ... More implementations\n      })}\n    >\n      <SomeOtherComponent />\n    </SomeMachineContext.Provider>\n  );\n}\n")),(0,r.mdx)("h3",{id:"shallow-comparison"},"Shallow comparison"),(0,r.mdx)("p",null,"The default comparison is a strict reference comparison (",(0,r.mdx)("inlineCode",{parentName:"p"},"==="),"). If your selector returns non-primitive values, such as objects or arrays, you should keep this in mind and either return the same reference, or provide a shallow or deep comparator."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"shallowEqual(...)")," comparator function is available for shallow comparison:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { useSelector, shallowEqual } from '@xstate/react';\n\n// ...\n\nconst selectUser = (state) => state.context.user;\n\nconst App = ({ actorRef }) => {\n  // shallowEqual comparator is needed to compare the object, whose\n  // reference might change despite the shallow object values being equal\n  const user = useSelector(actorRef, selectUser, shallowEqual);\n\n  // ...\n};\n")),(0,r.mdx)("p",null,"With ",(0,r.mdx)("inlineCode",{parentName:"p"},"useActorRef(...)"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { useActorRef, useSelector } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\n\nconst selectCount = (state) => state.context.count;\n\nconst App = () => {\n  const actorRef = useActorRef(someMachine);\n  const count = useSelector(actorRef, selectCount);\n\n  // ...\n};\n")),(0,r.mdx)("h2",{id:"configuring-machines"},"Configuring machines"),(0,r.mdx)("p",null,"Existing machines can be customized by providing different implementations in ",(0,r.mdx)("inlineCode",{parentName:"p"},"machine.provide(implementations)"),"."),(0,r.mdx)("p",null,"Example: the ",(0,r.mdx)("inlineCode",{parentName:"p"},"'fetchData'")," actor ref and ",(0,r.mdx)("inlineCode",{parentName:"p"},"'notifySuccess'")," action are both configurable:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"const fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  context: {\n    data: undefined,\n    error: undefined,\n  },\n  states: {\n    idle: {\n      on: { FETCH: 'loading' },\n    },\n    loading: {\n      invoke: {\n        src: 'fetchData',\n        onDone: {\n          target: 'success',\n          actions: assign({\n            data: ({ event }) => event.output,\n          }),\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({\n            error: ({ event }) => event.data,\n          }),\n        },\n      },\n    },\n    success: {\n      entry: 'notifySuccess',\n      type: 'final',\n    },\n    failure: {\n      on: {\n        RETRY: 'loading',\n      },\n    },\n  },\n});\n\nconst Fetcher = ({ onResolve }) => {\n  const [state, send] = useMachine(\n    fetchMachine.provide({\n      actions: {\n        notifySuccess: ({ context }) => onResolve(context.data),\n      },\n      actors: {\n        fetchData: fromPromise(() =>\n          fetch(`some/api/${e.query}`).then((res) => res.json()),\n        ),\n      },\n    }),\n  );\n\n  switch (state.value) {\n    case 'idle':\n      return (\n        <button onClick={() => send({ type: 'FETCH', query: 'something' })}>\n          Search for something\n        </button>\n      );\n    case 'loading':\n      return <div>Searching...</div>;\n    case 'success':\n      return <div>Success! Data: {state.context.data}</div>;\n    case 'failure':\n      return (\n        <>\n          <p>{state.context.error.message}</p>\n          <button onClick={() => send({ type: 'RETRY' })}>Retry</button>\n        </>\n      );\n    default:\n      return null;\n  }\n};\n")),(0,r.mdx)("h2",{id:"matching-states"},"Matching states"),(0,r.mdx)("p",null,"When using ",(0,r.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/parent-states"},"hierarchical")," and ",(0,r.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/parallel-states"},"parallel")," machines, the state values will be objects, not strings. In this case, it is best to use ",(0,r.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/states#statematchesstatevalue"},(0,r.mdx)("inlineCode",{parentName:"a"},"state.matches(...)")),"."),(0,r.mdx)("p",null,"We can do this with ",(0,r.mdx)("inlineCode",{parentName:"p"},"if/else if/else")," blocks:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\nif (state.matches('idle')) {\n  return /* ... */;\n} else if (state.matches({ loading: 'user' })) {\n  return /* ... */;\n} else if (state.matches({ loading: 'friends' })) {\n  return /* ... */;\n} else {\n  return null;\n}\n")),(0,r.mdx)("p",null,"We can also continue to use ",(0,r.mdx)("inlineCode",{parentName:"p"},"switch"),", but we must make an adjustment to our approach. By setting the expression of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"switch")," to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true"),", we can use ",(0,r.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/states#statematchesstatevalue"},(0,r.mdx)("inlineCode",{parentName:"a"},"state.matches(...)"))," as a predicate in each ",(0,r.mdx)("inlineCode",{parentName:"p"},"case"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"switch (true) {\n  case state.matches('idle'):\n    return /* ... */;\n  case state.matches({ loading: 'user' }):\n    return /* ... */;\n  case state.matches({ loading: 'friends' }):\n    return /* ... */;\n  default:\n    return null;\n}\n")),(0,r.mdx)("p",null,"A ternary statement can also be considered, especially within rendered JSX:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-jsx"},"const Loader = () => {\n  const [state, send] = useMachine(/* ... */);\n\n  return (\n    <div>\n      {state.matches('idle') ? (\n        <Loader.Idle />\n      ) : state.matches({ loading: 'user' }) ? (\n        <Loader.LoadingUser />\n      ) : state.matches({ loading: 'friends' }) ? (\n        <Loader.LoadingFriends />\n      ) : null}\n    </div>\n  );\n};\n")),(0,r.mdx)("h2",{id:"persisted-and-rehydrated-state"},"Persisted and rehydrated State"),(0,r.mdx)("p",null,"You can persist and rehydrate state with ",(0,r.mdx)("inlineCode",{parentName:"p"},"useMachine(...)")," via ",(0,r.mdx)("inlineCode",{parentName:"p"},"options.state")," in the 2nd argument:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n\n// Get the persisted state config object from somewhere, e.g. localStorage\nconst persistedState = JSON.parse(localStorage.getItem('some-persisted-state-key'));\n\nconst App = () => {\n  const [state, send] = useMachine(someMachine, {\n    state: persistedState // provide persisted state config object here\n  });\n\n  // state will initially be that persisted state, not the machine\u2019s initialState\n\n  return (/* ... */)\n}\n")),(0,r.mdx)("h2",{id:"actor-refs"},"Actor refs"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"actorRef")," created in ",(0,r.mdx)("inlineCode",{parentName:"p"},"useMachine(machine)")," can be referenced as the third returned value:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"//                  vvvvvvvv\nconst [state, send, actorRef] = useMachine(someMachine);\n")),(0,r.mdx)("p",null,"You can subscribe to that actor ref's state changes with the ",(0,r.mdx)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-effect.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"useEffect")," hook"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n\nuseEffect(() => {\n  const subscription = actorRef.subscribe((snapshot) => {\n    // simple logging\n    console.log(snapshot);\n  });\n\n  return subscription.unsubscribe;\n}, [service]); // note: actor ref should never change\n")),(0,r.mdx)("h2",{id:"resources"},"Resources"),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Coming soon")))}p.isMDXComponent=!0}}]);