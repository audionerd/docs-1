"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[10860],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>l,MDXProvider:()=>d,mdx:()=>h,useMDXComponents:()=>m,withMDXComponents:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){return function(t){var n=m(t.components);return a.createElement(e,i({},t,{components:n}))}},m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},x=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),c=m(n),d=r,x=c["".concat(o,".").concat(d)]||c[d]||u[d]||i;return n?a.createElement(x,s(s({ref:t},l),{},{components:n})):a.createElement(x,s({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=x;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}x.displayName="MDXCreateElement"},10758:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={title:"Inspector",description:"@xstate/inspect enables you to inspect and manipulate machines while they\u2019re running in your app. Check out the @xstate/inspect package on GitHub."},o="Inspector",s={unversionedId:"tools/inspector",id:"version-4/tools/inspector",title:"Inspector",description:"@xstate/inspect enables you to inspect and manipulate machines while they\u2019re running in your app. Check out the @xstate/inspect package on GitHub.",source:"@site/versioned_docs/version-4/tools/inspector.mdx",sourceDirName:"tools",slug:"/tools/inspector",permalink:"/docs/xstate-v4/tools/inspector",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/tools/inspector.mdx",tags:[],version:"4",frontMatter:{title:"Inspector",description:"@xstate/inspect enables you to inspect and manipulate machines while they\u2019re running in your app. Check out the @xstate/inspect package on GitHub."},sidebar:"tutorialSidebar",previous:{title:"Visualizer",permalink:"/docs/xstate-v4/tools/visualizer"},next:{title:"Developer tools",permalink:"/docs/xstate-v4/tools/developer-tools"}},p={},l=[{value:"Quickstart",id:"quickstart",level:2},{value:"Options",id:"options",level:2},{value:"<code>iframe</code>",id:"iframe",level:3},{value:"<code>url</code>",id:"url",level:3},{value:"Disconnecting",id:"disconnecting",level:2},{value:"Implementation",id:"implementation",level:2},{value:"How do I run the inspector in a NextJS app?",id:"how-do-i-run-the-inspector-in-a-nextjs-app",level:3}],c={toc:l};function m(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"inspector"},"Inspector"),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"@xstate/inspect")," enables you to inspect and manipulate machines ",(0,r.mdx)("em",{parentName:"p"},"while they\u2019re running")," in your app. ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/statelyai/xstate/tree/main/packages/xstate-inspect"},"Check out the @xstate/inspect package on GitHub"),"."),(0,r.mdx)("p",null,"Currently, ",(0,r.mdx)("inlineCode",{parentName:"p"},"@xstate/inspect")," only works in ",(0,r.mdx)("em",{parentName:"p"},"frontend applications")," , but we\u2019re working on a version that can inspect machines running in ",(0,r.mdx)("a",{parentName:"p",href:"https://nodejs.org/"},"Node"),"."),(0,r.mdx)("p",null,"To see it running right now, here are our CodeSandbox templates:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://codesandbox.io/s/xstate-ts-viz-template-qzdvv"},"XState (Vanilla)")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://codesandbox.io/s/xstate-ts-viz-template-qzdvv"},"XState + TypeScript")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://codesandbox.io/s/xstate-vue-viz-template-r5wd7"},"XState + Vue")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://codesandbox.io/s/xstate-react-viz-template-5wq3q"},"XState + React"))),(0,r.mdx)("h2",{id:"quickstart"},"Quickstart"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"Install with npm or yarn:")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"npm install @xstate/inspect\n# or yarn add @xstate/inspect\n")),(0,r.mdx)("ol",{start:2},(0,r.mdx)("li",{parentName:"ol"},"Import @xstate/inspect at the beginning of your project before any other code is called:")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { inspect } from '@xstate/inspect';\n\ninspect({\n  // options\n  // url: 'https://stately.ai/viz?inspect', // (default)\n  iframe: false, // open in new window\n});\n")),(0,r.mdx)("ol",{start:3},(0,r.mdx)("li",{parentName:"ol"},"Add ",(0,r.mdx)("inlineCode",{parentName:"li"},"{ devTools: true }")," to any interpreted machines you want to visualize:")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { interpret } from 'xstate';\nimport { inspect } from '@xstate/inspect';\n\nconst actor = interpret(someMachine, {\n  devTools: true,\n}).start();\n")),(0,r.mdx)("h2",{id:"options"},"Options"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// defaults\ninspect({\n  iframe: () => document.querySelector('iframe[data-xstate]'),\n  url: 'https://stately.ai/viz?inspect',\n});\n\n// the code above does the same as:\ninspect();\n")),(0,r.mdx)("p",null,"You can pass several properties to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"options")," object, all of which are optional."),(0,r.mdx)("h3",{id:"iframe"},(0,r.mdx)("inlineCode",{parentName:"h3"},"iframe")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"iframe")," (function or iframe ",(0,r.mdx)("inlineCode",{parentName:"p"},"Element")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"false"),") resolves to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"iframe")," element to display the inspector. If set to ",(0,r.mdx)("inlineCode",{parentName:"p"},"iframe: false"),", a popup window is used instead."),(0,r.mdx)("admonition",{type:"caution"},(0,r.mdx)("p",{parentName:"admonition"},"You may need to \u201callow popups\u201d in your browser to display the inspector in a popup window, as the browser might block them by default.")),(0,r.mdx)("p",null,"By default, the inspector will look for an ",(0,r.mdx)("inlineCode",{parentName:"p"},"<iframe data-xstate>")," element anywhere in the document. If you want to target a custom iframe, specify it eagerly or lazily:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// eager\ninspect({\n  iframe: document.querySelector('iframe.some-xstate-iframe'),\n});\n")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// lazy\ninspect({\n  iframe: () => document.querySelector('iframe.some-xstate-iframe'),\n});\n")),(0,r.mdx)("h3",{id:"url"},(0,r.mdx)("inlineCode",{parentName:"h3"},"url")),(0,r.mdx)("p",null,"Use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"url")," property (string) to specify the URL of the inspector you want to connect to. By default, the inspector runs on ",(0,r.mdx)("inlineCode",{parentName:"p"},"https://stately.ai/viz?inspect"),"."),(0,r.mdx)("h2",{id:"disconnecting"},"Disconnecting"),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"inspect")," returns a function, ",(0,r.mdx)("inlineCode",{parentName:"p"},"disconnect"),", you can use to disconnect the inspector."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { inspect } from '@xstate/inspect';\n\nconst inspector = inspect();\ninspector?.disconnect();\n")),(0,r.mdx)("h2",{id:"implementation"},"Implementation"),(0,r.mdx)("p",null,"You can implement your own inspector by creating a ",(0,r.mdx)("strong",{parentName:"p"},"receiver"),". A ",(0,r.mdx)("strong",{parentName:"p"},"receiver")," is an actor that receives inspector events from a source, like a parent window or a WebSocket connection:"),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},'"actor.register"')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"{\n  type: 'actor.register';\n  machine: AnyStateMachine;\n  state: AnyState;\n  id: string;\n  sessionId: string;\n  parent?: string;\n  source?: string;\n}\n")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},'"actor.stop"')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"{\n  type: 'actor.stop';\n  sessionId: string;\n}\n")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},'"actor.state"')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"{\n  type: 'actor.state';\n  state: AnyState;\n  sessionId: string;\n}\n")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},'"actor.event"')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"{\n  type: 'actor.event';\n  event: SCXML.Event<any>;\n  sessionId: string;\n}\n")),(0,r.mdx)("p",null,"To listen to events from an inspected source, create a receiver with the appropriate ",(0,r.mdx)("inlineCode",{parentName:"p"},"create*Receiver(...)")," function; for example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { createWindowReceiver } from '@xstate/inspect';\n\nconst windowReceiver = createWindowReceiver(/* options? */);\n\nwindowReceiver.subscribe((event) => {\n  // here, you will receive \"actor.*\" events\n  console.log(event);\n});\n")),(0,r.mdx)("p",null,"You can also send events to the receiver:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n\n// This will send the event to the inspected actor\nwindowReceiver.send({\n  type: 'xstate.event',\n  event: JSON.stringify({ type: 'someEvent' }),\n  actor: /* session ID of the actor this event is sent to */\n});\n")),(0,r.mdx)("p",null,"The typical inspection workflow is as follows:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"The ",(0,r.mdx)("inlineCode",{parentName:"li"},"inspect(/* ... */)")," call on the client opens the inspector. For example, in a separate window or creates a WebSocket connection."),(0,r.mdx)("li",{parentName:"ol"},"The receiver sends an ",(0,r.mdx)("inlineCode",{parentName:"li"},'"xstate.inspecting"')," event to the client."),(0,r.mdx)("li",{parentName:"ol"},"The client sends ",(0,r.mdx)("inlineCode",{parentName:"li"},'"actor.register"')," events to the receiver."),(0,r.mdx)("li",{parentName:"ol"},"An inspector listening to the receiver via ",(0,r.mdx)("inlineCode",{parentName:"li"},"receiver.subscribe(...)")," registers the machine, ",(0,r.mdx)("inlineCode",{parentName:"li"},"event.machine"),", by its ",(0,r.mdx)("inlineCode",{parentName:"li"},"event.sessionId"),"."),(0,r.mdx)("li",{parentName:"ol"},"The machine is rendered visually, and its current state, ",(0,r.mdx)("inlineCode",{parentName:"li"},"event.state"),", is highlighted"),(0,r.mdx)("li",{parentName:"ol"},"As the actor at the source receives events and changes state, it will send the receiver ",(0,r.mdx)("inlineCode",{parentName:"li"},'"actor.event"')," and ",(0,r.mdx)("inlineCode",{parentName:"li"},'"actor.state"')," events, respectively."),(0,r.mdx)("li",{parentName:"ol"},"The inspector can use those events to highlight the current state and keep a log of events sent to that actor."),(0,r.mdx)("li",{parentName:"ol"},"When the actor stops, a ",(0,r.mdx)("inlineCode",{parentName:"li"},'"actor.stop"')," event is sent to the receiver with the ",(0,r.mdx)("inlineCode",{parentName:"li"},"event.sessionId")," to identify the stopped actor.")),(0,r.mdx)("h3",{id:"how-do-i-run-the-inspector-in-a-nextjs-app"},"How do I run the inspector in a NextJS app?"),(0,r.mdx)("p",null,"If you want to run the inspector in a NextJS app, you must ensure that the inspector code only runs on the client rather than the server:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"if (typeof window !== 'undefined') {\n  inspect({\n    /* options */\n  });\n}\n")))}m.isMDXComponent=!0}}]);