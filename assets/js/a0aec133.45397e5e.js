"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[91284],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>p,MDXProvider:()=>h,mdx:()=>y,useMDXComponents:()=>m,withMDXComponents:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){return function(t){var n=m(t.components);return a.createElement(e,o({},t,{components:n}))}},m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},h=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=m(n),h=r,u=d["".concat(i,".").concat(h)]||d[h]||c[h]||o;return n?a.createElement(u,s(s({ref:t},p),{},{components:n})):a.createElement(u,s({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},60151:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={title:"History states"},i="History states",s={unversionedId:"xstate/states/history-states",id:"version-4/xstate/states/history-states",title:"History states",description:"When using statecharts, sometimes you\u2019ll want to relaunch a process in a previous state.",source:"@site/versioned_docs/version-4/xstate/states/history-states.mdx",sourceDirName:"xstate/states",slug:"/xstate/states/history-states",permalink:"/statelyai-docs/docs/xstate-v4/xstate/states/history-states",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/states/history-states.mdx",tags:[],version:"4",frontMatter:{title:"History states"},sidebar:"tutorialSidebar",previous:{title:"Parallel states",permalink:"/statelyai-docs/docs/xstate-v4/xstate/states/parallel-states"},next:{title:"In-state guards",permalink:"/statelyai-docs/docs/xstate-v4/xstate/states/in-state-guards"}},l={},p=[{value:"Avoid infinite loops with the history state",id:"avoid-infinite-loops-with-the-history-state",level:3},{value:"Types of history state",id:"types-of-history-state",level:2}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"history-states"},"History states"),(0,r.mdx)("p",null,"When using statecharts, sometimes you\u2019ll want to relaunch a process in a previous state."),(0,r.mdx)("p",null,"In the example below, when you turn the fan off via ",(0,r.mdx)("inlineCode",{parentName:"p"},"POWER_OFF"),", then turn it back on, it will ",(0,r.mdx)("em",{parentName:"p"},"always")," start in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"lowPower")," state."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst fanMachine = createMachine({\n  initial: 'powerOn',\n  states: {\n    powerOn: {\n      on: {\n        TURN_OFF: {\n          target: 'powerOff',\n        },\n        SET_TO_LOW_POWER: {\n          target: '.lowPower',\n        },\n        SET_TO_MEDIUM_POWER: {\n          target: '.mediumPower',\n        },\n        SET_TO_HIGH_POWER: {\n          target: '.highPower',\n        },\n      },\n      initial: 'lowPower',\n      states: {\n        lowPower: {},\n        mediumPower: {},\n        highPower: {},\n      },\n    },\n    powerOff: {\n      on: {\n        TURN_ON: {\n          target: 'powerOn',\n        },\n      },\n    },\n  },\n});\n")),(0,r.mdx)("p",null,"The example above isn\u2019t a great user experience. Ideally, the fan would start with the same power level that the user last selected."),(0,r.mdx)("p",null,"We can use a ",(0,r.mdx)("strong",{parentName:"p"},"history state")," inside the ",(0,r.mdx)("inlineCode",{parentName:"p"},"powerOn")," state to enable that behavior. A history state, when reached, tells the machine to go to the last recorded child of its parent. In our case, when the machine returns to ",(0,r.mdx)("inlineCode",{parentName:"p"},"powerOn"),", it will select ",(0,r.mdx)("inlineCode",{parentName:"p"},"lowPower"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"mediumPower")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"highPower"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst fanMachine = createMachine({\n  initial: 'powerOn',\n  states: {\n    powerOn: {\n      on: {\n        TURN_OFF: {\n          target: 'powerOff',\n        },\n        SET_TO_LOW_POWER: {\n          target: '.lowPower',\n        },\n        SET_TO_MEDIUM_POWER: {\n          target: '.mediumPower',\n        },\n        SET_TO_HIGH_POWER: {\n          target: '.highPower',\n        },\n      },\n      initial: 'lowPower',\n      states: {\n        // highlight-start\n        hist: {\n          type: 'history',\n        },\n        // highlight-end\n        lowPower: {},\n        mediumPower: {},\n        highPower: {},\n      },\n    },\n    powerOff: {\n      on: {\n        // highlight-start\n        TURN_ON: {\n          /**\n           * Target the history node directly\n           */\n          target: 'powerOn.hist',\n        },\n        // highlight-end\n      },\n    },\n  },\n});\n")),(0,r.mdx)("p",null,"In the example above, we\u2019ve changed the target of ",(0,r.mdx)("inlineCode",{parentName:"p"},"TURN_ON")," to target ",(0,r.mdx)("inlineCode",{parentName:"p"},"powerOn.hist"),". You need to target the history node directly. If you targeted ",(0,r.mdx)("inlineCode",{parentName:"p"},"powerOn")," instead of the history node, ",(0,r.mdx)("inlineCode",{parentName:"p"},"TURN_ON")," would default to ",(0,r.mdx)("inlineCode",{parentName:"p"},"powerOn"),"'s initial state, ",(0,r.mdx)("inlineCode",{parentName:"p"},"lowPower"),"."),(0,r.mdx)("h3",{id:"avoid-infinite-loops-with-the-history-state"},"Avoid infinite loops with the history state"),(0,r.mdx)("p",null,"A history state can\u2019t be specified as its parent\u2019s initial state as this will result in an infinite loop."),(0,r.mdx)("h2",{id:"types-of-history-state"},"Types of history state"),(0,r.mdx)("p",null,"You can specify two types of history state:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"shallow"),", only the state at the same level as the history state node will be remembered."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"deep"),", all the state\u2019s children will also be remembered.")),(0,r.mdx)("p",null,"You can specify these types on the state node itself by specifying ",(0,r.mdx)("inlineCode",{parentName:"p"},"history: 'deep'"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"{\n  type: 'history',\n  history: 'deep',\n}\n")),(0,r.mdx)("p",null,"The default behavior of the history state is ",(0,r.mdx)("inlineCode",{parentName:"p"},"shallow"),", but ",(0,r.mdx)("inlineCode",{parentName:"p"},"deep")," is useful when you want to remember a complex state."),(0,r.mdx)("p",null,"In the example below, the user can hide/show their video AND mute/unmute their microphone. When they leave the call to go to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"notOnCall")," state, they can then rejoin the call via ",(0,r.mdx)("inlineCode",{parentName:"p"},"JOIN_CALL"),", which targets ",(0,r.mdx)("inlineCode",{parentName:"p"},"onCall.hist"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst callMachine = createMachine({\n  initial: 'onCall',\n  states: {\n    onCall: {\n      type: 'parallel',\n      on: {\n        LEAVE_CALL: 'notOnCall',\n      },\n      states: {\n        hist: {\n          type: 'history',\n          history: 'deep',\n        },\n        microphone: {\n          initial: 'muted',\n          states: {\n            muted: {\n              on: {\n                UNMUTE: 'notMuted',\n              },\n            },\n            notMuted: {\n              on: {\n                MUTE: 'muted',\n              },\n            },\n          },\n        },\n        video: {\n          initial: 'noVideo',\n          states: {\n            noVideo: {\n              on: {\n                SHOW_VIDEO: 'hasVideo',\n              },\n            },\n            hasVideo: {\n              on: {\n                HIDE_VIDEO: 'noVideo',\n              },\n            },\n          },\n        },\n      },\n    },\n    notOnCall: {\n      on: {\n        JOIN_CALL: 'onCall.hist',\n      },\n    },\n  },\n});\n")),(0,r.mdx)("p",null,"In the example above, the ",(0,r.mdx)("inlineCode",{parentName:"p"},"deep")," history state tracks:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Whether ",(0,r.mdx)("inlineCode",{parentName:"li"},"video")," is in the ",(0,r.mdx)("inlineCode",{parentName:"li"},"noVideo")," or ",(0,r.mdx)("inlineCode",{parentName:"li"},"hasVideo")," state"),(0,r.mdx)("li",{parentName:"ul"},"Whether ",(0,r.mdx)("inlineCode",{parentName:"li"},"microphone")," is in the ",(0,r.mdx)("inlineCode",{parentName:"li"},"muted")," or ",(0,r.mdx)("inlineCode",{parentName:"li"},"unmuted")," state.")),(0,r.mdx)("p",null,"Using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"deep")," history state here means the user\u2019s settings are automatically retained when they rejoin the call."),(0,r.mdx)("p",null,"The above example ",(0,r.mdx)("em",{parentName:"p"},"doesn't")," work with a ",(0,r.mdx)("inlineCode",{parentName:"p"},"shallow")," history as ",(0,r.mdx)("inlineCode",{parentName:"p"},"shallow")," only remembers one level deep, which means the ",(0,r.mdx)("inlineCode",{parentName:"p"},"muted"),"/",(0,r.mdx)("inlineCode",{parentName:"p"},"unmuted")," state would not be preserved."))}m.isMDXComponent=!0}}]);