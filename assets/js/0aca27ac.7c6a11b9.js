"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[57468],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>l,MDXProvider:()=>m,mdx:()=>f,useMDXComponents:()=>u,withMDXComponents:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){return function(t){var n=u(t.components);return r.createElement(e,s({},t,{components:n}))}},u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,y=d["".concat(o,".").concat(m)]||d[m]||p[m]||s;return n?r.createElement(y,i(i({ref:t},l),{},{components:n})):r.createElement(y,i({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=y;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},99946:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const s={title:"Event cases",description:"Model-based testing with XState: how to use eventCases in your test model to test your system with a variety of different values."},o="Event cases",i={unversionedId:"xstate/model-based-testing/event-cases",id:"version-4/xstate/model-based-testing/event-cases",title:"Event cases",description:"Model-based testing with XState: how to use eventCases in your test model to test your system with a variety of different values.",source:"@site/versioned_docs/version-4/xstate/model-based-testing/event-cases.mdx",sourceDirName:"xstate/model-based-testing",slug:"/xstate/model-based-testing/event-cases",permalink:"/docs/xstate-v4/xstate/model-based-testing/event-cases",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/model-based-testing/event-cases.mdx",tags:[],version:"4",frontMatter:{title:"Event cases",description:"Model-based testing with XState: how to use eventCases in your test model to test your system with a variety of different values."},sidebar:"tutorialSidebar",previous:{title:"Assertions",permalink:"/docs/xstate-v4/xstate/model-based-testing/assertions"},next:{title:"Jest in XState Test",permalink:"/docs/xstate-v4/xstate/model-based-testing/jest"}},c={},l=[],d={toc:l};function u(e){let{components:t,...n}=e;return(0,a.mdx)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"event-cases"},"Event cases"),(0,a.mdx)("p",null,"Sometimes you want to test your system with a variety of different values. For example, you might be testing a payment system where you can pay with many different currencies, and you need to ensure that ",(0,a.mdx)("inlineCode",{parentName:"p"},"GBP"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"EUR")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"USD")," all work."),(0,a.mdx)("p",null,"You can use ",(0,a.mdx)("inlineCode",{parentName:"p"},"eventCases")," to test with these different values:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createTestMachine({\n  initial: 'onPaymentPage',\n  states: {\n    onPaymentPage: {\n      on: {\n        SUBMIT_PAYMENT_FORM: 'submitted',\n      },\n    },\n    submitted: {},\n  },\n});\n\nconst model = createTestModel({\n  eventCases: {\n    SUBMIT_PAYMENT_FORM: [\n      {\n        currency: 'GBP',\n      },\n      {\n        currency: 'USD',\n      },\n      {\n        currency: 'EUR',\n      },\n    ],\n  },\n});\n\nmodel.getPaths().forEach((path) => {\n  it(path.description, () => {\n    path.testSync({\n      events: ({ event }) => {\n        /**\n         * Select the currency from the event.currency\n         */\n        cy.findByLabelText('Currency').select(event.currency);\n\n        /**\n         * Submit the form\n         */\n        cy.findByRole('button', {\n          name: 'Submit',\n        }).click();\n      },\n    });\n  });\n});\n")),(0,a.mdx)("p",null,"Using ",(0,a.mdx)("inlineCode",{parentName:"p"},"eventCases")," will create a ",(0,a.mdx)("em",{parentName:"p"},"different path for each case"),". In the example above, the test model will test that each currency can be submitted."))}u.isMDXComponent=!0}}]);