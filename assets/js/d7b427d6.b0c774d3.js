"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[9261],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>m,mdx:()=>f,useMDXComponents:()=>l,withMDXComponents:()=>p});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},o.apply(this,arguments)}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),p=function(e){return function(n){var t=l(n.components);return a.createElement(e,o({},n,{components:t}))}},l=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=l(e.components);return a.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},x=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(t),m=r,x=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return t?a.createElement(x,c(c({ref:n},d),{},{components:t})):a.createElement(x,c({ref:n},d))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=x;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var d=2;d<o;d++)s[d]=t[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}x.displayName="MDXCreateElement"},70021:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var a=t(87462),r=(t(67294),t(3905));const o={title:"Actor cheatsheet",description:"Get working quickly with actors using our quick reference XState cheatsheet, including spawning, sending, and receiving."},s=void 0,c={unversionedId:"xstate/actors/cheatsheet",id:"version-4/xstate/actors/cheatsheet",title:"Actor cheatsheet",description:"Get working quickly with actors using our quick reference XState cheatsheet, including spawning, sending, and receiving.",source:"@site/versioned_docs/version-4/xstate/actors/cheatsheet.mdx",sourceDirName:"xstate/actors",slug:"/xstate/actors/cheatsheet",permalink:"/statelyai-docs/docs/xstate-v4/xstate/actors/cheatsheet",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/actors/cheatsheet.mdx",tags:[],version:"4",frontMatter:{title:"Actor cheatsheet",description:"Get working quickly with actors using our quick reference XState cheatsheet, including spawning, sending, and receiving."},sidebar:"tutorialSidebar",previous:{title:"Spawning actors",permalink:"/statelyai-docs/docs/xstate-v4/xstate/actors/spawn"},next:{title:"TypeScript",permalink:"/statelyai-docs/docs/xstate-v4/category/xstate-typescript"}},i={},d=[{value:"Import <code>spawn</code> to spawn actors",id:"import-spawn-to-spawn-actors",level:2},{value:"Spawn actors in <code>assign</code> action creators",id:"spawn-actors-in-assign-action-creators",level:2},{value:"Spawn different types of actors",id:"spawn-different-types-of-actors",level:2},{value:"Sync state with an actor",id:"sync-state-with-an-actor",level:2},{value:"Get a snapshot from an actor",id:"get-a-snapshot-from-an-actor",level:2},{value:"Send event to actor with <code>send</code> action creator",id:"send-event-to-actor-with-send-action-creator",level:2},{value:"Send event with data to actor using a <code>send</code> expression",id:"send-event-with-data-to-actor-using-a-send-expression",level:2},{value:"Send event from actor to parent with <code>sendParent</code> action creator",id:"send-event-from-actor-to-parent-with-sendparent-action-creator",level:2},{value:"Send event with data from actor to parent using a <code>sendParent</code> expression",id:"send-event-with-data-from-actor-to-parent-using-a-sendparent-expression",level:2},{value:"Reference actors from <code>context</code>",id:"reference-actors-from-context",level:2}],p={toc:d};function l(e){let{components:n,...t}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"Get working quickly with actors using our quick reference cheatsheet."),(0,r.mdx)("h2",{id:"import-spawn-to-spawn-actors"},"Import ",(0,r.mdx)("inlineCode",{parentName:"h2"},"spawn")," to spawn actors"),(0,r.mdx)("p",null,"Import ",(0,r.mdx)("inlineCode",{parentName:"p"},"spawn")," to spawn actors:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"import { spawn } from 'xstate';\n")),(0,r.mdx)("h2",{id:"spawn-actors-in-assign-action-creators"},"Spawn actors in ",(0,r.mdx)("inlineCode",{parentName:"h2"},"assign")," action creators"),(0,r.mdx)("p",null,"Spawn actors in ",(0,r.mdx)("inlineCode",{parentName:"p"},"assign")," action creators:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n{\n  actions: assign({\n    someRef: (context, event) => spawn(someMachine)\n  });\n}\n// ...\n")),(0,r.mdx)("h2",{id:"spawn-different-types-of-actors"},"Spawn different types of actors"),(0,r.mdx)("p",null,"Spawn different types of actors:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n{\n  actions: assign({\n    // From a promise\n    promiseRef: (context, event) =>\n      spawn(\n        new Promise((resolve, reject) => {\n          // ...\n        }),\n        'my-promise'\n      ),\n\n    // From a callback\n    callbackRef: (context, event) =>\n      spawn((callback, receive) => {\n        // send to parent\n        callback('SOME_EVENT');\n\n        // receive from parent\n        receive((event) => {\n          // handle event\n        });\n\n        // disposal\n        return () => {\n          /* do cleanup here */\n        };\n      }),\n\n    // From an observable\n    observableRef: (context, event) => spawn(someEvent$),\n\n    // From a machine\n    machineRef: (context, event) =>\n      spawn(\n        createMachine({\n          // ...\n        })\n      )\n  });\n}\n// ...\n")),(0,r.mdx)("h2",{id:"sync-state-with-an-actor"},"Sync state with an actor"),(0,r.mdx)("p",null,"Sync state with an actor:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n{\n  actions: assign({\n    someRef: () => spawn(someMachine, { sync: true })\n  });\n}\n// ...\n")),(0,r.mdx)("h2",{id:"get-a-snapshot-from-an-actor"},"Get a snapshot from an actor"),(0,r.mdx)("p",null,"Get a snapshot from an actor:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"service.onTransition((state) => {\n  const { someRef } = state.context;\n\n  someRef.getSnapshot();\n  // => State { ... }\n});\n")),(0,r.mdx)("h2",{id:"send-event-to-actor-with-send-action-creator"},"Send event to actor with ",(0,r.mdx)("inlineCode",{parentName:"h2"},"send")," action creator"),(0,r.mdx)("p",null,"Send an event to an actor with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"send")," action creator:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n{\n  actions: send(\n    { type: 'SOME_EVENT' },\n    {\n      to: (context) => context.someRef\n    }\n  );\n}\n// ...\n")),(0,r.mdx)("h2",{id:"send-event-with-data-to-actor-using-a-send-expression"},"Send event with data to actor using a ",(0,r.mdx)("inlineCode",{parentName:"h2"},"send")," expression"),(0,r.mdx)("p",null,"Send an event with data to an actor using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"send")," expression:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n{\n  actions: send((context, event) => ({ ...event, type: 'SOME_EVENT' }), {\n    to: (context) => context.someRef\n  });\n}\n// ...\n")),(0,r.mdx)("h2",{id:"send-event-from-actor-to-parent-with-sendparent-action-creator"},"Send event from actor to parent with ",(0,r.mdx)("inlineCode",{parentName:"h2"},"sendParent")," action creator"),(0,r.mdx)("p",null,"Send an event from an actor to its parent with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"sendParent")," action creator:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n{\n  actions: sendParent({ type: 'ANOTHER_EVENT' });\n}\n// ...\n")),(0,r.mdx)("h2",{id:"send-event-with-data-from-actor-to-parent-using-a-sendparent-expression"},"Send event with data from actor to parent using a ",(0,r.mdx)("inlineCode",{parentName:"h2"},"sendParent")," expression"),(0,r.mdx)("p",null,"Send an event with data from an actor to its parent using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"sendParent")," expression:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// ...\n{\n  actions: sendParent((context, event) => ({\n    ...context,\n    type: 'ANOTHER_EVENT'\n  }));\n}\n// ...\n")),(0,r.mdx)("h2",{id:"reference-actors-from-context"},"Reference actors from ",(0,r.mdx)("inlineCode",{parentName:"h2"},"context")),(0,r.mdx)("p",null,"Reference actors from ",(0,r.mdx)("inlineCode",{parentName:"p"},"context"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"someService.onTransition((state) => {\n  const { someRef } = state.context;\n\n  console.log(someRef);\n  // => { id: ..., send: ... }\n});\n")))}l.isMDXComponent=!0}}]);