"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[30954],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>c,MDXProvider:()=>u,mdx:()=>f,useMDXComponents:()=>m,withMDXComponents:()=>d});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),d=function(e){return function(n){var t=m(n.components);return a.createElement(e,r({},n,{components:t}))}},m=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=m(e.components);return a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=m(t),u=o,g=d["".concat(i,".").concat(u)]||d[u]||p[u]||r;return t?a.createElement(g,s(s({ref:n},c),{},{components:t})):a.createElement(g,s({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},8693:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const r={title:"Actions",description:"Statecharts give you a great deal of control over running side effects in your app. The first method is through actions."},i=void 0,s={unversionedId:"xstate/actions/actions",id:"version-4/xstate/actions/actions",title:"Actions",description:"Statecharts give you a great deal of control over running side effects in your app. The first method is through actions.",source:"@site/versioned_docs/version-4/xstate/actions/actions.mdx",sourceDirName:"xstate/actions",slug:"/xstate/actions/",permalink:"/docs/xstate-v4/xstate/actions/",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/actions/actions.mdx",tags:[],version:"4",frontMatter:{title:"Actions",description:"Statecharts give you a great deal of control over running side effects in your app. The first method is through actions."},sidebar:"tutorialSidebar",previous:{title:"Actions",permalink:"/docs/xstate-v4/category/xstate-actions"},next:{title:"Built-in actions",permalink:"/docs/xstate-v4/xstate/actions/built-in-actions"}},l={},c=[{value:"Side effects",id:"side-effects",level:2},{value:"Actions",id:"actions",level:2},{value:"Actions on self-transitions",id:"actions-on-self-transitions",level:2},{value:"Summary",id:"summary",level:2}],d=(m="ThemedImage",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var m;const u={toc:c};function p(e){let{components:n,...t}=e;return(0,o.mdx)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Statecharts give you a great deal of control over running side effects in your app. The first method is through actions."),(0,o.mdx)("h2",{id:"side-effects"},"Side effects"),(0,o.mdx)("p",null,"You may have come across a type of function called a ",(0,o.mdx)("em",{parentName:"p"},(0,o.mdx)("a",{parentName:"em",href:"https://en.wikipedia.org/wiki/Pure_function"},"pure function")),". A function is \u2018pure\u2019 if it takes in an input, returns a predictable output, and does ",(0,o.mdx)("em",{parentName:"p"},"nothing else"),". Pure functions do not involve:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Waiting a set amount of time"),(0,o.mdx)("li",{parentName:"ul"},"Making an API call"),(0,o.mdx)("li",{parentName:"ul"},"Logging things to the console")),(0,o.mdx)("p",null,"We can think of the processes above as ",(0,o.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Side_effect_(computer_science)"},"side effects")," of our program running. The name gives them a negative medical connotation, but they\u2019re incredibly important. Processes that don\u2019t have side effects don\u2019t talk to anything external, don\u2019t worry about time, and don\u2019t react to unexpected errors."),(0,o.mdx)("h2",{id:"actions"},"Actions"),(0,o.mdx)("p",null,"Actions are side effects which are:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Fire-and-forget"),": Actions don\u2019t talk back to the statechart."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Unlikely to fail"),". Actions are unlikely to impact the system if they fail."),(0,o.mdx)("li",{parentName:"ul"},"Usually ",(0,o.mdx)("strong",{parentName:"li"},"synchronous"),". For example, you don\u2019t ",(0,o.mdx)("inlineCode",{parentName:"li"},"await")," actions.")),(0,o.mdx)("admonition",{type:"studio"},(0,o.mdx)("p",{parentName:"admonition"},(0,o.mdx)("a",{parentName:"p",href:"/docs/xstate-v4/actions-and-actors/entry-and-exit-actions"},"Learn more about how actions work in the Stately Studio"))),(0,o.mdx)("p",null,"Some examples of actions are:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Logging something to the console"),(0,o.mdx)("li",{parentName:"ul"},"Assigning a value to a variable"),(0,o.mdx)("li",{parentName:"ul"},"Changing the attribute of a DOM node")),(0,o.mdx)("p",null,"You can fire an action upon entering or exiting a state by using the ",(0,o.mdx)("inlineCode",{parentName:"p"},"entry")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"exit")," attributes on that state."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine(\n  {\n    initial: 'visiting',\n    states: {\n      visiting: {\n        entry: 'sayHello',\n        exit: 'sayGoodbye',\n        on: {\n          LEAVE: 'notVisiting',\n        },\n      },\n      notVisiting: {},\n    },\n  },\n  {\n    actions: {\n      sayHello: () => {\n        console.log('Hello');\n      },\n      sayGoodbye: () => {\n        console.log('Goodbye');\n      },\n    },\n  },\n);\n")),(0,o.mdx)("p",null,"You can also fire an action on a transition:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine(\n  {\n    initial: 'toggledOn',\n    states: {\n      toggledOn: {\n        on: {\n          TOGGLE: {\n            target: 'toggledOff',\n            actions: 'sayToggled',\n          },\n        },\n      },\n      toggledOff: {\n        on: {\n          TOGGLE: {\n            target: 'toggledOn',\n            actions: 'sayToggled',\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      sayToggled: () => {\n        console.log('Toggled!');\n      },\n    },\n  },\n);\n")),(0,o.mdx)("p",null,"Anywhere you can use an action, you can also declare it as an array to express multiple actions."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine(\n  {\n    entry: ['iSayHello', 'youSayGoodbye'],\n  },\n  {\n    actions: {\n      iSayHello: () => {\n        console.log('Me: Hello');\n      },\n      youSayGoodbye: () => {\n        console.log('You: Goodbye');\n      },\n    },\n  },\n);\n")),(0,o.mdx)("p",null,"In the example above, ",(0,o.mdx)("inlineCode",{parentName:"p"},"Me: Hello")," will be logged to the console, followed by ",(0,o.mdx)("inlineCode",{parentName:"p"},"You: Goodbye"),"."),(0,o.mdx)("h2",{id:"actions-on-self-transitions"},"Actions on self-transitions"),(0,o.mdx)("p",null,"A self-transition is when an event happens, but the transition returns to the same state. The transition arrow exits and re-enters the same state."),(0,o.mdx)("p",null,"A helpful way to describe a self-transition is \u201cdoing something, not going somewhere\u201d in the process."),(0,o.mdx)("p",null,"In a ",(0,o.mdx)("strong",{parentName:"p"},"dog begging")," process, there would be a ",(0,o.mdx)("strong",{parentName:"p"},"begging")," state with a ",(0,o.mdx)("strong",{parentName:"p"},"gets treat")," event. And for the dogs who love their food, no matter how many times you go through the ",(0,o.mdx)("strong",{parentName:"p"},"gets treat")," event, the dog returns to its ",(0,o.mdx)("strong",{parentName:"p"},"begging")," state."),(0,o.mdx)("p",null,(0,o.mdx)(d,{alt:"Dog begging machine with one begging state and a \u2018gets treat\u2019 transition which leaves and returns to the same state.",sources:{light:"https://stately.ai/registry/machines/933419cb-dd94-453c-a2b1-de2290c0a5a5.light.png",dark:"https://stately.ai/registry/machines/933419cb-dd94-453c-a2b1-de2290c0a5a5.dark.png"},mdxType:"ThemedImage"})),(0,o.mdx)("p",null,"Self-transitions are helpful when you want to fire an action, but not leave your current state. You can use an action on the transition to fire it whenever that event is received."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\ncreateMachine(\n  {\n    initial: 'begging',\n    states: {\n      begging: {\n        on: {\n          'gets treat': {\n            actions: 'makeHappySnufflingSound',\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      makeHappySnufflingSound: () => {\n        console.log('Snuffle snuffle snuffle');\n      },\n    },\n  },\n);\n")),(0,o.mdx)("h2",{id:"summary"},"Summary"),(0,o.mdx)("p",null,"You can run actions on ",(0,o.mdx)("inlineCode",{parentName:"p"},"entry")," to a state, ",(0,o.mdx)("inlineCode",{parentName:"p"},"exit")," from a state, or on a transition. Self-transitions are particularly useful if you want to run an action without leaving the state."))}p.isMDXComponent=!0}}]);