"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[65341],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>p,MDXProvider:()=>m,mdx:()=>b,useMDXComponents:()=>s,withMDXComponents:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){return function(t){var n=s(t.components);return a.createElement(e,l({},t,{components:n}))}},s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,f=d["".concat(o,".").concat(m)]||d[m]||u[m]||l;return n?a.createElement(f,c(c({ref:t},p),{},{components:n})):a.createElement(f,c({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=f;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},76360:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=n(87462),r=n(67294),l=n(3905);const o={title:"fromCallback",hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},c=void 0,i={unversionedId:"xstate.fromcallback",id:"xstate.fromcallback",title:"fromCallback",description:"fromCallback() function",source:"@site/api/xstate/xstate.fromcallback.md",sourceDirName:".",slug:"/xstate.fromcallback",permalink:"/statelyai-docs/api/xstate/xstate.fromcallback",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{title:"fromCallback",hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},sidebar:"sidebar"},p={},d=[{value:"fromCallback() function",id:"fromcallback-function",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Example",id:"example",level:2}],s={toc:d};function m(e){let{components:t,...n}=e;return(0,l.mdx)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.mdx)("h2",{id:"fromcallback-function"},"fromCallback() function"),(0,l.mdx)("p",null,"An actor logic creator which returns callback logic as defined by a callback function."),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Signature:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"export declare function fromCallback<TEvent extends EventObject, TInput = unknown>(invokeCallback: InvokeCallback<TEvent, AnyEventObject, TInput>): CallbackActorLogic<TEvent, TInput>;\n")),(0,l.mdx)("h2",{id:"parameters"},"Parameters"),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Parameter"),(0,l.mdx)("th",{parentName:"tr",align:null},"Type"),(0,l.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"invokeCallback"),(0,l.mdx)("td",{parentName:"tr",align:null},"InvokeCallback","<","TEvent, ",(0,l.mdx)("a",{parentName:"td",href:"/statelyai-docs/api/xstate/xstate.anyeventobject"},"AnyEventObject"),(0,l.mdx)(r.Fragment,null),", TInput",">"),(0,l.mdx)("td",{parentName:"tr",align:null},"The callback function used to describe the callback logic The callback function is passed an object with the following properties: - ",(0,l.mdx)("code",null,"receive")," - A function that can be called with a listener function argument; the listener is then called whenever events are received by the parent actor - ",(0,l.mdx)("code",null,"sendBack")," - A function that can send events back to the parent actor - ",(0,l.mdx)("code",null,"input")," - Data that was provided to the parent actor - ",(0,l.mdx)("code",null,"self")," - The parent actor performing the callback logic - ",(0,l.mdx)("code",null,"system")," - The actor system to which the parent actor belongs The callback function can (optionally) return a cleanup function, which is called when the parent actor is stopped.")))),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Returns:")),(0,l.mdx)("p",null,(0,l.mdx)("a",{parentName:"p",href:"/statelyai-docs/api/xstate/xstate.callbackactorlogic"},"CallbackActorLogic"),(0,l.mdx)(r.Fragment,null),"<","TEvent, TInput",">"),(0,l.mdx)("p",null,"Callback logic"),(0,l.mdx)("h2",{id:"remarks"},"Remarks"),(0,l.mdx)("p",null,"Useful for subscription-based or other free-form logic that can send events back to the parent actor."),(0,l.mdx)("p",null,"Actors created from callback logic (\u201ccallback actors\u201d) can: - Receive events via the ",(0,l.mdx)("inlineCode",{parentName:"p"},"receive")," function - Send events to the parent actor via the ",(0,l.mdx)("inlineCode",{parentName:"p"},"sendBack")," function"),(0,l.mdx)("p",null,"Callback actors are a bit different from other actors in that they: - Do not work with ",(0,l.mdx)("inlineCode",{parentName:"p"},"onDone")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"onError")," - Do not produce a snapshot using ",(0,l.mdx)("inlineCode",{parentName:"p"},".getSnapshot()")," - Do not emit values when used with ",(0,l.mdx)("inlineCode",{parentName:"p"},".subscribe()")," - Can not be stopped with ",(0,l.mdx)("inlineCode",{parentName:"p"},".stop()")),(0,l.mdx)("h2",{id:"example"},"Example"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"const callbackLogic = fromCallback(({ sendBack, receive }) => {\n  let lockStatus = 'unlocked';\n\n  const handler = (event) => {\n    if (lockStatus === 'locked') {\n      return;\n    }\n    sendBack(event);\n  };\n\n  receive((event) => {\n    if (event.type === 'lock') {\n      lockStatus = 'locked';\n    } else if (event.type === 'unlock') {\n      lockStatus = 'unlocked';\n    }\n  });\n\n  document.body.addEventListener('click', handler);\n\n  return () => {\n    document.body.removeEventListener('click', handler);\n  };\n});\n")))}m.isMDXComponent=!0}}]);