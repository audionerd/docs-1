"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[31752],{52955:t=>{t.exports=JSON.parse('{"pluginId":"default","version":"4","label":"XState v4","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-4","isLast":false,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Get started","items":[{"type":"link","label":"Introduction","href":"/docs/xstate-v4/studio","docId":"studio"},{"type":"link","label":"State machines and statecharts","href":"/docs/xstate-v4/state-machines-and-statecharts","docId":"state-machines-and-statecharts"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/category/get-started"},{"type":"category","label":"Core concepts","collapsed":false,"collapsible":true,"items":[{"type":"link","label":"Introducing states","href":"/docs/xstate-v4/states/intro","docId":"states/intro"},{"type":"link","label":"Initial states","href":"/docs/xstate-v4/states/initial-states","docId":"states/initial-states"},{"type":"link","label":"Final states","href":"/docs/xstate-v4/states/final-states","docId":"states/final-states"},{"type":"link","label":"Parent states","href":"/docs/xstate-v4/states/parent-states","docId":"states/parent-states"},{"type":"link","label":"Parallel states","href":"/docs/xstate-v4/states/parallel-states","docId":"states/parallel-states"},{"type":"link","label":"History states","href":"/docs/xstate-v4/states/history-states","docId":"states/history-states"},{"type":"category","label":"Transitions and events","items":[{"type":"link","label":"Transitions and events","href":"/docs/xstate-v4/transitions-and-events/intro","docId":"transitions-and-events/intro"},{"type":"link","label":"Guards","href":"/docs/xstate-v4/transitions-and-events/guards","docId":"transitions-and-events/guards"},{"type":"link","label":"Eventless (always) transitions","href":"/docs/xstate-v4/transitions-and-events/eventless-transitions","docId":"transitions-and-events/eventless-transitions"},{"type":"link","label":"Delayed (after) transitions","href":"/docs/xstate-v4/transitions-and-events/delayed-transitions","docId":"transitions-and-events/delayed-transitions"},{"type":"link","label":"Self transitions","href":"/docs/xstate-v4/transitions-and-events/self-transitions","docId":"transitions-and-events/self-transitions"},{"type":"link","label":"State done events","href":"/docs/xstate-v4/transitions-and-events/state-done-events","docId":"transitions-and-events/state-done-events"},{"type":"link","label":"Invoke done events","href":"/docs/xstate-v4/transitions-and-events/invoke-done-events","docId":"transitions-and-events/invoke-done-events"},{"type":"link","label":"Invoke error events","href":"/docs/xstate-v4/transitions-and-events/invoke-error-events","docId":"transitions-and-events/invoke-error-events"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/category/transitions-and-events"},{"type":"category","label":"Actions and actors","items":[{"type":"link","label":"Entry & exit actions","href":"/docs/xstate-v4/actions-and-actors/entry-and-exit-actions","docId":"actions-and-actors/entry-and-exit-actions"},{"type":"link","label":"Actors","href":"/docs/xstate-v4/actions-and-actors/actors","docId":"actions-and-actors/actors"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/category/actions-and-actors"}],"href":"/docs/xstate-v4/category/core-concepts"},{"type":"category","label":"Using Stately Studio","collapsed":false,"collapsible":true,"items":[{"type":"category","label":"Design mode","items":[{"type":"link","label":"Generate flow","href":"/docs/xstate-v4/generate-flow","className":"pro-feature","docId":"generate-flow"},{"type":"link","label":"Import from code","href":"/docs/xstate-v4/import-from-code","docId":"import-from-code"},{"type":"link","label":"Export as code","href":"/docs/xstate-v4/export-as-code","docId":"export-as-code"},{"type":"link","label":"Machine restore","href":"/docs/xstate-v4/machine-restore","docId":"machine-restore"},{"type":"link","label":"Autolayout","href":"/docs/xstate-v4/autolayout","docId":"autolayout"},{"type":"link","label":"Annotations","href":"/docs/xstate-v4/annotations","docId":"annotations"},{"type":"link","label":"Descriptions","href":"/docs/xstate-v4/descriptions","docId":"descriptions"},{"type":"link","label":"Colors","href":"/docs/xstate-v4/colors","className":"pro-feature","docId":"colors"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/design-mode"},{"type":"category","label":"Simulate mode","items":[{"type":"link","label":"Live simulation","href":"/docs/xstate-v4/live-simulation","className":"pro-feature","docId":"live-simulation"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/simulate-mode"},{"type":"link","label":"Version history","href":"/docs/xstate-v4/versions","className":"pro-feature","docId":"versions"},{"type":"link","label":"Lock machines","href":"/docs/xstate-v4/lock-machines","className":"pro-feature","docId":"lock-machines"},{"type":"link","label":"Keyboard shortcuts","href":"/docs/xstate-v4/keyboard-shortcuts","docId":"keyboard-shortcuts"},{"type":"link","label":"Canvas view controls","href":"/docs/xstate-v4/canvas-view-controls","docId":"canvas-view-controls"},{"type":"link","label":"User preferences","href":"/docs/xstate-v4/user-preferences","docId":"user-preferences"}],"href":"/docs/xstate-v4/category/studio"},{"type":"link","label":"Projects","href":"/docs/xstate-v4/projects","docId":"projects"},{"type":"link","label":"Teams","href":"/docs/xstate-v4/teams","className":"pro-feature","docId":"teams"},{"type":"link","label":"Discover","href":"/docs/xstate-v4/discover","docId":"discover"},{"type":"category","label":"Share","items":[{"type":"link","label":"Embed URL","href":"/docs/xstate-v4/embed","docId":"embed"},{"type":"link","label":"Image URL","href":"/docs/xstate-v4/image","docId":"image"},{"type":"link","label":"Share URL","href":"/docs/xstate-v4/url","docId":"url"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/category/share"},{"type":"category","label":"Accounts","items":[{"type":"link","label":"Community plan","href":"/docs/xstate-v4/studio-community-plan","className":"community-feature","docId":"studio-community-plan"},{"type":"link","label":"Pro plan","href":"/docs/xstate-v4/studio-pro-plan","className":"pro-feature","docId":"studio-pro-plan"},{"type":"link","label":"Enterprise plan","href":"/docs/xstate-v4/studio-enterprise-plan","docId":"studio-enterprise-plan"},{"type":"link","label":"Sign up","href":"/docs/xstate-v4/sign-up","docId":"sign-up"},{"type":"link","label":"Upgrade","href":"/docs/xstate-v4/upgrade","docId":"upgrade"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/category/accounts"},{"type":"category","label":"XState library","collapsed":false,"collapsible":true,"items":[{"type":"link","label":"Introducing XState","href":"/docs/xstate-v4/xstate","docId":"xstate/intro"},{"type":"link","label":"Migrate to XState v5 beta","href":"/docs/migration"},{"type":"link","label":"Installation","href":"/docs/xstate-v4/xstate/installation","docId":"xstate/installation"},{"type":"link","label":"Templates","href":"/docs/xstate-v4/xstate/templates","docId":"xstate/templates"},{"type":"category","label":"Basics","items":[{"type":"link","label":"What is a statechart?","href":"/docs/xstate-v4/xstate/basics/what-is-a-statechart","docId":"xstate/basics/what-is-a-statechart"},{"type":"link","label":"Options","href":"/docs/xstate-v4/xstate/basics/options","docId":"xstate/basics/options"},{"type":"link","label":"Inline vs. named Options","href":"/docs/xstate-v4/xstate/basics/inline-vs-named-options","docId":"xstate/basics/inline-vs-named-options"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/category/xstate-basics"},{"type":"category","label":"Actions","items":[{"type":"link","label":"Actions","href":"/docs/xstate-v4/xstate/actions/","docId":"xstate/actions/actions"},{"type":"link","label":"Built-in actions","href":"/docs/xstate-v4/xstate/actions/built-in-actions","docId":"xstate/actions/built-in-actions"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/category/xstate-actions"},{"type":"link","label":"Context","href":"/docs/xstate-v4/xstate/actions/context","docId":"xstate/actions/context"},{"type":"category","label":"Transitions and choices","items":[{"type":"link","label":"Guards","href":"/docs/xstate-v4/xstate/transitions-and-choices/guards","docId":"xstate/transitions-and-choices/guards"},{"type":"link","label":"Guarded actions","href":"/docs/xstate-v4/xstate/transitions-and-choices/guarded-actions","docId":"xstate/transitions-and-choices/guarded-actions"},{"type":"link","label":"Always","href":"/docs/xstate-v4/xstate/transitions-and-choices/always","docId":"xstate/transitions-and-choices/always"},{"type":"link","label":"After","href":"/docs/xstate-v4/xstate/transitions-and-choices/after","docId":"xstate/transitions-and-choices/after"},{"type":"link","label":"Internal and external transitions","href":"/docs/xstate-v4/xstate/transitions-and-choices/internal-external","docId":"xstate/transitions-and-choices/internal-external"},{"type":"link","label":"Transition descriptions","href":"/docs/xstate-v4/xstate/transitions-and-choices/transition-descriptions","docId":"xstate/transitions-and-choices/transition-descriptions"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/category/xstate-transitions-and-choices"},{"type":"category","label":"Running machines","items":[{"type":"link","label":"Running machines","href":"/docs/xstate-v4/xstate/running-machines/intro","docId":"xstate/running-machines/intro"},{"type":"link","label":"XState in React","href":"/docs/xstate-v4/xstate/running-machines/react","docId":"xstate/running-machines/react"},{"type":"link","label":"Node","href":"/docs/xstate-v4/xstate/running-machines/node","docId":"xstate/running-machines/node"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/category/xstate-running-machines"},{"type":"category","label":"Deep dive: states","items":[{"type":"link","label":"Parent and child states","href":"/docs/xstate-v4/xstate/states/parent-and-child-states","docId":"xstate/states/parent-and-child-states"},{"type":"link","label":"Other state attributes","href":"/docs/xstate-v4/xstate/states/other-state-attributes","docId":"xstate/states/other-state-attributes"},{"type":"link","label":"Advanced transitions","href":"/docs/xstate-v4/xstate/states/advanced-transitions","docId":"xstate/states/advanced-transitions"},{"type":"link","label":"Final states","href":"/docs/xstate-v4/xstate/states/final-states","docId":"xstate/states/final-states"},{"type":"link","label":"Parallel states","href":"/docs/xstate-v4/xstate/states/parallel-states","docId":"xstate/states/parallel-states"},{"type":"link","label":"History states","href":"/docs/xstate-v4/xstate/states/history-states","docId":"xstate/states/history-states"},{"type":"link","label":"In-state guards","href":"/docs/xstate-v4/xstate/states/in-state-guards","docId":"xstate/states/in-state-guards"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/category/xstate-states"},{"type":"category","label":"Model-based testing","items":[{"type":"link","label":"Model-based testing","href":"/docs/xstate-v4/xstate/model-based-testing/intro","docId":"xstate/model-based-testing/intro"},{"type":"link","label":"When to use XState Test","href":"/docs/xstate-v4/xstate/model-based-testing/when-to-use","docId":"xstate/model-based-testing/when-to-use"},{"type":"link","label":"Quickstart","href":"/docs/xstate-v4/xstate/model-based-testing/quickstart","docId":"xstate/model-based-testing/quickstart"},{"type":"link","label":"Test paths","href":"/docs/xstate-v4/xstate/model-based-testing/test-paths","docId":"xstate/model-based-testing/test-paths"},{"type":"link","label":"Assertions","href":"/docs/xstate-v4/xstate/model-based-testing/assertions","docId":"xstate/model-based-testing/assertions"},{"type":"link","label":"Event cases","href":"/docs/xstate-v4/xstate/model-based-testing/event-cases","docId":"xstate/model-based-testing/event-cases"},{"type":"link","label":"Jest in XState Test","href":"/docs/xstate-v4/xstate/model-based-testing/jest","docId":"xstate/model-based-testing/jest"},{"type":"link","label":"Vitest in XState Test","href":"/docs/xstate-v4/xstate/model-based-testing/vitest","docId":"xstate/model-based-testing/vitest"},{"type":"link","label":"Cypress in XState Test","href":"/docs/xstate-v4/xstate/model-based-testing/cypress","docId":"xstate/model-based-testing/cypress"},{"type":"link","label":"Playwright in XState Test","href":"/docs/xstate-v4/xstate/model-based-testing/playwright","docId":"xstate/model-based-testing/playwright"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/category/xstate-model-based-testing"},{"type":"category","label":"Actors","items":[{"type":"link","label":"Introducing actors","href":"/docs/xstate-v4/xstate/actors/intro","docId":"xstate/actors/intro"},{"type":"link","label":"Promises","href":"/docs/xstate-v4/xstate/actors/promises","docId":"xstate/actors/promises"},{"type":"link","label":"Actions vs. actors","href":"/docs/xstate-v4/xstate/actors/actions-vs-actors","docId":"xstate/actors/actions-vs-actors"},{"type":"link","label":"Callbacks","href":"/docs/xstate-v4/xstate/actors/callbacks","docId":"xstate/actors/callbacks"},{"type":"link","label":"Machines","href":"/docs/xstate-v4/xstate/actors/machines","docId":"xstate/actors/machines"},{"type":"link","label":"Observables","href":"/docs/xstate-v4/xstate/actors/observables","docId":"xstate/actors/observables"},{"type":"link","label":"Parent to child communication","href":"/docs/xstate-v4/xstate/actors/parent-child-communication","docId":"xstate/actors/parent-child-communication"},{"type":"link","label":"Spawning actors","href":"/docs/xstate-v4/xstate/actors/spawn","docId":"xstate/actors/spawn"},{"type":"link","label":"Actor cheatsheet","href":"/docs/xstate-v4/xstate/actors/cheatsheet","docId":"xstate/actors/cheatsheet"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/category/xstate-actors"},{"type":"category","label":"TypeScript","items":[{"type":"link","label":"Typegen","href":"/docs/xstate-v4/xstate/typescript/typegen","docId":"xstate/typescript/typegen"},{"type":"link","label":"Type helpers","href":"/docs/xstate-v4/xstate/typescript/type-helpers","docId":"xstate/typescript/type-helpers"},{"type":"link","label":"Troubleshooting","href":"/docs/xstate-v4/xstate/typescript/troubleshooting","docId":"xstate/typescript/troubleshooting"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/category/xstate-typescript"},{"type":"category","label":"Packages","items":[{"type":"link","label":"@xstate/fsm","href":"/docs/xstate-v4/xstate/packages/xstate-fsm","docId":"xstate/packages/xstate-fsm"},{"type":"link","label":"@xstate/graph","href":"/docs/xstate-v4/xstate/packages/xstate-graph","docId":"xstate/packages/xstate-graph"},{"type":"link","label":"@xstate/test","href":"/docs/xstate-v4/xstate/packages/xstate-test","docId":"xstate/packages/xstate-test"},{"type":"link","label":"@xstate/immer","href":"/docs/xstate-v4/xstate/packages/xstate-immer","docId":"xstate/packages/xstate-immer"},{"type":"link","label":"@xstate/react","href":"/docs/xstate-v4/xstate/packages/xstate-react","docId":"xstate/packages/xstate-react"},{"type":"link","label":"@xstate/svelte","href":"/docs/xstate-v4/xstate/packages/xstate-svelte","docId":"xstate/packages/xstate-svelte"},{"type":"link","label":"@xstate/vue","href":"/docs/xstate-v4/xstate/packages/xstate-vue","docId":"xstate/packages/xstate-vue"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/category/xstate-packages"},{"type":"category","label":"Advanced Topics","items":[{"type":"link","label":"React Patterns","href":"/docs/xstate-v4/xstate/advanced/react-patterns","docId":"xstate/advanced/react-patterns"},{"type":"link","label":"SCXML","href":"/docs/xstate-v4/xstate/advanced/scxml","docId":"xstate/advanced/scxml"}],"collapsed":true,"collapsible":true,"href":"/docs/xstate-v4/category/xstate-advanced-topics"}],"href":"/docs/xstate-v4/category/xstate"},{"type":"category","label":"Developer tools","collapsed":false,"collapsible":true,"items":[{"type":"link","label":"XState VS Code extension","href":"/docs/xstate-v4/tools/xstate-vscode-extension","docId":"tools/xstate-vscode-extension"},{"type":"link","label":"Visualizer","href":"/docs/xstate-v4/tools/visualizer","docId":"tools/visualizer"},{"type":"link","label":"Inspector","href":"/docs/xstate-v4/tools/inspector","docId":"tools/inspector"},{"type":"link","label":"Other tools","href":"/docs/xstate-v4/tools/developer-tools","docId":"tools/developer-tools"}],"href":"/docs/xstate-v4/category/developer-tools"},{"type":"link","label":"Examples","href":"/docs/xstate-v4/examples/intro","docId":"examples/intro"},{"type":"link","label":"Glossary","href":"/docs/xstate-v4/glossary","docId":"glossary"}]},"docs":{"actions-and-actors/actors":{"id":"actions-and-actors/actors","title":"Actors","description":"When you run a statechart, it becomes an actor: a running process that can receive and send messages, and change its behavior based on messages it receives.","sidebar":"tutorialSidebar"},"actions-and-actors/entry-and-exit-actions":{"id":"actions-and-actors/entry-and-exit-actions","title":"Entry & exit actions","description":"While the statechart is running, it can execute other effects called actions. Actions are \u201cfire-and-forget effects.\u201d","sidebar":"tutorialSidebar"},"annotations":{"id":"annotations","title":"Annotations","description":"Annotations are notes you can use to annotate your machine, positioned anywhere inside your machine. Annotations are useful for information or comments you want to add to your machine that are only visible inside Stately Studio and not included when you export as code.","sidebar":"tutorialSidebar"},"autolayout":{"id":"autolayout","title":"Autolayout","description":"Autolayout chooses an optimal layout for your machine to make it easier to read and understand. When you import a machine, autolayout will be applied automatically. Otherwise, you can autolayout your machine anytime using the  Autolayout button.","sidebar":"tutorialSidebar"},"canvas-view-controls":{"id":"canvas-view-controls","title":"Canvas view controls","description":"You spend a lot of time on the canvas while designing and simulating state machines, so we\u2019ve added view controls to help you navigate around your machines.","sidebar":"tutorialSidebar"},"colors":{"id":"colors","title":"Colors","description":"You can highlight your machine\u2019s state and event nodes with colors. You can use colors however you like; some ideas include:","sidebar":"tutorialSidebar"},"descriptions":{"id":"descriptions","title":"Descriptions","description":"You can add descriptions to state and event nodes to describe their purpose and share related notes with your team. Descriptions support markdown formatting, including links and images.","sidebar":"tutorialSidebar"},"design-mode":{"id":"design-mode","title":"Design mode","description":"Tour the features in Stately editor\u2019s Design mode, including a guide to all the panels and how to use the editor.","sidebar":"tutorialSidebar"},"discover":{"id":"discover","title":"Discover","description":"Are you seeking inspiration for your machine? Or do you want to learn how somebody else models their machines? The Discover page lists all the public machines created with the Stately Studio.","sidebar":"tutorialSidebar"},"embed":{"id":"embed","title":"Embed machines using their embed URL","description":"You can embed your machines anywhere that supports iframes. Embed mode is a focused non-editable view of your machine in Stately Studio\u2019s editor, which can be zoomed and panned.","sidebar":"tutorialSidebar"},"examples/intro":{"id":"examples/intro","title":"Request examples","description":"Examples are coming soon. If you have any examples you want us to make, please add a request or upvote an existing suggestion.","sidebar":"tutorialSidebar"},"export-as-code":{"id":"export-as-code","title":"Export as code","description":"Exporting as code is useful if you want to use your machine with XState inside your codebase or if you want to duplicate your machine without using Fork.","sidebar":"tutorialSidebar"},"generate-flow":{"id":"generate-flow","title":"Generate flow","description":"Generate flow is an experimental feature that helps you auto-create machines from text descriptions. You can generate a flow for a new machine or use the flow description to describe how you want to modify your current flow.","sidebar":"tutorialSidebar"},"glossary":{"id":"glossary","title":"Glossary","description":"This glossary is an alphabetical guide to the most common terms in statecharts and state machines.","sidebar":"tutorialSidebar"},"image":{"id":"image","title":"Share machine images using their image URL","description":"You can share an image of your machine anywhere that supports images. You can use the image URL for live-updating images where the machine is always updated with your latest changes. Machine images can be helpful in documentation, including GitHub pull requests.","sidebar":"tutorialSidebar"},"import-from-code":{"id":"import-from-code","title":"Import from code","description":"Importing from code is helpful if you\u2019ve already built machines while working with XState, or have created a machine using our older Stately Viz but haven\u2019t yet tried the Stately Studio Editor.","sidebar":"tutorialSidebar"},"import-from-github":{"id":"import-from-github","title":"Import from GitHub","description":"Import your machines from GitHub into the Stately Studio."},"keyboard-shortcuts":{"id":"keyboard-shortcuts","title":"Keyboard shortcuts","description":"Stately Studio has a number of keyboard shortcuts.","sidebar":"tutorialSidebar"},"live-simulation":{"id":"live-simulation","title":"Live Simulation Mode","description":"Live simulation mode helps you share your simulated machine with your team without screen sharing or screenshots. Share the generated live simulation link, and your team can view your simulation in real-time and even trigger events themselves.","sidebar":"tutorialSidebar"},"lock-machines":{"id":"lock-machines","title":"Lock machines","description":"You can lock a machine anytime to prevent accidental edits. Locked machines have a  Locked status displayed in the editor\u2019s top bar.","sidebar":"tutorialSidebar"},"machine-restore":{"id":"machine-restore","title":"Machine restore","description":"The Studio is built using a server-client architecture.","sidebar":"tutorialSidebar"},"projects":{"id":"projects","title":"Projects","description":"A project is a collection of machines that helps you organize your personal machines and collaborate with others on your application logic.","sidebar":"tutorialSidebar"},"sign-up":{"id":"sign-up","title":"Sign up for the Stately Studio","description":"You can sign up for a Stately Studio account from the Sign in page or the Sign in button in the editor\u2019s top bar.","sidebar":"tutorialSidebar"},"simulate-mode":{"id":"simulate-mode","title":"Simulate mode","description":"Tour the features in Stately editor\u2019s Simulate mode, including a guide to all the panels and how to simulate your machines.","sidebar":"tutorialSidebar"},"state-machines-and-statecharts":{"id":"state-machines-and-statecharts","title":"What are state machines and statecharts?","description":"State machines help us model how a process goes from state to state when an event occurs.","sidebar":"tutorialSidebar"},"states/final-states":{"id":"states/final-states","title":"Final states","description":"When a machine reaches the final state, it can no longer receive any events, and anything running inside it is canceled and cleaned up.","sidebar":"tutorialSidebar"},"states/history-states":{"id":"states/history-states","title":"History states","description":"In statecharts, a history state returns the parent state to its most recently active child state. The box with an H inside represents the history state.","sidebar":"tutorialSidebar"},"states/initial-states":{"id":"states/initial-states","title":"Initial states","description":"When a state machine starts, it enters the initial state first. A machine can only have one top-level initial state. Parent states also have initial states.","sidebar":"tutorialSidebar"},"states/intro":{"id":"states/intro","title":"States","description":"A state describes a state machine\u2019s status or mode, which could be as simple as\xa0Paused\xa0and\xa0Playing. A state machine can only be in one state at a time.","sidebar":"tutorialSidebar"},"states/parallel-states":{"id":"states/parallel-states","title":"Parallel states","description":"In statecharts, a parallel state is a state separated into multiple regions of child states, where each region is active simultaneously.","sidebar":"tutorialSidebar"},"states/parent-states":{"id":"states/parent-states","title":"Parent states","description":"Parent states can contain more states, also known as child states. These child states are only active when the parent state is active.","sidebar":"tutorialSidebar"},"studio":{"id":"studio","title":"Welcome to the Stately docs","description":"Here you can find all the documentation for the Stately Studio and XState. There are a few ways you might want to get started:","sidebar":"tutorialSidebar"},"studio-community-plan":{"id":"studio-community-plan","title":"Stately Studio Community plan","description":"The Stately Studio will always be free to our Community users on this free plan, and we will make many future features available on every plan. Request features and check out what we\u2019ve got planned on our roadmap.","sidebar":"tutorialSidebar"},"studio-enterprise-plan":{"id":"studio-enterprise-plan","title":"Stately Studio Enterprise plan","description":"Email the Stately team for a custom plan tailored to the requirements of your organization.","sidebar":"tutorialSidebar"},"studio-pro-plan":{"id":"studio-pro-plan","title":"Stately Studio Pro plan","description":"Upgrade to a Pro account to get features designed to help you collaborate with your team, including the following Pro features.","sidebar":"tutorialSidebar"},"teams":{"id":"teams","title":"Teams","description":"You can create and join teams in Stately Studio to share and collaborate on team projects.","sidebar":"tutorialSidebar"},"tools/developer-tools":{"id":"tools/developer-tools","title":"Developer tools","description":"Find out more about the Stately XState CLI (Command Line Interface) and other dev tools available for Stately and XState.","sidebar":"tutorialSidebar"},"tools/inspector":{"id":"tools/inspector","title":"Inspector","description":"@xstate/inspect enables you to inspect and manipulate machines while they\u2019re running in your app. Check out the @xstate/inspect package on GitHub.","sidebar":"tutorialSidebar"},"tools/visualizer":{"id":"tools/visualizer","title":"Visualizer","description":"The Stately Viz is a legacy tool for creating and inspecting statecharts to visualize the state of your applications.","sidebar":"tutorialSidebar"},"tools/xstate-vscode-extension":{"id":"tools/xstate-vscode-extension","title":"XState VS Code extension","description":"The XState VS Code extension enhances the XState development experience by providing VS Code users with autocomplete, typegen, linting, and a visual editor.","sidebar":"tutorialSidebar"},"transitions-and-events/delayed-transitions":{"id":"transitions-and-events/delayed-transitions","title":"Delayed (after) transitions","description":"Delayed transitions (also known as after transitions) are transitions that only happen after a specified interval of time.","sidebar":"tutorialSidebar"},"transitions-and-events/eventless-transitions":{"id":"transitions-and-events/eventless-transitions","title":"Eventless (always) transitions","description":"Eventless transitions (also known as always transitions) are transitions without events. These transitions are always taken.","sidebar":"tutorialSidebar"},"transitions-and-events/guards":{"id":"transitions-and-events/guards","title":"Guards","description":"A guard is a condition that the machine checks when it goes through an event. If the condition is true, the machine follows the transition to the next state.","sidebar":"tutorialSidebar"},"transitions-and-events/intro":{"id":"transitions-and-events/intro","title":"Transitions and events","description":"A machine moves from state to state through transitions. Transitions are caused by events; when an event happens, the machine transitions to the next state.","sidebar":"tutorialSidebar"},"transitions-and-events/invoke-done-events":{"id":"transitions-and-events/invoke-done-events","title":"Invoke done events","description":"An invoke done event transitions from a state once its invocation has been completed. An invoke done event is labeled \u201cdone:\u201d followed by the invocation\u2019s ID.","sidebar":"tutorialSidebar"},"transitions-and-events/invoke-error-events":{"id":"transitions-and-events/invoke-error-events","title":"Invoke error events","description":"An invoke error event transitions from a state when an error occurs in its invocation. An invoke error event is labeled \u201cerror.\u201d","sidebar":"tutorialSidebar"},"transitions-and-events/self-transitions":{"id":"transitions-and-events/self-transitions","title":"Self transitions","description":"A self-transition (also known as a self-event) starts and ends in the same state. Self-transitions can be used to restart a state.","sidebar":"tutorialSidebar"},"transitions-and-events/state-done-events":{"id":"transitions-and-events/state-done-events","title":"State done events","description":"A state done event transitions from a parent state when one of its child states reaches its final state. State done events are labeled \u201conDone.\u201d","sidebar":"tutorialSidebar"},"upgrade":{"id":"upgrade","title":"Upgrade your Stately Studio account","description":"The Stately Studio will always be free to our Community users on the Community plan, and we will make many future features available on every plan.","sidebar":"tutorialSidebar"},"url":{"id":"url","title":"Share machines using their share URL","description":"You can share machines with your team or publicly with the machine URL.","sidebar":"tutorialSidebar"},"user-preferences":{"id":"user-preferences","title":"User preferences","description":"We have some simple user preferences to help you customize Stately Studio to fit your needs.","sidebar":"tutorialSidebar"},"versions":{"id":"versions","title":"Version history","description":"Version history is helpful if you want to save checkpoints while modeling machines or mirror version changes in the rest of your codebase. New versions can be saved from the current machine using the Version history panel in the right tool menu when in Design mode.","sidebar":"tutorialSidebar"},"xstate/actions/actions":{"id":"xstate/actions/actions","title":"Actions","description":"Statecharts give you a great deal of control over running side effects in your app. The first method is through actions.","sidebar":"tutorialSidebar"},"xstate/actions/built-in-actions":{"id":"xstate/actions/built-in-actions","title":"Built-in actions","description":"Along with the assign action, XState has several other built-in actions which can do different things in a state machine.","sidebar":"tutorialSidebar"},"xstate/actions/context":{"id":"xstate/actions/context","title":"Context","description":"States are used for handling your apps states which you know about in advance. Context is a data store that you can use to store any arbitrary values.","sidebar":"tutorialSidebar"},"xstate/actors/actions-vs-actors":{"id":"xstate/actors/actions-vs-actors","title":"Actions vs. actors","description":"Sometimes it\u2019s unclear whether you should use an action or an actor. Both appear to do similar things, executing side effects. Let\u2019s break down the differences.","sidebar":"tutorialSidebar"},"xstate/actors/callbacks":{"id":"xstate/actors/callbacks","title":"Callbacks","description":"Promise actors let you model promises, but not every actor will be a promise. Callback actors give you a flexible API for managing a long-running actor.","sidebar":"tutorialSidebar"},"xstate/actors/cheatsheet":{"id":"xstate/actors/cheatsheet","title":"Actor cheatsheet","description":"Get working quickly with actors using our quick reference XState cheatsheet, including spawning, sending, and receiving.","sidebar":"tutorialSidebar"},"xstate/actors/intro":{"id":"xstate/actors/intro","title":"Actors","description":"When you run a statechart, it becomes an actor, a running process that can receive events. Often, you\u2019ll need your actor to run other actors.","sidebar":"tutorialSidebar"},"xstate/actors/machines":{"id":"xstate/actors/machines","title":"Machines","description":"Machine actors enable you to create machines that can act as reusable modules across your application. You can pass a machine directly to the invoke src.","sidebar":"tutorialSidebar"},"xstate/actors/observables":{"id":"xstate/actors/observables","title":"Observables","description":"Observables are streams of values emitted over time. Observables can be invoked, sending events to the parent machine.","sidebar":"tutorialSidebar"},"xstate/actors/parent-child-communication":{"id":"xstate/actors/parent-child-communication","title":"Parent to child communication","description":"Invoked actors can send events to their parent using the sendParent and sendBack methods. Child actors can also receive events from the parent.","sidebar":"tutorialSidebar"},"xstate/actors/promises":{"id":"xstate/actors/promises","title":"Promises","description":"The most common type of actors you\u2019ll invoke are promise actors. Promise actors allow you to await the result of a promise before deciding what to do next.","sidebar":"tutorialSidebar"},"xstate/actors/spawn":{"id":"xstate/actors/spawn","title":"Spawning actors","description":"You can use spawn to run actors. Actors created with spawn are spawning actors, and actors created with invoke are invoking actors.","sidebar":"tutorialSidebar"},"xstate/advanced/react-patterns":{"id":"xstate/advanced/react-patterns","title":"React Patterns","description":"Using React hooks are the easiest way to use state machines in your components. Use the official @xstate/react package to give you useful hooks out of the box.","sidebar":"tutorialSidebar"},"xstate/advanced/scxml":{"id":"xstate/advanced/scxml","title":"SCXML","description":"XState is compatible with the SCXML (State Chart XML: State Machine Notation for Control Abstraction) specification.","sidebar":"tutorialSidebar"},"xstate/basics/inline-vs-named-options":{"id":"xstate/basics/inline-vs-named-options","title":"Inline vs. named Options","description":"Named actions are when you pass options into the config using names. You can also declare your actions inline without names.","sidebar":"tutorialSidebar"},"xstate/basics/options":{"id":"xstate/basics/options","title":"Options","description":"The statechart\u2019s config describes how the machine behaves, the machine\u2019s options are implementation details that expand the machine\u2019s capabilities.","sidebar":"tutorialSidebar"},"xstate/basics/what-is-a-statechart":{"id":"xstate/basics/what-is-a-statechart","title":"XState statechart basics","description":"An XState cheatsheet for statechart basics, including installation, states, initial states, transitions and events, and TypeScript.","sidebar":"tutorialSidebar"},"xstate/installation":{"id":"xstate/installation","title":"Installation","description":"You can install XState using your favorite package manager or embed the `` directly from a CDN.","sidebar":"tutorialSidebar"},"xstate/intro":{"id":"xstate/intro","title":"XState","description":"XState is a JavaScript and TypeScript library for creating, interpreting, and executing finite state machines and statecharts, as well as managing invocations of those machines as actors.","sidebar":"tutorialSidebar"},"xstate/model-based-testing/assertions":{"id":"xstate/model-based-testing/assertions","title":"Assertions","description":"Model-based testing with XState: How to use the setup and assert pattern when writing tests. Including examples.","sidebar":"tutorialSidebar"},"xstate/model-based-testing/cypress":{"id":"xstate/model-based-testing/cypress","title":"Cypress in XState Test","description":"Model-based testing with XState: How to implement model-based testing with Cypress and XState\u2019s @xstate/test package.","sidebar":"tutorialSidebar"},"xstate/model-based-testing/event-cases":{"id":"xstate/model-based-testing/event-cases","title":"Event cases","description":"Model-based testing with XState: how to use eventCases in your test model to test your system with a variety of different values.","sidebar":"tutorialSidebar"},"xstate/model-based-testing/intro":{"id":"xstate/model-based-testing/intro","title":"Model-based testing","description":"Adopting model-based testing can lead to self-documenting, easy-to-maintain tests which are far more DRY than regular tests.","sidebar":"tutorialSidebar"},"xstate/model-based-testing/jest":{"id":"xstate/model-based-testing/jest","title":"Jest in XState Test","description":"Model-based testing with XState: How to implement model-based testing with Jest and XState\u2019s @xstate/test package.","sidebar":"tutorialSidebar"},"xstate/model-based-testing/playwright":{"id":"xstate/model-based-testing/playwright","title":"Playwright in XState Test","description":"Model-based testing with XState: How to implement model-based testing with Playwright and XState\u2019s @xstate/test package.","sidebar":"tutorialSidebar"},"xstate/model-based-testing/quickstart":{"id":"xstate/model-based-testing/quickstart","title":"Quickstart","description":"Model-based testing with XState: How to get started quickly with model-based testing using XState and @xstate/test.","sidebar":"tutorialSidebar"},"xstate/model-based-testing/test-paths":{"id":"xstate/model-based-testing/test-paths","title":"Test paths","description":"Model-based testing with XState: Understanding test paths, including state, event, and transition coverage, multiple paths and condensing to a single path.","sidebar":"tutorialSidebar"},"xstate/model-based-testing/vitest":{"id":"xstate/model-based-testing/vitest","title":"Vitest in XState Test","description":"Model-based testing with XState: How to implement model-based testing with Vitest and XState\u2019s @xstate/test package.","sidebar":"tutorialSidebar"},"xstate/model-based-testing/when-to-use":{"id":"xstate/model-based-testing/when-to-use","title":"When to use XState Test","description":"Model-based testing with XState: Model-based testing is good for many use cases but not for all use cases. What makes a good candidate for model-based testing?","sidebar":"tutorialSidebar"},"xstate/packages/xstate-fsm":{"id":"xstate/packages/xstate-fsm","title":"@xstate/fsm","description":"The @xstate/fsm package contains a minimal, 1kb implementation of XState for finite state machines. Learn how to install and use @xstate/fsm.","sidebar":"tutorialSidebar"},"xstate/packages/xstate-graph":{"id":"xstate/packages/xstate-graph","title":"@xstate/graph","description":"The @xstate/graph package contains graph algorithms and utilities for XState machines. Learn how to install and use @xstate/graph.","sidebar":"tutorialSidebar"},"xstate/packages/xstate-immer":{"id":"xstate/packages/xstate-immer","title":"@xstate/immer","description":"The @xstate/immer package contains utilities for using Immer with XState. Learn how to install and get started quickly with @xstate/immer.","sidebar":"tutorialSidebar"},"xstate/packages/xstate-react":{"id":"xstate/packages/xstate-react","title":"@xstate/react","description":"The @xstate/react package contains utilities for using React with XState. Learn how to install and get started quickly with @xstate/react.","sidebar":"tutorialSidebar"},"xstate/packages/xstate-svelte":{"id":"xstate/packages/xstate-svelte","title":"@xstate/svelte","description":"The @xstate/svelte package contains utilities for using Svelte with XState. Learn how to install and get started quickly with @xstate/svelte.","sidebar":"tutorialSidebar"},"xstate/packages/xstate-test":{"id":"xstate/packages/xstate-test","title":"@xstate/test","description":"The @xstate/test package contains utilities for facilitating model-based testing with XState. Learn how to install and get started quickly with @xstate/test.","sidebar":"tutorialSidebar"},"xstate/packages/xstate-vue":{"id":"xstate/packages/xstate-vue","title":"@xstate/vue","description":"The @xstate/vue package contains utilities for using Vue with XState. Learn how to install and get started quickly with @xstate/vue.","sidebar":"tutorialSidebar"},"xstate/running-machines/intro":{"id":"xstate/running-machines/intro","title":"Running machines","description":"Depending on where you\u2019re using XState, you\u2019ll likely need to run machines differently. We\u2019ll start with the VanillaJS approach for now.","sidebar":"tutorialSidebar"},"xstate/running-machines/node":{"id":"xstate/running-machines/node","title":"Node","description":"Patterns for long-running processes and async functions when running machines in Node.","sidebar":"tutorialSidebar"},"xstate/running-machines/react":{"id":"xstate/running-machines/react","title":"XState in React","description":"You can use XState with React to coordinate local state, manage global state performantly, and consume data from other hooks.","sidebar":"tutorialSidebar"},"xstate/states/advanced-transitions":{"id":"xstate/states/advanced-transitions","title":"Advanced transitions","description":"Parent and child states offer more opportunities for various types of transitions. You can transition from any state to any other state. XState has a few different syntaxes to help you out.","sidebar":"tutorialSidebar"},"xstate/states/final-states":{"id":"xstate/states/final-states","title":"Final states","description":"When a machine reaches the final state, it can no longer receive any events, and anything running inside it is canceled and cleaned up. A machine can have multiple final states or no final states.","sidebar":"tutorialSidebar"},"xstate/states/history-states":{"id":"xstate/states/history-states","title":"History states","description":"When using statecharts, sometimes you\u2019ll want to relaunch a process in a previous state.","sidebar":"tutorialSidebar"},"xstate/states/in-state-guards":{"id":"xstate/states/in-state-guards","title":"In-state guards","description":"You can check if the machine is in a certain state using an in property on a transition. The in property takes a state ID as an argument and returns true if that state node is active in the current state, which can be useful in parallel states.","sidebar":"tutorialSidebar"},"xstate/states/other-state-attributes":{"id":"xstate/states/other-state-attributes","title":"Other state attributes","description":"States can have various other attributes, most of which are useful for narrower cases.","sidebar":"tutorialSidebar"},"xstate/states/parallel-states":{"id":"xstate/states/parallel-states","title":"Parallel states","description":"A parallel state is a state separated into multiple regions of child states, where each region is active simultaneously.","sidebar":"tutorialSidebar"},"xstate/states/parent-and-child-states":{"id":"xstate/states/parent-and-child-states","title":"Parent and child states","description":"States can contain more states, also known as\xa0child states. These child states are only active when the parent state is active. Child states are nested inside their parent states.","sidebar":"tutorialSidebar"},"xstate/templates":{"id":"xstate/templates","title":"Templates","description":"We have XState templates for TypeScript, React Typescript, Vue, Svelte, and more!","sidebar":"tutorialSidebar"},"xstate/transitions-and-choices/after":{"id":"xstate/transitions-and-choices/after","title":"After","description":"Timeouts and intervals can be hard to manage in application code. Statecharts make it easy and declarative using the after syntax.","sidebar":"tutorialSidebar"},"xstate/transitions-and-choices/always":{"id":"xstate/transitions-and-choices/always","title":"Always","description":"Sometimes you\u2019ll need to make checks in your statechart\u2019s current state without receiving an event. You can do this with an eventless transition.","sidebar":"tutorialSidebar"},"xstate/transitions-and-choices/guarded-actions":{"id":"xstate/transitions-and-choices/guarded-actions","title":"Guarded actions","description":"You can use actions and guards together to run actions conditionally on transitions.","sidebar":"tutorialSidebar"},"xstate/transitions-and-choices/guards":{"id":"xstate/transitions-and-choices/guards","title":"Guards","description":"A guard is a condition that the machine checks when it goes through an event. If the condition is true, the transition can be taken. If the condition is false, the next potential transition is tested to determine if it can be taken. Any transition can be a guarded transition.","sidebar":"tutorialSidebar"},"xstate/transitions-and-choices/internal-external":{"id":"xstate/transitions-and-choices/internal-external","title":"Internal and external transitions","description":"Transitions in statecharts can be one of two types: internal or external. External transitions are transitions that leave the machine\u2019s current state node; the \u201csource\u201d state node on which the transition is defined.","sidebar":"tutorialSidebar"},"xstate/transitions-and-choices/transition-descriptions":{"id":"xstate/transitions-and-choices/transition-descriptions","title":"Transition descriptions","description":"You can add descriptions to transitions to illustrate what they do.","sidebar":"tutorialSidebar"},"xstate/typescript/troubleshooting":{"id":"xstate/typescript/troubleshooting","title":"Troubleshooting","description":"There are some known limitations with XState and TypeScript. We love TypeScript, and we\u2019re constantly pressing ahead to make it a better experience in XState.","sidebar":"tutorialSidebar"},"xstate/typescript/type-helpers":{"id":"xstate/typescript/type-helpers","title":"Type helpers","description":"XState makes several type helpers available to you for composing types in TypeScript. You can use these helpers for creating custom functions or typing various integrations.","sidebar":"tutorialSidebar"},"xstate/typescript/typegen":{"id":"xstate/typescript/typegen","title":"Typegen","description":"You can automatically generate intelligent typings for XState using our VS Code extension or our CLI.","sidebar":"tutorialSidebar"}}}')}}]);