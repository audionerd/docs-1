"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[58522],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>l,MDXProvider:()=>c,mdx:()=>x,useMDXComponents:()=>p,withMDXComponents:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),m=function(e){return function(t){var n=p(t.components);return a.createElement(e,i({},t,{components:n}))}},p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),m=p(n),c=o,h=m["".concat(r,".").concat(c)]||m[c]||u[c]||i;return n?a.createElement(h,s(s({ref:t},l),{},{components:n})):a.createElement(h,s({ref:t},l))}));function x(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},25087:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),o=(n(67294),n(3905));const i={title:"XState VS Code extension",description:"The XState VS Code extension enhances the XState development experience by providing VS Code users with autocomplete, typegen, linting, and a visual editor."},r="XState VS Code extension",s={unversionedId:"tools/xstate-vscode-extension",id:"version-4/tools/xstate-vscode-extension",title:"XState VS Code extension",description:"The XState VS Code extension enhances the XState development experience by providing VS Code users with autocomplete, typegen, linting, and a visual editor.",source:"@site/versioned_docs/version-4/tools/xstate-vscode-extension.mdx",sourceDirName:"tools",slug:"/tools/xstate-vscode-extension",permalink:"/statelyai-docs/docs/xstate-v4/tools/xstate-vscode-extension",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/tools/xstate-vscode-extension.mdx",tags:[],version:"4",frontMatter:{title:"XState VS Code extension",description:"The XState VS Code extension enhances the XState development experience by providing VS Code users with autocomplete, typegen, linting, and a visual editor."},sidebar:"tutorialSidebar",previous:{title:"Developer tools",permalink:"/statelyai-docs/docs/xstate-v4/category/developer-tools"},next:{title:"Visualizer",permalink:"/statelyai-docs/docs/xstate-v4/tools/visualizer"}},d={},l=[{value:"Installation",id:"installation",level:2},{value:"Features",id:"features",level:2},{value:"TypeScript typegen",id:"typescript-typegen",level:2},{value:"<code>xsm</code> snippet",id:"xsm-snippet",level:2},{value:"Refactors",id:"refactors",level:2},{value:"Ignoring machines",id:"ignoring-machines",level:2}],m={toc:l};function p(e){let{components:t,...n}=e;return(0,o.mdx)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"xstate-vs-code-extension"},"XState VS Code extension"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=statelyai.stately-vscode"},"XState VS Code extension")," enhances the XState development experience by providing VS Code users with autocomplete, typegen, linting, and a visual editor inside VS Code."),(0,o.mdx)("admonition",{type:"tip"},(0,o.mdx)("p",{parentName:"admonition"},"If you don\u2019t use VS Code but use an open source code editor that supports VS Code extensions, you can ",(0,o.mdx)("a",{parentName:"p",href:"https://open-vsx.org/extension/statelyai/stately-vscode"},"download the XState VS Code extension from the OpenVSX registry"),".")),(0,o.mdx)("h2",{id:"installation"},"Installation"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Open the command palette with ",(0,o.mdx)("inlineCode",{parentName:"li"},"shift")," + ",(0,o.mdx)("inlineCode",{parentName:"li"},"cmd/ctrl")," + ",(0,o.mdx)("inlineCode",{parentName:"li"},"p"),"."),(0,o.mdx)("li",{parentName:"ol"},"Search for the Install Extensions command and hit enter to open the Extensions search."),(0,o.mdx)("li",{parentName:"ol"},"Search for XState to find the XState VS Code extension and install the extension using the Install button."),(0,o.mdx)("li",{parentName:"ol"},"Ensure you have ",(0,o.mdx)("a",{parentName:"li",href:"https://code.visualstudio.com/docs/editor/codebasics#_indentation"},"VS Code setup to insert spaces"),"; we have noticed problems when tabs are used for indentation.")),(0,o.mdx)("p",null,"Once installed, you can run ",(0,o.mdx)("inlineCode",{parentName:"p"},"XState: Open Visual Editor")," from the command palette to open any machine at your cursor\u2019s location."),(0,o.mdx)("p",null,"If you have code lens enabled (this can be enabled using ",(0,o.mdx)("inlineCode",{parentName:"p"},"editor.codeLens")," setting), \u2018Open Visual Editor\u2019 will also float above each ",(0,o.mdx)("inlineCode",{parentName:"p"},"createMachine")," call."),(0,o.mdx)("p",null,"You can also ",(0,o.mdx)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=statelyai.stately-vscode"},"download the VS Code extension from the VS Code marketplace")," or ",(0,o.mdx)("a",{parentName:"p",href:"https://open-vsx.org/extension/statelyai/stately-vscode"},"download the VS Code extension from the Open VSX marketplace"),"."),(0,o.mdx)("h2",{id:"features"},"Features"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Visually edit machines"),". Edit any XState machine with drag-and-drop using the integrated ",(0,o.mdx)("a",{parentName:"li",href:"https://stately.ai/editor"},"Stately Visual editor"),"."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Autocomplete"),". Intelligent suggestions for transition targets and initial states."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Linting"),". Highlights errors and potential bugs in your XState machine definitions."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Jump to definition"),". Navigate around machines easily with jump to definition on targets, actions, guards, actors and more.")),(0,o.mdx)("h2",{id:"typescript-typegen"},"TypeScript typegen"),(0,o.mdx)("p",null,"You can automatically generate intelligent typings for XState with our VS Code extension and ",(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/xstate-v4/tools/developer-tools#xstate-cli-command-line-interface"},"command line interface"),". ",(0,o.mdx)("a",{parentName:"p",href:"../xstate/typescript/typegen"},"Read more about how to use typegen, and our recommended best practices, on the Typegen page"),"."),(0,o.mdx)("h2",{id:"xsm-snippet"},(0,o.mdx)("inlineCode",{parentName:"h2"},"xsm")," snippet"),(0,o.mdx)("p",null,"Use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"xsm")," snippet to generate the code required for your state machine quickly. ",(0,o.mdx)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=Gk3mdlqadYM"},"Watch the \u2018XState + VS Code: xsm snippet\u2019 video (1m23s)")," for a demo."),(0,o.mdx)("h2",{id:"refactors"},"Refactors"),(0,o.mdx)("p",null,"When hovering over a named action, guard or actor in a machine, press the lightbulb icon to view available refactors."),(0,o.mdx)("h2",{id:"ignoring-machines"},"Ignoring machines"),(0,o.mdx)("p",null,"If you\u2019d like to ignore linting/autocomplete on a machine, add an ",(0,o.mdx)("inlineCode",{parentName:"p"},"// xstate-ignore-next-line")," comment on the line above the machine:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"// xstate-ignore-next-line\ncreateMachine({});\n")),(0,o.mdx)("admonition",{type:"tip"},(0,o.mdx)("h2",{parentName:"admonition",id:"machine-layout-persistence"},"Machine layout persistence"),(0,o.mdx)("p",{parentName:"admonition"},"Upon opening an XState machine in VS Code, you may notice a long ",(0,o.mdx)("inlineCode",{parentName:"p"},"@xstate-layout")," comment inserted in the code just above the call to ",(0,o.mdx)("inlineCode",{parentName:"p"},"createMachine()"),"."),(0,o.mdx)("pre",{parentName:"admonition"},(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"const machine =\n/** @xstate-layout N4IgpgJg5mDOIC5QFEA... */\ncreateMachine({...});\n")),(0,o.mdx)("p",{parentName:"admonition"},"This layout string is for persisting manual changes you make to the machine\u2019s layout and is automatically updated by the XState Extension whenever layout changes occur. It is not intended to be human-readable nor manually edited. When updates to this string are made by the extension, the file is not saved until a manual save is performed. The layout algorithm is able to interpret this string and automatically format the machine's layout whenever it is re-opened in Stately Studio\u2019s editor.")),(0,o.mdx)("admonition",{type:"caution"},(0,o.mdx)("p",{parentName:"admonition"},(0,o.mdx)("strong",{parentName:"p"},"Caution"),": if you use tab based-indentation in VS Code the extension might not work. ",(0,o.mdx)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/codebasics#_indentation"},"Setup VS Code to insert spaces")," automatically.")))}p.isMDXComponent=!0}}]);