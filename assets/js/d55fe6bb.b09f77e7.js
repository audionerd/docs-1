"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[30460],{3905:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>m,MDXProvider:()=>c,mdx:()=>y,useMDXComponents:()=>d,withMDXComponents:()=>p});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},r.apply(this,arguments)}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var m=n.createContext({}),p=function(e){return function(t){var a=d(t.components);return n.createElement(e,r({},t,{components:a}))}},d=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=d(a),c=l,h=p["".concat(o,".").concat(c)]||p[c]||u[c]||r;return a?n.createElement(h,s(s({ref:t},m),{},{components:a})):n.createElement(h,s({ref:t},m))}));function y(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=h;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:l,o[1]=s;for(var m=2;m<r;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},93634:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294);const l="embed_rxbU";var r=a(92949);function o(e){let{name:t,embedURL:a}=e;const{colorMode:o}=(0,r.I)();return n.createElement("iframe",{loading:"lazy",src:s(a,{colorMode:o}),className:l},n.createElement("a",{href:a},"View the ",n.createElement("em",null,t)," machine in Stately Studio"),".")}function s(e,t){const a=new URL(e);for(const n in t)a.searchParams.set(n,t[n]);return a.toString()}},73349:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(87462),l=(a(67294),a(3905)),r=a(93634);const o={title:"Parallel states"},s=void 0,i={unversionedId:"parallel-states",id:"parallel-states",title:"Parallel states",description:"In statecharts, a parallel state is a state that has multiple child states (also known as regions) that are all active at the same time. This is different from a parent state, where only one child state is active at a time.",source:"@site/docs/parallel-states.mdx",sourceDirName:".",slug:"/parallel-states",permalink:"/statelyai-docs/docs/parallel-states",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/docs/parallel-states.mdx",tags:[],version:"current",frontMatter:{title:"Parallel states"},sidebar:"docs",previous:{title:"Parent states",permalink:"/statelyai-docs/docs/parent-states"},next:{title:"Initial states",permalink:"/statelyai-docs/docs/initial-states"}},m={},p=[{value:"Using states in Stately Studio",id:"using-states-in-stately-studio",level:2},{value:"Make a state a parallel state",id:"make-a-state-a-parallel-state",level:3},{value:"On the canvas",id:"on-the-canvas",level:4},{value:"Using the state Details panel",id:"using-the-state-details-panel",level:4},{value:"Parallel state value",id:"parallel-state-value",level:2},{value:"onDone transition",id:"ondone-transition",level:2},{value:"Modeling",id:"modeling",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Cheatsheet",id:"cheatsheet",level:2}],d=(c="Info",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.mdx)("div",e)});var c;const u={toc:p};function h(e){let{components:t,...a}=e;return(0,l.mdx)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.mdx)("p",null,"In statecharts, a parallel state is a state that has multiple child states (also known as ",(0,l.mdx)("strong",{parentName:"p"},"regions"),") that are all active at the same time. This is different from a parent state, where only ",(0,l.mdx)("em",{parentName:"p"},"one")," child state is active at a time."),(0,l.mdx)("p",null,"Parallel states have the following characteristics:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"Entering a parallel state will also simultaneously enter all of its regions."),(0,l.mdx)("li",{parentName:"ul"},"Exiting a parallel state will also simultaneously exit all of its regions."),(0,l.mdx)("li",{parentName:"ul"},"An event received in a parallel state is simultaneously received & handled by all of its regions.")),(0,l.mdx)("p",null,"Here is a music player example with a parallel state consisting of two regions, one for handling playing the track and one for handling the volume:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, assign } from 'xstate';\n\nconst playerMachine = createMachine({\n  id: 'player',\n  // highlight-next-line\n  type: 'parallel',\n  states: {\n    track: {\n      initial: 'paused',\n      states: {\n        paused: {\n          on: { PLAY: 'playing' },\n        },\n        playing: {\n          on: { STOP: 'paused' },\n        },\n      },\n    },\n    volume: {\n      initial: 'normal',\n      states: {\n        normal: {\n          on: { MUTE: 'muted' },\n        },\n        muted: {\n          on: { UNMUTE: 'normal' },\n        },\n      },\n    },\n  },\n});\n")),(0,l.mdx)(r.Z,{name:"Video player",embedURL:"https://stately.ai/registry/editor/embed/e13bef2b-bb13-4465-96ac-0bc25340688e?machineId=733de338-26cb-40a5-a0b5-b76bfc0405c3",mdxType:"EmbedMachine"}),(0,l.mdx)("h2",{id:"using-states-in-stately-studio"},"Using states in Stately Studio"),(0,l.mdx)("p",null,"A dashed line borders each region."),(0,l.mdx)("admonition",{type:"tip"},(0,l.mdx)("p",{parentName:"admonition"},"Watch our ",(0,l.mdx)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=CWwgT1TbI4c&list=PLvWgkXBB3dd4I_l-djWVU2UGPyBgKfnTQ&index=6"},"\u201cWhat are parallel states?\u201d video on YouTube")," (54s).")),(0,l.mdx)("p",null,"In the video player machine above, the video and audio states are active at the same time, which means the following combinations of states can happen simultaneously:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"video playing, audio muted"),(0,l.mdx)("li",{parentName:"ul"},"video playing, audio unmuted"),(0,l.mdx)("li",{parentName:"ul"},"video stopped, audio muted"),(0,l.mdx)("li",{parentName:"ul"},"video stopped, audio unmuted")),(0,l.mdx)("h3",{id:"make-a-state-a-parallel-state"},"Make a state a parallel state"),(0,l.mdx)("p",null,"First, select the parent state you want to set as a parallel state. Then\u2026"),(0,l.mdx)("h4",{id:"on-the-canvas"},"On the canvas"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Right-click the state to open the edit menu."),(0,l.mdx)("li",{parentName:"ol"},"From the ",(0,l.mdx)("strong",{parentName:"li"},"Type")," options, choose ",(0,l.mdx)("strong",{parentName:"li"},"Parallel"),".")),(0,l.mdx)("h4",{id:"using-the-state-details-panel"},"Using the state Details panel"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Select the parent state you want to make a parallel state."),(0,l.mdx)("li",{parentName:"ol"},"Open the state ",(0,l.mdx)(d,{size:18,mdxType:"Info"})," ",(0,l.mdx)("strong",{parentName:"li"},"Details")," panel from the right tool menu."),(0,l.mdx)("li",{parentName:"ol"},"From the type option, choose ",(0,l.mdx)("strong",{parentName:"li"},"Parallel"),".")),(0,l.mdx)("p",null,"To set the state back as a normal state, follow the same steps and select the ",(0,l.mdx)("strong",{parentName:"p"},"Normal")," type option."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"parallel-state-value"},"Parallel state value"),(0,l.mdx)("p",null,"The ",(0,l.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/states#state-value"},"state value")," of a parallel state is an object with the state values of each of its regions."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-ts"},"const playerActor = createActor(playerMachine);\nplayerActor.start();\n\nconsole.log(playerActor.getSnapshot().value);\n// logs the object:\n// {\n//   track: 'paused',\n//   volume: 'normal'\n// }\n")),(0,l.mdx)("h2",{id:"ondone-transition"},"onDone transition"),(0,l.mdx)("p",null,(0,l.mdx)("em",{parentName:"p"},"Coming soon")),(0,l.mdx)("h2",{id:"modeling"},"Modeling"),(0,l.mdx)("p",null,(0,l.mdx)("em",{parentName:"p"},"Coming soon")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"Avoid transitions between regions"),(0,l.mdx)("li",{parentName:"ul"},"Used for separation of concerns that ",(0,l.mdx)("em",{parentName:"li"},"may")," affect each other (i.e. synchronization)"),(0,l.mdx)("li",{parentName:"ul"},"If completely separate, prefer ",(0,l.mdx)("inlineCode",{parentName:"li"},"invoke")," instead")),(0,l.mdx)("h2",{id:"typescript"},"TypeScript"),(0,l.mdx)("p",null,(0,l.mdx)("em",{parentName:"p"},"Coming soon")),(0,l.mdx)("h2",{id:"cheatsheet"},"Cheatsheet"),(0,l.mdx)("p",null,(0,l.mdx)("em",{parentName:"p"},"Coming soon")))}h.isMDXComponent=!0}}]);