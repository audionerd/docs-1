"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[9811],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>l,MDXProvider:()=>d,mdx:()=>x,useMDXComponents:()=>p,withMDXComponents:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},o.apply(this,arguments)}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),m=function(e){return function(n){var t=p(n.components);return a.createElement(e,o({},n,{components:t}))}},p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=p(t),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return t?a.createElement(h,i(i({ref:n},l),{},{components:t})):a.createElement(h,i({ref:n},l))}));function x(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=h;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},17505:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=t(87462),r=(t(67294),t(3905));const o={title:"XState in React",description:"You can use XState with React to coordinate local state, manage global state performantly, and consume data from other hooks."},s="XState in React",i={unversionedId:"xstate/running-machines/react",id:"version-4/xstate/running-machines/react",title:"XState in React",description:"You can use XState with React to coordinate local state, manage global state performantly, and consume data from other hooks.",source:"@site/versioned_docs/version-4/xstate/running-machines/react.mdx",sourceDirName:"xstate/running-machines",slug:"/xstate/running-machines/react",permalink:"/statelyai-docs/docs/xstate-v4/xstate/running-machines/react",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/running-machines/react.mdx",tags:[],version:"4",frontMatter:{title:"XState in React",description:"You can use XState with React to coordinate local state, manage global state performantly, and consume data from other hooks."},sidebar:"tutorialSidebar",previous:{title:"Running machines",permalink:"/statelyai-docs/docs/xstate-v4/xstate/running-machines/intro"},next:{title:"Node",permalink:"/statelyai-docs/docs/xstate-v4/xstate/running-machines/node"}},c={},l=[{value:"Installation",id:"installation",level:3},{value:"useMachine hook",id:"usemachine-hook",level:2},{value:"useInterpret hook",id:"useinterpret-hook",level:2},{value:"useSelector",id:"useselector",level:2},{value:"useActor",id:"useactor",level:2}],m={toc:l};function p(e){let{components:n,...t}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"xstate-in-react"},"XState in React"),(0,r.mdx)("p",null,"You can use XState with React to:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Coordinate local state"),(0,r.mdx)("li",{parentName:"ul"},"Manage global state performantly"),(0,r.mdx)("li",{parentName:"ul"},"Consume data from other hooks")),(0,r.mdx)("p",null,"We provide the official ",(0,r.mdx)("inlineCode",{parentName:"p"},"@xstate/react")," package to help you manage the integration. The package provides several hooks and helpers to get you started."),(0,r.mdx)("h3",{id:"installation"},"Installation"),(0,r.mdx)("p",null,"Install the ",(0,r.mdx)("inlineCode",{parentName:"p"},"@xstate/react")," package ",(0,r.mdx)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line#adding_powerups"},"using npm"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"npm install xstate @xstate/react\n")),(0,r.mdx)("h2",{id:"usemachine-hook"},"useMachine hook"),(0,r.mdx)("p",null,"The simplest way to get started with interpreting actors in React is ",(0,r.mdx)("inlineCode",{parentName:"p"},"useMachine"),". ",(0,r.mdx)("inlineCode",{parentName:"p"},"useMachine")," is a ",(0,r.mdx)("a",{parentName:"p",href:"https://reactjs.org/hooks"},"React hook")," that interprets the given ",(0,r.mdx)("inlineCode",{parentName:"p"},"machine")," and starts an actor that runs for the lifetime of the component."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-tsx"},"import { createMachine } from 'xstate';\nimport { useMachine } from '@xstate/react';\n\nconst machine = createMachine({});\n\nconst Component = () => {\n  const [\n    // The current state of the actor\n    state,\n    // A function to send the machine events\n    send,\n    // The running actor - used for passing to `useActor`\n    actor,\n  ] = useMachine(machine);\n\n  return null;\n};\n")),(0,r.mdx)("p",null,"You can also pass machine options to the second argument of ",(0,r.mdx)("inlineCode",{parentName:"p"},"useMachine"),". These options will be kept up to date when the component re-renders, which means they can safely access variables inside the component\u2019s scope:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-tsx"},"const useLoggedInUserId = (): string => '123';\n\nimport { createMachine } from 'xstate';\nimport { useMachine } from '@xstate/react';\n\nconst machine = createMachine({\n  entry: 'consoleLogUserId',\n});\n\nconst Component = () => {\n  const id = useLoggedInUserId();\n\n  const [state, send] = useMachine(machine, {\n    actions: {\n      consoleLogUserId: () => {\n        console.log(id);\n      },\n    },\n  });\n\n  return null;\n};\n")),(0,r.mdx)("h2",{id:"useinterpret-hook"},"useInterpret hook"),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"useMachine")," automatically subscribes to the current state of the machine, which means every state update will result in a re-render of the component that calls it. This re-rendering isn\u2019t always desirable."),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"useInterpret")," allows you to interpret a machine without subscribing to its updates, which means that by default, it won\u2019t cause any re-rendering in the component."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-tsx"},"import { createMachine } from 'xstate';\nimport { useInterpret } from '@xstate/react';\n\nconst machine = createMachine({});\n\nconst Component = () => {\n  const actor = useInterpret(machine);\n\n  return null;\n};\n")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"useInterpret")," accepts the same arguments as ",(0,r.mdx)("inlineCode",{parentName:"p"},"useMachine"),", and follows the same rules with ",(0,r.mdx)("inlineCode",{parentName:"p"},"options"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-tsx"},"const useLoggedInUserId = (): string => '123';\n\nimport { createMachine } from 'xstate';\nimport { useInterpret } from '@xstate/react';\n\nconst machine = createMachine({\n  entry: 'consoleLogUserId',\n});\n\nconst Component = () => {\n  const id = useLoggedInUserId();\n\n  const actor = useInterpret(machine, {\n    actions: {\n      consoleLogUserId: () => {\n        console.log(id);\n      },\n    },\n  });\n\n  return null;\n};\n")),(0,r.mdx)("h2",{id:"useselector"},"useSelector"),(0,r.mdx)("p",null,"You can use ",(0,r.mdx)("inlineCode",{parentName:"p"},"useSelector")," to subscribe to a machine created with ",(0,r.mdx)("inlineCode",{parentName:"p"},"useInterpret")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"interpret"),". ",(0,r.mdx)("inlineCode",{parentName:"p"},"useSelector")," gives you fine-grained control over when your components should re-render and is particularly valuable for good performance."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-tsx"},"import { createMachine, StateFrom } from 'xstate';\nimport { useInterpret, useSelector } from '@xstate/react';\n\nconst machine = createMachine({\n  initial: 'hovered',\n  states: {\n    hovered: {},\n    notHovered: {},\n  },\n});\n\nconst selector = (state: StateFrom<typeof machine>) => state.matches('hovered');\n\nconst Component = () => {\n  const actor = useInterpret(machine);\n\n  const isHovered = useSelector(actor, selector);\n\n  return null;\n};\n")),(0,r.mdx)("p",null,"In the example above, the component will only re-render when the ",(0,r.mdx)("inlineCode",{parentName:"p"},"isHovered")," value changes from ",(0,r.mdx)("inlineCode",{parentName:"p"},"true")," to ",(0,r.mdx)("inlineCode",{parentName:"p"},"false"),"."),(0,r.mdx)("p",null,"Internally, ",(0,r.mdx)("inlineCode",{parentName:"p"},"useSelector")," compares the previous value (",(0,r.mdx)("inlineCode",{parentName:"p"},"prev"),") and the next value (",(0,r.mdx)("inlineCode",{parentName:"p"},"next"),") to determine whether a re-render is required. Strict equality is used for its default check: ",(0,r.mdx)("inlineCode",{parentName:"p"},"prev === next"),". If the check returns true, there will be no re-render."),(0,r.mdx)("p",null,"You can customize the check by passing a ",(0,r.mdx)("inlineCode",{parentName:"p"},"compare")," function to ",(0,r.mdx)("inlineCode",{parentName:"p"},"useSelector"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-tsx"},"import { createMachine, StateFrom } from 'xstate';\nimport { useInterpret, useSelector } from '@xstate/react';\n\nconst machine = createMachine({\n  context: {\n    numbers: [1, 2, 3],\n  },\n});\n\nconst getNumbers = (state: StateFrom<typeof machine>) => state.context.numbers;\n\nconst Component = () => {\n  const actor = useInterpret(machine);\n\n  const numbers = useSelector(actor, getNumbers, (prev, next) => {\n    /**\n     * Checks if 1,2,3 === 2,3,4\n     */\n    return prev.join() === next.join();\n  });\n\n  return null;\n};\n")),(0,r.mdx)("p",null,"The compare function is needed in the example above because comparing two arrays by ",(0,r.mdx)("inlineCode",{parentName:"p"},"[] === []")," would ",(0,r.mdx)("em",{parentName:"p"},"always")," result in a re-render."),(0,r.mdx)("h2",{id:"useactor"},"useActor"),(0,r.mdx)("p",null,"Use ",(0,r.mdx)("inlineCode",{parentName:"p"},"useActor")," if you want to subscribe to ",(0,r.mdx)("em",{parentName:"p"},"all")," updates to an actor from ",(0,r.mdx)("inlineCode",{parentName:"p"},"useInterpret"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-tsx"},"import { createMachine, StateFrom } from 'xstate';\nimport { useInterpret, useActor } from '@xstate/react';\n\nconst machine = createMachine({\n  initial: 'hovered',\n  states: {\n    hovered: {},\n    notHovered: {},\n  },\n});\n\nconst Component = () => {\n  const actor = useInterpret(machine);\n\n  const [\n    // The current state of the actor\n    state,\n    // A function to send the machine events\n    send,\n  ] = useActor(actor);\n\n  const isHovered = state.matches('hovered');\n\n  return null;\n};\n")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"useActor")," subscribes to all state updates from the actor, providing a similar return type to ",(0,r.mdx)("inlineCode",{parentName:"p"},"useMachine"),"."))}p.isMDXComponent=!0}}]);