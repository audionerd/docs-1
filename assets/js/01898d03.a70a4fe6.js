"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[4245],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>m,mdx:()=>f,useMDXComponents:()=>s,withMDXComponents:()=>p});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),p=function(e){return function(t){var n=s(t.components);return a.createElement(e,i({},t,{components:n}))}},s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},x=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(n),m=o,x=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return n?a.createElement(x,r(r({ref:t},d),{},{components:n})):a.createElement(x,r({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=x;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,c[1]=r;for(var d=2;d<i;d++)c[d]=n[d];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}x.displayName="MDXCreateElement"},56407:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294);const o="skip_WFk4",i="text_YVFA";function c(e){let{link:t,text:n}=e;return a.createElement("p",null,a.createElement("a",{href:t,className:o},a.createElement("span",null,"\u2193"),a.createElement("span",{className:i},n),a.createElement("span",null,"\u2193")))}},53851:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>c,metadata:()=>l,toc:()=>p});var a=n(87462),o=(n(67294),n(3905)),i=n(56407);const c={title:"Context"},r=void 0,l={unversionedId:"context",id:"context",title:"Context",description:"In XState, context is how you store data in a state machine actor.",source:"@site/docs/context.mdx",sourceDirName:".",slug:"/context",permalink:"/docs/context",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/docs/context.mdx",tags:[],version:"current",frontMatter:{title:"Context"},sidebar:"docs",previous:{title:"State",permalink:"/docs/states"},next:{title:"Input",permalink:"/docs/input"}},d={},p=[{value:"Using context in Stately Studio",id:"using-context-in-stately-studio",level:2},{value:"Initial context",id:"initial-context",level:2},{value:"Lazy initial context",id:"lazy-initial-context",level:3},{value:"Input",id:"input",level:3},{value:"Updating context with <code>assign(...)</code>",id:"updating-context-with-assign",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Context cheatsheet",id:"context-cheatsheet",level:2}],s={toc:p};function m(e){let{components:t,...n}=e;return(0,o.mdx)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"In XState, ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," is how you store data in a state machine ",(0,o.mdx)("a",{parentName:"p",href:"/docs/actors"},"actor"),"."),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"context")," is a special property available in all states and used to store data relevant to the state machine. The ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," object is immutable, so you cannot directly modify it. Instead, use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"assign(...)")," action to update ",(0,o.mdx)("inlineCode",{parentName:"p"},"context"),"."),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," property is ",(0,o.mdx)("em",{parentName:"p"},"optional"),"; if the state machine only specifies ",(0,o.mdx)("a",{parentName:"p",href:"/docs/finite-states"},"finite states"),", it may not need ",(0,o.mdx)("inlineCode",{parentName:"p"},"context"),"."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst feedbackMachine = createMachine({\n  // Initialize the state machine with context\n  context: {\n    feedback: 'Some feedback',\n  },\n});\n\nconst feedbackActor = createActor(feedbackMachine);\n\nfeedbackActor.subscribe((state) => {\n  console.log(state.context.feedback);\n});\n\nfeedbackActor.start();\n// logs 'Some feedback'\n")),(0,o.mdx)(i.Z,{text:"Jump to learning more about context in XState",link:"#initial-context",mdxType:"SkipDownLink"}),(0,o.mdx)("h2",{id:"using-context-in-stately-studio"},"Using context in Stately Studio"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Coming soon\u2026 setting initial values"),(0,o.mdx)("li",{parentName:"ul"},"Coming soon\u2026 updating context with assign"),(0,o.mdx)("li",{parentName:"ul"},"Coming soon\u2026 JS/TS export")),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"initial-context"},"Initial context"),(0,o.mdx)("p",null,"Set the initial context of a machine in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," property of the machine config:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst feedbackMachine = createMachine({\n  context: {\n    feedback: 'Some feedback',\n    rating: 5,\n    // other properties\n  },\n});\n")),(0,o.mdx)("p",null,"The object you pass to ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," will be the initial ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," value for any actor created from this machine."),(0,o.mdx)("admonition",{type:"warningxstate"},(0,o.mdx)("p",{parentName:"admonition"},"Do not mutate the ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," object. Instead, you should use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"assign(...)")," action to update ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," immutably. If you mutate the ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," object, you may get unexpected behavior, such as mutating the ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," of other actors.")),(0,o.mdx)("h3",{id:"lazy-initial-context"},"Lazy initial context"),(0,o.mdx)("p",null,"Context can be initialized lazily by passing a function that returns the initial ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," value:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"const feedbackMachine = createMachine({\n  context: () => ({\n    feedback: 'Some feedback',\n    createdAt: Date.now(),\n  }),\n});\n\nconst feedbackActor = createActor(feedbackMachine).start();\n\nconsole.log(feedbackActor.getSnapshot().context.createdAt);\n// logs the current timestamp\n")),(0,o.mdx)("p",null,"Lazy initial context is evaluated per actor, so each actor will have its own ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," object."),(0,o.mdx)("h3",{id:"input"},"Input"),(0,o.mdx)("p",null,"You can provide input data to a machine\u2019s initial ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," by passing an ",(0,o.mdx)("inlineCode",{parentName:"p"},"input")," property to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"createActor(machine, { input })")," function and using the ",(0,o.mdx)("inlineCode",{parentName:"p"},"input")," property from the first argument in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," function:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"const feedbackMachine = createMachine({\n  context: ({ input }) => ({\n    feedback: '',\n    rating: input.defaultRating,\n  }),\n});\n\nconst feedbackActor = createActor(feedbackMachine, {\n  input: {\n    defaultRating: 5,\n  },\n}).start();\n\nconsole.log(feedbackActor.getSnapshot().context.rating);\n// logs 5\n")),(0,o.mdx)("p",null,"Learn more about ",(0,o.mdx)("a",{parentName:"p",href:"/docs/input"},"input"),"."),(0,o.mdx)("h2",{id:"updating-context-with-assign"},"Updating context with ",(0,o.mdx)("inlineCode",{parentName:"h2"},"assign(...)")),(0,o.mdx)("p",null,"Use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"assign(...)")," action in a transition to update context:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, assign } from 'xstate';\n\nconst feedbackMachine = createMachine({\n  context: {\n    feedback: 'Some feedback',\n  },\n  on: {\n    'feedback.update': {\n      actions: assign({\n        feedback: ({ event }) => event.feedback,\n      }),\n    },\n  },\n});\n\nconst feedbackActor = createActor(feedbackMachine);\n\nfeedbackActor.subscribe((state) => {\n  console.log(state.context.feedback);\n});\n\nfeedbackActor.start();\n\n// logs 'Some feedback'\n\nfeedbackActor.send({\n  type: 'feedback.update',\n  feedback: 'Some other feedback',\n});\n\n// logs 'Some other feedback'\n")),(0,o.mdx)("h2",{id:"typescript"},"TypeScript"),(0,o.mdx)("p",null,"You can strongly type the ",(0,o.mdx)("inlineCode",{parentName:"p"},"context")," of your machine in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"types.context")," property of the machine config."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  types: {} as {\n    // highlight-start\n    context: {\n      feedback: string;\n      rating: number;\n    };\n    // highlight-end\n  },\n  // Initial context\n  context: {\n    feedback: '',\n    rating: 5,\n  },\n  entry: ({ context }) => {\n    context.feedback; // string\n    context.rating; // number\n  },\n});\n")),(0,o.mdx)("h2",{id:"context-cheatsheet"},"Context cheatsheet"),(0,o.mdx)("p",null,"Use our XState context cheatsheet below to get started quickly."),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Initial context")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  context: {\n    feedback: '',\n  },\n});\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Lazy initial context")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  context: () => ({\n    feedback: '',\n    createdAt: Date.now(),\n  }),\n});\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Updating context with ",(0,o.mdx)("inlineCode",{parentName:"strong"},"assign(...)"))),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  context: {\n    feedback: '',\n  },\n  on: {\n    'feedback.update': {\n      actions: assign({\n        feedback: ({ event }) => event.feedback,\n      }),\n    },\n  },\n});\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Input")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"const machine = createMachine({\n  context: ({ input }) => ({\n    feedback: '',\n    rating: input.defaultRating,\n  }),\n});\n\nconst feedbackActor = createActor(machine, {\n  input: {\n    defaultRating: 5,\n  },\n});\n")))}m.isMDXComponent=!0}}]);