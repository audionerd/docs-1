"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[75534],{3905:(n,e,t)=>{t.r(e),t.d(e,{MDXContext:()=>l,MDXProvider:()=>p,mdx:()=>h,useMDXComponents:()=>d,withMDXComponents:()=>m});var a=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(){return r=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(n[a]=t[a])}return n},r.apply(this,arguments)}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=a.createContext({}),m=function(n){return function(e){var t=d(e.components);return a.createElement(n,r({},e,{components:t}))}},d=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},p=function(n){var e=d(n.components);return a.createElement(l.Provider,{value:e},n.children)},g={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,s=n.parentName,l=i(n,["components","mdxType","originalType","parentName"]),m=d(t),p=o,u=m["".concat(s,".").concat(p)]||m[p]||g[p]||r;return t?a.createElement(u,c(c({ref:e},l),{},{components:t})):a.createElement(u,c({ref:e},l))}));function h(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,s=new Array(r);s[0]=u;var c={};for(var i in e)hasOwnProperty.call(e,i)&&(c[i]=e[i]);c.originalType=n,c.mdxType="string"==typeof n?n:o,s[1]=c;for(var l=2;l<r;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},23968:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var a=t(87462),o=(t(67294),t(3905));const r={title:"Cheatsheet"},s=void 0,c={unversionedId:"cheatsheet",id:"cheatsheet",title:"Cheatsheet",description:"Use this cheatsheet to quickly look up the syntax for XState v5 beta.",source:"@site/docs/cheatsheet.mdx",sourceDirName:".",slug:"/cheatsheet",permalink:"/statelyai-docs/docs/cheatsheet",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/docs/cheatsheet.mdx",tags:[],version:"current",frontMatter:{title:"Cheatsheet"},sidebar:"docs",previous:{title:"Templates",permalink:"/statelyai-docs/docs/templates"},next:{title:"Core concepts",permalink:"/statelyai-docs/docs/category/core-concepts"}},i={},l=[{value:"Installing XState",id:"installing-xstate",level:2},{value:"Creating a state machine",id:"creating-a-state-machine",level:2},{value:"Creating promise logic",id:"creating-promise-logic",level:2},{value:"Creating transition logic",id:"creating-transition-logic",level:2},{value:"Creating observable logic",id:"creating-observable-logic",level:2},{value:"Creating callback logic",id:"creating-callback-logic",level:2},{value:"Parent states",id:"parent-states",level:2},{value:"Actions",id:"actions",level:2},{value:"Guards",id:"guards",level:2},{value:"Invoking actors",id:"invoking-actors",level:2},{value:"Spawning actors",id:"spawning-actors",level:2},{value:"Input and output",id:"input-and-output",level:2},{value:"Invoking actors with input",id:"invoking-actors-with-input",level:2},{value:"Types",id:"types",level:2}],m=n=>function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)},d=m("Tabs"),p=m("TabItem"),g={toc:l};function u(n){let{components:e,...t}=n;return(0,o.mdx)("wrapper",(0,a.Z)({},g,t,{components:e,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Use this cheatsheet to quickly look up the syntax for XState v5 beta."),(0,o.mdx)("h2",{id:"installing-xstate"},"Installing XState"),(0,o.mdx)(d,{mdxType:"Tabs"},(0,o.mdx)(p,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"yarn add xstate\n"))),(0,o.mdx)(p,{value:"npm",label:"npm",mdxType:"TabItem"},(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"npm install xstate\n")))),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/installation"},"Read more on installing XState"),"."),(0,o.mdx)("h2",{id:"creating-a-state-machine"},"Creating a state machine"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, createActor, assign } from 'xstate';\n\nconst machine = createMachine({\n  id: 'toggle',\n  initial: 'active',\n  context: { count: 0 },\n  states: {\n    active: {\n      entry: assign({\n        count: ({ context }) => context.count + 1,\n      }),\n      on: {\n        toggle: { target: 'inactive' },\n      },\n    },\n    inactive: {\n      on: {\n        toggle: { target: 'active' },\n      },\n    },\n  },\n});\n\nconst actor = createActor(machine);\nactor.subscribe((snapshot) => {\n  console.log(snapshot.value);\n});\n\nactor.start();\n// logs 'active' with context { count: 1 }\n\nactor.send({ type: 'toggle' });\n// logs 'inactive' with context { count: 1 }\nactor.send({ type: 'toggle' });\n// logs 'active' with context { count: 2 }\nactor.send({ type: 'toggle' });\n// logs 'inactive' with context { count: 2 }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/actor-model"},"Read more about the actor model"),"."),(0,o.mdx)("h2",{id:"creating-promise-logic"},"Creating promise logic"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { fromPromise, createActor } from 'xstate';\n\nconst promiseLogic = fromPromise(async () => {\n  const response = await fetch('https://dog.ceo/api/breeds/image/random');\n  const dog = await response.json();\n  return dog;\n});\n\nconst actor = createActor(promiseLogic);\n\nactor.subscribe((snapshot) => {\n  console.log(snapshot);\n});\n\nactor.start();\n// logs: {\n//   message: \"https://images.dog.ceo/breeds/kuvasz/n02104029_110.jpg\",\n//   status: \"success\"\n// }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/actors#promise-actor-logic"},"Read more about promise actor logic"),"."),(0,o.mdx)("h2",{id:"creating-transition-logic"},"Creating transition logic"),(0,o.mdx)("p",null,"A transition function is just like a reducer."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { fromTransition, createActor } from 'xstate';\n\nconst transitionLogic = fromTransition(\n  (state, event) => {\n    switch (event.type) {\n      case 'inc':\n        return {\n          ...state,\n          count: state.count + 1,\n        };\n      default:\n        return state;\n    }\n  },\n  { count: 0 }, // initial state\n);\n\nconst actor = createActor(transitionLogic);\n\nactor.subscribe((snapshot) => {\n  console.log(snapshot);\n});\n\nactor.start();\n// logs { count: 0 }\n\nactor.send({ type: 'inc' });\n// logs { count: 1 }\nactor.send({ type: 'inc' });\n// logs { count: 2 }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/actors#transition-function-actors"},"Read more about transition actors"),"."),(0,o.mdx)("h2",{id:"creating-observable-logic"},"Creating observable logic"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { fromObservable, createActor } from 'xstate';\nimport { interval } from 'rxjs';\n\nconst observableLogic = fromObservable(() => interval(1000));\n\nconst actor = createActor(observableLogic);\n\nactor.subscribe((snapshot) => {\n  console.log(snapshot);\n});\n\nactor.start();\n// logs 0, 1, 2, 3, 4, 5, ...\n// every second\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/actors#observable-actors"},"Read more about observable actors"),"."),(0,o.mdx)("h2",{id:"creating-callback-logic"},"Creating callback logic"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { fromCallback, createActor } from 'xstate';\n\nconst callbackLogic = fromCallback(({ sendBack, receive }) => {\n  const i = setTimeout(() => {\n    sendBack({ type: 'timeout' });\n  }, 1000);\n\n  receive((event) => {\n    if (event.type === 'cancel') {\n      console.log('canceled');\n      clearTimeout(i);\n    }\n  });\n\n  return () => {\n    clearTimeout(i);\n  };\n});\n\nconst actor = createActor(callbackLogic);\n\nactor.start();\n\nactor.send({ type: 'cancel' });\n// logs 'canceled'\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/actors#callback-actors"},"Read more about callback actors"),"."),(0,o.mdx)("h2",{id:"parent-states"},"Parent states"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, createActor } from 'xstate';\n\nconst machine = createMachine({\n  id: 'parent',\n  initial: 'active',\n  states: {\n    active: {\n      initial: 'one',\n      states: {\n        one: {},\n        two: {},\n      },\n    },\n    inactive: {},\n  },\n});\n\nconst actor = createActor(machine);\n\nactor.subscribe((snapshot) => {\n  console.log(snapshot.value);\n});\n\nactor.start();\n// logs { active: 'one' }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/parent-states"},"Read more about parent states"),"."),(0,o.mdx)("h2",{id:"actions"},"Actions"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, createActor } from 'xstate';\n\nconst machine = createMachine({\n  id: 'toggle',\n  initial: 'active',\n  states: {\n    active: {\n      // highlight-next-line\n      entry: { type: 'activate' },\n      // highlight-next-line\n      exit: { type: 'deactivate' },\n      on: {\n        toggle: {\n          target: 'inactive',\n          // highlight-next-line\n          actions: [{ type: 'notify' }],\n        },\n      },\n    },\n    inactive: {\n      on: {\n        toggle: {\n          target: 'active',\n          // highlight-start\n          actions: [\n            // action with params\n            {\n              type: 'notify',\n              params: {\n                message: 'Some notification',\n              },\n            },\n          ],\n          // highlight-end\n        },\n      },\n    },\n  },\n});\n\nconst actor = createActor(\n  machine.provide({\n    actions: {\n      notify: ({ action }) => {\n        console.log(action.params.message ?? 'Default message');\n      },\n      activate: () => {\n        console.log('Activating');\n      },\n      deactivate: () => {\n        console.log('Deactivating');\n      },\n    },\n  }),\n);\n\nactor.start();\n// logs 'Activating'\n\nactor.send({ type: 'toggle' });\n// logs 'Deactivating'\n// logs 'Default message'\n\nactor.send({ type: 'toggle' });\n// logs 'Some notification'\n// logs 'Activating'\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/actions"},"Read more about actions"),"."),(0,o.mdx)("h2",{id:"guards"},"Guards"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, createActor } from 'xstate';\n\nconst machine = createMachine({\n  id: 'toggle',\n  initial: 'active',\n  context: {\n    canActivate: false,\n  },\n  states: {\n    inactive: {\n      on: {\n        toggle: [\n          {\n            target: 'active',\n            // highlight-next-line\n            guard: 'canBeToggled',\n          },\n          {\n            actions: 'notifyNotAllowed',\n          },\n        ],\n      },\n    },\n    active: {\n      on: {\n        toggle: {\n          // Guard with params\n          guard: { type: 'isAfterTime', params: { time: '16:00' } },\n          target: 'inactive',\n        },\n      },\n      // ...\n    },\n  },\n});\n\nconst actor = createActor(\n  machine.provide({\n    // highlight-start\n    guards: {\n      canBeToggled: ({ context }) => context.canActivate,\n      isAfterTime: ({ guard }) => {\n        const { time } = guard.params;\n        const [hour, minute] = time.split(':');\n        const now = new Date();\n        return now.getHours() > hour && now.getMinutes() > minute;\n      },\n    },\n    // highlight-end\n    actions: {\n      notifyNotAllowed: () => {\n        console.log('Cannot be toggled');\n      },\n    },\n  }),\n);\n\nactor.start();\n// logs 'Cannot be toggled'\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/guards"},"Read more about guards"),"."),(0,o.mdx)("h2",{id:"invoking-actors"},"Invoking actors"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, fromPromise, createActor, assign } from 'xstate';\n\nconst loadUserLogic = fromPromise(async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/users/1');\n  const user = await response.json();\n  return user;\n});\n\nconst machine = createMachine({\n  id: 'toggle',\n  initial: 'loading',\n  context: {\n    user: undefined,\n  },\n  states: {\n    loading: {\n      // highlight-start\n      invoke: {\n        id: 'loadUser',\n        src: loadUserLogic,\n        onDone: {\n          target: 'doSomethingWithUser',\n          actions: assign({\n            user: ({ event }) => event.output,\n          }),\n        },\n        onError: 'failure',\n      },\n      // highlight-end\n    },\n    doSomethingWithUser: {\n      // ...\n    },\n    failure: {\n      // ...\n    },\n  },\n});\n\nconst actor = createActor(machine);\n\nactor.subscribe((snapshot) => {\n  console.log(snapshot.context.user);\n});\n\nactor.start();\n// eventually logs:\n// { id: 1, name: 'Leanne Graham', ... }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/invoke"},"Read more about invoking actors"),"."),(0,o.mdx)("h2",{id:"spawning-actors"},"Spawning actors"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, fromPromise, createActor, assign } from 'xstate';\n\nconst loadUserLogic = fromPromise(async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/users/1');\n  const user = await response.json();\n  return user;\n});\n\nconst machine = createMachine({\n  context: {\n    userRef: undefined,\n  },\n  on: {\n    loadUser: {\n      actions: assign({\n        // highlight-start\n        userRef: ({ spawn }) => spawn(loadUserLogic),\n        // highlight-end\n      }),\n    },\n  },\n});\n\nconst actor = createActor(machine);\nactor.subscribe((snapshot) => {\n  const { userRef } = snapshot.context;\n  console.log(userRef?.getSnapshot());\n});\nactor.start();\n\nactor.send({ type: 'loadUser' });\n// eventually logs:\n// { id: 1, name: 'Leanne Graham', ... }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/spawn"},"Read more about spawning actors"),"."),(0,o.mdx)("h2",{id:"input-and-output"},"Input and output"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, createActor } from 'xstate';\n\nconst greetMachine = createMachine({\n  // highlight-start\n  context: ({ input }) => ({\n    message: `Hello, ${input.name}`,\n  }),\n  // highlight-end\n  entry: ({ context }) => {\n    console.log(context.message);\n  },\n});\n\nconst actor = createActor(greetMachine, {\n  // highlight-start\n  input: {\n    name: 'David',\n  },\n  // highlight-end\n});\n\nactor.start();\n// logs 'Hello, David'\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/input"},"Read more about input"),"."),(0,o.mdx)("h2",{id:"invoking-actors-with-input"},"Invoking actors with input"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, createActor, fromPromise } from 'xstate';\n\nconst loadUserLogic = fromPromise(async ({ input }) => {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/users/${input.id}`,\n  );\n  const user = await response.json();\n  return user;\n});\n\nconst machine = createMachine({\n  initial: 'loading user',\n  states: {\n    'loading user': {\n      invoke: {\n        id: 'loadUser',\n        src: loadUserLogic,\n        // highlight-start\n        input: {\n          id: 3,\n        },\n        // highlight-end\n        onDone: {\n          actions: ({ event }) => {\n            console.log(event.output);\n          },\n        },\n      },\n    },\n  },\n});\n\nconst actor = createActor(machine);\n\nactor.start();\n// eventually logs:\n// { id: 3, name: 'Clementine Bauch', ... }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/statelyai-docs/docs/input#invoking-actors-with-input"},"Read more about invoking actors with input"),"."),(0,o.mdx)("h2",{id:"types"},"Types"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"const promiseLogic = fromPromise(async () => {\n  /* ... */\n});\n\nconst machine = createMachine({\n  types: {} as {\n    context: {\n      count: number;\n    };\n    events:\n      | {\n          type: 'inc';\n        }\n      | { type: 'dec' }\n      | { type: 'incBy'; amount: number };\n    actions:\n      | { type: 'notify'; params: { message: string } }\n      | { type: 'handleChange' };\n    guards:\n      | { type: 'canBeToggled' }\n      | { type: 'isAfterTime'; params: { time: string } };\n    actors: {\n      logic: typeof promiseLogic;\n      src: 'someSrc';\n      id: 'promise1' | 'promise2';\n    };\n    delays: 'shortTimeout' | 'longTimeout';\n    tags: 'tag1' | 'tag2';\n    input: number;\n    output: string;\n  },\n});\n")))}u.isMDXComponent=!0}}]);