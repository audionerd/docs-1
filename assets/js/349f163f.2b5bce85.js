"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[29131],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>p,mdx:()=>h,useMDXComponents:()=>m,withMDXComponents:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),c=function(e){return function(t){var n=m(t.components);return a.createElement(e,i({},t,{components:n}))}},m=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=m(n),p=r,g=c["".concat(s,".").concat(p)]||c[p]||u[p]||i;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var d=2;d<i;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},27292:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>x,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const i={title:"Other state attributes"},s="Other state attributes",o={unversionedId:"xstate/states/other-state-attributes",id:"version-4/xstate/states/other-state-attributes",title:"Other state attributes",description:"States can have various other attributes, most of which are useful for narrower cases.",source:"@site/versioned_docs/version-4/xstate/states/other-state-attributes.mdx",sourceDirName:"xstate/states",slug:"/xstate/states/other-state-attributes",permalink:"/docs/xstate-v4/xstate/states/other-state-attributes",draft:!1,editUrl:"https://github.com/statelyai/docs/tree/main/versioned_docs/version-4/xstate/states/other-state-attributes.mdx",tags:[],version:"4",frontMatter:{title:"Other state attributes"},sidebar:"tutorialSidebar",previous:{title:"Parent and child states",permalink:"/docs/xstate-v4/xstate/states/parent-and-child-states"},next:{title:"Advanced transitions",permalink:"/docs/xstate-v4/xstate/states/advanced-transitions"}},l={},d=[{value:"State tags",id:"state-tags",level:2},{value:"Using tags in Stately Studio",id:"using-tags-in-stately-studio",level:3},{value:"On the canvas",id:"on-the-canvas",level:4},{value:"Using the event details panel",id:"using-the-event-details-panel",level:4},{value:"Defining tags",id:"defining-tags",level:3},{value:"State meta",id:"state-meta",level:2},{value:"State descriptions",id:"state-descriptions",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",t)},m=c("Plus"),p=c("Tag"),u=c("PlusSquare"),g=c("Info"),h={toc:d};function x(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"other-state-attributes"},"Other state attributes"),(0,r.mdx)("p",null,"States can have various other attributes, most of which are useful for narrower cases."),(0,r.mdx)("h2",{id:"state-tags"},"State tags"),(0,r.mdx)("p",null,"State nodes can have ",(0,r.mdx)("strong",{parentName:"p"},"tags"),", a list of strings that help describe the state node. Tags can be useful when categorizing different state nodes. For example, you can signify which state nodes represent \u201cloading data\u201d using a ",(0,r.mdx)("inlineCode",{parentName:"p"},'"loading"')," tag and determine if a state contains those tagged state nodes with ",(0,r.mdx)("inlineCode",{parentName:"p"},"state.hasTag(tag)"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, interpret } from 'xstate';\n\nconst machine = createMachine({\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        FETCH: 'loadingUser',\n      },\n    },\n    loadingUser: {\n      tags: ['loading'],\n    },\n    loadingFriends: {\n      tags: ['loading'],\n    },\n    editing: {},\n  },\n});\n\nconst actor = interpret(machine).start();\n\nactor.state.hasTag('loading'); // false\n\nactor.send('FETCH');\n\nactor.state.hasTag('loading'); // true\n")),(0,r.mdx)("p",null,"Using tags can help you write more concise code. Instead of matching each actor individually:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, interpret } from 'xstate';\n\nconst machine = createMachine({\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        FETCH: 'loadingUser',\n      },\n    },\n    loadingUser: {\n      tags: ['loading'],\n    },\n    loadingFriends: {\n      tags: ['loading'],\n    },\n    editing: {},\n  },\n});\n\nconst actor = interpret(machine).start();\n\nconst isLoading =\n  actor.state.matches('loadingUser') || actor.state.matches('loadingFriends');\n")),(0,r.mdx)("p",null,"You can group the actors by tag:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, interpret } from 'xstate';\n\nconst machine = createMachine({\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        FETCH: 'loadingUser',\n      },\n    },\n    loadingUser: {\n      tags: ['loading'],\n    },\n    loadingFriends: {\n      tags: ['loading'],\n    },\n    editing: {},\n  },\n});\n\nconst actor = interpret(machine).start();\n\nconst isLoading = actor.state.hasTag('loading');\n")),(0,r.mdx)("h3",{id:"using-tags-in-stately-studio"},"Using tags in Stately Studio"),(0,r.mdx)("p",null,"You can add tags to states and events in Stately Studio."),(0,r.mdx)("p",null,"First, select the state or event you want to tag."),(0,r.mdx)("h4",{id:"on-the-canvas"},"On the canvas"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"Use the ",(0,r.mdx)(m,{size:18,mdxType:"Plus"})," plus icon button to open the edit menu."),(0,r.mdx)("li",{parentName:"ol"},"Choose ",(0,r.mdx)(p,{size:18,mdxType:"Tag"})," ",(0,r.mdx)("strong",{parentName:"li"},"Tag")," from the menu to add a tag block."),(0,r.mdx)("li",{parentName:"ol"},"Write your tag\u2019s name in the tag\u2019s text input."),(0,r.mdx)("li",{parentName:"ol"},"Use the ",(0,r.mdx)(u,{size:18,mdxType:"PlusSquare"})," plus icon button alongside your recent tag to add more tags.")),(0,r.mdx)("h4",{id:"using-the-event-details-panel"},"Using the event details panel"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"Open the state or event ",(0,r.mdx)(g,{size:18,mdxType:"Info"})," ",(0,r.mdx)("strong",{parentName:"li"},"Details")," panel from the right tool menu."),(0,r.mdx)("li",{parentName:"ol"},"Use the ",(0,r.mdx)("strong",{parentName:"li"},"+ Tag")," button to add a tag block."),(0,r.mdx)("li",{parentName:"ol"},"Write your tag\u2019s name in the tag\u2019s text input."),(0,r.mdx)("li",{parentName:"ol"},"Use the ",(0,r.mdx)(u,{size:18,mdxType:"PlusSquare"})," plus icon button alongside your recent tag to add more tags.")),(0,r.mdx)("h3",{id:"defining-tags"},"Defining tags"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Tags can be specified via an array, as ",(0,r.mdx)("inlineCode",{parentName:"li"},"tag: ['tag1', 'tag2']"),", or by a single string: ",(0,r.mdx)("inlineCode",{parentName:"li"},"tag: 'tag1'"),"."),(0,r.mdx)("li",{parentName:"ul"},"Tags can be made type-safe in TypeScript by using ",(0,r.mdx)("a",{parentName:"li",href:"/docs/xstate-v4/xstate/typescript/typegen"},"typegen"),".")),(0,r.mdx)("h2",{id:"state-meta"},"State meta"),(0,r.mdx)("p",null,"You can attach arbitrary data to any state by specifying it as ",(0,r.mdx)("inlineCode",{parentName:"p"},"meta")," on the state node:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine, interpret } from 'xstate';\n\nconst fetchMachine = createMachine({\n  initial: 'pending',\n  states: {\n    pending: {\n      on: {\n        UNKNOWN_ERROR: 'errored',\n      },\n      after: {\n        5000: 'timedOut',\n      },\n    },\n    errored: {\n      meta: {\n        error: 'An unknown error occurred',\n      },\n    },\n    timedOut: {\n      meta: {\n        error: 'Timeout error!',\n      },\n    },\n  },\n});\n")),(0,r.mdx)("p",null,"You can store anything in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"meta")," attribute; XState doesn\u2019t monitor it or do anything with its contents."),(0,r.mdx)("p",null,"The current state of the machine collects the ",(0,r.mdx)("inlineCode",{parentName:"p"},"meta")," data of all of the state nodes, represented by the state value, and places them on an object where:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"The keys are the state node IDs"),(0,r.mdx)("li",{parentName:"ul"},"The values are the state node ",(0,r.mdx)("inlineCode",{parentName:"li"},"meta")," values")),(0,r.mdx)("p",null,"For instance, if the machine above is in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"timedOut")," state, the ",(0,r.mdx)("inlineCode",{parentName:"p"},"meta")," will be an object with the following shape:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"{\n  timedOut: {\n    alert: 'Timeout error!'\n  },\n}\n")),(0,r.mdx)("h2",{id:"state-descriptions"},"State descriptions"),(0,r.mdx)("p",null,"You can add descriptive text to states with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"description")," attribute."),(0,r.mdx)("p",null,"This text is used by the ",(0,r.mdx)("a",{parentName:"p",href:"/docs/xstate-v4/tools/visualizer"},"Visualizer")," and the ",(0,r.mdx)("a",{parentName:"p",href:"/#studio-editor"},"Studio Editor")," to make the diagrams more descriptive."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { createMachine } from 'xstate';\n\nconst machine = createMachine({\n  initial: 'pending',\n  description: `A machine that waits for something to happen, then completes`,\n  states: {\n    pending: {\n      on: {\n        FINISHED: 'complete',\n      },\n      description: `Waiting...`,\n    },\n    complete: {\n      description: `Done!`,\n    },\n  },\n});\n")))}x.isMDXComponent=!0}}]);